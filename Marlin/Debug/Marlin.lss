
Marlin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000280  00800200  00018e54  00018ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00018e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000de2  00800480  00800480  00019168  2**0
                  ALLOC
  3 .stab         00005e08  00000000  00000000  00019168  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000206a  00000000  00000000  0001ef70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00020fda  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00001620  00000000  00000000  00021009  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000cbe  00000000  00000000  00022629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00053f95  00000000  00000000  000232e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008cfc  00000000  00000000  0007727c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00017c6a  00000000  00000000  0007ff78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00004f14  00000000  00000000  00097be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000908b  00000000  00000000  0009caf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00022108  00000000  00000000  000a5b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024f8  00000000  00000000  000c7c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__dtors_end>
       4:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
       8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
       c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      10:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      14:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      18:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      1c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      20:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      24:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      28:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      2c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      30:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      34:	0c 94 40 bd 	jmp	0x17a80	; 0x17a80 <__vector_13>
      38:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      3c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      40:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      44:	0c 94 17 6a 	jmp	0xd42e	; 0xd42e <__vector_17>
      48:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      4c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      50:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      54:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      58:	0c 94 3e 7c 	jmp	0xf87c	; 0xf87c <__vector_22>
      5c:	0c 94 bb b9 	jmp	0x17376	; 0x17376 <__vector_23>
      60:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      64:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__vector_25>
      68:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      6c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      70:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      74:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      78:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      7c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      80:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      84:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      88:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      8c:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      90:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      94:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      98:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      9c:	0c 94 81 7e 	jmp	0xfd02	; 0xfd02 <__vector_39>
      a0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      a4:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      a8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      ac:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      b0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      b4:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      b8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      bc:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      c0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      c4:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      c8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      cc:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      d0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      d4:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      d8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      dc:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      e0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 65       	ori	r19, 0x5F	; 95

0000012f <_ZL9echomagic>:
     12f:	65 63 68 6f 3a 00                                   echo:.

00000135 <_ZZN10CardReader6initsdEvE3__c>:
     135:	53 44 20 69 6e 69 74 20 66 61 69 6c 00              SD init fail.

00000142 <_ZL10errormagic>:
     142:	45 72 72 6f 72 3a 00                                Error:.

00000149 <_ZZN10CardReader6initsdEvE3__c_0>:
     149:	76 6f 6c 75 6d 65 2e 69 6e 69 74 20 66 61 69 6c     volume.init fail
     159:	65 64 00                                            ed.

0000015c <_ZZN10CardReader6initsdEvE3__c_1>:
     15c:	6f 70 65 6e 52 6f 6f 74 20 66 61 69 6c 65 64 00     openRoot failed.

0000016c <_ZZN10CardReader6initsdEvE3__c_2>:
     16c:	53 44 20 63 61 72 64 20 6f 6b 00                    SD card ok.

00000177 <_ZZN10CardReader8openFileEPcbE3__c>:
     177:	6f 70 65 6e 20 66 61 69 6c 65 64 2c 20 46 69 6c     open failed, Fil
     187:	65 3a 20 00                                         e: .

0000018b <_ZZN10CardReader8openFileEPcbE3__c_0>:
     18b:	2e 00                                               ..

0000018d <_ZZN10CardReader8openFileEPcbE3__c_1>:
     18d:	46 69 6c 65 20 6f 70 65 6e 65 64 3a 20 00           File opened: .

0000019b <_ZZN10CardReader8openFileEPcbE3__c_2>:
     19b:	20 53 69 7a 65 3a 20 00                              Size: .

000001a3 <_ZZN10CardReader8openFileEPcbE3__c_3>:
     1a3:	46 69 6c 65 20 73 65 6c 65 63 74 65 64 00           File selected.

000001b1 <_ZZN10CardReader8openFileEPcbE3__c_4>:
     1b1:	6f 70 65 6e 20 66 61 69 6c 65 64 2c 20 46 69 6c     open failed, Fil
     1c1:	65 3a 20 00                                         e: .

000001c5 <_ZZN10CardReader8openFileEPcbE3__c_5>:
     1c5:	2e 00                                               ..

000001c7 <_ZZN10CardReader8openFileEPcbE3__c_6>:
     1c7:	6f 70 65 6e 20 66 61 69 6c 65 64 2c 20 46 69 6c     open failed, Fil
     1d7:	65 3a 20 00                                         e: .

000001db <_ZZN10CardReader8openFileEPcbE3__c_7>:
     1db:	2e 00                                               ..

000001dd <_ZZN10CardReader8openFileEPcbE3__c_8>:
     1dd:	57 72 69 74 69 6e 67 20 74 6f 20 66 69 6c 65 3a     Writing to file:
     1ed:	20 00                                                .

000001ef <_ZZN10CardReader10removeFileEPcE3__c>:
     1ef:	6f 70 65 6e 20 66 61 69 6c 65 64 2c 20 46 69 6c     open failed, Fil
     1ff:	65 3a 20 00                                         e: .

00000203 <_ZZN10CardReader10removeFileEPcE3__c_0>:
     203:	2e 00                                               ..

00000205 <_ZZN10CardReader10removeFileEPcE3__c_1>:
     205:	46 69 6c 65 20 64 65 6c 65 74 65 64 3a 00           File deleted:.

00000213 <_ZZN10CardReader10removeFileEPcE3__c_2>:
     213:	44 65 6c 65 74 69 6f 6e 20 66 61 69 6c 65 64 2c     Deletion failed,
     223:	20 46 69 6c 65 3a 20 00                              File: .

0000022b <_ZZN10CardReader10removeFileEPcE3__c_3>:
     22b:	2e 00                                               ..

0000022d <_ZZN10CardReader9getStatusEvE3__c>:
     22d:	53 44 20 70 72 69 6e 74 69 6e 67 20 62 79 74 65     SD printing byte
     23d:	20 00                                                .

0000023f <_ZZN10CardReader9getStatusEvE3__c_0>:
     23f:	2f 00                                               /.

00000241 <_ZZN10CardReader9getStatusEvE3__c_1>:
     241:	4e 6f 74 20 53 44 20 70 72 69 6e 74 69 6e 67 00     Not SD printing.

00000251 <_ZZN10CardReader13write_commandEPcE3__c>:
     251:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     261:	20 66 69 6c 65 00                                    file.

00000267 <_ZZN10CardReader14checkautostartEbE3__c>:
     267:	61 75 74 6f 25 69 2e 67 00                          auto%i.g.

00000270 <_ZZN10CardReader14checkautostartEbE3__c_0>:
     270:	4d 32 33 20 25 73 00                                M23 %s.

00000277 <_ZZN10CardReader14checkautostartEbE3__c_1>:
     277:	4d 32 34 00                                         M24.

0000027b <_ZZN10CardReader5chdirEPKcE3__c>:
     27b:	43 61 6e 6e 6f 74 20 65 6e 74 65 72 20 73 75 62     Cannot enter sub
     28b:	64 69 72 3a 20 00                                   dir: .

00000291 <_ZZN10CardReader19printingHasFinishedEvE3__c>:
     291:	4d 38 34 20 58 20 59 20 5a 20 45 00                 M84 X Y Z E.

0000029d <_ZL9echomagic>:
     29d:	65 63 68 6f 3a 00                                   echo:.

000002a3 <_ZZ19Config_ResetDefaultvE3__c>:
     2a3:	48 61 72 64 63 6f 64 65 64 20 44 65 66 61 75 6c     Hardcoded Defaul
     2b3:	74 20 53 65 74 74 69 6e 67 73 20 4c 6f 61 64 65     t Settings Loade
     2c3:	64 00                                               d.

000002c5 <_ZL9echomagic>:
     2c5:	65 63 68 6f 3a 00                                   echo:.

000002cb <_ZZ12enquecommandPKcE3__c>:
     2cb:	65 6e 71 75 65 69 6e 67 20 22 00                    enqueing ".

000002d6 <_ZZ12enquecommandPKcE3__c_0>:
     2d6:	22 00                                               ".

000002d8 <_ZZ14enquecommand_PPKcE3__c>:
     2d8:	65 6e 71 75 65 69 6e 67 20 22 00                    enqueing ".

000002e3 <_ZZ14enquecommand_PPKcE3__c_0>:
     2e3:	22 00                                               ".

000002e5 <_ZZ5setupE3__c>:
     2e5:	73 74 61 72 74 00                                   start.

000002eb <_ZZ5setupE3__c_0>:
     2eb:	50 6f 77 65 72 55 70 00                             PowerUp.

000002f3 <_ZZ5setupE3__c_1>:
     2f3:	20 45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00      External Reset.

00000303 <_ZZ5setupE3__c_2>:
     303:	20 42 72 6f 77 6e 20 6f 75 74 20 52 65 73 65 74      Brown out Reset
	...

00000314 <_ZZ5setupE3__c_3>:
     314:	20 57 61 74 63 68 64 6f 67 20 52 65 73 65 74 00      Watchdog Reset.

00000324 <_ZZ5setupE3__c_4>:
     324:	20 53 6f 66 74 77 61 72 65 20 52 65 73 65 74 00      Software Reset.

00000334 <_ZZ5setupE3__c_5>:
     334:	4d 61 72 6c 69 6e 20 00                             Marlin .

0000033c <_ZZ5setupE3__c_6>:
     33c:	31 2e 30 2e 30 00                                   1.0.0.

00000342 <_ZZ5setupE3__c_7>:
     342:	20 4c 61 73 74 20 55 70 64 61 74 65 64 3a 20 00      Last Updated: .

00000352 <_ZZ5setupE3__c_8>:
     352:	53 65 70 20 20 38 20 32 30 31 33 20 32 31 3a 32     Sep  8 2013 21:2
     362:	31 3a 33 37 00                                      1:37.

00000367 <_ZZ5setupE3__c_9>:
     367:	20 7c 20 41 75 74 68 6f 72 3a 20 00                  | Author: .

00000373 <_ZZ5setupE3__c_10>:
     373:	28 6e 6f 6e 65 2c 20 64 65 66 61 75 6c 74 20 63     (none, default c
     383:	6f 6e 66 69 67 29 00                                onfig).

0000038a <_ZZ5setupE3__c_11>:
     38a:	43 6f 6d 70 69 6c 65 64 3a 20 00                    Compiled: .

00000395 <_ZZ5setupE3__c_12>:
     395:	53 65 70 20 20 38 20 32 30 31 33 00                 Sep  8 2013.

000003a1 <_ZZ5setupE3__c_13>:
     3a1:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

000003b0 <_ZZ5setupE3__c_14>:
     3b0:	20 20 50 6c 61 6e 6e 65 72 42 75 66 66 65 72 42       PlannerBufferB
     3c0:	79 74 65 73 3a 20 00                                ytes: .

000003c7 <_ZZ4loopE3__c>:
     3c7:	4d 32 39 00                                         M29.

000003cb <_ZZ4loopE3__c_0>:
     3cb:	6f 6b 00                                            ok.

000003ce <_ZZ4loopE3__c_1>:
     3ce:	44 6f 6e 65 20 73 61 76 69 6e 67 20 66 69 6c 65     Done saving file
     3de:	2e 00                                               ..

000003e0 <_ZZ11get_commandvE3__c>:
     3e0:	4d 31 31 30 00                                      M110.

000003e5 <_ZL10errormagic>:
     3e5:	45 72 72 6f 72 3a 00                                Error:.

000003ec <_ZZ11get_commandvE3__c_0>:
     3ec:	4c 69 6e 65 20 4e 75 6d 62 65 72 20 69 73 20 6e     Line Number is n
     3fc:	6f 74 20 4c 61 73 74 20 4c 69 6e 65 20 4e 75 6d     ot Last Line Num
     40c:	62 65 72 2b 31 2c 20 4c 61 73 74 20 4c 69 6e 65     ber+1, Last Line
     41c:	3a 20 00                                            : .

0000041f <_ZZ11get_commandvE3__c_1>:
     41f:	63 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     checksum mismatc
     42f:	68 2c 20 4c 61 73 74 20 4c 69 6e 65 3a 20 00        h, Last Line: .

0000043e <_ZZ11get_commandvE3__c_2>:
     43e:	4e 6f 20 43 68 65 63 6b 73 75 6d 20 77 69 74 68     No Checksum with
     44e:	20 6c 69 6e 65 20 6e 75 6d 62 65 72 2c 20 4c 61      line number, La
     45e:	73 74 20 4c 69 6e 65 3a 20 00                       st Line: .

00000468 <_ZZ11get_commandvE3__c_3>:
     468:	4e 6f 20 4c 69 6e 65 20 4e 75 6d 62 65 72 20 77     No Line Number w
     478:	69 74 68 20 63 68 65 63 6b 73 75 6d 2c 20 4c 61     ith checksum, La
     488:	73 74 20 4c 69 6e 65 3a 20 00                       st Line: .

00000492 <_ZZ11get_commandvE3__c_4>:
     492:	6f 6b 00                                            ok.

00000495 <_ZZ11get_commandvE3__c_5>:
     495:	50 72 69 6e 74 65 72 20 73 74 6f 70 70 65 64 20     Printer stopped 
     4a5:	64 75 65 20 74 6f 20 65 72 72 6f 72 73 2e 20 46     due to errors. F
     4b5:	69 78 20 74 68 65 20 65 72 72 6f 72 20 61 6e 64     ix the error and
     4c5:	20 75 73 65 20 4d 39 39 39 20 74 6f 20 72 65 73      use M999 to res
     4d5:	74 61 72 74 2e 20 28 54 65 6d 70 65 72 61 74 75     tart. (Temperatu
     4e5:	72 65 20 69 73 20 72 65 73 65 74 2e 20 53 65 74     re is reset. Set
     4f5:	20 69 74 20 61 66 74 65 72 20 72 65 73 74 61 72      it after restar
     505:	74 69 6e 67 29 00                                   ting).

0000050b <_ZZ11get_commandvE3__c_6>:
     50b:	53 54 4f 50 50 45 44 2e 20 00                       STOPPED. .

00000515 <_ZZ11get_commandvE3__c_7>:
     515:	44 6f 6e 65 20 70 72 69 6e 74 69 6e 67 20 66 69     Done printing fi
     525:	6c 65 00                                            le.

00000528 <_ZZ11get_commandvE3__c_8>:
     528:	25 69 20 68 6f 75 72 73 20 25 69 20 6d 69 6e 75     %i hours %i minu
     538:	74 65 73 00                                         tes.

0000053c <_ZZ16process_commandsvE3__c>:
     53c:	53 6c 65 65 70 2e 2e 2e 00                          Sleep....

00000545 <_ZZ16process_commandsvE3__c_0>:
     545:	57 61 69 74 20 66 6f 72 20 75 73 65 72 2e 2e 2e     Wait for user...
	...

00000556 <_ZZ16process_commandsvE3__c_1>:
     556:	52 65 73 75 6d 69 6e 67 20 70 72 69 6e 74 00        Resuming print.

00000565 <_ZZ16process_commandsvE3__c_2>:
     565:	4e 6f 20 6d 6f 76 65 2e 00                          No move..

0000056e <_ZZ16process_commandsvE3__c_3>:
     56e:	42 65 67 69 6e 20 66 69 6c 65 20 6c 69 73 74 00     Begin file list.

0000057e <_ZZ16process_commandsvE3__c_4>:
     57e:	45 6e 64 20 66 69 6c 65 20 6c 69 73 74 00           End file list.

0000058c <_ZZ16process_commandsvE3__c_5>:
     58c:	25 69 20 6d 69 6e 2c 20 25 69 20 73 65 63 00        %i min, %i sec.

0000059b <_ZZ16process_commandsvE3__c_6>:
     59b:	6f 6b 20 54 3a 00                                   ok T:.

000005a1 <_ZZ16process_commandsvE3__c_7>:
     5a1:	20 2f 00                                             /.

000005a4 <_ZZ16process_commandsvE3__c_8>:
     5a4:	20 42 3a 00                                          B:.

000005a8 <_ZZ16process_commandsvE3__c_9>:
     5a8:	20 2f 00                                             /.

000005ab <_ZZ16process_commandsvE3__c_10>:
     5ab:	20 54 00                                             T.

000005ae <_ZZ16process_commandsvE3__c_11>:
     5ae:	3a 00                                               :.

000005b0 <_ZZ16process_commandsvE3__c_12>:
     5b0:	20 2f 00                                             /.

000005b3 <_ZZ16process_commandsvE3__c_13>:
     5b3:	20 40 3a 00                                          @:.

000005b7 <_ZZ16process_commandsvE3__c_14>:
     5b7:	20 42 40 3a 00                                       B@:.

000005bc <_ZZ16process_commandsvE3__c_15>:
     5bc:	48 65 61 74 69 6e 67 2e 2e 2e 00                    Heating....

000005c7 <_ZZ16process_commandsvE3__c_16>:
     5c7:	54 3a 00                                            T:.

000005ca <_ZZ16process_commandsvE3__c_17>:
     5ca:	20 45 3a 00                                          E:.

000005ce <_ZZ16process_commandsvE3__c_18>:
     5ce:	20 57 3a 00                                          W:.

000005d2 <_ZZ16process_commandsvE3__c_19>:
     5d2:	48 65 61 74 69 6e 67 20 64 6f 6e 65 2e 00           Heating done..

000005e0 <_ZZ16process_commandsvE3__c_20>:
     5e0:	42 65 64 20 48 65 61 74 69 6e 67 2e 00              Bed Heating..

000005ed <_ZZ16process_commandsvE3__c_21>:
     5ed:	54 3a 00                                            T:.

000005f0 <_ZZ16process_commandsvE3__c_22>:
     5f0:	20 45 3a 00                                          E:.

000005f4 <_ZZ16process_commandsvE3__c_23>:
     5f4:	20 42 3a 00                                          B:.

000005f8 <_ZZ16process_commandsvE3__c_24>:
     5f8:	42 65 64 20 64 6f 6e 65 2e 00                       Bed done..

00000602 <_ZZ16process_commandsvE3__c_25>:
     602:	55 6c 74 69 6d 61 6b 65 72 20 52 65 61 64 79 2e     Ultimaker Ready.
	...

00000613 <_ZZ16process_commandsvE3__c_26>:
     613:	55 6c 74 69 6d 61 6b 65 72 20 4f 66 66 2e 00        Ultimaker Off..

00000622 <_ZZ16process_commandsvE3__c_27>:
     622:	46 49 52 4d 57 41 52 45 5f 4e 41 4d 45 3a 4d 61     FIRMWARE_NAME:Ma
     632:	72 6c 69 6e 20 56 31 3b 20 53 70 72 69 6e 74 65     rlin V1; Sprinte
     642:	72 2f 67 72 62 6c 20 6d 61 73 68 75 70 20 66 6f     r/grbl mashup fo
     652:	72 20 67 65 6e 36 20 46 49 52 4d 57 41 52 45 5f     r gen6 FIRMWARE_
     662:	55 52 4c 3a 68 74 74 70 3a 2f 2f 66 69 72 6d 77     URL:http://firmw
     672:	61 72 65 2e 75 6c 74 69 6d 61 6b 65 72 2e 63 6f     are.ultimaker.co
     682:	6d 20 50 52 4f 54 4f 43 4f 4c 5f 56 45 52 53 49     m PROTOCOL_VERSI
     692:	4f 4e 3a 31 2e 30 20 4d 41 43 48 49 4e 45 5f 54     ON:1.0 MACHINE_T
     6a2:	59 50 45 3a 55 6c 74 69 6d 61 6b 65 72 20 45 58     YPE:Ultimaker EX
     6b2:	54 52 55 44 45 52 5f 43 4f 55 4e 54 3a 31 0a 00     TRUDER_COUNT:1..

000006c2 <_ZZ16process_commandsvE3__c_28>:
     6c2:	58 3a 00                                            X:.

000006c5 <_ZZ16process_commandsvE3__c_29>:
     6c5:	59 3a 00                                            Y:.

000006c8 <_ZZ16process_commandsvE3__c_30>:
     6c8:	5a 3a 00                                            Z:.

000006cb <_ZZ16process_commandsvE3__c_31>:
     6cb:	45 3a 00                                            E:.

000006ce <_ZZ16process_commandsvE3__c_32>:
     6ce:	20 43 6f 75 6e 74 20 58 3a 20 00                     Count X: .

000006d9 <_ZZ16process_commandsvE3__c_33>:
     6d9:	59 3a 00                                            Y:.

000006dc <_ZZ16process_commandsvE3__c_34>:
     6dc:	5a 3a 00                                            Z:.

000006df <_ZZ16process_commandsvE3__c_35>:
     6df:	78 5f 6d 69 6e 3a 20 00                             x_min: .

000006e7 <_ZZ16process_commandsvE3__c_36>:
     6e7:	78 5f 6d 61 78 3a 20 00                             x_max: .

000006ef <_ZZ16process_commandsvE3__c_37>:
     6ef:	79 5f 6d 69 6e 3a 20 00                             y_min: .

000006f7 <_ZZ16process_commandsvE3__c_38>:
     6f7:	79 5f 6d 61 78 3a 20 00                             y_max: .

000006ff <_ZZ16process_commandsvE3__c_39>:
     6ff:	7a 5f 6d 69 6e 3a 20 00                             z_min: .

00000707 <_ZZ16process_commandsvE3__c_40>:
     707:	7a 5f 6d 61 78 3a 20 00                             z_max: .

0000070f <_ZZ16process_commandsvE3__c_41>:
     70f:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     Unknown command:
     71f:	20 22 00                                             ".

00000722 <_ZZ16process_commandsvE3__c_42>:
     722:	22 00                                               ".

00000724 <_ZL10home_dir_P>:
     724:	ff ff ff                                            ...

00000727 <_ZL12max_length_P>:
     727:	00 00 4d 43 00 00 4d 43 00 00 48 43                 ..MC..MC..HC

00000733 <_ZL17home_retract_mm_P>:
     733:	00 00 a0 40 00 00 a0 40 00 00 80 3f                 ...@...@...?

0000073f <_ZL15base_home_pos_P>:
	...

0000074b <_ZL14base_min_pos_P>:
	...

00000757 <_ZL14base_max_pos_P>:
     757:	00 00 4d 43 00 00 4d 43 00 00 48 43                 ..MC..MC..HC

00000763 <_ZZ24FlushSerialRequestResendvE3__c>:
     763:	52 65 73 65 6e 64 3a 20 00                          Resend: .

0000076c <_ZZ11ClearToSendvE3__c>:
     76c:	6f 6b 00                                            ok.

0000076f <_ZZ4killvE3__c>:
     76f:	50 72 69 6e 74 65 72 20 68 61 6c 74 65 64 2e 20     Printer halted. 
     77f:	6b 69 6c 6c 28 29 20 63 61 6c 6c 65 64 21 00        kill() called!.

0000078e <_ZZ4killvE3__c_0>:
     78e:	4b 49 4c 4c 45 44 2e 20 00                          KILLED. .

00000797 <_ZZ4StopvE3__c>:
     797:	50 72 69 6e 74 65 72 20 73 74 6f 70 70 65 64 20     Printer stopped 
     7a7:	64 75 65 20 74 6f 20 65 72 72 6f 72 73 2e 20 46     due to errors. F
     7b7:	69 78 20 74 68 65 20 65 72 72 6f 72 20 61 6e 64     ix the error and
     7c7:	20 75 73 65 20 4d 39 39 39 20 74 6f 20 72 65 73      use M999 to res
     7d7:	74 61 72 74 2e 20 28 54 65 6d 70 65 72 61 74 75     tart. (Temperatu
     7e7:	72 65 20 69 73 20 72 65 73 65 74 2e 20 53 65 74     re is reset. Set
     7f7:	20 69 74 20 61 66 74 65 72 20 72 65 73 74 61 72      it after restar
     807:	74 69 6e 67 29 00                                   ting).

0000080d <_ZZ4StopvE3__c_0>:
     80d:	53 54 4f 50 50 45 44 2e 20 00                       STOPPED. .

00000817 <_ZL9echomagic>:
     817:	65 63 68 6f 3a 00                                   echo:.

0000081d <_ZZ16plan_buffer_lineRKfS0_S0_S0_fRKhE3__c>:
     81d:	20 63 6f 6c 64 20 65 78 74 72 75 73 69 6f 6e 20      cold extrusion 
     82d:	70 72 65 76 65 6e 74 65 64 00                       prevented.

00000837 <_ZZ16plan_buffer_lineRKfS0_S0_S0_fRKhE3__c_0>:
     837:	20 74 6f 6f 20 6c 6f 6e 67 20 65 78 74 72 75 73      too long extrus
     847:	69 6f 6e 20 70 72 65 76 65 6e 74 65 64 00           ion prevented.

00000855 <_ZZN10SdBaseFile10make83NameEPKcPhPS1_E3__c>:
     855:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000865 <_ZL9echomagic>:
     865:	65 63 68 6f 3a 00                                   echo:.

0000086b <_ZZ16checkHitEndstopsvE3__c>:
     86b:	65 6e 64 73 74 6f 70 73 20 68 69 74 3a 20 00        endstops hit: .

0000087a <_ZZ16checkHitEndstopsvE3__c_0>:
     87a:	20 58 3a 00                                          X:.

0000087e <_ZZ16checkHitEndstopsvE3__c_1>:
     87e:	65 6e 64 73 74 6f 70 73 20 68 69 74 3a 20 58 00     endstops hit: X.

0000088e <_ZZ16checkHitEndstopsvE3__c_2>:
     88e:	20 59 3a 00                                          Y:.

00000892 <_ZZ16checkHitEndstopsvE3__c_3>:
     892:	65 6e 64 73 74 6f 70 73 20 68 69 74 3a 20 59 00     endstops hit: Y.

000008a2 <_ZZ16checkHitEndstopsvE3__c_4>:
     8a2:	20 5a 3a 00                                          Z:.

000008a6 <_ZZ16checkHitEndstopsvE3__c_5>:
     8a6:	65 6e 64 73 74 6f 70 73 20 68 69 74 3a 20 5a 00     endstops hit: Z.

000008b6 <_ZL22speed_lookuptable_fast>:
     8b6:	24 f4 04 d9 20 1b c4 0c 5c 0e 98 04 c4 09 5f 02     $... ...\....._.
     8c6:	65 07 71 01 f4 05 f9 00 fb 04 b3 00 48 04 87 00     e.q.........H...
     8d6:	c1 03 69 00 58 03 55 00 03 03 45 00 be 02 3a 00     ..i.X.U...E...:.
     8e6:	84 02 31 00 53 02 2a 00 29 02 25 00 04 02 20 00     ..1.S.*.).%... .
     8f6:	e4 01 1c 00 c8 01 19 00 af 01 17 00 98 01 14 00     ................
     906:	84 01 13 00 71 01 10 00 61 01 10 00 51 01 0e 00     ....q...a...Q...
     916:	43 01 0d 00 36 01 0b 00 2b 01 0b 00 20 01 0b 00     C...6...+... ...
     926:	15 01 09 00 0c 01 09 00 03 01 08 00 fb 00 08 00     ................
     936:	f3 00 08 00 eb 00 07 00 e4 00 06 00 de 00 06 00     ................
     946:	d8 00 06 00 d2 00 06 00 cc 00 05 00 c7 00 05 00     ................
     956:	c2 00 05 00 bd 00 04 00 b9 00 04 00 b5 00 04 00     ................
     966:	b1 00 04 00 ad 00 04 00 a9 00 04 00 a5 00 03 00     ................
     976:	a2 00 03 00 9f 00 04 00 9b 00 03 00 98 00 03 00     ................
     986:	95 00 02 00 93 00 03 00 90 00 03 00 8d 00 02 00     ................
     996:	8b 00 03 00 88 00 02 00 86 00 02 00 84 00 03 00     ................
     9a6:	81 00 02 00 7f 00 02 00 7d 00 02 00 7b 00 02 00     ........}...{...
     9b6:	79 00 02 00 77 00 01 00 76 00 02 00 74 00 02 00     y...w...v...t...
     9c6:	72 00 01 00 71 00 02 00 6f 00 02 00 6d 00 01 00     r...q...o...m...
     9d6:	6c 00 02 00 6a 00 01 00 69 00 02 00 67 00 01 00     l...j...i...g...
     9e6:	66 00 01 00 65 00 01 00 64 00 02 00 62 00 01 00     f...e...d...b...
     9f6:	61 00 01 00 60 00 01 00 5f 00 02 00 5d 00 01 00     a...`..._...]...
     a06:	5c 00 01 00 5b 00 01 00 5a 00 01 00 59 00 01 00     \...[...Z...Y...
     a16:	58 00 01 00 57 00 01 00 56 00 01 00 55 00 01 00     X...W...V...U...
     a26:	54 00 01 00 53 00 00 00 53 00 01 00 52 00 01 00     T...S...S...R...
     a36:	51 00 01 00 50 00 01 00 4f 00 01 00 4e 00 00 00     Q...P...O...N...
     a46:	4e 00 01 00 4d 00 01 00 4c 00 01 00 4b 00 00 00     N...M...L...K...
     a56:	4b 00 01 00 4a 00 01 00 49 00 01 00 48 00 00 00     K...J...I...H...
     a66:	48 00 01 00 47 00 01 00 46 00 00 00 46 00 01 00     H...G...F...F...
     a76:	45 00 00 00 45 00 01 00 44 00 01 00 43 00 00 00     E...E...D...C...
     a86:	43 00 01 00 42 00 00 00 42 00 01 00 41 00 00 00     C...B...B...A...
     a96:	41 00 01 00 40 00 01 00 3f 00 00 00 3f 00 01 00     A...@...?...?...
     aa6:	3e 00 00 00 3e 00 01 00 3d 00 00 00 3d 00 01 00     >...>...=...=...
     ab6:	3c 00 00 00 3c 00 00 00 3c 00 01 00 3b 00 00 00     <...<...<...;...
     ac6:	3b 00 01 00 3a 00 00 00 3a 00 01 00 39 00 00 00     ;...:...:...9...
     ad6:	39 00 01 00 38 00 00 00 38 00 00 00 38 00 01 00     9...8...8...8...
     ae6:	37 00 00 00 37 00 01 00 36 00 00 00 36 00 00 00     7...7...6...6...
     af6:	36 00 01 00 35 00 00 00 35 00 00 00 35 00 01 00     6...5...5...5...
     b06:	34 00 00 00 34 00 00 00 34 00 01 00 33 00 00 00     4...4...4...3...
     b16:	33 00 00 00 33 00 01 00 32 00 00 00 32 00 00 00     3...3...2...2...
     b26:	32 00 01 00 31 00 00 00 31 00 00 00 31 00 01 00     2...1...1...1...
     b36:	30 00 00 00 30 00 00 00 30 00 01 00 2f 00 00 00     0...0...0.../...
     b46:	2f 00 00 00 2f 00 00 00 2f 00 01 00 2e 00 00 00     /.../.../.......
     b56:	2e 00 00 00 2e 00 01 00 2d 00 00 00 2d 00 00 00     ........-...-...
     b66:	2d 00 00 00 2d 00 01 00 2c 00 00 00 2c 00 00 00     -...-...,...,...
     b76:	2c 00 00 00 2c 00 01 00 2b 00 00 00 2b 00 00 00     ,...,...+...+...
     b86:	2b 00 00 00 2b 00 01 00 2a 00 00 00 2a 00 00 00     +...+...*...*...
     b96:	2a 00 00 00 2a 00 01 00 29 00 00 00 29 00 00 00     *...*...)...)...
     ba6:	29 00 00 00 29 00 00 00 29 00 01 00 28 00 00 00     )...)...)...(...
     bb6:	28 00 00 00 28 00 00 00 28 00 00 00 28 00 01 00     (...(...(...(...
     bc6:	27 00 00 00 27 00 00 00 27 00 00 00 27 00 00 00     '...'...'...'...
     bd6:	27 00 01 00 26 00 00 00 26 00 00 00 26 00 00 00     '...&...&...&...
     be6:	26 00 00 00 26 00 01 00 25 00 00 00 25 00 00 00     &...&...%...%...
     bf6:	25 00 00 00 25 00 00 00 25 00 00 00 25 00 01 00     %...%...%...%...
     c06:	24 00 00 00 24 00 00 00 24 00 00 00 24 00 00 00     $...$...$...$...
     c16:	24 00 01 00 23 00 00 00 23 00 00 00 23 00 00 00     $...#...#...#...
     c26:	23 00 00 00 23 00 00 00 23 00 00 00 23 00 01 00     #...#...#...#...
     c36:	22 00 00 00 22 00 00 00 22 00 00 00 22 00 00 00     "..."..."..."...
     c46:	22 00 00 00 22 00 01 00 21 00 00 00 21 00 00 00     "..."...!...!...
     c56:	21 00 00 00 21 00 00 00 21 00 00 00 21 00 00 00     !...!...!...!...
     c66:	21 00 01 00 20 00 00 00 20 00 00 00 20 00 00 00     !... ... ... ...
     c76:	20 00 00 00 20 00 00 00 20 00 00 00 20 00 00 00      ... ... ... ...
     c86:	20 00 01 00 1f 00 00 00 1f 00 00 00 1f 00 00 00      ...............
     c96:	1f 00 00 00 1f 00 00 00 1f 00 00 00 1f 00 01 00     ................
     ca6:	1e 00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00     ................

00000cb6 <_ZL22speed_lookuptable_slow>:
     cb6:	24 f4 d4 30 50 c3 8e 20 c2 a2 40 17 82 8b 70 11     $..0P.. ..@...p.
     cc6:	12 7a 91 0d 81 6c d9 0a a8 61 e1 08 c7 58 66 07     .z...l...a...Xf.
     cd6:	61 51 43 06 1e 4b 5d 05 c1 45 a7 04 1a 41 11 04     aQC..K]..E...A..
     ce6:	09 3d 98 03 71 39 31 03 40 36 db 02 65 33 91 02     .=..q91.@6..e3..
     cf6:	d4 30 54 02 80 2e 1d 02 63 2c ee 01 75 2a c5 01     .0T.....c,..u*..
     d06:	b0 28 a0 01 10 27 81 01 8f 25 64 01 2b 24 4b 01     .(...'...%d.+$K.
     d16:	e0 22 34 01 ac 21 1f 01 8d 20 0d 01 80 1f fc 00     ."4..!... ......
     d26:	84 1e ed 00 97 1d df 00 b8 1c d2 00 e6 1b c6 00     ................
     d36:	20 1b bc 00 64 1a b2 00 b2 19 a8 00 0a 19 a0 00      ...d...........
     d46:	6a 18 99 00 d1 17 91 00 40 17 8b 00 b5 16 84 00     j.......@.......
     d56:	31 16 7e 00 b3 15 79 00 3a 15 73 00 c7 14 6f 00     1.~...y.:.s...o.
     d66:	58 14 6a 00 ee 13 66 00 88 13 63 00 25 13 5e 00     X.j...f...c.%.^.
     d76:	c7 12 5b 00 6c 12 57 00 15 12 54 00 c1 11 51 00     ..[.l.W...T...Q.
     d86:	70 11 4f 00 21 11 4b 00 d6 10 49 00 8d 10 47 00     p.O.!.K...I...G.
     d96:	46 10 44 00 02 10 42 00 c0 0f 40 00 80 0f 3e 00     F.D...B...@...>.
     da6:	42 0f 3c 00 06 0f 3b 00 cb 0e 38 00 93 0e 37 00     B.<...;...8...7.
     db6:	5c 0e 35 00 27 0e 34 00 f3 0d 32 00 c1 0d 31 00     \.5.'.4...2...1.
     dc6:	90 0d 30 00 60 0d 2e 00 32 0d 2d 00 05 0d 2c 00     ..0.`...2.-...,.
     dd6:	d9 0c 2b 00 ae 0c 29 00 85 0c 29 00 5c 0c 27 00     ..+...)...).\.'.
     de6:	35 0c 27 00 0e 0c 26 00 e8 0b 24 00 c4 0b 24 00     5.'...&...$...$.
     df6:	a0 0b 23 00 7d 0b 23 00 5a 0b 21 00 39 0b 21 00     ..#.}.#.Z.!.9.!.
     e06:	18 0b 20 00 f8 0a 1f 00 d9 0a 1e 00 bb 0a 1e 00     .. .............
     e16:	9d 0a 1d 00 80 0a 1d 00 63 0a 1c 00 47 0a 1b 00     ........c...G...
     e26:	2c 0a 1b 00 11 0a 1a 00 f7 09 1a 00 dd 09 19 00     ,...............
     e36:	c4 09 19 00 ab 09 19 00 92 09 17 00 7b 09 18 00     ............{...
     e46:	63 09 17 00 4c 09 16 00 36 09 16 00 20 09 16 00     c...L...6... ...
     e56:	0a 09 15 00 f5 08 15 00 e0 08 14 00 cc 08 14 00     ................
     e66:	b8 08 14 00 a4 08 14 00 90 08 13 00 7d 08 12 00     ............}...
     e76:	6b 08 13 00 58 08 12 00 46 08 12 00 34 08 11 00     k...X...F...4...
     e86:	23 08 11 00 12 08 11 00 01 08 11 00 f0 07 10 00     #...............
     e96:	e0 07 10 00 d0 07 10 00 c0 07 10 00 b0 07 0f 00     ................
     ea6:	a1 07 10 00 91 07 0e 00 83 07 0f 00 74 07 0f 00     ............t...
     eb6:	65 07 0e 00 57 07 0e 00 49 07 0e 00 3b 07 0d 00     e...W...I...;...
     ec6:	2e 07 0e 00 20 07 0d 00 13 07 0d 00 06 07 0d 00     .... ...........
     ed6:	f9 06 0c 00 ed 06 0d 00 e0 06 0c 00 d4 06 0c 00     ................
     ee6:	c8 06 0c 00 bc 06 0c 00 b0 06 0c 00 a4 06 0b 00     ................
     ef6:	99 06 0c 00 8d 06 0b 00 82 06 0b 00 77 06 0b 00     ............w...
     f06:	6c 06 0b 00 61 06 0a 00 57 06 0b 00 4c 06 0a 00     l...a...W...L...
     f16:	42 06 0a 00 38 06 0a 00 2e 06 0a 00 24 06 0a 00     B...8.......$...
     f26:	1a 06 0a 00 10 06 09 00 07 06 0a 00 fd 05 09 00     ................
     f36:	f4 05 09 00 eb 05 09 00 e2 05 09 00 d9 05 09 00     ................
     f46:	d0 05 09 00 c7 05 09 00 be 05 09 00 b5 05 08 00     ................
     f56:	ad 05 08 00 a5 05 09 00 9c 05 08 00 94 05 08 00     ................
     f66:	8c 05 08 00 84 05 08 00 7c 05 08 00 74 05 08 00     ........|...t...
     f76:	6c 05 07 00 65 05 08 00 5d 05 07 00 56 05 08 00     l...e...]...V...
     f86:	4e 05 07 00 47 05 07 00 40 05 08 00 38 05 07 00     N...G...@...8...
     f96:	31 05 07 00 2a 05 07 00 23 05 07 00 1c 05 06 00     1...*...#.......
     fa6:	16 05 07 00 0f 05 07 00 08 05 06 00 02 05 07 00     ................
     fb6:	fb 04 06 00 f5 04 07 00 ee 04 06 00 e8 04 06 00     ................
     fc6:	e2 04 07 00 db 04 06 00 d5 04 06 00 cf 04 06 00     ................
     fd6:	c9 04 06 00 c3 04 06 00 bd 04 06 00 b7 04 06 00     ................
     fe6:	b1 04 05 00 ac 04 06 00 a6 04 06 00 a0 04 05 00     ................
     ff6:	9b 04 06 00 95 04 05 00 90 04 06 00 8a 04 05 00     ................
    1006:	85 04 05 00 80 04 06 00 7a 04 05 00 75 04 05 00     ........z...u...
    1016:	70 04 05 00 6b 04 05 00 66 04 05 00 61 04 05 00     p...k...f...a...
    1026:	5c 04 05 00 57 04 05 00 52 04 05 00 4d 04 05 00     \...W...R...M...
    1036:	48 04 05 00 43 04 05 00 3e 04 04 00 3a 04 05 00     H...C...>...:...
    1046:	35 04 05 00 30 04 04 00 2c 04 05 00 27 04 04 00     5...0...,...'...
    1056:	23 04 05 00 1e 04 04 00 1a 04 04 00 16 04 05 00     #...............
    1066:	11 04 04 00 0d 04 04 00 09 04 05 00 04 04 04 00     ................
    1076:	00 04 04 00 fc 03 04 00 f8 03 04 00 f4 03 04 00     ................
    1086:	f0 03 04 00 ec 03 04 00 e8 03 04 00 e4 03 04 00     ................
    1096:	e0 03 04 00 dc 03 04 00 d8 03 04 00 d4 03 04 00     ................
    10a6:	d0 03 04 00 cc 03 04 00 c8 03 03 00 c5 03 03 00     ................

000010b6 <_ZZ12PID_autotunefiiE3__c>:
    10b6:	20 62 69 61 73 3a 20 00                              bias: .

000010be <_ZZ12PID_autotunefiiE3__c_0>:
    10be:	20 64 3a 20 00                                       d: .

000010c3 <_ZZ12PID_autotunefiiE3__c_1>:
    10c3:	20 6d 69 6e 3a 20 00                                 min: .

000010ca <_ZZ12PID_autotunefiiE3__c_2>:
    10ca:	20 6d 61 78 3a 20 00                                 max: .

000010d1 <_ZZ12PID_autotunefiiE3__c_3>:
    10d1:	20 4b 75 3a 20 00                                    Ku: .

000010d7 <_ZZ12PID_autotunefiiE3__c_4>:
    10d7:	20 54 75 3a 20 00                                    Tu: .

000010dd <_ZZ12PID_autotunefiiE3__c_5>:
    10dd:	20 43 6c 61 73 69 63 20 50 49 44 20 00               Clasic PID .

000010ea <_ZZ12PID_autotunefiiE3__c_6>:
    10ea:	20 4b 70 3a 20 00                                    Kp: .

000010f0 <_ZZ12PID_autotunefiiE3__c_7>:
    10f0:	20 4b 69 3a 20 00                                    Ki: .

000010f6 <_ZZ12PID_autotunefiiE3__c_8>:
    10f6:	20 4b 64 3a 20 00                                    Kd: .

000010fc <_ZZ12PID_autotunefiiE3__c_9>:
    10fc:	50 49 44 20 41 75 74 6f 74 75 6e 65 20 66 61 69     PID Autotune fai
    110c:	6c 65 64 21 20 54 65 6d 70 65 72 61 74 75 72 65     led! Temperature
    111c:	20 74 6f 6f 20 68 69 67 68 00                        too high.

00001126 <_ZZ12PID_autotunefiiE3__c_10>:
    1126:	6f 6b 20 42 3a 00                                   ok B:.

0000112c <_ZZ12PID_autotunefiiE3__c_11>:
    112c:	6f 6b 20 54 3a 00                                   ok T:.

00001132 <_ZZ12PID_autotunefiiE3__c_12>:
    1132:	20 40 3a 00                                          @:.

00001136 <_ZZ12PID_autotunefiiE3__c_13>:
    1136:	50 49 44 20 41 75 74 6f 74 75 6e 65 20 66 61 69     PID Autotune fai
    1146:	6c 65 64 21 20 74 69 6d 65 6f 75 74 00              led! timeout.

00001153 <_ZZ12PID_autotunefiiE3__c_14>:
    1153:	50 49 44 20 41 75 74 6f 74 75 6e 65 20 66 69 6e     PID Autotune fin
    1163:	69 73 68 65 64 21 20 50 75 74 20 74 68 65 20 4b     ished! Put the K
    1173:	70 2c 20 4b 69 20 61 6e 64 20 4b 64 20 63 6f 6e     p, Ki and Kd con
    1183:	73 74 61 6e 74 73 20 69 6e 74 6f 20 43 6f 6e 66     stants into Conf
    1193:	69 67 75 72 61 74 69 6f 6e 2e 68 00                 iguration.h.

0000119f <_ZL10errormagic>:
    119f:	45 72 72 6f 72 3a 00                                Error:.

000011a6 <_ZZL11analog2tempihE3__c>:
    11a6:	20 2d 20 49 6e 76 61 6c 69 64 20 65 78 74 72 75      - Invalid extru
    11b6:	64 65 72 20 6e 75 6d 62 65 72 20 21 00              der number !.

000011c3 <_ZZ14max_temp_errorhE3__c>:
    11c3:	3a 20 45 78 74 72 75 64 65 72 20 73 77 69 74 63     : Extruder switc
    11d3:	68 65 64 20 6f 66 66 2e 20 4d 41 58 54 45 4d 50     hed off. MAXTEMP
    11e3:	20 74 72 69 67 67 65 72 65 64 20 21 00               triggered !.

000011f0 <_ZZ14max_temp_errorhE3__c_0>:
    11f0:	45 72 72 3a 20 4d 41 58 54 45 4d 50 00              Err: MAXTEMP.

000011fd <_ZZ14min_temp_errorhE3__c>:
    11fd:	3a 20 45 78 74 72 75 64 65 72 20 73 77 69 74 63     : Extruder switc
    120d:	68 65 64 20 6f 66 66 2e 20 4d 49 4e 54 45 4d 50     hed off. MINTEMP
    121d:	20 74 72 69 67 67 65 72 65 64 20 21 00               triggered !.

0000122a <_ZZ14min_temp_errorhE3__c_0>:
    122a:	45 72 72 3a 20 4d 49 4e 54 45 4d 50 00              Err: MINTEMP.

00001237 <_ZZL13lcd_main_menuvE3__c>:
    1237:	49 6e 66 6f 20 73 63 72 65 65 6e 00                 Info screen.

00001243 <_ZZL13lcd_main_menuvE3__c_0>:
    1243:	54 75 6e 65 00                                      Tune.

00001248 <_ZZL13lcd_main_menuvE3__c_1>:
    1248:	50 72 65 70 61 72 65 00                             Prepare.

00001250 <_ZZL13lcd_main_menuvE3__c_2>:
    1250:	43 6f 6e 74 72 6f 6c 00                             Control.

00001258 <_ZZL13lcd_main_menuvE3__c_3>:
    1258:	50 61 75 73 65 20 50 72 69 6e 74 00                 Pause Print.

00001264 <_ZZL13lcd_main_menuvE3__c_4>:
    1264:	52 65 73 75 6d 65 20 50 72 69 6e 74 00              Resume Print.

00001271 <_ZZL13lcd_main_menuvE3__c_5>:
    1271:	53 74 6f 70 20 50 72 69 6e 74 00                    Stop Print.

0000127c <_ZZL13lcd_main_menuvE3__c_6>:
    127c:	50 72 69 6e 74 20 66 72 6f 6d 20 53 44 00           Print from SD.

0000128a <_ZZL13lcd_main_menuvE3__c_7>:
    128a:	4e 6f 20 43 61 72 64 00                             No Card.

00001292 <_ZZL15lcd_sdcard_menuvE3__c>:
    1292:	4d 61 69 6e 00                                      Main.

00001297 <_ZZL15lcd_sdcard_menuvE3__c_0>:
    1297:	05 2e 2e 00                                         ....

0000129b <_ZZL18menu_action_sdfilePKcPcE3__c>:
    129b:	4d 32 33 20 25 73 00                                M23 %s.

000012a2 <_ZZL18menu_action_sdfilePKcPcE3__c_0>:
    12a2:	4d 32 34 00                                         M24.

000012a6 <_ZZL15lcd_sdcard_stopvE3__c>:
    12a6:	4d 38 34 20 58 20 59 20 5a 20 45 00                 M84 X Y Z E.

000012b2 <_ZZL16lcd_control_menuvE3__c>:
    12b2:	4d 61 69 6e 00                                      Main.

000012b7 <_ZZL16lcd_control_menuvE3__c_0>:
    12b7:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

000012c3 <_ZZL16lcd_control_menuvE3__c_1>:
    12c3:	4d 6f 74 69 6f 6e 00                                Motion.

000012ca <_ZZL16lcd_control_menuvE3__c_2>:
    12ca:	52 65 73 74 6f 72 65 20 46 61 69 6c 73 61 66 65     Restore Failsafe
	...

000012db <_ZZL23lcd_control_motion_menuvE3__c>:
    12db:	43 6f 6e 74 72 6f 6c 00                             Control.

000012e3 <_ZZL23lcd_control_motion_menuvE3__c_0>:
    12e3:	41 63 63 65 6c 00                                   Accel.

000012e9 <_ZZL23lcd_control_motion_menuvE3__c_1>:
    12e9:	41 63 63 65 6c 00                                   Accel.

000012ef <_ZZL23lcd_control_motion_menuvE3__c_2>:
    12ef:	56 78 79 2d 6a 65 72 6b 00                          Vxy-jerk.

000012f8 <_ZZL23lcd_control_motion_menuvE3__c_3>:
    12f8:	56 78 79 2d 6a 65 72 6b 00                          Vxy-jerk.

00001301 <_ZZL23lcd_control_motion_menuvE3__c_4>:
    1301:	56 7a 2d 6a 65 72 6b 00                             Vz-jerk.

00001309 <_ZZL23lcd_control_motion_menuvE3__c_5>:
    1309:	56 7a 2d 6a 65 72 6b 00                             Vz-jerk.

00001311 <_ZZL23lcd_control_motion_menuvE3__c_6>:
    1311:	56 65 2d 6a 65 72 6b 00                             Ve-jerk.

00001319 <_ZZL23lcd_control_motion_menuvE3__c_7>:
    1319:	56 65 2d 6a 65 72 6b 00                             Ve-jerk.

00001321 <_ZZL23lcd_control_motion_menuvE3__c_8>:
    1321:	56 6d 61 78 20 78 00                                Vmax x.

00001328 <_ZZL23lcd_control_motion_menuvE3__c_9>:
    1328:	56 6d 61 78 20 78 00                                Vmax x.

0000132f <_ZZL23lcd_control_motion_menuvE3__c_10>:
    132f:	56 6d 61 78 20 79 00                                Vmax y.

00001336 <_ZZL23lcd_control_motion_menuvE3__c_11>:
    1336:	56 6d 61 78 20 79 00                                Vmax y.

0000133d <_ZZL23lcd_control_motion_menuvE3__c_12>:
    133d:	56 6d 61 78 20 7a 00                                Vmax z.

00001344 <_ZZL23lcd_control_motion_menuvE3__c_13>:
    1344:	56 6d 61 78 20 7a 00                                Vmax z.

0000134b <_ZZL23lcd_control_motion_menuvE3__c_14>:
    134b:	56 6d 61 78 20 65 00                                Vmax e.

00001352 <_ZZL23lcd_control_motion_menuvE3__c_15>:
    1352:	56 6d 61 78 20 65 00                                Vmax e.

00001359 <_ZZL23lcd_control_motion_menuvE3__c_16>:
    1359:	56 6d 69 6e 00                                      Vmin.

0000135e <_ZZL23lcd_control_motion_menuvE3__c_17>:
    135e:	56 6d 69 6e 00                                      Vmin.

00001363 <_ZZL23lcd_control_motion_menuvE3__c_18>:
    1363:	56 54 72 61 76 20 6d 69 6e 00                       VTrav min.

0000136d <_ZZL23lcd_control_motion_menuvE3__c_19>:
    136d:	56 54 72 61 76 20 6d 69 6e 00                       VTrav min.

00001377 <_ZZL23lcd_control_motion_menuvE3__c_20>:
    1377:	41 6d 61 78 20 78 00                                Amax x.

0000137e <_ZZL23lcd_control_motion_menuvE3__c_21>:
    137e:	41 6d 61 78 20 78 00                                Amax x.

00001385 <_ZZL23lcd_control_motion_menuvE3__c_22>:
    1385:	41 6d 61 78 20 79 00                                Amax y.

0000138c <_ZZL23lcd_control_motion_menuvE3__c_23>:
    138c:	41 6d 61 78 20 79 00                                Amax y.

00001393 <_ZZL23lcd_control_motion_menuvE3__c_24>:
    1393:	41 6d 61 78 20 7a 00                                Amax z.

0000139a <_ZZL23lcd_control_motion_menuvE3__c_25>:
    139a:	41 6d 61 78 20 7a 00                                Amax z.

000013a1 <_ZZL23lcd_control_motion_menuvE3__c_26>:
    13a1:	41 6d 61 78 20 65 00                                Amax e.

000013a8 <_ZZL23lcd_control_motion_menuvE3__c_27>:
    13a8:	41 6d 61 78 20 65 00                                Amax e.

000013af <_ZZL23lcd_control_motion_menuvE3__c_28>:
    13af:	41 2d 72 65 74 72 61 63 74 00                       A-retract.

000013b9 <_ZZL23lcd_control_motion_menuvE3__c_29>:
    13b9:	41 2d 72 65 74 72 61 63 74 00                       A-retract.

000013c3 <_ZZL23lcd_control_motion_menuvE3__c_30>:
    13c3:	58 73 74 65 70 73 2f 6d 6d 00                       Xsteps/mm.

000013cd <_ZZL23lcd_control_motion_menuvE3__c_31>:
    13cd:	58 73 74 65 70 73 2f 6d 6d 00                       Xsteps/mm.

000013d7 <_ZZL23lcd_control_motion_menuvE3__c_32>:
    13d7:	59 73 74 65 70 73 2f 6d 6d 00                       Ysteps/mm.

000013e1 <_ZZL23lcd_control_motion_menuvE3__c_33>:
    13e1:	59 73 74 65 70 73 2f 6d 6d 00                       Ysteps/mm.

000013eb <_ZZL23lcd_control_motion_menuvE3__c_34>:
    13eb:	5a 73 74 65 70 73 2f 6d 6d 00                       Zsteps/mm.

000013f5 <_ZZL23lcd_control_motion_menuvE3__c_35>:
    13f5:	5a 73 74 65 70 73 2f 6d 6d 00                       Zsteps/mm.

000013ff <_ZZL23lcd_control_motion_menuvE3__c_36>:
    13ff:	45 73 74 65 70 73 2f 6d 6d 00                       Esteps/mm.

00001409 <_ZZL23lcd_control_motion_menuvE3__c_37>:
    1409:	45 73 74 65 70 73 2f 6d 6d 00                       Esteps/mm.

00001413 <_ZZL28lcd_control_temperature_menuvE3__c>:
    1413:	43 6f 6e 74 72 6f 6c 00                             Control.

0000141b <_ZZL28lcd_control_temperature_menuvE3__c_0>:
    141b:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001422 <_ZZL28lcd_control_temperature_menuvE3__c_1>:
    1422:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001429 <_ZZL28lcd_control_temperature_menuvE3__c_2>:
    1429:	4e 6f 7a 7a 6c 65 32 00                             Nozzle2.

00001431 <_ZZL28lcd_control_temperature_menuvE3__c_3>:
    1431:	4e 6f 7a 7a 6c 65 32 00                             Nozzle2.

00001439 <_ZZL28lcd_control_temperature_menuvE3__c_4>:
    1439:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

00001443 <_ZZL28lcd_control_temperature_menuvE3__c_5>:
    1443:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

0000144d <_ZZL28lcd_control_temperature_menuvE3__c_6>:
    144d:	41 75 74 6f 74 65 6d 70 00                          Autotemp.

00001456 <_ZZL28lcd_control_temperature_menuvE3__c_7>:
    1456:	4f 6e 20 00                                         On .

0000145a <_ZZL28lcd_control_temperature_menuvE3__c_8>:
    145a:	4f 66 66 00                                         Off.

0000145e <_ZZL28lcd_control_temperature_menuvE3__c_9>:
    145e:	4f 6e 20 00                                         On .

00001462 <_ZZL28lcd_control_temperature_menuvE3__c_10>:
    1462:	4f 66 66 00                                         Off.

00001466 <_ZZL28lcd_control_temperature_menuvE3__c_12>:
    1466:	20 02 20 4d 69 6e 00                                 . Min.

0000146d <_ZZL28lcd_control_temperature_menuvE3__c_13>:
    146d:	20 02 20 4d 69 6e 00                                 . Min.

00001474 <_ZZL28lcd_control_temperature_menuvE3__c_14>:
    1474:	20 02 20 4d 61 78 00                                 . Max.

0000147b <_ZZL28lcd_control_temperature_menuvE3__c_15>:
    147b:	20 02 20 4d 61 78 00                                 . Max.

00001482 <_ZZL28lcd_control_temperature_menuvE3__c_16>:
    1482:	20 02 20 46 61 63 74 00                              . Fact.

0000148a <_ZZL28lcd_control_temperature_menuvE3__c_17>:
    148a:	20 02 20 46 61 63 74 00                              . Fact.

00001492 <_ZZL28lcd_control_temperature_menuvE3__c_18>:
    1492:	50 49 44 2d 50 00                                   PID-P.

00001498 <_ZZL28lcd_control_temperature_menuvE3__c_19>:
    1498:	50 49 44 2d 50 00                                   PID-P.

0000149e <_ZZL28lcd_control_temperature_menuvE3__c_20>:
    149e:	50 49 44 2d 49 00                                   PID-I.

000014a4 <_ZZL28lcd_control_temperature_menuvE3__c_21>:
    14a4:	50 49 44 2d 49 00                                   PID-I.

000014aa <_ZZL28lcd_control_temperature_menuvE3__c_22>:
    14aa:	50 49 44 2d 44 00                                   PID-D.

000014b0 <_ZZL28lcd_control_temperature_menuvE3__c_23>:
    14b0:	50 49 44 2d 44 00                                   PID-D.

000014b6 <_ZZL28lcd_control_temperature_menuvE3__c_24>:
    14b6:	50 49 44 2d 43 00                                   PID-C.

000014bc <_ZZL28lcd_control_temperature_menuvE3__c_25>:
    14bc:	50 49 44 2d 43 00                                   PID-C.

000014c2 <_ZZL28lcd_control_temperature_menuvE3__c_26>:
    14c2:	50 72 65 68 65 61 74 20 50 4c 41 20 43 6f 6e 66     Preheat PLA Conf
	...

000014d3 <_ZZL28lcd_control_temperature_menuvE3__c_27>:
    14d3:	50 72 65 68 65 61 74 20 41 42 53 20 43 6f 6e 66     Preheat ABS Conf
	...

000014e4 <_ZZL49lcd_control_temperature_preheat_abs_settings_menuvE3__c>:
    14e4:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

000014f0 <_ZZL49lcd_control_temperature_preheat_abs_settings_menuvE3__c_0>:
    14f0:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

000014fa <_ZZL49lcd_control_temperature_preheat_abs_settings_menuvE3__c_1>:
    14fa:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

00001504 <_ZZL49lcd_control_temperature_preheat_abs_settings_menuvE3__c_2>:
    1504:	4e 6f 7a 7a 6c 65 00                                Nozzle.

0000150b <_ZZL49lcd_control_temperature_preheat_abs_settings_menuvE3__c_3>:
    150b:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001512 <_ZZL49lcd_control_temperature_preheat_pla_settings_menuvE3__c>:
    1512:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

0000151e <_ZZL49lcd_control_temperature_preheat_pla_settings_menuvE3__c_0>:
    151e:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

00001528 <_ZZL49lcd_control_temperature_preheat_pla_settings_menuvE3__c_1>:
    1528:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

00001532 <_ZZL49lcd_control_temperature_preheat_pla_settings_menuvE3__c_2>:
    1532:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001539 <_ZZL49lcd_control_temperature_preheat_pla_settings_menuvE3__c_3>:
    1539:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001540 <_ZZL16lcd_prepare_menuvE3__c>:
    1540:	4d 61 69 6e 00                                      Main.

00001545 <_ZZL16lcd_prepare_menuvE3__c_0>:
    1545:	44 69 73 61 62 6c 65 20 53 74 65 70 70 65 72 73     Disable Steppers
	...

00001556 <_ZZL16lcd_prepare_menuvE3__c_1>:
    1556:	4d 38 34 00                                         M84.

0000155a <_ZZL16lcd_prepare_menuvE3__c_2>:
    155a:	41 75 74 6f 20 48 6f 6d 65 00                       Auto Home.

00001564 <_ZZL16lcd_prepare_menuvE3__c_3>:
    1564:	47 32 38 00                                         G28.

00001568 <_ZZL16lcd_prepare_menuvE3__c_4>:
    1568:	50 72 65 68 65 61 74 20 50 4c 41 00                 Preheat PLA.

00001574 <_ZZL16lcd_prepare_menuvE3__c_5>:
    1574:	50 72 65 68 65 61 74 20 41 42 53 00                 Preheat ABS.

00001580 <_ZZL16lcd_prepare_menuvE3__c_6>:
    1580:	43 6f 6f 6c 64 6f 77 6e 00                          Cooldown.

00001589 <_ZZL16lcd_prepare_menuvE3__c_7>:
    1589:	53 77 69 74 63 68 20 50 6f 77 65 72 20 4f 66 66     Switch Power Off
	...

0000159a <_ZZL16lcd_prepare_menuvE3__c_8>:
    159a:	4d 38 31 00                                         M81.

0000159e <_ZZL16lcd_prepare_menuvE3__c_9>:
    159e:	53 77 69 74 63 68 20 50 6f 77 65 72 20 4f 6e 00     Switch Power On.

000015ae <_ZZL16lcd_prepare_menuvE3__c_10>:
    15ae:	4d 38 30 00                                         M80.

000015b2 <_ZZL16lcd_prepare_menuvE3__c_11>:
    15b2:	4d 6f 76 65 20 41 78 69 73 00                       Move Axis.

000015bc <_ZZL13lcd_move_menuvE3__c>:
    15bc:	50 72 65 70 61 72 65 00                             Prepare.

000015c4 <_ZZL13lcd_move_menuvE3__c_0>:
    15c4:	4d 6f 76 65 20 31 30 6d 6d 00                       Move 10mm.

000015ce <_ZZL13lcd_move_menuvE3__c_1>:
    15ce:	4d 6f 76 65 20 31 6d 6d 00                          Move 1mm.

000015d7 <_ZZL13lcd_move_menuvE3__c_2>:
    15d7:	4d 6f 76 65 20 30 2e 31 6d 6d 00                    Move 0.1mm.

000015e2 <_ZZL18lcd_move_menu_axisvE3__c>:
    15e2:	4d 6f 76 65 20 41 78 69 73 00                       Move Axis.

000015ec <_ZZL18lcd_move_menu_axisvE3__c_0>:
    15ec:	4d 6f 76 65 20 58 00                                Move X.

000015f3 <_ZZL18lcd_move_menu_axisvE3__c_1>:
    15f3:	4d 6f 76 65 20 59 00                                Move Y.

000015fa <_ZZL18lcd_move_menu_axisvE3__c_2>:
    15fa:	4d 6f 76 65 20 5a 00                                Move Z.

00001601 <_ZZL18lcd_move_menu_axisvE3__c_3>:
    1601:	45 78 74 72 75 64 65 72 00                          Extruder.

0000160a <_ZZL10lcd_move_evE3__c>:
    160a:	45 78 74 72 75 64 65 72 00                          Extruder.

00001613 <_ZZL10lcd_move_zvE3__c>:
    1613:	5a 00                                               Z.

00001615 <_ZZL10lcd_move_yvE3__c>:
    1615:	59 00                                               Y.

00001617 <_ZZL10lcd_move_xvE3__c>:
    1617:	58 00                                               X.

00001619 <_ZZL13lcd_tune_menuvE3__c>:
    1619:	4d 61 69 6e 00                                      Main.

0000161e <_ZZL13lcd_tune_menuvE3__c_0>:
    161e:	53 70 65 65 64 00                                   Speed.

00001624 <_ZZL13lcd_tune_menuvE3__c_1>:
    1624:	53 70 65 65 64 00                                   Speed.

0000162a <_ZZL13lcd_tune_menuvE3__c_2>:
    162a:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001631 <_ZZL13lcd_tune_menuvE3__c_3>:
    1631:	4e 6f 7a 7a 6c 65 00                                Nozzle.

00001638 <_ZZL13lcd_tune_menuvE3__c_4>:
    1638:	4e 6f 7a 7a 6c 65 32 00                             Nozzle2.

00001640 <_ZZL13lcd_tune_menuvE3__c_5>:
    1640:	4e 6f 7a 7a 6c 65 32 00                             Nozzle2.

00001648 <_ZZL13lcd_tune_menuvE3__c_6>:
    1648:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

00001652 <_ZZL13lcd_tune_menuvE3__c_7>:
    1652:	46 61 6e 20 73 70 65 65 64 00                       Fan speed.

0000165c <_ZZL13lcd_tune_menuvE3__c_8>:
    165c:	46 6c 6f 77 00                                      Flow.

00001661 <_ZZL13lcd_tune_menuvE3__c_9>:
    1661:	46 6c 6f 77 00                                      Flow.

00001666 <_ZZL32lcd_implementation_status_screenvE3__c>:
    1666:	01 20 00                                            . .

00001669 <_ZZL32lcd_implementation_status_screenvE3__c_0>:
    1669:	20 59 00                                             Y.

0000166c <_ZZL32lcd_implementation_status_screenvE3__c_1>:
    166c:	53 44 00                                            SD.

0000166f <_ZZL32lcd_implementation_status_screenvE3__c_2>:
    166f:	2d 2d 2d 00                                         ---.

00001673 <_ZZL32lcd_implementation_status_screenvE3__c_3>:
    1673:	2d 2d 3a 2d 2d 00                                   --:--.

00001679 <_ZZ10lcd_updatevE3__c>:
    1679:	43 61 72 64 20 69 6e 73 65 72 74 65 64 00           Card inserted.

00001687 <_ZZ10lcd_updatevE3__c_0>:
    1687:	43 61 72 64 20 72 65 6d 6f 76 65 64 00              Card removed.

00001694 <port_to_mode_PGM>:
    1694:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    16a4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000016ae <port_to_output_PGM>:
    16ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    16be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000016c8 <port_to_input_PGM>:
    16c8:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    16d8:	00 01 00 00 03 01 06 01 09 01                       ..........

000016e2 <digital_pin_to_port_PGM>:
    16e2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    16f2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1702:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1712:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1722:	0b 0b 0b 0b 0b 0b                                   ......

00001728 <digital_pin_to_bit_mask_PGM>:
    1728:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    1738:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    1748:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    1758:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    1768:	04 08 10 20 40 80                                   ... @.

0000176e <digital_pin_to_timer_PGM>:
    176e:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
    179a:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000017b4 <_ZL21tone_pin_to_timer_PGM>:
    17b4:	02                                                  .

000017b5 <pstr_inf>:
    17b5:	49 4e 46                                            INF

000017b8 <pstr_inity>:
    17b8:	49 4e 49 54 59                                      INITY

000017bd <pstr_nan>:
    17bd:	4e 41 4e                                            NAN

000017c0 <pwr_p10>:
    17c0:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    17d0:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000017d8 <pwr_m10>:
    17d8:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    17e8:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000017f0 <__ctors_start>:
    17f0:	dc 1d       	adc	r29, r12
    17f2:	6f 42       	sbci	r22, 0x2F	; 47
    17f4:	1f b5       	in	r17, 0x2f	; 47

000017f6 <__ctors_end>:
    17f6:	75 42       	sbci	r23, 0x25	; 37

000017f8 <__dtors_end>:
    17f8:	11 24       	eor	r1, r1
    17fa:	1f be       	out	0x3f, r1	; 63
    17fc:	cf ef       	ldi	r28, 0xFF	; 255
    17fe:	d1 e2       	ldi	r29, 0x21	; 33
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	00 e0       	ldi	r16, 0x00	; 0
    1806:	0c bf       	out	0x3c, r16	; 60

00001808 <__do_copy_data>:
    1808:	14 e0       	ldi	r17, 0x04	; 4
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b2 e0       	ldi	r27, 0x02	; 2
    180e:	e4 e5       	ldi	r30, 0x54	; 84
    1810:	fe e8       	ldi	r31, 0x8E	; 142
    1812:	01 e0       	ldi	r16, 0x01	; 1
    1814:	0b bf       	out	0x3b, r16	; 59
    1816:	02 c0       	rjmp	.+4      	; 0x181c <__do_copy_data+0x14>
    1818:	07 90       	elpm	r0, Z+
    181a:	0d 92       	st	X+, r0
    181c:	a0 38       	cpi	r26, 0x80	; 128
    181e:	b1 07       	cpc	r27, r17
    1820:	d9 f7       	brne	.-10     	; 0x1818 <__do_copy_data+0x10>

00001822 <__do_clear_bss>:
    1822:	22 e1       	ldi	r18, 0x12	; 18
    1824:	a0 e8       	ldi	r26, 0x80	; 128
    1826:	b4 e0       	ldi	r27, 0x04	; 4
    1828:	01 c0       	rjmp	.+2      	; 0x182c <.do_clear_bss_start>

0000182a <.do_clear_bss_loop>:
    182a:	1d 92       	st	X+, r1

0000182c <.do_clear_bss_start>:
    182c:	a2 36       	cpi	r26, 0x62	; 98
    182e:	b2 07       	cpc	r27, r18
    1830:	e1 f7       	brne	.-8      	; 0x182a <.do_clear_bss_loop>

00001832 <__do_global_ctors>:
    1832:	17 e1       	ldi	r17, 0x17	; 23
    1834:	c6 ef       	ldi	r28, 0xF6	; 246
    1836:	d7 e1       	ldi	r29, 0x17	; 23
    1838:	00 e0       	ldi	r16, 0x00	; 0
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <__do_global_ctors+0x16>
    183c:	22 97       	sbiw	r28, 0x02	; 2
    183e:	01 09       	sbc	r16, r1
    1840:	fe 01       	movw	r30, r28
    1842:	0b bf       	out	0x3b, r16	; 59
    1844:	0e 94 08 c1 	call	0x18210	; 0x18210 <__tablejump_elpm__>
    1848:	c0 3f       	cpi	r28, 0xF0	; 240
    184a:	d1 07       	cpc	r29, r17
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	08 07       	cpc	r16, r24
    1850:	a9 f7       	brne	.-22     	; 0x183c <__do_global_ctors+0xa>
    1852:	0e 94 99 bc 	call	0x17932	; 0x17932 <main>
    1856:	0c 94 19 c7 	jmp	0x18e32	; 0x18e32 <__do_global_dtors>

0000185a <__bad_interrupt>:
    185a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000185e <_ZN5I2CIOC1Ev>:
      retVal = ( _dirMask & Wire.read ( ) );
#endif      
      
   }
   return ( retVal );
}
    185e:	fc 01       	movw	r30, r24
    1860:	12 82       	std	Z+2, r1	; 0x02
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	81 83       	std	Z+1, r24	; 0x01
    1866:	10 82       	st	Z, r1
    1868:	13 82       	std	Z+3, r1	; 0x03
    186a:	08 95       	ret

0000186c <_ZN5I2CIO5beginEh>:
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
    1872:	6a 83       	std	Y+2, r22	; 0x02
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	94 e0       	ldi	r25, 0x04	; 4
    1878:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <_ZN7TwoWire5beginEv>
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	6a 81       	ldd	r22, Y+2	; 0x02
    1880:	80 e8       	ldi	r24, 0x80	; 128
    1882:	94 e0       	ldi	r25, 0x04	; 4
    1884:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <_ZN7TwoWire11requestFromEhh>
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	81 11       	cpse	r24, r1
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <_ZN5I2CIO5beginEh+0x24>
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	80 e8       	ldi	r24, 0x80	; 128
    1894:	94 e0       	ldi	r25, 0x04	; 4
    1896:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN7TwoWire4readEv>
    189a:	88 83       	st	Y, r24
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <_ZN5I2CIO8portModeEh>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	23 81       	ldd	r18, Z+3	; 0x03
    18aa:	22 23       	and	r18, r18
    18ac:	39 f0       	breq	.+14     	; 0x18bc <_ZN5I2CIO8portModeEh+0x16>
    18ae:	61 11       	cpse	r22, r1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <_ZN5I2CIO8portModeEh+0x12>
    18b2:	2f ef       	ldi	r18, 0xFF	; 255
    18b4:	21 83       	std	Z+1, r18	; 0x01
    18b6:	08 95       	ret
    18b8:	fc 01       	movw	r30, r24
    18ba:	11 82       	std	Z+1, r1	; 0x01
    18bc:	08 95       	ret

000018be <_ZN5I2CIO5writeEh>:

//
// write
int I2CIO::write ( uint8_t value )
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
   int status = 0;
   
   if ( _initialised )
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	88 23       	and	r24, r24
    18c8:	a1 f0       	breq	.+40     	; 0x18f2 <_ZN5I2CIO5writeEh+0x34>
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	80 95       	com	r24
    18ce:	68 23       	and	r22, r24
    18d0:	68 83       	st	Y, r22
   
      Wire.beginTransmission ( _i2cAddr );
    18d2:	6a 81       	ldd	r22, Y+2	; 0x02
    18d4:	80 e8       	ldi	r24, 0x80	; 128
    18d6:	94 e0       	ldi	r25, 0x04	; 4
    18d8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    18dc:	68 81       	ld	r22, Y
    18de:	80 e8       	ldi	r24, 0x80	; 128
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    18e6:	80 e8       	ldi	r24, 0x80	; 128
    18e8:	94 e0       	ldi	r25, 0x04	; 4
    18ea:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <_ZN7TwoWire15endTransmissionEv>
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <_ZN5I2CIO5writeEh+0x38>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	89 2b       	or	r24, r25
    18fc:	11 f0       	breq	.+4      	; 0x1902 <_ZN5I2CIO5writeEh+0x44>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
}
    1902:	82 2f       	mov	r24, r18
    1904:	93 2f       	mov	r25, r19
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
}

void LCD::home()
{
   command(LCD_RETURNHOME);             // set cursor position to zero
   delayMicroseconds(HOME_CLEAR_EXEC);  // This command is time consuming
    190c:	08 95       	ret

0000190e <_ZN3LCD12setBacklightEh>:
    190e:	08 95       	ret

00001910 <_ZN3LCD5writeEh>:
    1910:	dc 01       	movw	r26, r24
    1912:	ed 91       	ld	r30, X+
    1914:	fc 91       	ld	r31, X
    1916:	02 84       	ldd	r0, Z+10	; 0x0a
    1918:	f3 85       	ldd	r31, Z+11	; 0x0b
    191a:	e0 2d       	mov	r30, r0
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	19 95       	eicall
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	08 95       	ret

00001926 <_ZN3LCDC1Ev>:
    1926:	fc 01       	movw	r30, r24
    1928:	13 82       	std	Z+3, r1	; 0x03
    192a:	12 82       	std	Z+2, r1	; 0x02
    192c:	21 ef       	ldi	r18, 0xF1	; 241
    192e:	32 e0       	ldi	r19, 0x02	; 2
    1930:	31 83       	std	Z+1, r19	; 0x01
    1932:	20 83       	st	Z, r18
    1934:	08 95       	ret

00001936 <_ZN3LCD9backlightEv>:
    1936:	dc 01       	movw	r26, r24
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	00 84       	ldd	r0, Z+8	; 0x08
    193e:	f1 85       	ldd	r31, Z+9	; 0x09
    1940:	e0 2d       	mov	r30, r0
    1942:	6f ef       	ldi	r22, 0xFF	; 255
    1944:	19 95       	eicall
    1946:	08 95       	ret

00001948 <_ZN3LCD7commandEh>:
    1948:	dc 01       	movw	r26, r24
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	02 84       	ldd	r0, Z+10	; 0x0a
    1950:	f3 85       	ldd	r31, Z+11	; 0x0b
    1952:	e0 2d       	mov	r30, r0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	19 95       	eicall
    1958:	08 95       	ret

0000195a <_ZN3LCD10createCharEhPh>:
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	7c 01       	movw	r14, r24
    1968:	d4 2f       	mov	r29, r20
    196a:	c5 2f       	mov	r28, r21
    196c:	67 70       	andi	r22, 0x07	; 7
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	66 0f       	add	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	60 64       	ori	r22, 0x40	; 64
    197e:	e4 df       	rcall	.-56     	; 0x1948 <_ZN3LCD7commandEh>
    1980:	8e e1       	ldi	r24, 0x1E	; 30
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
    1988:	0d 2f       	mov	r16, r29
    198a:	1c 2f       	mov	r17, r28
    198c:	c0 e0       	ldi	r28, 0x00	; 0
    198e:	d0 e0       	ldi	r29, 0x00	; 0
    1990:	d8 01       	movw	r26, r16
    1992:	6d 91       	ld	r22, X+
    1994:	8d 01       	movw	r16, r26
    1996:	d7 01       	movw	r26, r14
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	01 90       	ld	r0, Z+
    199e:	f0 81       	ld	r31, Z
    19a0:	e0 2d       	mov	r30, r0
    19a2:	c7 01       	movw	r24, r14
    19a4:	19 95       	eicall
    19a6:	88 e2       	ldi	r24, 0x28	; 40
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
    19ae:	21 96       	adiw	r28, 0x01	; 1
    19b0:	c8 30       	cpi	r28, 0x08	; 8
    19b2:	d1 05       	cpc	r29, r1
    19b4:	69 f7       	brne	.-38     	; 0x1990 <_ZN3LCD10createCharEhPh+0x36>
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	08 95       	ret

000019c4 <_ZN3LCD7displayEv>:
    19c4:	fc 01       	movw	r30, r24
    19c6:	65 81       	ldd	r22, Z+5	; 0x05
    19c8:	26 2f       	mov	r18, r22
    19ca:	24 60       	ori	r18, 0x04	; 4
    19cc:	25 83       	std	Z+5, r18	; 0x05
    19ce:	6c 60       	ori	r22, 0x0C	; 12
    19d0:	bb cf       	rjmp	.-138    	; 0x1948 <_ZN3LCD7commandEh>

000019d2 <_ZN3LCD9setCursorEhh>:
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	28 97       	sbiw	r28, 0x08	; 8
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	1d 82       	std	Y+5, r1	; 0x05
    19e8:	20 e4       	ldi	r18, 0x40	; 64
    19ea:	2e 83       	std	Y+6, r18	; 0x06
    19ec:	34 e1       	ldi	r19, 0x14	; 20
    19ee:	3f 83       	std	Y+7, r19	; 0x07
    19f0:	34 e5       	ldi	r19, 0x54	; 84
    19f2:	38 87       	std	Y+8, r19	; 0x08
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	2a 83       	std	Y+2, r18	; 0x02
    19f8:	20 e1       	ldi	r18, 0x10	; 16
    19fa:	2b 83       	std	Y+3, r18	; 0x03
    19fc:	20 e5       	ldi	r18, 0x50	; 80
    19fe:	2c 83       	std	Y+4, r18	; 0x04
    1a00:	fc 01       	movw	r30, r24
    1a02:	27 81       	ldd	r18, Z+7	; 0x07
    1a04:	42 17       	cp	r20, r18
    1a06:	10 f0       	brcs	.+4      	; 0x1a0c <_ZN3LCD9setCursorEhh+0x3a>
    1a08:	42 2f       	mov	r20, r18
    1a0a:	41 50       	subi	r20, 0x01	; 1
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	30 85       	ldd	r19, Z+8	; 0x08
    1a10:	30 31       	cpi	r19, 0x10	; 16
    1a12:	51 f4       	brne	.+20     	; 0x1a28 <_ZN3LCD9setCursorEhh+0x56>
    1a14:	24 30       	cpi	r18, 0x04	; 4
    1a16:	41 f4       	brne	.+16     	; 0x1a28 <_ZN3LCD9setCursorEhh+0x56>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e4 0f       	add	r30, r20
    1a1c:	f1 1d       	adc	r31, r1
    1a1e:	21 81       	ldd	r18, Z+1	; 0x01
    1a20:	62 0f       	add	r22, r18
    1a22:	60 68       	ori	r22, 0x80	; 128
    1a24:	91 df       	rcall	.-222    	; 0x1948 <_ZN3LCD7commandEh>
    1a26:	07 c0       	rjmp	.+14     	; 0x1a36 <_ZN3LCD9setCursorEhh+0x64>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e4 0f       	add	r30, r20
    1a2c:	f1 1d       	adc	r31, r1
    1a2e:	25 81       	ldd	r18, Z+5	; 0x05
    1a30:	62 0f       	add	r22, r18
    1a32:	60 68       	ori	r22, 0x80	; 128
    1a34:	89 df       	rcall	.-238    	; 0x1948 <_ZN3LCD7commandEh>
    1a36:	28 96       	adiw	r28, 0x08	; 8
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <_ZN3LCD5clearEv>:

// Common LCD Commands
// ---------------------------------------------------------------------------
void LCD::clear()
{
   command(LCD_CLEARDISPLAY);             // clear display, set cursor position to zero
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	7e df       	rcall	.-260    	; 0x1948 <_ZN3LCD7commandEh>
   delayMicroseconds(HOME_CLEAR_EXEC);    // this command is time consuming
    1a4c:	80 ed       	ldi	r24, 0xD0	; 208
    1a4e:	97 e0       	ldi	r25, 0x07	; 7
    1a50:	0c 94 6a ba 	jmp	0x174d4	; 0x174d4 <delayMicroseconds>

00001a54 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	ec 01       	movw	r28, r24
   if (lines > 1) 
    1a5a:	42 30       	cpi	r20, 0x02	; 2
    1a5c:	18 f0       	brcs	.+6      	; 0x1a64 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	88 60       	ori	r24, 0x08	; 8
    1a62:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    1a64:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    1a66:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    1a68:	22 23       	and	r18, r18
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <_ZN3LCD5beginEhhh+0x22>
    1a6c:	41 30       	cpi	r20, 0x01	; 1
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	84 60       	ori	r24, 0x04	; 4
    1a74:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    1a76:	64 e6       	ldi	r22, 0x64	; 100
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 11 ba 	call	0x17422	; 0x17422 <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    1a82:	6c 81       	ldd	r22, Y+4	; 0x04
    1a84:	64 fd       	sbrc	r22, 4
    1a86:	31 c0       	rjmp	.+98     	; 0x1aea <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    1a88:	e8 81       	ld	r30, Y
    1a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a8c:	02 84       	ldd	r0, Z+10	; 0x0a
    1a8e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a90:	e0 2d       	mov	r30, r0
    1a92:	42 e0       	ldi	r20, 0x02	; 2
    1a94:	63 e0       	ldi	r22, 0x03	; 3
    1a96:	ce 01       	movw	r24, r28
    1a98:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    1a9a:	84 e9       	ldi	r24, 0x94	; 148
    1a9c:	91 e1       	ldi	r25, 0x11	; 17
    1a9e:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    1aa2:	e8 81       	ld	r30, Y
    1aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa6:	02 84       	ldd	r0, Z+10	; 0x0a
    1aa8:	f3 85       	ldd	r31, Z+11	; 0x0b
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	42 e0       	ldi	r20, 0x02	; 2
    1aae:	63 e0       	ldi	r22, 0x03	; 3
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    1ab4:	84 e9       	ldi	r24, 0x94	; 148
    1ab6:	91 e1       	ldi	r25, 0x11	; 17
    1ab8:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    1abc:	e8 81       	ld	r30, Y
    1abe:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac0:	02 84       	ldd	r0, Z+10	; 0x0a
    1ac2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	42 e0       	ldi	r20, 0x02	; 2
    1ac8:	63 e0       	ldi	r22, 0x03	; 3
    1aca:	ce 01       	movw	r24, r28
    1acc:	19 95       	eicall
      delayMicroseconds(150);
    1ace:	86 e9       	ldi	r24, 0x96	; 150
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    1ad6:	e8 81       	ld	r30, Y
    1ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    1ada:	02 84       	ldd	r0, Z+10	; 0x0a
    1adc:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	42 e0       	ldi	r20, 0x02	; 2
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	19 95       	eicall
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    1aea:	60 62       	ori	r22, 0x20	; 32
    1aec:	ce 01       	movw	r24, r28
    1aee:	2c df       	rcall	.-424    	; 0x1948 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    1af0:	84 e9       	ldi	r24, 0x94	; 148
    1af2:	91 e1       	ldi	r25, 0x11	; 17
    1af4:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    1af8:	6c 81       	ldd	r22, Y+4	; 0x04
    1afa:	60 62       	ori	r22, 0x20	; 32
    1afc:	ce 01       	movw	r24, r28
    1afe:	24 df       	rcall	.-440    	; 0x1948 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    1b00:	86 e9       	ldi	r24, 0x96	; 150
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    1b08:	6c 81       	ldd	r22, Y+4	; 0x04
    1b0a:	60 62       	ori	r22, 0x20	; 32
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	1c df       	rcall	.-456    	; 0x1948 <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    1b10:	6c 81       	ldd	r22, Y+4	; 0x04
    1b12:	60 62       	ori	r22, 0x20	; 32
    1b14:	ce 01       	movw	r24, r28
    1b16:	18 df       	rcall	.-464    	; 0x1948 <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
   display();
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	52 df       	rcall	.-348    	; 0x19c4 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    1b20:	ce 01       	movw	r24, r28
    1b22:	92 df       	rcall	.-220    	; 0x1a48 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    1b28:	66 e0       	ldi	r22, 0x06	; 6
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	0d df       	rcall	.-486    	; 0x1948 <_ZN3LCD7commandEh>

   backlight();
    1b2e:	ce 01       	movw	r24, r28
    1b30:	02 df       	rcall	.-508    	; 0x1936 <_ZN3LCD9backlightEv>

}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
// CONSTRUCTORS
// ---------------------------------------------------------------------------
LiquidCrystal_I2C::LiquidCrystal_I2C( uint8_t lcd_Addr )
{
   config(lcd_Addr, EN, RW, RS, D4, D5, D6, D7);
}
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x8>
    1b3e:	22 0f       	add	r18, r18
    1b40:	6a 95       	dec	r22
    1b42:	ea f7       	brpl	.-6      	; 0x1b3e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    1b44:	dc 01       	movw	r26, r24
    1b46:	1b 96       	adiw	r26, 0x0b	; 11
    1b48:	2c 93       	st	X, r18
    1b4a:	1b 97       	sbiw	r26, 0x0b	; 11
    1b4c:	19 96       	adiw	r26, 0x09	; 9
    1b4e:	4c 93       	st	X, r20
    1b50:	19 97       	sbiw	r26, 0x09	; 9
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	00 84       	ldd	r0, Z+8	; 0x08
    1b58:	f1 85       	ldd	r31, Z+9	; 0x09
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	19 95       	eicall
    1b60:	08 95       	ret

00001b62 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    1b62:	fc 01       	movw	r30, r24
    1b64:	83 85       	ldd	r24, Z+11	; 0x0b
    1b66:	88 23       	and	r24, r24
    1b68:	89 f0       	breq	.+34     	; 0x1b8c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    1b6a:	91 85       	ldd	r25, Z+9	; 0x09
    1b6c:	91 11       	cpse	r25, r1
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    1b70:	61 11       	cpse	r22, r1
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1b76:	91 30       	cpi	r25, 0x01	; 1
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1b7a:	61 11       	cpse	r22, r1
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1b7e:	84 87       	std	Z+12, r24	; 0x0c
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    1b82:	14 86       	std	Z+12, r1	; 0x0c
    1b84:	64 85       	ldd	r22, Z+12	; 0x0c
    1b86:	cf 01       	movw	r24, r30
    1b88:	0d 96       	adiw	r24, 0x0d	; 13
    1b8a:	99 ce       	rjmp	.-718    	; 0x18be <_ZN5I2CIO5writeEh>
    1b8c:	08 95       	ret

00001b8e <_ZN17LiquidCrystal_I2C4initEv>:
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	ec 01       	movw	r28, r24
    1b98:	8c 01       	movw	r16, r24
    1b9a:	03 5f       	subi	r16, 0xF3	; 243
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	64 de       	rcall	.-824    	; 0x186c <_ZN5I2CIO5beginEh>
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	51 f4       	brne	.+20     	; 0x1bbc <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	c8 01       	movw	r24, r16
    1bac:	7c de       	rcall	.-776    	; 0x18a6 <_ZN5I2CIO8portModeEh>
    1bae:	1c 82       	std	Y+4, r1	; 0x04
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	84 de       	rcall	.-760    	; 0x18be <_ZN5I2CIO5writeEh>
    1bb6:	21 e0       	ldi	r18, 0x01	; 1
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	82 2f       	mov	r24, r18
    1bc2:	93 2f       	mov	r25, r19
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	08 95       	ret

00001bce <_ZN17LiquidCrystal_I2C5beginEhhh>:
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	ec 01       	movw	r28, r24
    1bda:	16 2f       	mov	r17, r22
    1bdc:	04 2f       	mov	r16, r20
    1bde:	f2 2e       	mov	r15, r18
    1be0:	d6 df       	rcall	.-84     	; 0x1b8e <_ZN17LiquidCrystal_I2C4initEv>
    1be2:	2f 2d       	mov	r18, r15
    1be4:	40 2f       	mov	r20, r16
    1be6:	61 2f       	mov	r22, r17
    1be8:	ce 01       	movw	r24, r28
    1bea:	34 df       	rcall	.-408    	; 0x1a54 <_ZN3LCD5beginEhhh>
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	08 95       	ret

00001bf8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    1bf8:	8f 92       	push	r8
    1bfa:	af 92       	push	r10
    1bfc:	cf 92       	push	r12
    1bfe:	ef 92       	push	r14
    1c00:	0f 93       	push	r16
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	62 87       	std	Z+10, r22	; 0x0a
    1c0e:	13 86       	std	Z+11, r1	; 0x0b
    1c10:	14 86       	std	Z+12, r1	; 0x0c
    1c12:	11 86       	std	Z+9, r1	; 0x09
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 2f       	mov	r25, r24
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x26>
    1c1c:	99 0f       	add	r25, r25
    1c1e:	4a 95       	dec	r20
    1c20:	ea f7       	brpl	.-6      	; 0x1c1c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    1c22:	91 8b       	std	Z+17, r25	; 0x11
    1c24:	98 2f       	mov	r25, r24
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x32>
    1c28:	99 0f       	add	r25, r25
    1c2a:	2a 95       	dec	r18
    1c2c:	ea f7       	brpl	.-6      	; 0x1c28 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    1c2e:	92 8b       	std	Z+18, r25	; 0x12
    1c30:	98 2f       	mov	r25, r24
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3e>
    1c34:	99 0f       	add	r25, r25
    1c36:	0a 95       	dec	r16
    1c38:	ea f7       	brpl	.-6      	; 0x1c34 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    1c3a:	93 8b       	std	Z+19, r25	; 0x13
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x4a>
    1c40:	99 0f       	add	r25, r25
    1c42:	ea 94       	dec	r14
    1c44:	ea f7       	brpl	.-6      	; 0x1c40 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    1c46:	94 8b       	std	Z+20, r25	; 0x14
    1c48:	98 2f       	mov	r25, r24
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x56>
    1c4c:	99 0f       	add	r25, r25
    1c4e:	ca 94       	dec	r12
    1c50:	ea f7       	brpl	.-6      	; 0x1c4c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    1c52:	95 8b       	std	Z+21, r25	; 0x15
    1c54:	98 2f       	mov	r25, r24
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x62>
    1c58:	99 0f       	add	r25, r25
    1c5a:	aa 94       	dec	r10
    1c5c:	ea f7       	brpl	.-6      	; 0x1c58 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    1c5e:	96 8b       	std	Z+22, r25	; 0x16
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6c>
    1c62:	88 0f       	add	r24, r24
    1c64:	8a 94       	dec	r8
    1c66:	ea f7       	brpl	.-6      	; 0x1c62 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    1c68:	87 8b       	std	Z+23, r24	; 0x17
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	0f 91       	pop	r16
    1c70:	ef 90       	pop	r14
    1c72:	cf 90       	pop	r12
    1c74:	af 90       	pop	r10
    1c76:	8f 90       	pop	r8
    1c78:	08 95       	ret

00001c7a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	af 92       	push	r10
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	3c 01       	movw	r6, r24
    1c98:	16 2f       	mov	r17, r22
    1c9a:	f4 2e       	mov	r15, r20
    1c9c:	d2 2e       	mov	r13, r18
    1c9e:	43 de       	rcall	.-890    	; 0x1926 <_ZN3LCDC1Ev>
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	f3 01       	movw	r30, r6
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
    1caa:	c3 01       	movw	r24, r6
    1cac:	0d 96       	adiw	r24, 0x0d	; 13
    1cae:	d7 dd       	rcall	.-1106   	; 0x185e <_ZN5I2CIOC1Ev>
    1cb0:	2d 2d       	mov	r18, r13
    1cb2:	4f 2d       	mov	r20, r15
    1cb4:	61 2f       	mov	r22, r17
    1cb6:	c3 01       	movw	r24, r6
    1cb8:	9f df       	rcall	.-194    	; 0x1bf8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
    1cba:	49 89       	ldd	r20, Y+17	; 0x11
    1cbc:	68 89       	ldd	r22, Y+16	; 0x10
    1cbe:	c3 01       	movw	r24, r6
    1cc0:	3b df       	rcall	.-394    	; 0x1b38 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	af 90       	pop	r10
    1cd4:	8f 90       	pop	r8
    1cd6:	7f 90       	pop	r7
    1cd8:	6f 90       	pop	r6
    1cda:	08 95       	ret

00001cdc <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    1cea:	8c 01       	movw	r16, r24
    1cec:	03 5f       	subi	r16, 0xF3	; 243
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	69 89       	ldd	r22, Y+17	; 0x11
    1cf2:	6f 29       	or	r22, r15
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	e3 dd       	rcall	.-1082   	; 0x18be <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    1cf8:	69 89       	ldd	r22, Y+17	; 0x11
    1cfa:	60 95       	com	r22
    1cfc:	6f 21       	and	r22, r15
    1cfe:	c8 01       	movw	r24, r16
    1d00:	de dd       	rcall	.-1092   	; 0x18be <_ZN5I2CIO5writeEh>
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	08 95       	ret

00001d0e <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
   uint8_t pinMapValue = 0;
    1d12:	50 e0       	ldi	r21, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    1d14:	60 ff       	sbrs	r22, 0
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x14>
   }
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e2 0f       	add	r30, r18
    1d1c:	f3 1f       	adc	r31, r19
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
      {
         pinMapValue |= _data_pins[i];
    1d1e:	74 89       	ldd	r23, Z+20	; 0x14
    1d20:	57 2b       	or	r21, r23
      }
      value = ( value >> 1 );
    1d22:	66 95       	lsr	r22
    1d24:	2f 5f       	subi	r18, 0xFF	; 255
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    1d28:	24 30       	cpi	r18, 0x04	; 4
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	99 f7       	brne	.-26     	; 0x1d14 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x6>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    1d2e:	41 30       	cpi	r20, 0x01	; 1
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x28>
   {
      mode = _Rs;
    1d32:	fc 01       	movw	r30, r24
    1d34:	43 89       	ldd	r20, Z+19	; 0x13
   }
   
   pinMapValue |= mode | _backlightStsMask;
    1d36:	fc 01       	movw	r30, r24
    1d38:	64 85       	ldd	r22, Z+12	; 0x0c
    1d3a:	56 2b       	or	r21, r22
    1d3c:	65 2f       	mov	r22, r21
    1d3e:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    1d40:	cd cf       	rjmp	.-102    	; 0x1cdc <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001d42 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	ec 01       	movw	r28, r24
    1d4c:	06 2f       	mov	r16, r22
    1d4e:	14 2f       	mov	r17, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    1d50:	42 30       	cpi	r20, 0x02	; 2
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    1d54:	6f 70       	andi	r22, 0x0F	; 15
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	da df       	rcall	.-76     	; 0x1d0e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    1d5a:	12 c0       	rjmp	.+36     	; 0x1d80 <_ZN17LiquidCrystal_I2C4sendEhh+0x3e>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    1d5c:	86 2f       	mov	r24, r22
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	bc 01       	movw	r22, r24
    1d62:	75 95       	asr	r23
    1d64:	67 95       	ror	r22
    1d66:	75 95       	asr	r23
    1d68:	67 95       	ror	r22
    1d6a:	75 95       	asr	r23
    1d6c:	67 95       	ror	r22
    1d6e:	75 95       	asr	r23
    1d70:	67 95       	ror	r22
    1d72:	ce 01       	movw	r24, r28
    1d74:	cc df       	rcall	.-104    	; 0x1d0e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    1d76:	60 2f       	mov	r22, r16
    1d78:	6f 70       	andi	r22, 0x0F	; 15
    1d7a:	41 2f       	mov	r20, r17
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	c7 df       	rcall	.-114    	; 0x1d0e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <_ZN10CardReaderC1Ev>:
    SERIAL_ECHOLNPGM(MSG_SD_WORKDIR_FAIL);
  }*/
  workDir=root;
  
  curDir=&workDir;
}
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	fc 01       	movw	r30, r24
    1d90:	13 aa       	std	Z+51, r1	; 0x33
    1d92:	16 aa       	std	Z+54, r1	; 0x36
    1d94:	12 aa       	std	Z+50, r1	; 0x32
    1d96:	11 aa       	std	Z+49, r1	; 0x31
    1d98:	2a e2       	ldi	r18, 0x2A	; 42
    1d9a:	34 e0       	ldi	r19, 0x04	; 4
    1d9c:	30 ab       	std	Z+48, r19	; 0x30
    1d9e:	27 a7       	std	Z+47, r18	; 0x2f
    1da0:	ec 5a       	subi	r30, 0xAC	; 172
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	10 82       	st	Z, r1
    1da6:	13 82       	std	Z+3, r1	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	e0 5b       	subi	r30, 0xB0	; 176
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	13 82       	std	Z+3, r1	; 0x03
    1db0:	12 82       	std	Z+2, r1	; 0x02
    1db2:	31 83       	std	Z+1, r19	; 0x01
    1db4:	20 83       	st	Z, r18
    1db6:	bc 01       	movw	r22, r24
    1db8:	61 59       	subi	r22, 0x91	; 145
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	fb 01       	movw	r30, r22
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	aa 58       	subi	r26, 0x8A	; 138
    1dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	4b 55       	subi	r20, 0x5B	; 91
    1dc8:	5e 4f       	sbci	r21, 0xFE	; 254
    1dca:	ed 01       	movw	r28, r26
    1dcc:	23 97       	sbiw	r28, 0x03	; 3
    1dce:	18 82       	st	Y, r1
    1dd0:	1c 92       	st	X, r1
    1dd2:	13 82       	std	Z+3, r1	; 0x03
    1dd4:	12 82       	std	Z+2, r1	; 0x02
    1dd6:	31 83       	std	Z+1, r19	; 0x01
    1dd8:	20 83       	st	Z, r18
    1dda:	7f 96       	adiw	r30, 0x1f	; 31
    1ddc:	5f 96       	adiw	r26, 0x1f	; 31
    1dde:	e4 17       	cp	r30, r20
    1de0:	f5 07       	cpc	r31, r21
    1de2:	99 f7       	brne	.-26     	; 0x1dca <_ZN10CardReaderC1Ev+0x40>
    1de4:	fc 01       	movw	r30, r24
    1de6:	e9 55       	subi	r30, 0x59	; 89
    1de8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dea:	29 e1       	ldi	r18, 0x19	; 25
    1dec:	21 83       	std	Z+1, r18	; 0x01
    1dee:	14 82       	std	Z+4, r1	; 0x04
    1df0:	fc 01       	movw	r30, r24
    1df2:	e4 55       	subi	r30, 0x54	; 84
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	17 8a       	std	Z+23, r1	; 0x17
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e2 53       	subi	r30, 0x32	; 50
    1dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfe:	10 82       	st	Z, r1
    1e00:	13 82       	std	Z+3, r1	; 0x03
    1e02:	fc 01       	movw	r30, r24
    1e04:	e6 53       	subi	r30, 0x36	; 54
    1e06:	fe 4f       	sbci	r31, 0xFE	; 254
    1e08:	13 82       	std	Z+3, r1	; 0x03
    1e0a:	12 82       	std	Z+2, r1	; 0x02
    1e0c:	2a e2       	ldi	r18, 0x2A	; 42
    1e0e:	34 e0       	ldi	r19, 0x04	; 4
    1e10:	31 83       	std	Z+1, r19	; 0x01
    1e12:	20 83       	st	Z, r18
    1e14:	fc 01       	movw	r30, r24
    1e16:	e7 51       	subi	r30, 0x17	; 23
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	10 82       	st	Z, r1
    1e1c:	11 82       	std	Z+1, r1	; 0x01
    1e1e:	12 82       	std	Z+2, r1	; 0x02
    1e20:	13 82       	std	Z+3, r1	; 0x03
    1e22:	fc 01       	movw	r30, r24
    1e24:	ef 50       	subi	r30, 0x0F	; 15
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	10 82       	st	Z, r1
    1e2a:	11 82       	std	Z+1, r1	; 0x01
    1e2c:	12 82       	std	Z+2, r1	; 0x02
    1e2e:	13 82       	std	Z+3, r1	; 0x03
    1e30:	fc 01       	movw	r30, r24
    1e32:	12 82       	std	Z+2, r1	; 0x02
    1e34:	13 82       	std	Z+3, r1	; 0x03
    1e36:	10 82       	st	Z, r1
    1e38:	11 82       	std	Z+1, r1	; 0x01
    1e3a:	ec 01       	movw	r28, r24
    1e3c:	c3 51       	subi	r28, 0x13	; 19
    1e3e:	de 4f       	sbci	r29, 0xFE	; 254
    1e40:	18 82       	st	Y, r1
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	1a 82       	std	Y+2, r1	; 0x02
    1e46:	1b 82       	std	Y+3, r1	; 0x03
    1e48:	eb 55       	subi	r30, 0x5B	; 91
    1e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4c:	11 82       	std	Z+1, r1	; 0x01
    1e4e:	10 82       	st	Z, r1
    1e50:	26 e3       	ldi	r18, 0x36	; 54
    1e52:	31 e0       	ldi	r19, 0x01	; 1
    1e54:	fb 01       	movw	r30, r22
    1e56:	a9 01       	movw	r20, r18
    1e58:	11 92       	st	Z+, r1
    1e5a:	41 50       	subi	r20, 0x01	; 1
    1e5c:	50 40       	sbci	r21, 0x00	; 0
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <_ZN10CardReaderC1Ev+0xce>
    1e60:	fc 01       	movw	r30, r24
    1e62:	eb 50       	subi	r30, 0x0B	; 11
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	21 e0       	ldi	r18, 0x01	; 1
    1e68:	20 83       	st	Z, r18
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	16 a6       	std	Z+46, r1	; 0x2e
    1e6e:	15 a6       	std	Z+45, r1	; 0x2d
    1e70:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	88 57       	subi	r24, 0x78	; 120
    1e7a:	9c 4e       	sbci	r25, 0xEC	; 236
    1e7c:	af 4f       	sbci	r26, 0xFF	; 255
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	88 83       	st	Y, r24
    1e82:	99 83       	std	Y+1, r25	; 0x01
    1e84:	aa 83       	std	Y+2, r26	; 0x02
    1e86:	bb 83       	std	Y+3, r27	; 0x03
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <_Z14createFilenamePcRK14directoryEntry>:
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	e6 2f       	mov	r30, r22
    1e94:	f7 2f       	mov	r31, r23
    1e96:	a8 2f       	mov	r26, r24
    1e98:	b9 2f       	mov	r27, r25
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	4e e2       	ldi	r20, 0x2E	; 46
    1e9e:	ef 01       	movw	r28, r30
    1ea0:	30 81       	ld	r19, Z
    1ea2:	30 32       	cpi	r19, 0x20	; 32
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <_Z14createFilenamePcRK14directoryEntry+0x22>
    1ea6:	28 30       	cpi	r18, 0x08	; 8
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <_Z14createFilenamePcRK14directoryEntry+0x1e>
    1eaa:	4d 93       	st	X+, r20
    1eac:	38 81       	ld	r19, Y
    1eae:	3d 93       	st	X+, r19
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	31 96       	adiw	r30, 0x01	; 1
    1eb4:	2b 30       	cpi	r18, 0x0B	; 11
    1eb6:	99 f7       	brne	.-26     	; 0x1e9e <_Z14createFilenamePcRK14directoryEntry+0x10>
    1eb8:	1c 92       	st	X, r1
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <_ZN10CardReader6lsDiveEPKc6SdFile>:
    1ec0:	2f 92       	push	r2
    1ec2:	3f 92       	push	r3
    1ec4:	4f 92       	push	r4
    1ec6:	5f 92       	push	r5
    1ec8:	6f 92       	push	r6
    1eca:	7f 92       	push	r7
    1ecc:	8f 92       	push	r8
    1ece:	9f 92       	push	r9
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	cb 58       	subi	r28, 0x8B	; 139
    1eea:	d1 09       	sbc	r29, r1
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	4b 01       	movw	r8, r22
    1efa:	c7 57       	subi	r28, 0x77	; 119
    1efc:	df 4f       	sbci	r29, 0xFF	; 255
    1efe:	18 82       	st	Y, r1
    1f00:	c9 58       	subi	r28, 0x89	; 137
    1f02:	d0 40       	sbci	r29, 0x00	; 0
    1f04:	6a 01       	movw	r12, r20
    1f06:	84 e0       	ldi	r24, 0x04	; 4
    1f08:	c8 0e       	add	r12, r24
    1f0a:	d1 1c       	adc	r13, r1
    1f0c:	28 01       	movw	r4, r16
    1f0e:	9a e0       	ldi	r25, 0x0A	; 10
    1f10:	49 1a       	sub	r4, r25
    1f12:	9e ef       	ldi	r25, 0xFE	; 254
    1f14:	59 0a       	sbc	r5, r25
    1f16:	d8 01       	movw	r26, r16
    1f18:	a9 50       	subi	r26, 0x09	; 9
    1f1a:	be 4f       	sbci	r27, 0xFE	; 254
    1f1c:	c6 57       	subi	r28, 0x76	; 118
    1f1e:	df 4f       	sbci	r29, 0xFF	; 255
    1f20:	b9 83       	std	Y+1, r27	; 0x01
    1f22:	a8 83       	st	Y, r26
    1f24:	ca 58       	subi	r28, 0x8A	; 138
    1f26:	d0 40       	sbci	r29, 0x00	; 0
    1f28:	7e 01       	movw	r14, r28
    1f2a:	bf e5       	ldi	r27, 0x5F	; 95
    1f2c:	eb 0e       	add	r14, r27
    1f2e:	f1 1c       	adc	r15, r1
    1f30:	68 94       	set
    1f32:	66 24       	eor	r6, r6
    1f34:	66 f8       	bld	r6, 6
    1f36:	71 2c       	mov	r7, r1
    1f38:	6c 0e       	add	r6, r28
    1f3a:	7d 1e       	adc	r7, r29
    1f3c:	e4 e0       	ldi	r30, 0x04	; 4
    1f3e:	6e 0e       	add	r6, r30
    1f40:	71 1c       	adc	r7, r1
    1f42:	0f 2e       	mov	r0, r31
    1f44:	ff e2       	ldi	r31, 0x2F	; 47
    1f46:	2f 2e       	mov	r2, r31
    1f48:	f1 e0       	ldi	r31, 0x01	; 1
    1f4a:	3f 2e       	mov	r3, r31
    1f4c:	f0 2d       	mov	r31, r0
    1f4e:	f1 01       	movw	r30, r2
    1f50:	f4 91       	lpm	r31, Z
    1f52:	ca 57       	subi	r28, 0x7A	; 122
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	f8 83       	st	Y, r31
    1f58:	c6 58       	subi	r28, 0x86	; 134
    1f5a:	d0 40       	sbci	r29, 0x00	; 0
    1f5c:	89 e7       	ldi	r24, 0x79	; 121
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	8c 0f       	add	r24, r28
    1f62:	9d 1f       	adc	r25, r29
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	c9 57       	subi	r28, 0x79	; 121
    1f68:	df 4f       	sbci	r29, 0xFF	; 255
    1f6a:	99 83       	std	Y+1, r25	; 0x01
    1f6c:	88 83       	st	Y, r24
    1f6e:	c7 58       	subi	r28, 0x87	; 135
    1f70:	d0 40       	sbci	r29, 0x00	; 0
    1f72:	5e c1       	rjmp	.+700    	; 0x2230 <__stack+0x31>
    1f74:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f76:	29 2f       	mov	r18, r25
    1f78:	28 71       	andi	r18, 0x18	; 24
    1f7a:	20 31       	cpi	r18, 0x10	; 16
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <_ZN10CardReader6lsDiveEPKc6SdFile+0xc0>
    1f7e:	73 c1       	rjmp	.+742    	; 0x2266 <__stack+0x67>
    1f80:	d2 01       	movw	r26, r4
    1f82:	8c 91       	ld	r24, X
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <_ZN10CardReader6lsDiveEPKc6SdFile+0xca>
    1f88:	6e c1       	rjmp	.+732    	; 0x2266 <__stack+0x67>
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <_ZN10CardReader6lsDiveEPKc6SdFile+0xd0>
    1f8e:	5d c1       	rjmp	.+698    	; 0x224a <__stack+0x4b>
    1f90:	6a c1       	rjmp	.+724    	; 0x2266 <__stack+0x67>
    1f92:	f7 01       	movw	r30, r14
    1f94:	01 90       	ld	r0, Z+
    1f96:	00 20       	and	r0, r0
    1f98:	e9 f7       	brne	.-6      	; 0x1f94 <_ZN10CardReader6lsDiveEPKc6SdFile+0xd4>
    1f9a:	31 97       	sbiw	r30, 0x01	; 1
    1f9c:	8f e2       	ldi	r24, 0x2F	; 47
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	b4 01       	movw	r22, r8
    1fa6:	c7 01       	movw	r24, r14
    1fa8:	0e 94 16 c4 	call	0x1882c	; 0x1882c <strcat>
    1fac:	be 01       	movw	r22, r28
    1fae:	67 58       	subi	r22, 0x87	; 135
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	0e 94 16 c4 	call	0x1882c	; 0x1882c <strcat>
    1fb8:	f7 01       	movw	r30, r14
    1fba:	01 90       	ld	r0, Z+
    1fbc:	00 20       	and	r0, r0
    1fbe:	e9 f7       	brne	.-6      	; 0x1fba <_ZN10CardReader6lsDiveEPKc6SdFile+0xfa>
    1fc0:	31 97       	sbiw	r30, 0x01	; 1
    1fc2:	8f e2       	ldi	r24, 0x2F	; 47
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	25 96       	adiw	r28, 0x05	; 5
    1fcc:	1f ae       	std	Y+63, r1	; 0x3f
    1fce:	25 97       	sbiw	r28, 0x05	; 5
    1fd0:	28 96       	adiw	r28, 0x08	; 8
    1fd2:	1f ae       	std	Y+63, r1	; 0x3f
    1fd4:	28 97       	sbiw	r28, 0x08	; 8
    1fd6:	24 96       	adiw	r28, 0x04	; 4
    1fd8:	1f ae       	std	Y+63, r1	; 0x3f
    1fda:	1e ae       	std	Y+62, r1	; 0x3e
    1fdc:	24 97       	sbiw	r28, 0x04	; 4
    1fde:	8a e2       	ldi	r24, 0x2A	; 42
    1fe0:	94 e0       	ldi	r25, 0x04	; 4
    1fe2:	22 96       	adiw	r28, 0x02	; 2
    1fe4:	9f af       	std	Y+63, r25	; 0x3f
    1fe6:	8e af       	std	Y+62, r24	; 0x3e
    1fe8:	22 97       	sbiw	r28, 0x02	; 2
    1fea:	21 e0       	ldi	r18, 0x01	; 1
    1fec:	ae 01       	movw	r20, r28
    1fee:	47 58       	subi	r20, 0x87	; 135
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	b6 01       	movw	r22, r12
    1ff4:	c3 01       	movw	r24, r6
    1ff6:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	57 c0       	rjmp	.+174    	; 0x20ac <_ZN10CardReader6lsDiveEPKc6SdFile+0x1ec>
    1ffe:	f2 01       	movw	r30, r4
    2000:	80 81       	ld	r24, Z
    2002:	81 11       	cpse	r24, r1
    2004:	53 c0       	rjmp	.+166    	; 0x20ac <_ZN10CardReader6lsDiveEPKc6SdFile+0x1ec>
    2006:	ca 57       	subi	r28, 0x7A	; 122
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	38 81       	ld	r19, Y
    200c:	c6 58       	subi	r28, 0x86	; 134
    200e:	d0 40       	sbci	r29, 0x00	; 0
    2010:	31 11       	cpse	r19, r1
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <_ZN10CardReader6lsDiveEPKc6SdFile+0x164>
    2014:	4e e0       	ldi	r20, 0x0E	; 14
    2016:	53 e0       	ldi	r21, 0x03	; 3
    2018:	33 e4       	ldi	r19, 0x43	; 67
    201a:	e0 ec       	ldi	r30, 0xC0	; 192
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	86 ec       	ldi	r24, 0xC6	; 198
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	11 c0       	rjmp	.+34     	; 0x2046 <_ZN10CardReader6lsDiveEPKc6SdFile+0x186>
    2024:	a1 01       	movw	r20, r2
    2026:	a0 ec       	ldi	r26, 0xC0	; 192
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	86 ec       	ldi	r24, 0xC6	; 198
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	2c 91       	ld	r18, X
    2030:	25 ff       	sbrs	r18, 5
    2032:	fd cf       	rjmp	.-6      	; 0x202e <_ZN10CardReader6lsDiveEPKc6SdFile+0x16e>
    2034:	fc 01       	movw	r30, r24
    2036:	30 83       	st	Z, r19
    2038:	4f 5f       	subi	r20, 0xFF	; 255
    203a:	5f 4f       	sbci	r21, 0xFF	; 255
    203c:	fa 01       	movw	r30, r20
    203e:	34 91       	lpm	r19, Z
    2040:	31 11       	cpse	r19, r1
    2042:	f5 cf       	rjmp	.-22     	; 0x202e <_ZN10CardReader6lsDiveEPKc6SdFile+0x16e>
    2044:	e7 cf       	rjmp	.-50     	; 0x2014 <_ZN10CardReader6lsDiveEPKc6SdFile+0x154>
    2046:	20 81       	ld	r18, Z
    2048:	25 ff       	sbrs	r18, 5
    204a:	fd cf       	rjmp	.-6      	; 0x2046 <_ZN10CardReader6lsDiveEPKc6SdFile+0x186>
    204c:	dc 01       	movw	r26, r24
    204e:	3c 93       	st	X, r19
    2050:	da 01       	movw	r26, r20
    2052:	3d 91       	ld	r19, X+
    2054:	ad 01       	movw	r20, r26
    2056:	31 11       	cpse	r19, r1
    2058:	f6 cf       	rjmp	.-20     	; 0x2046 <_ZN10CardReader6lsDiveEPKc6SdFile+0x186>
    205a:	e0 ec       	ldi	r30, 0xC0	; 192
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	85 ff       	sbrs	r24, 5
    2062:	fd cf       	rjmp	.-6      	; 0x205e <_ZN10CardReader6lsDiveEPKc6SdFile+0x19e>
    2064:	8a e0       	ldi	r24, 0x0A	; 10
    2066:	80 93 c6 00 	sts	0x00C6, r24
    206a:	ea 96       	adiw	r28, 0x3a	; 58
    206c:	3f ad       	ldd	r19, Y+63	; 0x3f
    206e:	ea 97       	sbiw	r28, 0x3a	; 58
    2070:	33 23       	and	r19, r19
    2072:	a1 f0       	breq	.+40     	; 0x209c <_ZN10CardReader6lsDiveEPKc6SdFile+0x1dc>
    2074:	c9 57       	subi	r28, 0x79	; 121
    2076:	df 4f       	sbci	r29, 0xFF	; 255
    2078:	48 81       	ld	r20, Y
    207a:	59 81       	ldd	r21, Y+1	; 0x01
    207c:	c7 58       	subi	r28, 0x87	; 135
    207e:	d0 40       	sbci	r29, 0x00	; 0
    2080:	e0 ec       	ldi	r30, 0xC0	; 192
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	86 ec       	ldi	r24, 0xC6	; 198
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	20 81       	ld	r18, Z
    208a:	25 ff       	sbrs	r18, 5
    208c:	fd cf       	rjmp	.-6      	; 0x2088 <_ZN10CardReader6lsDiveEPKc6SdFile+0x1c8>
    208e:	dc 01       	movw	r26, r24
    2090:	3c 93       	st	X, r19
    2092:	da 01       	movw	r26, r20
    2094:	3d 91       	ld	r19, X+
    2096:	ad 01       	movw	r20, r26
    2098:	31 11       	cpse	r19, r1
    209a:	f6 cf       	rjmp	.-20     	; 0x2088 <_ZN10CardReader6lsDiveEPKc6SdFile+0x1c8>
    209c:	e0 ec       	ldi	r30, 0xC0	; 192
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	85 ff       	sbrs	r24, 5
    20a4:	fd cf       	rjmp	.-6      	; 0x20a0 <_ZN10CardReader6lsDiveEPKc6SdFile+0x1e0>
    20a6:	8a e0       	ldi	r24, 0x0A	; 10
    20a8:	80 93 c6 00 	sts	0x00C6, r24
    20ac:	8b e1       	ldi	r24, 0x1B	; 27
    20ae:	fe 01       	movw	r30, r28
    20b0:	ec 5b       	subi	r30, 0xBC	; 188
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	de 01       	movw	r26, r28
    20b6:	15 96       	adiw	r26, 0x05	; 5
    20b8:	01 90       	ld	r0, Z+
    20ba:	0d 92       	st	X+, r0
    20bc:	8a 95       	dec	r24
    20be:	e1 f7       	brne	.-8      	; 0x20b8 <_ZN10CardReader6lsDiveEPKc6SdFile+0x1f8>
    20c0:	24 96       	adiw	r28, 0x04	; 4
    20c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c6:	24 97       	sbiw	r28, 0x04	; 4
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	0f 2e       	mov	r0, r31
    20ce:	fa e2       	ldi	r31, 0x2A	; 42
    20d0:	af 2e       	mov	r10, r31
    20d2:	f4 e0       	ldi	r31, 0x04	; 4
    20d4:	bf 2e       	mov	r11, r31
    20d6:	f0 2d       	mov	r31, r0
    20d8:	ba 82       	std	Y+2, r11	; 0x02
    20da:	a9 82       	std	Y+1, r10	; 0x01
    20dc:	ae 01       	movw	r20, r28
    20de:	4f 5f       	subi	r20, 0xFF	; 255
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255
    20e2:	b7 01       	movw	r22, r14
    20e4:	c8 01       	movw	r24, r16
    20e6:	ec de       	rcall	.-552    	; 0x1ec0 <_ZN10CardReader6lsDiveEPKc6SdFile>
    20e8:	ba 82       	std	Y+2, r11	; 0x02
    20ea:	a9 82       	std	Y+1, r10	; 0x01
    20ec:	88 85       	ldd	r24, Y+8	; 0x08
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <_ZN10CardReader6lsDiveEPKc6SdFile+0x23a>
    20f2:	ce 01       	movw	r24, r28
    20f4:	05 96       	adiw	r24, 0x05	; 5
    20f6:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    20fa:	8a e2       	ldi	r24, 0x2A	; 42
    20fc:	94 e0       	ldi	r25, 0x04	; 4
    20fe:	22 96       	adiw	r28, 0x02	; 2
    2100:	9f af       	std	Y+63, r25	; 0x3f
    2102:	8e af       	std	Y+62, r24	; 0x3e
    2104:	22 97       	sbiw	r28, 0x02	; 2
    2106:	28 96       	adiw	r28, 0x08	; 8
    2108:	8f ad       	ldd	r24, Y+63	; 0x3f
    210a:	28 97       	sbiw	r28, 0x08	; 8
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <_ZN10CardReader6lsDiveEPKc6SdFile+0x252>
    2110:	8f c0       	rjmp	.+286    	; 0x2230 <__stack+0x31>
    2112:	c3 01       	movw	r24, r6
    2114:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    2118:	8b c0       	rjmp	.+278    	; 0x2230 <__stack+0x31>
    211a:	85 3e       	cpi	r24, 0xE5	; 229
    211c:	09 f4       	brne	.+2      	; 0x2120 <_ZN10CardReader6lsDiveEPKc6SdFile+0x260>
    211e:	88 c0       	rjmp	.+272    	; 0x2230 <__stack+0x31>
    2120:	8e 32       	cpi	r24, 0x2E	; 46
    2122:	09 f4       	brne	.+2      	; 0x2126 <_ZN10CardReader6lsDiveEPKc6SdFile+0x266>
    2124:	85 c0       	rjmp	.+266    	; 0x2230 <__stack+0x31>
    2126:	8f 35       	cpi	r24, 0x5F	; 95
    2128:	09 f4       	brne	.+2      	; 0x212c <_ZN10CardReader6lsDiveEPKc6SdFile+0x26c>
    212a:	82 c0       	rjmp	.+260    	; 0x2230 <__stack+0x31>
    212c:	f8 01       	movw	r30, r16
    212e:	81 89       	ldd	r24, Z+17	; 0x11
    2130:	88 23       	and	r24, r24
    2132:	31 f0       	breq	.+12     	; 0x2140 <_ZN10CardReader6lsDiveEPKc6SdFile+0x280>
    2134:	8e 32       	cpi	r24, 0x2E	; 46
    2136:	09 f4       	brne	.+2      	; 0x213a <_ZN10CardReader6lsDiveEPKc6SdFile+0x27a>
    2138:	7b c0       	rjmp	.+246    	; 0x2230 <__stack+0x31>
    213a:	8f 35       	cpi	r24, 0x5F	; 95
    213c:	09 f4       	brne	.+2      	; 0x2140 <_ZN10CardReader6lsDiveEPKc6SdFile+0x280>
    213e:	78 c0       	rjmp	.+240    	; 0x2230 <__stack+0x31>
    2140:	93 fd       	sbrc	r25, 3
    2142:	76 c0       	rjmp	.+236    	; 0x2230 <__stack+0x31>
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	20 31       	cpi	r18, 0x10	; 16
    2148:	09 f0       	breq	.+2      	; 0x214c <_ZN10CardReader6lsDiveEPKc6SdFile+0x28c>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	d8 01       	movw	r26, r16
    214e:	9c 96       	adiw	r26, 0x2c	; 44
    2150:	8c 93       	st	X, r24
    2152:	81 11       	cpse	r24, r1
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <_ZN10CardReader6lsDiveEPKc6SdFile+0x2a6>
    2156:	88 a5       	ldd	r24, Y+40	; 0x28
    2158:	87 34       	cpi	r24, 0x47	; 71
    215a:	09 f0       	breq	.+2      	; 0x215e <_ZN10CardReader6lsDiveEPKc6SdFile+0x29e>
    215c:	69 c0       	rjmp	.+210    	; 0x2230 <__stack+0x31>
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	8e 37       	cpi	r24, 0x7E	; 126
    2162:	09 f4       	brne	.+2      	; 0x2166 <_ZN10CardReader6lsDiveEPKc6SdFile+0x2a6>
    2164:	65 c0       	rjmp	.+202    	; 0x2230 <__stack+0x31>
    2166:	be 01       	movw	r22, r28
    2168:	60 5e       	subi	r22, 0xE0	; 224
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	c8 01       	movw	r24, r16
    216e:	04 96       	adiw	r24, 0x04	; 4
    2170:	8e de       	rcall	.-740    	; 0x1e8e <_Z14createFilenamePcRK14directoryEntry>
    2172:	f2 01       	movw	r30, r4
    2174:	80 81       	ld	r24, Z
    2176:	81 11       	cpse	r24, r1
    2178:	33 c0       	rjmp	.+102    	; 0x21e0 <_ZN10CardReader6lsDiveEPKc6SdFile+0x320>
    217a:	d4 01       	movw	r26, r8
    217c:	3c 91       	ld	r19, X
    217e:	33 23       	and	r19, r19
    2180:	89 f0       	breq	.+34     	; 0x21a4 <_ZN10CardReader6lsDiveEPKc6SdFile+0x2e4>
    2182:	a4 01       	movw	r20, r8
    2184:	4f 5f       	subi	r20, 0xFF	; 255
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	e0 ec       	ldi	r30, 0xC0	; 192
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	86 ec       	ldi	r24, 0xC6	; 198
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	20 81       	ld	r18, Z
    2192:	25 ff       	sbrs	r18, 5
    2194:	fd cf       	rjmp	.-6      	; 0x2190 <_ZN10CardReader6lsDiveEPKc6SdFile+0x2d0>
    2196:	dc 01       	movw	r26, r24
    2198:	3c 93       	st	X, r19
    219a:	da 01       	movw	r26, r20
    219c:	3d 91       	ld	r19, X+
    219e:	ad 01       	movw	r20, r26
    21a0:	31 11       	cpse	r19, r1
    21a2:	f6 cf       	rjmp	.-20     	; 0x2190 <_ZN10CardReader6lsDiveEPKc6SdFile+0x2d0>
    21a4:	f8 01       	movw	r30, r16
    21a6:	34 81       	ldd	r19, Z+4	; 0x04
    21a8:	33 23       	and	r19, r19
    21aa:	89 f0       	breq	.+34     	; 0x21ce <_ZN10CardReader6lsDiveEPKc6SdFile+0x30e>
    21ac:	a8 01       	movw	r20, r16
    21ae:	4b 5f       	subi	r20, 0xFB	; 251
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	e0 ec       	ldi	r30, 0xC0	; 192
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	86 ec       	ldi	r24, 0xC6	; 198
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	20 81       	ld	r18, Z
    21bc:	25 ff       	sbrs	r18, 5
    21be:	fd cf       	rjmp	.-6      	; 0x21ba <_ZN10CardReader6lsDiveEPKc6SdFile+0x2fa>
    21c0:	dc 01       	movw	r26, r24
    21c2:	3c 93       	st	X, r19
    21c4:	da 01       	movw	r26, r20
    21c6:	3d 91       	ld	r19, X+
    21c8:	ad 01       	movw	r20, r26
    21ca:	31 11       	cpse	r19, r1
    21cc:	f6 cf       	rjmp	.-20     	; 0x21ba <_ZN10CardReader6lsDiveEPKc6SdFile+0x2fa>
    21ce:	e0 ec       	ldi	r30, 0xC0	; 192
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	85 ff       	sbrs	r24, 5
    21d6:	fd cf       	rjmp	.-6      	; 0x21d2 <_ZN10CardReader6lsDiveEPKc6SdFile+0x312>
    21d8:	8a e0       	ldi	r24, 0x0A	; 10
    21da:	80 93 c6 00 	sts	0x00C6, r24
    21de:	28 c0       	rjmp	.+80     	; 0x2230 <__stack+0x31>
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	61 f4       	brne	.+24     	; 0x21fc <_ZN10CardReader6lsDiveEPKc6SdFile+0x33c>
    21e4:	c6 57       	subi	r28, 0x76	; 118
    21e6:	df 4f       	sbci	r29, 0xFF	; 255
    21e8:	e8 81       	ld	r30, Y
    21ea:	f9 81       	ldd	r31, Y+1	; 0x01
    21ec:	ca 58       	subi	r28, 0x8A	; 138
    21ee:	d0 40       	sbci	r29, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
    21fa:	1a c0       	rjmp	.+52     	; 0x2230 <__stack+0x31>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	c1 f4       	brne	.+48     	; 0x2230 <__stack+0x31>
    2200:	c7 57       	subi	r28, 0x77	; 119
    2202:	df 4f       	sbci	r29, 0xFF	; 255
    2204:	f8 81       	ld	r31, Y
    2206:	c9 58       	subi	r28, 0x89	; 137
    2208:	d0 40       	sbci	r29, 0x00	; 0
    220a:	2f 2f       	mov	r18, r31
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	c6 57       	subi	r28, 0x76	; 118
    2210:	df 4f       	sbci	r29, 0xFF	; 255
    2212:	a8 81       	ld	r26, Y
    2214:	b9 81       	ldd	r27, Y+1	; 0x01
    2216:	ca 58       	subi	r28, 0x8A	; 138
    2218:	d0 40       	sbci	r29, 0x00	; 0
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	28 17       	cp	r18, r24
    2220:	39 07       	cpc	r19, r25
    2222:	21 f1       	breq	.+72     	; 0x226c <__stack+0x6d>
    2224:	ff 5f       	subi	r31, 0xFF	; 255
    2226:	c7 57       	subi	r28, 0x77	; 119
    2228:	df 4f       	sbci	r29, 0xFF	; 255
    222a:	f8 83       	st	Y, r31
    222c:	c9 58       	subi	r28, 0x89	; 137
    222e:	d0 40       	sbci	r29, 0x00	; 0
    2230:	a8 01       	movw	r20, r16
    2232:	4f 5e       	subi	r20, 0xEF	; 239
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	be 01       	movw	r22, r28
    2238:	60 5e       	subi	r22, 0xE0	; 224
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
    223c:	c6 01       	movw	r24, r12
    223e:	0e 94 42 5d 	call	0xba84	; 0xba84 <_ZN10SdBaseFile7readDirEP14directoryEntryPc>
    2242:	18 16       	cp	r1, r24
    2244:	0c f4       	brge	.+2      	; 0x2248 <__stack+0x49>
    2246:	96 ce       	rjmp	.-724    	; 0x1f74 <_ZN10CardReader6lsDiveEPKc6SdFile+0xb4>
    2248:	11 c0       	rjmp	.+34     	; 0x226c <__stack+0x6d>
    224a:	be 01       	movw	r22, r28
    224c:	60 5e       	subi	r22, 0xE0	; 224
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	ce 01       	movw	r24, r28
    2252:	87 58       	subi	r24, 0x87	; 135
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	1b de       	rcall	.-970    	; 0x1e8e <_Z14createFilenamePcRK14directoryEntry>
    2258:	f7 01       	movw	r30, r14
    225a:	10 82       	st	Z, r1
    225c:	d4 01       	movw	r26, r8
    225e:	8c 91       	ld	r24, X
    2260:	81 11       	cpse	r24, r1
    2262:	a0 ce       	rjmp	.-704    	; 0x1fa4 <_ZN10CardReader6lsDiveEPKc6SdFile+0xe4>
    2264:	96 ce       	rjmp	.-724    	; 0x1f92 <_ZN10CardReader6lsDiveEPKc6SdFile+0xd2>
    2266:	88 a1       	ldd	r24, Y+32	; 0x20
    2268:	81 11       	cpse	r24, r1
    226a:	57 cf       	rjmp	.-338    	; 0x211a <_ZN10CardReader6lsDiveEPKc6SdFile+0x25a>
    226c:	c5 57       	subi	r28, 0x75	; 117
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	ff 90       	pop	r15
    2284:	ef 90       	pop	r14
    2286:	df 90       	pop	r13
    2288:	cf 90       	pop	r12
    228a:	bf 90       	pop	r11
    228c:	af 90       	pop	r10
    228e:	9f 90       	pop	r9
    2290:	8f 90       	pop	r8
    2292:	7f 90       	pop	r7
    2294:	6f 90       	pop	r6
    2296:	5f 90       	pop	r5
    2298:	4f 90       	pop	r4
    229a:	3f 90       	pop	r3
    229c:	2f 90       	pop	r2
    229e:	08 95       	ret

000022a0 <_ZN10CardReader2lsEv>:
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	6f 97       	sbiw	r28, 0x1f	; 31
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	8c 01       	movw	r16, r24
    22be:	fc 01       	movw	r30, r24
    22c0:	ea 50       	subi	r30, 0x0A	; 10
    22c2:	fe 4f       	sbci	r31, 0xFE	; 254
    22c4:	10 82       	st	Z, r1
    22c6:	7c 01       	movw	r14, r24
    22c8:	83 e3       	ldi	r24, 0x33	; 51
    22ca:	e8 0e       	add	r14, r24
    22cc:	f1 1c       	adc	r15, r1
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	ba 01       	movw	r22, r20
    22d4:	c7 01       	movw	r24, r14
    22d6:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    22da:	8b e1       	ldi	r24, 0x1B	; 27
    22dc:	f7 01       	movw	r30, r14
    22de:	de 01       	movw	r26, r28
    22e0:	15 96       	adiw	r26, 0x05	; 5
    22e2:	01 90       	ld	r0, Z+
    22e4:	0d 92       	st	X+, r0
    22e6:	8a 95       	dec	r24
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <_ZN10CardReader2lsEv+0x42>
    22ea:	f8 01       	movw	r30, r16
    22ec:	81 a9       	ldd	r24, Z+49	; 0x31
    22ee:	92 a9       	ldd	r25, Z+50	; 0x32
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    22f4:	0f 2e       	mov	r0, r31
    22f6:	fa e2       	ldi	r31, 0x2A	; 42
    22f8:	ef 2e       	mov	r14, r31
    22fa:	f4 e0       	ldi	r31, 0x04	; 4
    22fc:	ff 2e       	mov	r15, r31
    22fe:	f0 2d       	mov	r31, r0
    2300:	fa 82       	std	Y+2, r15	; 0x02
    2302:	e9 82       	std	Y+1, r14	; 0x01
    2304:	ae 01       	movw	r20, r28
    2306:	4f 5f       	subi	r20, 0xFF	; 255
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	61 e4       	ldi	r22, 0x41	; 65
    230c:	74 e0       	ldi	r23, 0x04	; 4
    230e:	c8 01       	movw	r24, r16
    2310:	d7 dd       	rcall	.-1106   	; 0x1ec0 <_ZN10CardReader6lsDiveEPKc6SdFile>
    2312:	fa 82       	std	Y+2, r15	; 0x02
    2314:	e9 82       	std	Y+1, r14	; 0x01
    2316:	88 85       	ldd	r24, Y+8	; 0x08
    2318:	88 23       	and	r24, r24
    231a:	21 f0       	breq	.+8      	; 0x2324 <_ZN10CardReader2lsEv+0x84>
    231c:	ce 01       	movw	r24, r28
    231e:	05 96       	adiw	r24, 0x05	; 5
    2320:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    2324:	6f 96       	adiw	r28, 0x1f	; 31
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	08 95       	ret

0000233e <_ZN10CardReader6initsdEv>:
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	6c 01       	movw	r12, r24
    2350:	ec 01       	movw	r28, r24
    2352:	1b 82       	std	Y+3, r1	; 0x03
    2354:	8e a9       	ldd	r24, Y+54	; 0x36
    2356:	88 23       	and	r24, r24
    2358:	21 f0       	breq	.+8      	; 0x2362 <_ZN10CardReader6initsdEv+0x24>
    235a:	c6 01       	movw	r24, r12
    235c:	c3 96       	adiw	r24, 0x33	; 51
    235e:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    2362:	86 01       	movw	r16, r12
    2364:	09 55       	subi	r16, 0x59	; 89
    2366:	1e 4f       	sbci	r17, 0xFE	; 254
    2368:	45 e3       	ldi	r20, 0x35	; 53
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	c8 01       	movw	r24, r16
    236e:	0e 94 0c 59 	call	0xb218	; 0xb218 <_ZN7Sd2Card4initEhh>
    2372:	81 11       	cpse	r24, r1
    2374:	2d c0       	rjmp	.+90     	; 0x23d0 <_ZN10CardReader6initsdEv+0x92>
    2376:	ef e2       	ldi	r30, 0x2F	; 47
    2378:	f1 e0       	ldi	r31, 0x01	; 1
    237a:	34 91       	lpm	r19, Z
    237c:	33 23       	and	r19, r19
    237e:	69 f0       	breq	.+26     	; 0x239a <_ZN10CardReader6initsdEv+0x5c>
    2380:	a0 ec       	ldi	r26, 0xC0	; 192
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	86 ec       	ldi	r24, 0xC6	; 198
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	2c 91       	ld	r18, X
    238a:	25 ff       	sbrs	r18, 5
    238c:	fd cf       	rjmp	.-6      	; 0x2388 <_ZN10CardReader6initsdEv+0x4a>
    238e:	ec 01       	movw	r28, r24
    2390:	38 83       	st	Y, r19
    2392:	31 96       	adiw	r30, 0x01	; 1
    2394:	34 91       	lpm	r19, Z
    2396:	31 11       	cpse	r19, r1
    2398:	f7 cf       	rjmp	.-18     	; 0x2388 <_ZN10CardReader6initsdEv+0x4a>
    239a:	e5 e3       	ldi	r30, 0x35	; 53
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	34 91       	lpm	r19, Z
    23a0:	33 23       	and	r19, r19
    23a2:	69 f0       	breq	.+26     	; 0x23be <_ZN10CardReader6initsdEv+0x80>
    23a4:	a0 ec       	ldi	r26, 0xC0	; 192
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	86 ec       	ldi	r24, 0xC6	; 198
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	2c 91       	ld	r18, X
    23ae:	25 ff       	sbrs	r18, 5
    23b0:	fd cf       	rjmp	.-6      	; 0x23ac <_ZN10CardReader6initsdEv+0x6e>
    23b2:	ec 01       	movw	r28, r24
    23b4:	38 83       	st	Y, r19
    23b6:	31 96       	adiw	r30, 0x01	; 1
    23b8:	34 91       	lpm	r19, Z
    23ba:	31 11       	cpse	r19, r1
    23bc:	f7 cf       	rjmp	.-18     	; 0x23ac <_ZN10CardReader6initsdEv+0x6e>
    23be:	e0 ec       	ldi	r30, 0xC0	; 192
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	85 ff       	sbrs	r24, 5
    23c6:	fd cf       	rjmp	.-6      	; 0x23c2 <_ZN10CardReader6initsdEv+0x84>
    23c8:	8a e0       	ldi	r24, 0x0A	; 10
    23ca:	80 93 c6 00 	sts	0x00C6, r24
    23ce:	a3 c0       	rjmp	.+326    	; 0x2516 <_ZN10CardReader6initsdEv+0x1d8>
    23d0:	76 01       	movw	r14, r12
    23d2:	d4 e5       	ldi	r29, 0x54	; 84
    23d4:	ed 1a       	sub	r14, r29
    23d6:	de ef       	ldi	r29, 0xFE	; 254
    23d8:	fd 0a       	sbc	r15, r29
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	b8 01       	movw	r22, r16
    23de:	c7 01       	movw	r24, r14
    23e0:	0e 94 0e 68 	call	0xd01c	; 0xd01c <_ZN8SdVolume4initEP7Sd2Cardh>
    23e4:	81 11       	cpse	r24, r1
    23e6:	34 c0       	rjmp	.+104    	; 0x2450 <_ZN10CardReader6initsdEv+0x112>
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	b8 01       	movw	r22, r16
    23ec:	c7 01       	movw	r24, r14
    23ee:	0e 94 0e 68 	call	0xd01c	; 0xd01c <_ZN8SdVolume4initEP7Sd2Cardh>
    23f2:	81 11       	cpse	r24, r1
    23f4:	2d c0       	rjmp	.+90     	; 0x2450 <_ZN10CardReader6initsdEv+0x112>
    23f6:	e2 e4       	ldi	r30, 0x42	; 66
    23f8:	f1 e0       	ldi	r31, 0x01	; 1
    23fa:	34 91       	lpm	r19, Z
    23fc:	33 23       	and	r19, r19
    23fe:	69 f0       	breq	.+26     	; 0x241a <_ZN10CardReader6initsdEv+0xdc>
    2400:	a0 ec       	ldi	r26, 0xC0	; 192
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	86 ec       	ldi	r24, 0xC6	; 198
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2c 91       	ld	r18, X
    240a:	25 ff       	sbrs	r18, 5
    240c:	fd cf       	rjmp	.-6      	; 0x2408 <_ZN10CardReader6initsdEv+0xca>
    240e:	ec 01       	movw	r28, r24
    2410:	38 83       	st	Y, r19
    2412:	31 96       	adiw	r30, 0x01	; 1
    2414:	34 91       	lpm	r19, Z
    2416:	31 11       	cpse	r19, r1
    2418:	f7 cf       	rjmp	.-18     	; 0x2408 <_ZN10CardReader6initsdEv+0xca>
    241a:	e9 e4       	ldi	r30, 0x49	; 73
    241c:	f1 e0       	ldi	r31, 0x01	; 1
    241e:	34 91       	lpm	r19, Z
    2420:	33 23       	and	r19, r19
    2422:	69 f0       	breq	.+26     	; 0x243e <_ZN10CardReader6initsdEv+0x100>
    2424:	a0 ec       	ldi	r26, 0xC0	; 192
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	86 ec       	ldi	r24, 0xC6	; 198
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	2c 91       	ld	r18, X
    242e:	25 ff       	sbrs	r18, 5
    2430:	fd cf       	rjmp	.-6      	; 0x242c <_ZN10CardReader6initsdEv+0xee>
    2432:	ec 01       	movw	r28, r24
    2434:	38 83       	st	Y, r19
    2436:	31 96       	adiw	r30, 0x01	; 1
    2438:	34 91       	lpm	r19, Z
    243a:	31 11       	cpse	r19, r1
    243c:	f7 cf       	rjmp	.-18     	; 0x242c <_ZN10CardReader6initsdEv+0xee>
    243e:	e0 ec       	ldi	r30, 0xC0	; 192
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	85 ff       	sbrs	r24, 5
    2446:	fd cf       	rjmp	.-6      	; 0x2442 <_ZN10CardReader6initsdEv+0x104>
    2448:	8a e0       	ldi	r24, 0x0A	; 10
    244a:	80 93 c6 00 	sts	0x00C6, r24
    244e:	63 c0       	rjmp	.+198    	; 0x2516 <_ZN10CardReader6initsdEv+0x1d8>
    2450:	b7 01       	movw	r22, r14
    2452:	c6 01       	movw	r24, r12
    2454:	c3 96       	adiw	r24, 0x33	; 51
    2456:	0e 94 a8 5b 	call	0xb750	; 0xb750 <_ZN10SdBaseFile8openRootEP8SdVolume>
    245a:	81 11       	cpse	r24, r1
    245c:	2d c0       	rjmp	.+90     	; 0x24b8 <_ZN10CardReader6initsdEv+0x17a>
    245e:	e2 e4       	ldi	r30, 0x42	; 66
    2460:	f1 e0       	ldi	r31, 0x01	; 1
    2462:	34 91       	lpm	r19, Z
    2464:	33 23       	and	r19, r19
    2466:	69 f0       	breq	.+26     	; 0x2482 <_ZN10CardReader6initsdEv+0x144>
    2468:	a0 ec       	ldi	r26, 0xC0	; 192
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	86 ec       	ldi	r24, 0xC6	; 198
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	2c 91       	ld	r18, X
    2472:	25 ff       	sbrs	r18, 5
    2474:	fd cf       	rjmp	.-6      	; 0x2470 <_ZN10CardReader6initsdEv+0x132>
    2476:	ec 01       	movw	r28, r24
    2478:	38 83       	st	Y, r19
    247a:	31 96       	adiw	r30, 0x01	; 1
    247c:	34 91       	lpm	r19, Z
    247e:	31 11       	cpse	r19, r1
    2480:	f7 cf       	rjmp	.-18     	; 0x2470 <_ZN10CardReader6initsdEv+0x132>
    2482:	ec e5       	ldi	r30, 0x5C	; 92
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	34 91       	lpm	r19, Z
    2488:	33 23       	and	r19, r19
    248a:	69 f0       	breq	.+26     	; 0x24a6 <_ZN10CardReader6initsdEv+0x168>
    248c:	a0 ec       	ldi	r26, 0xC0	; 192
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	86 ec       	ldi	r24, 0xC6	; 198
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	2c 91       	ld	r18, X
    2496:	25 ff       	sbrs	r18, 5
    2498:	fd cf       	rjmp	.-6      	; 0x2494 <_ZN10CardReader6initsdEv+0x156>
    249a:	ec 01       	movw	r28, r24
    249c:	38 83       	st	Y, r19
    249e:	31 96       	adiw	r30, 0x01	; 1
    24a0:	34 91       	lpm	r19, Z
    24a2:	31 11       	cpse	r19, r1
    24a4:	f7 cf       	rjmp	.-18     	; 0x2494 <_ZN10CardReader6initsdEv+0x156>
    24a6:	e0 ec       	ldi	r30, 0xC0	; 192
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	85 ff       	sbrs	r24, 5
    24ae:	fd cf       	rjmp	.-6      	; 0x24aa <_ZN10CardReader6initsdEv+0x16c>
    24b0:	8a e0       	ldi	r24, 0x0A	; 10
    24b2:	80 93 c6 00 	sts	0x00C6, r24
    24b6:	2f c0       	rjmp	.+94     	; 0x2516 <_ZN10CardReader6initsdEv+0x1d8>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	f6 01       	movw	r30, r12
    24bc:	83 83       	std	Z+3, r24	; 0x03
    24be:	ef e2       	ldi	r30, 0x2F	; 47
    24c0:	f1 e0       	ldi	r31, 0x01	; 1
    24c2:	34 91       	lpm	r19, Z
    24c4:	33 23       	and	r19, r19
    24c6:	69 f0       	breq	.+26     	; 0x24e2 <_ZN10CardReader6initsdEv+0x1a4>
    24c8:	a0 ec       	ldi	r26, 0xC0	; 192
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	86 ec       	ldi	r24, 0xC6	; 198
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	2c 91       	ld	r18, X
    24d2:	25 ff       	sbrs	r18, 5
    24d4:	fd cf       	rjmp	.-6      	; 0x24d0 <_ZN10CardReader6initsdEv+0x192>
    24d6:	ec 01       	movw	r28, r24
    24d8:	38 83       	st	Y, r19
    24da:	31 96       	adiw	r30, 0x01	; 1
    24dc:	34 91       	lpm	r19, Z
    24de:	31 11       	cpse	r19, r1
    24e0:	f7 cf       	rjmp	.-18     	; 0x24d0 <_ZN10CardReader6initsdEv+0x192>
    24e2:	ec e6       	ldi	r30, 0x6C	; 108
    24e4:	f1 e0       	ldi	r31, 0x01	; 1
    24e6:	34 91       	lpm	r19, Z
    24e8:	33 23       	and	r19, r19
    24ea:	69 f0       	breq	.+26     	; 0x2506 <_ZN10CardReader6initsdEv+0x1c8>
    24ec:	a0 ec       	ldi	r26, 0xC0	; 192
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	86 ec       	ldi	r24, 0xC6	; 198
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	2c 91       	ld	r18, X
    24f6:	25 ff       	sbrs	r18, 5
    24f8:	fd cf       	rjmp	.-6      	; 0x24f4 <_ZN10CardReader6initsdEv+0x1b6>
    24fa:	ec 01       	movw	r28, r24
    24fc:	38 83       	st	Y, r19
    24fe:	31 96       	adiw	r30, 0x01	; 1
    2500:	34 91       	lpm	r19, Z
    2502:	31 11       	cpse	r19, r1
    2504:	f7 cf       	rjmp	.-18     	; 0x24f4 <_ZN10CardReader6initsdEv+0x1b6>
    2506:	e0 ec       	ldi	r30, 0xC0	; 192
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	85 ff       	sbrs	r24, 5
    250e:	fd cf       	rjmp	.-6      	; 0x250a <_ZN10CardReader6initsdEv+0x1cc>
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	80 93 c6 00 	sts	0x00C6, r24
    2516:	c6 01       	movw	r24, r12
    2518:	80 5b       	subi	r24, 0xB0	; 176
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	2b e1       	ldi	r18, 0x1B	; 27
    251e:	f6 01       	movw	r30, r12
    2520:	f3 96       	adiw	r30, 0x33	; 51
    2522:	dc 01       	movw	r26, r24
    2524:	14 96       	adiw	r26, 0x04	; 4
    2526:	01 90       	ld	r0, Z+
    2528:	0d 92       	st	X+, r0
    252a:	2a 95       	dec	r18
    252c:	e1 f7       	brne	.-8      	; 0x2526 <_ZN10CardReader6initsdEv+0x1e8>
    252e:	f6 01       	movw	r30, r12
    2530:	21 a9       	ldd	r18, Z+49	; 0x31
    2532:	32 a9       	ldd	r19, Z+50	; 0x32
    2534:	ec 01       	movw	r28, r24
    2536:	3b 83       	std	Y+3, r19	; 0x03
    2538:	2a 83       	std	Y+2, r18	; 0x02
    253a:	e2 5b       	subi	r30, 0xB2	; 178
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	e6 01       	movw	r28, r12
    2540:	af 96       	adiw	r28, 0x2f	; 47
    2542:	d1 83       	std	Z+1, r29	; 0x01
    2544:	c0 83       	st	Z, r28
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	08 95       	ret

00002558 <_ZN10CardReader7releaseEv>:
void CardReader::release()
{
  sdprinting = false;
    2558:	fc 01       	movw	r30, r24
    255a:	12 82       	std	Z+2, r1	; 0x02
  cardOK = false;
    255c:	13 82       	std	Z+3, r1	; 0x03
    255e:	08 95       	ret

00002560 <_ZN10CardReader14startFileprintEv>:
}

void CardReader::startFileprint()
{
  if(cardOK)
    2560:	fc 01       	movw	r30, r24
    2562:	23 81       	ldd	r18, Z+3	; 0x03
    2564:	22 23       	and	r18, r18
    2566:	11 f0       	breq	.+4      	; 0x256c <_ZN10CardReader14startFileprintEv+0xc>
  {
    sdprinting = true;
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	22 83       	std	Z+2, r18	; 0x02
    256c:	08 95       	ret

0000256e <_ZN10CardReader12pauseSDPrintEv>:
  }
}

void CardReader::pauseSDPrint()
{
  if(sdprinting)
    256e:	fc 01       	movw	r30, r24
    2570:	22 81       	ldd	r18, Z+2	; 0x02
    2572:	21 11       	cpse	r18, r1
  {
    sdprinting = false;
    2574:	12 82       	std	Z+2, r1	; 0x02
    2576:	08 95       	ret

00002578 <_ZN10CardReader8openFileEPcb>:
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
{
    2578:	2f 92       	push	r2
    257a:	3f 92       	push	r3
    257c:	4f 92       	push	r4
    257e:	5f 92       	push	r5
    2580:	6f 92       	push	r6
    2582:	7f 92       	push	r7
    2584:	8f 92       	push	r8
    2586:	9f 92       	push	r9
    2588:	af 92       	push	r10
    258a:	bf 92       	push	r11
    258c:	cf 92       	push	r12
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	e0 97       	sbiw	r28, 0x30	; 48
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	3c 01       	movw	r6, r24
    25ae:	2b 01       	movw	r4, r22
    25b0:	34 2e       	mov	r3, r20
  if(!cardOK)
    25b2:	dc 01       	movw	r26, r24
    25b4:	13 96       	adiw	r26, 0x03	; 3
    25b6:	8c 91       	ld	r24, X
    25b8:	88 23       	and	r24, r24
    25ba:	09 f4       	brne	.+2      	; 0x25be <_ZN10CardReader8openFileEPcb+0x46>
    25bc:	7a c2       	rjmp	.+1268   	; 0x2ab2 <_ZN10CardReader8openFileEPcb+0x53a>
    return;
  file.close();
    25be:	f3 01       	movw	r30, r6
    25c0:	e2 53       	subi	r30, 0x32	; 50
    25c2:	fe 4f       	sbci	r31, 0xFE	; 254
    25c4:	f8 ab       	std	Y+48, r31	; 0x30
    25c6:	ef a7       	std	Y+47, r30	; 0x2f
    25c8:	cf 01       	movw	r24, r30
    25ca:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
  sdprinting = false;
    25ce:	d3 01       	movw	r26, r6
    25d0:	12 96       	adiw	r26, 0x02	; 2
    25d2:	1c 92       	st	X, r1
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    25d4:	1d 82       	std	Y+5, r1	; 0x05
    25d6:	18 86       	std	Y+8, r1	; 0x08
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    25d8:	1c 82       	std	Y+4, r1	; 0x04
    25da:	1b 82       	std	Y+3, r1	; 0x03
 * \class SdFile
 * \brief SdBaseFile with Print.
 */
class SdFile : public SdBaseFile, public Print {
 public:
  SdFile() {}
    25dc:	8a e2       	ldi	r24, 0x2A	; 42
    25de:	94 e0       	ldi	r25, 0x04	; 4
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
  
  
  SdFile myDir;
  curDir=&root;
    25e4:	f3 01       	movw	r30, r6
    25e6:	e2 5b       	subi	r30, 0xB2	; 178
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	c3 01       	movw	r24, r6
    25ec:	8f 96       	adiw	r24, 0x2f	; 47
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
  char *fname=name;
  
  char *dirname_start,*dirname_end;
  if(name[0]=='/')
    25f2:	f2 01       	movw	r30, r4
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 32       	cpi	r24, 0x2F	; 47
    25f8:	09 f0       	breq	.+2      	; 0x25fc <_ZN10CardReader8openFileEPcb+0x84>
    25fa:	c3 c0       	rjmp	.+390    	; 0x2782 <_ZN10CardReader8openFileEPcb+0x20a>
  {
    dirname_start=strchr(name,'/')+1;
    25fc:	6f e2       	ldi	r22, 0x2F	; 47
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	c2 01       	movw	r24, r4
    2602:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	6c 01       	movw	r12, r24
    while(dirname_start>0)
    260a:	09 f4       	brne	.+2      	; 0x260e <_ZN10CardReader8openFileEPcb+0x96>
    260c:	c4 c0       	rjmp	.+392    	; 0x2796 <_ZN10CardReader8openFileEPcb+0x21e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    260e:	00 ec       	ldi	r16, 0xC0	; 192
    2610:	10 e0       	ldi	r17, 0x00	; 0
        ;

      M_UDRx = c;
    2612:	0f 2e       	mov	r0, r31
    2614:	f6 ec       	ldi	r31, 0xC6	; 198
    2616:	ef 2e       	mov	r14, r31
    2618:	f1 2c       	mov	r15, r1
    261a:	f0 2d       	mov	r31, r0
    261c:	0f 2e       	mov	r0, r31
    261e:	fa e0       	ldi	r31, 0x0A	; 10
    2620:	2f 2e       	mov	r2, r31
    2622:	f0 2d       	mov	r31, r0
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
        subdirname[dirname_end-dirname_start]=0;
        SERIAL_ECHOLN(subdirname);
        if(!myDir.open(curDir,subdirname,O_READ))
    2624:	c3 01       	movw	r24, r6
    2626:	82 5b       	subi	r24, 0xB2	; 178
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	9e a7       	std	Y+46, r25	; 0x2e
    262c:	8d a7       	std	Y+45, r24	; 0x2d
  if(name[0]=='/')
  {
    dirname_start=strchr(name,'/')+1;
    while(dirname_start>0)
    {
      dirname_end=strchr(dirname_start,'/');
    262e:	6f e2       	ldi	r22, 0x2F	; 47
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	c6 01       	movw	r24, r12
    2634:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2638:	5c 01       	movw	r10, r24
      //SERIAL_ECHO("start:");SERIAL_ECHOLN((int)(dirname_start-name));
      //SERIAL_ECHO("end  :");SERIAL_ECHOLN((int)(dirname_end-name));
      if(dirname_end>0 && dirname_end>dirname_start)
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	09 f4       	brne	.+2      	; 0x2640 <_ZN10CardReader8openFileEPcb+0xc8>
    263e:	ac c0       	rjmp	.+344    	; 0x2798 <_ZN10CardReader8openFileEPcb+0x220>
    2640:	c8 16       	cp	r12, r24
    2642:	d9 06       	cpc	r13, r25
    2644:	08 f0       	brcs	.+2      	; 0x2648 <_ZN10CardReader8openFileEPcb+0xd0>
    2646:	a8 c0       	rjmp	.+336    	; 0x2798 <_ZN10CardReader8openFileEPcb+0x220>
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
    2648:	4c 01       	movw	r8, r24
    264a:	8c 18       	sub	r8, r12
    264c:	9d 08       	sbc	r9, r13
    264e:	a4 01       	movw	r20, r8
    2650:	b6 01       	movw	r22, r12
    2652:	ce 01       	movw	r24, r28
    2654:	80 96       	adiw	r24, 0x20	; 32
    2656:	0e 94 41 c4 	call	0x18882	; 0x18882 <strncpy>
        subdirname[dirname_end-dirname_start]=0;
    265a:	e0 e2       	ldi	r30, 0x20	; 32
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	ec 0f       	add	r30, r28
    2660:	fd 1f       	adc	r31, r29
    2662:	e8 0d       	add	r30, r8
    2664:	f9 1d       	adc	r31, r9
    2666:	10 82       	st	Z, r1
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2668:	98 a1       	ldd	r25, Y+32	; 0x20
    266a:	99 23       	and	r25, r25
    266c:	59 f0       	breq	.+22     	; 0x2684 <_ZN10CardReader8openFileEPcb+0x10c>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    266e:	fe 01       	movw	r30, r28
    2670:	b1 96       	adiw	r30, 0x21	; 33
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2672:	d8 01       	movw	r26, r16
    2674:	8c 91       	ld	r24, X
    2676:	85 ff       	sbrs	r24, 5
    2678:	fc cf       	rjmp	.-8      	; 0x2672 <_ZN10CardReader8openFileEPcb+0xfa>
        ;

      M_UDRx = c;
    267a:	d7 01       	movw	r26, r14
    267c:	9c 93       	st	X, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    267e:	91 91       	ld	r25, Z+
    2680:	91 11       	cpse	r25, r1
    2682:	f7 cf       	rjmp	.-18     	; 0x2672 <_ZN10CardReader8openFileEPcb+0xfa>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2684:	f8 01       	movw	r30, r16
    2686:	80 81       	ld	r24, Z
    2688:	85 ff       	sbrs	r24, 5
    268a:	fc cf       	rjmp	.-8      	; 0x2684 <_ZN10CardReader8openFileEPcb+0x10c>
        ;

      M_UDRx = c;
    268c:	d7 01       	movw	r26, r14
    268e:	2c 92       	st	X, r2
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
        subdirname[dirname_end-dirname_start]=0;
        SERIAL_ECHOLN(subdirname);
        if(!myDir.open(curDir,subdirname,O_READ))
    2690:	ed a5       	ldd	r30, Y+45	; 0x2d
    2692:	fe a5       	ldd	r31, Y+46	; 0x2e
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	61 15       	cp	r22, r1
    269a:	71 05       	cpc	r23, r1
    269c:	19 f0       	breq	.+6      	; 0x26a4 <_ZN10CardReader8openFileEPcb+0x12c>
    269e:	6c 5f       	subi	r22, 0xFC	; 252
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <_ZN10CardReader8openFileEPcb+0x130>
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	21 e0       	ldi	r18, 0x01	; 1
    26aa:	ae 01       	movw	r20, r28
    26ac:	40 5e       	subi	r20, 0xE0	; 224
    26ae:	5f 4f       	sbci	r21, 0xFF	; 255
    26b0:	ce 01       	movw	r24, r28
    26b2:	05 96       	adiw	r24, 0x05	; 5
    26b4:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    26b8:	81 11       	cpse	r24, r1
    26ba:	53 c0       	rjmp	.+166    	; 0x2762 <_ZN10CardReader8openFileEPcb+0x1ea>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    26bc:	e7 e7       	ldi	r30, 0x77	; 119
    26be:	f1 e0       	ldi	r31, 0x01	; 1
    26c0:	34 91       	lpm	r19, Z
  while(ch)
    26c2:	33 23       	and	r19, r19
    26c4:	81 f0       	breq	.+32     	; 0x26e6 <_ZN10CardReader8openFileEPcb+0x16e>
    26c6:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    26c8:	a0 ec       	ldi	r26, 0xC0	; 192
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    26cc:	86 ec       	ldi	r24, 0xC6	; 198
    26ce:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    26d0:	2c 91       	ld	r18, X
    26d2:	25 ff       	sbrs	r18, 5
    26d4:	fd cf       	rjmp	.-6      	; 0x26d0 <_ZN10CardReader8openFileEPcb+0x158>
        ;

      M_UDRx = c;
    26d6:	fc 01       	movw	r30, r24
    26d8:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    26da:	4f 5f       	subi	r20, 0xFF	; 255
    26dc:	5f 4f       	sbci	r21, 0xFF	; 255
    26de:	fa 01       	movw	r30, r20
    26e0:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    26e2:	31 11       	cpse	r19, r1
    26e4:	f5 cf       	rjmp	.-22     	; 0x26d0 <_ZN10CardReader8openFileEPcb+0x158>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    26e6:	38 a1       	ldd	r19, Y+32	; 0x20
    26e8:	33 23       	and	r19, r19
    26ea:	89 f0       	breq	.+34     	; 0x270e <_ZN10CardReader8openFileEPcb+0x196>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    26ec:	ae 01       	movw	r20, r28
    26ee:	4f 5d       	subi	r20, 0xDF	; 223
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    26f2:	e0 ec       	ldi	r30, 0xC0	; 192
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    26f6:	86 ec       	ldi	r24, 0xC6	; 198
    26f8:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    26fa:	20 81       	ld	r18, Z
    26fc:	25 ff       	sbrs	r18, 5
    26fe:	fd cf       	rjmp	.-6      	; 0x26fa <_ZN10CardReader8openFileEPcb+0x182>
        ;

      M_UDRx = c;
    2700:	dc 01       	movw	r26, r24
    2702:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2704:	da 01       	movw	r26, r20
    2706:	3d 91       	ld	r19, X+
    2708:	ad 01       	movw	r20, r26
    270a:	31 11       	cpse	r19, r1
    270c:	f6 cf       	rjmp	.-20     	; 0x26fa <_ZN10CardReader8openFileEPcb+0x182>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    270e:	eb e8       	ldi	r30, 0x8B	; 139
    2710:	f1 e0       	ldi	r31, 0x01	; 1
    2712:	34 91       	lpm	r19, Z
  while(ch)
    2714:	33 23       	and	r19, r19
    2716:	81 f0       	breq	.+32     	; 0x2738 <_ZN10CardReader8openFileEPcb+0x1c0>
    2718:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    271a:	a0 ec       	ldi	r26, 0xC0	; 192
    271c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    271e:	86 ec       	ldi	r24, 0xC6	; 198
    2720:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2722:	2c 91       	ld	r18, X
    2724:	25 ff       	sbrs	r18, 5
    2726:	fd cf       	rjmp	.-6      	; 0x2722 <_ZN10CardReader8openFileEPcb+0x1aa>
        ;

      M_UDRx = c;
    2728:	fc 01       	movw	r30, r24
    272a:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    272c:	4f 5f       	subi	r20, 0xFF	; 255
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	fa 01       	movw	r30, r20
    2732:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2734:	31 11       	cpse	r19, r1
    2736:	f5 cf       	rjmp	.-22     	; 0x2722 <_ZN10CardReader8openFileEPcb+0x1aa>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2738:	e0 ec       	ldi	r30, 0xC0	; 192
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	85 ff       	sbrs	r24, 5
    2740:	fd cf       	rjmp	.-6      	; 0x273c <_ZN10CardReader8openFileEPcb+0x1c4>
        ;

      M_UDRx = c;
    2742:	8a e0       	ldi	r24, 0x0A	; 10
    2744:	80 93 c6 00 	sts	0x00C6, r24
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief SdBaseFile with Print.
 */
class SdFile : public SdBaseFile, public Print {
    2748:	8a e2       	ldi	r24, 0x2A	; 42
    274a:	94 e0       	ldi	r25, 0x04	; 4
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    2750:	88 85       	ldd	r24, Y+8	; 0x08
    2752:	88 23       	and	r24, r24
    2754:	09 f4       	brne	.+2      	; 0x2758 <_ZN10CardReader8openFileEPcb+0x1e0>
    2756:	ad c1       	rjmp	.+858    	; 0x2ab2 <_ZN10CardReader8openFileEPcb+0x53a>
    2758:	ce 01       	movw	r24, r28
    275a:	05 96       	adiw	r24, 0x05	; 5
    275c:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    2760:	a8 c1       	rjmp	.+848    	; 0x2ab2 <_ZN10CardReader8openFileEPcb+0x53a>
        else
        {
          //SERIAL_ECHOLN("dive ok");
        }
          
        curDir=&myDir; 
    2762:	e1 e0       	ldi	r30, 0x01	; 1
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	ec 0f       	add	r30, r28
    2768:	fd 1f       	adc	r31, r29
    276a:	ad a5       	ldd	r26, Y+45	; 0x2d
    276c:	be a5       	ldd	r27, Y+46	; 0x2e
    276e:	ed 93       	st	X+, r30
    2770:	fc 93       	st	X, r31
        dirname_start=dirname_end+1;
    2772:	65 01       	movw	r12, r10
    2774:	ff ef       	ldi	r31, 0xFF	; 255
    2776:	cf 1a       	sub	r12, r31
    2778:	df 0a       	sbc	r13, r31
  
  char *dirname_start,*dirname_end;
  if(name[0]=='/')
  {
    dirname_start=strchr(name,'/')+1;
    while(dirname_start>0)
    277a:	09 f0       	breq	.+2      	; 0x277e <_ZN10CardReader8openFileEPcb+0x206>
    277c:	58 cf       	rjmp	.-336    	; 0x262e <_ZN10CardReader8openFileEPcb+0xb6>
  sdprinting = false;
  
  
  SdFile myDir;
  curDir=&root;
  char *fname=name;
    277e:	62 01       	movw	r12, r4
    2780:	0b c0       	rjmp	.+22     	; 0x2798 <_ZN10CardReader8openFileEPcb+0x220>
      
    }
  }
  else //relative path
  {
    curDir=&workDir;
    2782:	f3 01       	movw	r30, r6
    2784:	e2 5b       	subi	r30, 0xB2	; 178
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	c3 01       	movw	r24, r6
    278a:	80 5b       	subi	r24, 0xB0	; 176
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
  sdprinting = false;
  
  
  SdFile myDir;
  curDir=&root;
  char *fname=name;
    2792:	62 01       	movw	r12, r4
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <_ZN10CardReader8openFileEPcb+0x220>
    2796:	62 01       	movw	r12, r4
  }
  else //relative path
  {
    curDir=&workDir;
  }
  if(read)
    2798:	33 20       	and	r3, r3
    279a:	09 f4       	brne	.+2      	; 0x279e <_ZN10CardReader8openFileEPcb+0x226>
    279c:	ea c0       	rjmp	.+468    	; 0x2972 <_ZN10CardReader8openFileEPcb+0x3fa>
  {
    if (file.open(curDir, fname, O_READ)) 
    279e:	f3 01       	movw	r30, r6
    27a0:	e2 5b       	subi	r30, 0xB2	; 178
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	21 f0       	breq	.+8      	; 0x27b4 <_ZN10CardReader8openFileEPcb+0x23c>
    27ac:	bc 01       	movw	r22, r24
    27ae:	6c 5f       	subi	r22, 0xFC	; 252
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <_ZN10CardReader8openFileEPcb+0x240>
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	21 e0       	ldi	r18, 0x01	; 1
    27ba:	a6 01       	movw	r20, r12
    27bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27be:	98 a9       	ldd	r25, Y+48	; 0x30
    27c0:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <_ZN10CardReader8openFileEPcb+0x252>
    27c8:	8c c0       	rjmp	.+280    	; 0x28e2 <_ZN10CardReader8openFileEPcb+0x36a>
    {
      filesize = file.fileSize();
    27ca:	f3 01       	movw	r30, r6
    27cc:	e7 51       	subi	r30, 0x17	; 23
    27ce:	fe 4f       	sbci	r31, 0xFE	; 254
  bool dirEntry(dir_t* dir);
  static void dirName(const dir_t& dir, char* name);
  bool exists(const char* name);
  int16_t fgets(char* str, int16_t num, char* delim = 0);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize() const {return fileSize_;}
    27d0:	d3 01       	movw	r26, r6
    27d2:	a2 53       	subi	r26, 0x32	; 50
    27d4:	be 4f       	sbci	r27, 0xFE	; 254
    27d6:	51 96       	adiw	r26, 0x11	; 17
    27d8:	8d 91       	ld	r24, X+
    27da:	9d 91       	ld	r25, X+
    27dc:	0d 90       	ld	r0, X+
    27de:	bc 91       	ld	r27, X
    27e0:	a0 2d       	mov	r26, r0
    27e2:	80 83       	st	Z, r24
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	a2 83       	std	Z+2, r26	; 0x02
    27e8:	b3 83       	std	Z+3, r27	; 0x03


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    27ea:	ed e8       	ldi	r30, 0x8D	; 141
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	34 91       	lpm	r19, Z
  while(ch)
    27f0:	33 23       	and	r19, r19
    27f2:	81 f0       	breq	.+32     	; 0x2814 <_ZN10CardReader8openFileEPcb+0x29c>
    27f4:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    27f6:	a0 ec       	ldi	r26, 0xC0	; 192
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    27fa:	86 ec       	ldi	r24, 0xC6	; 198
    27fc:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    27fe:	2c 91       	ld	r18, X
    2800:	25 ff       	sbrs	r18, 5
    2802:	fd cf       	rjmp	.-6      	; 0x27fe <_ZN10CardReader8openFileEPcb+0x286>
        ;

      M_UDRx = c;
    2804:	fc 01       	movw	r30, r24
    2806:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2808:	4f 5f       	subi	r20, 0xFF	; 255
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	fa 01       	movw	r30, r20
    280e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2810:	31 11       	cpse	r19, r1
    2812:	f5 cf       	rjmp	.-22     	; 0x27fe <_ZN10CardReader8openFileEPcb+0x286>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2814:	d6 01       	movw	r26, r12
    2816:	3c 91       	ld	r19, X
    2818:	33 23       	and	r19, r19
    281a:	89 f0       	breq	.+34     	; 0x283e <_ZN10CardReader8openFileEPcb+0x2c6>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    281c:	a6 01       	movw	r20, r12
    281e:	4f 5f       	subi	r20, 0xFF	; 255
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2822:	e0 ec       	ldi	r30, 0xC0	; 192
    2824:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    2826:	86 ec       	ldi	r24, 0xC6	; 198
    2828:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    282a:	20 81       	ld	r18, Z
    282c:	25 ff       	sbrs	r18, 5
    282e:	fd cf       	rjmp	.-6      	; 0x282a <_ZN10CardReader8openFileEPcb+0x2b2>
        ;

      M_UDRx = c;
    2830:	dc 01       	movw	r26, r24
    2832:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2834:	da 01       	movw	r26, r20
    2836:	3d 91       	ld	r19, X+
    2838:	ad 01       	movw	r20, r26
    283a:	31 11       	cpse	r19, r1
    283c:	f6 cf       	rjmp	.-20     	; 0x282a <_ZN10CardReader8openFileEPcb+0x2b2>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    283e:	eb e9       	ldi	r30, 0x9B	; 155
    2840:	f1 e0       	ldi	r31, 0x01	; 1
    2842:	34 91       	lpm	r19, Z
  while(ch)
    2844:	33 23       	and	r19, r19
    2846:	81 f0       	breq	.+32     	; 0x2868 <_ZN10CardReader8openFileEPcb+0x2f0>
    2848:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    284a:	a0 ec       	ldi	r26, 0xC0	; 192
    284c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    284e:	86 ec       	ldi	r24, 0xC6	; 198
    2850:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2852:	2c 91       	ld	r18, X
    2854:	25 ff       	sbrs	r18, 5
    2856:	fd cf       	rjmp	.-6      	; 0x2852 <_ZN10CardReader8openFileEPcb+0x2da>
        ;

      M_UDRx = c;
    2858:	fc 01       	movw	r30, r24
    285a:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    285c:	4f 5f       	subi	r20, 0xFF	; 255
    285e:	5f 4f       	sbci	r21, 0xFF	; 255
    2860:	fa 01       	movw	r30, r20
    2862:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2864:	31 11       	cpse	r19, r1
    2866:	f5 cf       	rjmp	.-22     	; 0x2852 <_ZN10CardReader8openFileEPcb+0x2da>
    {
      filesize = file.fileSize();
      SERIAL_PROTOCOLPGM(MSG_SD_FILE_OPENED);
      SERIAL_PROTOCOL(fname);
      SERIAL_PROTOCOLPGM(MSG_SD_SIZE);
      SERIAL_PROTOCOLLN(filesize);
    2868:	f3 01       	movw	r30, r6
    286a:	e7 51       	subi	r30, 0x17	; 23
    286c:	fe 4f       	sbci	r31, 0xFE	; 254
    286e:	40 81       	ld	r20, Z
    2870:	51 81       	ldd	r21, Z+1	; 0x01
    2872:	62 81       	ldd	r22, Z+2	; 0x02
    2874:	73 81       	ldd	r23, Z+3	; 0x03
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	82 ed       	ldi	r24, 0xD2	; 210
    287c:	94 e0       	ldi	r25, 0x04	; 4
    287e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN12MarlinSerial5printEmi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2882:	e0 ec       	ldi	r30, 0xC0	; 192
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	85 ff       	sbrs	r24, 5
    288a:	fd cf       	rjmp	.-6      	; 0x2886 <_ZN10CardReader8openFileEPcb+0x30e>
        ;

      M_UDRx = c;
    288c:	8a e0       	ldi	r24, 0x0A	; 10
    288e:	80 93 c6 00 	sts	0x00C6, r24
      sdpos = 0;
    2892:	f3 01       	movw	r30, r6
    2894:	ef 50       	subi	r30, 0x0F	; 15
    2896:	fe 4f       	sbci	r31, 0xFE	; 254
    2898:	10 82       	st	Z, r1
    289a:	11 82       	std	Z+1, r1	; 0x01
    289c:	12 82       	std	Z+2, r1	; 0x02
    289e:	13 82       	std	Z+3, r1	; 0x03


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    28a0:	e3 ea       	ldi	r30, 0xA3	; 163
    28a2:	f1 e0       	ldi	r31, 0x01	; 1
    28a4:	34 91       	lpm	r19, Z
  while(ch)
    28a6:	33 23       	and	r19, r19
    28a8:	81 f0       	breq	.+32     	; 0x28ca <_ZN10CardReader8openFileEPcb+0x352>
    28aa:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    28ac:	a0 ec       	ldi	r26, 0xC0	; 192
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    28b0:	86 ec       	ldi	r24, 0xC6	; 198
    28b2:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    28b4:	2c 91       	ld	r18, X
    28b6:	25 ff       	sbrs	r18, 5
    28b8:	fd cf       	rjmp	.-6      	; 0x28b4 <_ZN10CardReader8openFileEPcb+0x33c>
        ;

      M_UDRx = c;
    28ba:	fc 01       	movw	r30, r24
    28bc:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    28be:	4f 5f       	subi	r20, 0xFF	; 255
    28c0:	5f 4f       	sbci	r21, 0xFF	; 255
    28c2:	fa 01       	movw	r30, r20
    28c4:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    28c6:	31 11       	cpse	r19, r1
    28c8:	f5 cf       	rjmp	.-22     	; 0x28b4 <_ZN10CardReader8openFileEPcb+0x33c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    28ca:	e0 ec       	ldi	r30, 0xC0	; 192
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	85 ff       	sbrs	r24, 5
    28d2:	fd cf       	rjmp	.-6      	; 0x28ce <_ZN10CardReader8openFileEPcb+0x356>
        ;

      M_UDRx = c;
    28d4:	8a e0       	ldi	r24, 0x0A	; 10
    28d6:	80 93 c6 00 	sts	0x00C6, r24
      
      SERIAL_PROTOCOLLNPGM(MSG_SD_FILE_SELECTED);
      lcd_setstatus(fname);
    28da:	c6 01       	movw	r24, r12
    28dc:	0e 94 28 94 	call	0x12850	; 0x12850 <_Z13lcd_setstatusPKc>
    28e0:	dd c0       	rjmp	.+442    	; 0x2a9c <_ZN10CardReader8openFileEPcb+0x524>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    28e2:	e1 eb       	ldi	r30, 0xB1	; 177
    28e4:	f1 e0       	ldi	r31, 0x01	; 1
    28e6:	34 91       	lpm	r19, Z
  while(ch)
    28e8:	33 23       	and	r19, r19
    28ea:	81 f0       	breq	.+32     	; 0x290c <_ZN10CardReader8openFileEPcb+0x394>
    28ec:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    28ee:	a0 ec       	ldi	r26, 0xC0	; 192
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    28f2:	86 ec       	ldi	r24, 0xC6	; 198
    28f4:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    28f6:	2c 91       	ld	r18, X
    28f8:	25 ff       	sbrs	r18, 5
    28fa:	fd cf       	rjmp	.-6      	; 0x28f6 <_ZN10CardReader8openFileEPcb+0x37e>
        ;

      M_UDRx = c;
    28fc:	fc 01       	movw	r30, r24
    28fe:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2900:	4f 5f       	subi	r20, 0xFF	; 255
    2902:	5f 4f       	sbci	r21, 0xFF	; 255
    2904:	fa 01       	movw	r30, r20
    2906:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2908:	31 11       	cpse	r19, r1
    290a:	f5 cf       	rjmp	.-22     	; 0x28f6 <_ZN10CardReader8openFileEPcb+0x37e>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    290c:	d6 01       	movw	r26, r12
    290e:	3c 91       	ld	r19, X
    2910:	33 23       	and	r19, r19
    2912:	89 f0       	breq	.+34     	; 0x2936 <_ZN10CardReader8openFileEPcb+0x3be>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    2914:	bf ef       	ldi	r27, 0xFF	; 255
    2916:	cb 1a       	sub	r12, r27
    2918:	db 0a       	sbc	r13, r27
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    291a:	e0 ec       	ldi	r30, 0xC0	; 192
    291c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    291e:	86 ec       	ldi	r24, 0xC6	; 198
    2920:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2922:	20 81       	ld	r18, Z
    2924:	25 ff       	sbrs	r18, 5
    2926:	fd cf       	rjmp	.-6      	; 0x2922 <_ZN10CardReader8openFileEPcb+0x3aa>
        ;

      M_UDRx = c;
    2928:	dc 01       	movw	r26, r24
    292a:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    292c:	d6 01       	movw	r26, r12
    292e:	3d 91       	ld	r19, X+
    2930:	6d 01       	movw	r12, r26
    2932:	31 11       	cpse	r19, r1
    2934:	f6 cf       	rjmp	.-20     	; 0x2922 <_ZN10CardReader8openFileEPcb+0x3aa>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2936:	e5 ec       	ldi	r30, 0xC5	; 197
    2938:	f1 e0       	ldi	r31, 0x01	; 1
    293a:	34 91       	lpm	r19, Z
  while(ch)
    293c:	33 23       	and	r19, r19
    293e:	81 f0       	breq	.+32     	; 0x2960 <_ZN10CardReader8openFileEPcb+0x3e8>
    2940:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2942:	a0 ec       	ldi	r26, 0xC0	; 192
    2944:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2946:	86 ec       	ldi	r24, 0xC6	; 198
    2948:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    294a:	2c 91       	ld	r18, X
    294c:	25 ff       	sbrs	r18, 5
    294e:	fd cf       	rjmp	.-6      	; 0x294a <_ZN10CardReader8openFileEPcb+0x3d2>
        ;

      M_UDRx = c;
    2950:	fc 01       	movw	r30, r24
    2952:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2954:	4f 5f       	subi	r20, 0xFF	; 255
    2956:	5f 4f       	sbci	r21, 0xFF	; 255
    2958:	fa 01       	movw	r30, r20
    295a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    295c:	31 11       	cpse	r19, r1
    295e:	f5 cf       	rjmp	.-22     	; 0x294a <_ZN10CardReader8openFileEPcb+0x3d2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2960:	e0 ec       	ldi	r30, 0xC0	; 192
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	85 ff       	sbrs	r24, 5
    2968:	fd cf       	rjmp	.-6      	; 0x2964 <_ZN10CardReader8openFileEPcb+0x3ec>
        ;

      M_UDRx = c;
    296a:	8a e0       	ldi	r24, 0x0A	; 10
    296c:	80 93 c6 00 	sts	0x00C6, r24
    2970:	95 c0       	rjmp	.+298    	; 0x2a9c <_ZN10CardReader8openFileEPcb+0x524>
      SERIAL_PROTOCOLLNPGM(".");
    }
  }
  else 
  { //write
    if (!file.open(curDir, fname, O_CREAT | O_APPEND | O_WRITE | O_TRUNC))
    2972:	f3 01       	movw	r30, r6
    2974:	e2 5b       	subi	r30, 0xB2	; 178
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	21 f0       	breq	.+8      	; 0x2988 <_ZN10CardReader8openFileEPcb+0x410>
    2980:	bc 01       	movw	r22, r24
    2982:	6c 5f       	subi	r22, 0xFC	; 252
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	02 c0       	rjmp	.+4      	; 0x298c <_ZN10CardReader8openFileEPcb+0x414>
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	26 e5       	ldi	r18, 0x56	; 86
    298e:	a6 01       	movw	r20, r12
    2990:	8f a5       	ldd	r24, Y+47	; 0x2f
    2992:	98 a9       	ldd	r25, Y+48	; 0x30
    2994:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    2998:	81 11       	cpse	r24, r1
    299a:	48 c0       	rjmp	.+144    	; 0x2a2c <_ZN10CardReader8openFileEPcb+0x4b4>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    299c:	e7 ec       	ldi	r30, 0xC7	; 199
    299e:	f1 e0       	ldi	r31, 0x01	; 1
    29a0:	34 91       	lpm	r19, Z
  while(ch)
    29a2:	33 23       	and	r19, r19
    29a4:	81 f0       	breq	.+32     	; 0x29c6 <_ZN10CardReader8openFileEPcb+0x44e>
    29a6:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    29a8:	a0 ec       	ldi	r26, 0xC0	; 192
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    29ac:	86 ec       	ldi	r24, 0xC6	; 198
    29ae:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    29b0:	2c 91       	ld	r18, X
    29b2:	25 ff       	sbrs	r18, 5
    29b4:	fd cf       	rjmp	.-6      	; 0x29b0 <_ZN10CardReader8openFileEPcb+0x438>
        ;

      M_UDRx = c;
    29b6:	fc 01       	movw	r30, r24
    29b8:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    29ba:	4f 5f       	subi	r20, 0xFF	; 255
    29bc:	5f 4f       	sbci	r21, 0xFF	; 255
    29be:	fa 01       	movw	r30, r20
    29c0:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    29c2:	31 11       	cpse	r19, r1
    29c4:	f5 cf       	rjmp	.-22     	; 0x29b0 <_ZN10CardReader8openFileEPcb+0x438>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    29c6:	d6 01       	movw	r26, r12
    29c8:	3c 91       	ld	r19, X
    29ca:	33 23       	and	r19, r19
    29cc:	89 f0       	breq	.+34     	; 0x29f0 <_ZN10CardReader8openFileEPcb+0x478>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    29ce:	bf ef       	ldi	r27, 0xFF	; 255
    29d0:	cb 1a       	sub	r12, r27
    29d2:	db 0a       	sbc	r13, r27
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    29d4:	e0 ec       	ldi	r30, 0xC0	; 192
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    29d8:	86 ec       	ldi	r24, 0xC6	; 198
    29da:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    29dc:	20 81       	ld	r18, Z
    29de:	25 ff       	sbrs	r18, 5
    29e0:	fd cf       	rjmp	.-6      	; 0x29dc <_ZN10CardReader8openFileEPcb+0x464>
        ;

      M_UDRx = c;
    29e2:	dc 01       	movw	r26, r24
    29e4:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    29e6:	d6 01       	movw	r26, r12
    29e8:	3d 91       	ld	r19, X+
    29ea:	6d 01       	movw	r12, r26
    29ec:	31 11       	cpse	r19, r1
    29ee:	f6 cf       	rjmp	.-20     	; 0x29dc <_ZN10CardReader8openFileEPcb+0x464>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    29f0:	eb ed       	ldi	r30, 0xDB	; 219
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	34 91       	lpm	r19, Z
  while(ch)
    29f6:	33 23       	and	r19, r19
    29f8:	81 f0       	breq	.+32     	; 0x2a1a <_ZN10CardReader8openFileEPcb+0x4a2>
    29fa:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    29fc:	a0 ec       	ldi	r26, 0xC0	; 192
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2a00:	86 ec       	ldi	r24, 0xC6	; 198
    2a02:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a04:	2c 91       	ld	r18, X
    2a06:	25 ff       	sbrs	r18, 5
    2a08:	fd cf       	rjmp	.-6      	; 0x2a04 <_ZN10CardReader8openFileEPcb+0x48c>
        ;

      M_UDRx = c;
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2a0e:	4f 5f       	subi	r20, 0xFF	; 255
    2a10:	5f 4f       	sbci	r21, 0xFF	; 255
    2a12:	fa 01       	movw	r30, r20
    2a14:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2a16:	31 11       	cpse	r19, r1
    2a18:	f5 cf       	rjmp	.-22     	; 0x2a04 <_ZN10CardReader8openFileEPcb+0x48c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a1a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	85 ff       	sbrs	r24, 5
    2a22:	fd cf       	rjmp	.-6      	; 0x2a1e <_ZN10CardReader8openFileEPcb+0x4a6>
        ;

      M_UDRx = c;
    2a24:	8a e0       	ldi	r24, 0x0A	; 10
    2a26:	80 93 c6 00 	sts	0x00C6, r24
    2a2a:	38 c0       	rjmp	.+112    	; 0x2a9c <_ZN10CardReader8openFileEPcb+0x524>
      SERIAL_PROTOCOL(fname);
      SERIAL_PROTOCOLLNPGM(".");
    }
    else
    {
      saving = true;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	d3 01       	movw	r26, r6
    2a30:	8c 93       	st	X, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2a32:	ed ed       	ldi	r30, 0xDD	; 221
    2a34:	f1 e0       	ldi	r31, 0x01	; 1
    2a36:	34 91       	lpm	r19, Z
  while(ch)
    2a38:	33 23       	and	r19, r19
    2a3a:	81 f0       	breq	.+32     	; 0x2a5c <_ZN10CardReader8openFileEPcb+0x4e4>
    2a3c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a3e:	a0 ec       	ldi	r26, 0xC0	; 192
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2a42:	86 ec       	ldi	r24, 0xC6	; 198
    2a44:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a46:	2c 91       	ld	r18, X
    2a48:	25 ff       	sbrs	r18, 5
    2a4a:	fd cf       	rjmp	.-6      	; 0x2a46 <_ZN10CardReader8openFileEPcb+0x4ce>
        ;

      M_UDRx = c;
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2a50:	4f 5f       	subi	r20, 0xFF	; 255
    2a52:	5f 4f       	sbci	r21, 0xFF	; 255
    2a54:	fa 01       	movw	r30, r20
    2a56:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2a58:	31 11       	cpse	r19, r1
    2a5a:	f5 cf       	rjmp	.-22     	; 0x2a46 <_ZN10CardReader8openFileEPcb+0x4ce>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2a5c:	d2 01       	movw	r26, r4
    2a5e:	3c 91       	ld	r19, X
    2a60:	33 23       	and	r19, r19
    2a62:	89 f0       	breq	.+34     	; 0x2a86 <_ZN10CardReader8openFileEPcb+0x50e>
{
  logging = true;
  openFile(name, false);
}

void CardReader::openFile(char* name,bool read)
    2a64:	bf ef       	ldi	r27, 0xFF	; 255
    2a66:	4b 1a       	sub	r4, r27
    2a68:	5b 0a       	sbc	r5, r27
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a6a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    2a6e:	86 ec       	ldi	r24, 0xC6	; 198
    2a70:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a72:	20 81       	ld	r18, Z
    2a74:	25 ff       	sbrs	r18, 5
    2a76:	fd cf       	rjmp	.-6      	; 0x2a72 <_ZN10CardReader8openFileEPcb+0x4fa>
        ;

      M_UDRx = c;
    2a78:	dc 01       	movw	r26, r24
    2a7a:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2a7c:	d2 01       	movw	r26, r4
    2a7e:	3d 91       	ld	r19, X+
    2a80:	2d 01       	movw	r4, r26
    2a82:	31 11       	cpse	r19, r1
    2a84:	f6 cf       	rjmp	.-20     	; 0x2a72 <_ZN10CardReader8openFileEPcb+0x4fa>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2a86:	e0 ec       	ldi	r30, 0xC0	; 192
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	85 ff       	sbrs	r24, 5
    2a8e:	fd cf       	rjmp	.-6      	; 0x2a8a <_ZN10CardReader8openFileEPcb+0x512>
        ;

      M_UDRx = c;
    2a90:	8a e0       	ldi	r24, 0x0A	; 10
    2a92:	80 93 c6 00 	sts	0x00C6, r24
    else
    {
      saving = true;
      SERIAL_PROTOCOLPGM(MSG_SD_WRITE_TO_FILE);
      SERIAL_PROTOCOLLN(name);
      lcd_setstatus(fname);
    2a96:	c6 01       	movw	r24, r12
    2a98:	0e 94 28 94 	call	0x12850	; 0x12850 <_Z13lcd_setstatusPKc>
    2a9c:	8a e2       	ldi	r24, 0x2A	; 42
    2a9e:	94 e0       	ldi	r25, 0x04	; 4
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    2aa4:	88 85       	ldd	r24, Y+8	; 0x08
    2aa6:	88 23       	and	r24, r24
    2aa8:	21 f0       	breq	.+8      	; 0x2ab2 <_ZN10CardReader8openFileEPcb+0x53a>
    2aaa:	ce 01       	movw	r24, r28
    2aac:	05 96       	adiw	r24, 0x05	; 5
    2aae:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    }
  }
  
}
    2ab2:	e0 96       	adiw	r28, 0x30	; 48
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	bf 90       	pop	r11
    2ad0:	af 90       	pop	r10
    2ad2:	9f 90       	pop	r9
    2ad4:	8f 90       	pop	r8
    2ad6:	7f 90       	pop	r7
    2ad8:	6f 90       	pop	r6
    2ada:	5f 90       	pop	r5
    2adc:	4f 90       	pop	r4
    2ade:	3f 90       	pop	r3
    2ae0:	2f 90       	pop	r2
    2ae2:	08 95       	ret

00002ae4 <_ZN10CardReader11openLogFileEPc>:
}


void CardReader::openLogFile(char* name)
{
  logging = true;
    2ae4:	21 e0       	ldi	r18, 0x01	; 1
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	21 83       	std	Z+1, r18	; 0x01
  openFile(name, false);
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	45 cd       	rjmp	.-1398   	; 0x2578 <_ZN10CardReader8openFileEPcb>

00002aee <_ZN10CardReader10removeFileEPc>:
  }
  
}

void CardReader::removeFile(char* name)
{
    2aee:	2f 92       	push	r2
    2af0:	3f 92       	push	r3
    2af2:	4f 92       	push	r4
    2af4:	5f 92       	push	r5
    2af6:	6f 92       	push	r6
    2af8:	7f 92       	push	r7
    2afa:	8f 92       	push	r8
    2afc:	9f 92       	push	r9
    2afe:	af 92       	push	r10
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	ac 97       	sbiw	r28, 0x2c	; 44
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	3c 01       	movw	r6, r24
    2b24:	2b 01       	movw	r4, r22
  if(!cardOK)
    2b26:	dc 01       	movw	r26, r24
    2b28:	13 96       	adiw	r26, 0x03	; 3
    2b2a:	8c 91       	ld	r24, X
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <_ZN10CardReader10removeFileEPc+0x44>
    2b30:	76 c1       	rjmp	.+748    	; 0x2e1e <_ZN10CardReader10removeFileEPc+0x330>
    return;
  file.close();
    2b32:	c3 01       	movw	r24, r6
    2b34:	82 53       	subi	r24, 0x32	; 50
    2b36:	9e 4f       	sbci	r25, 0xFE	; 254
    2b38:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
  sdprinting = false;
    2b3c:	f3 01       	movw	r30, r6
    2b3e:	12 82       	std	Z+2, r1	; 0x02
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    2b40:	1d 82       	std	Y+5, r1	; 0x05
    2b42:	18 86       	std	Y+8, r1	; 0x08
    2b44:	1c 82       	std	Y+4, r1	; 0x04
    2b46:	1b 82       	std	Y+3, r1	; 0x03
 public:
  SdFile() {}
    2b48:	8a e2       	ldi	r24, 0x2A	; 42
    2b4a:	94 e0       	ldi	r25, 0x04	; 4
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
  
  
  SdFile myDir;
  curDir=&root;
    2b50:	e2 5b       	subi	r30, 0xB2	; 178
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	c3 01       	movw	r24, r6
    2b56:	8f 96       	adiw	r24, 0x2f	; 47
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
  char *fname=name;
  
  char *dirname_start,*dirname_end;
  if(name[0]=='/')
    2b5c:	d2 01       	movw	r26, r4
    2b5e:	8c 91       	ld	r24, X
    2b60:	8f 32       	cpi	r24, 0x2F	; 47
    2b62:	09 f0       	breq	.+2      	; 0x2b66 <_ZN10CardReader10removeFileEPc+0x78>
    2b64:	bc c0       	rjmp	.+376    	; 0x2cde <_ZN10CardReader10removeFileEPc+0x1f0>
  {
    dirname_start=strchr(name,'/')+1;
    2b66:	6f e2       	ldi	r22, 0x2F	; 47
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	c2 01       	movw	r24, r4
    2b6c:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	6c 01       	movw	r12, r24
    while(dirname_start>0)
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <_ZN10CardReader10removeFileEPc+0x8a>
    2b76:	bf c0       	rjmp	.+382    	; 0x2cf6 <_ZN10CardReader10removeFileEPc+0x208>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2b78:	00 ec       	ldi	r16, 0xC0	; 192
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
        ;

      M_UDRx = c;
    2b7c:	0f 2e       	mov	r0, r31
    2b7e:	f6 ec       	ldi	r31, 0xC6	; 198
    2b80:	ef 2e       	mov	r14, r31
    2b82:	f1 2c       	mov	r15, r1
    2b84:	f0 2d       	mov	r31, r0
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
        subdirname[dirname_end-dirname_start]=0;
        SERIAL_ECHOLN(subdirname);
        if(!myDir.open(curDir,subdirname,O_READ))
    2b86:	13 01       	movw	r2, r6
    2b88:	be e4       	ldi	r27, 0x4E	; 78
    2b8a:	2b 0e       	add	r2, r27
    2b8c:	31 1c       	adc	r3, r1
  if(name[0]=='/')
  {
    dirname_start=strchr(name,'/')+1;
    while(dirname_start>0)
    {
      dirname_end=strchr(dirname_start,'/');
    2b8e:	6f e2       	ldi	r22, 0x2F	; 47
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	c6 01       	movw	r24, r12
    2b94:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2b98:	5c 01       	movw	r10, r24
      //SERIAL_ECHO("start:");SERIAL_ECHOLN((int)(dirname_start-name));
      //SERIAL_ECHO("end  :");SERIAL_ECHOLN((int)(dirname_end-name));
      if(dirname_end>0 && dirname_end>dirname_start)
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <_ZN10CardReader10removeFileEPc+0xb2>
    2b9e:	a8 c0       	rjmp	.+336    	; 0x2cf0 <_ZN10CardReader10removeFileEPc+0x202>
    2ba0:	c8 16       	cp	r12, r24
    2ba2:	d9 06       	cpc	r13, r25
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <_ZN10CardReader10removeFileEPc+0xba>
    2ba6:	a6 c0       	rjmp	.+332    	; 0x2cf4 <_ZN10CardReader10removeFileEPc+0x206>
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
    2ba8:	4c 01       	movw	r8, r24
    2baa:	8c 18       	sub	r8, r12
    2bac:	9d 08       	sbc	r9, r13
    2bae:	a4 01       	movw	r20, r8
    2bb0:	b6 01       	movw	r22, r12
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	80 96       	adiw	r24, 0x20	; 32
    2bb6:	0e 94 41 c4 	call	0x18882	; 0x18882 <strncpy>
        subdirname[dirname_end-dirname_start]=0;
    2bba:	e0 e2       	ldi	r30, 0x20	; 32
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	ec 0f       	add	r30, r28
    2bc0:	fd 1f       	adc	r31, r29
    2bc2:	e8 0d       	add	r30, r8
    2bc4:	f9 1d       	adc	r31, r9
    2bc6:	10 82       	st	Z, r1
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2bc8:	98 a1       	ldd	r25, Y+32	; 0x20
    2bca:	99 23       	and	r25, r25
    2bcc:	59 f0       	breq	.+22     	; 0x2be4 <_ZN10CardReader10removeFileEPc+0xf6>
    }
  }
  
}

void CardReader::removeFile(char* name)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	b1 96       	adiw	r30, 0x21	; 33
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2bd2:	d8 01       	movw	r26, r16
    2bd4:	8c 91       	ld	r24, X
    2bd6:	85 ff       	sbrs	r24, 5
    2bd8:	fc cf       	rjmp	.-8      	; 0x2bd2 <_ZN10CardReader10removeFileEPc+0xe4>
        ;

      M_UDRx = c;
    2bda:	d7 01       	movw	r26, r14
    2bdc:	9c 93       	st	X, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2bde:	91 91       	ld	r25, Z+
    2be0:	91 11       	cpse	r25, r1
    2be2:	f7 cf       	rjmp	.-18     	; 0x2bd2 <_ZN10CardReader10removeFileEPc+0xe4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2be4:	f8 01       	movw	r30, r16
    2be6:	80 81       	ld	r24, Z
    2be8:	85 ff       	sbrs	r24, 5
    2bea:	fc cf       	rjmp	.-8      	; 0x2be4 <_ZN10CardReader10removeFileEPc+0xf6>
        ;

      M_UDRx = c;
    2bec:	ea e0       	ldi	r30, 0x0A	; 10
    2bee:	d7 01       	movw	r26, r14
    2bf0:	ec 93       	st	X, r30
      {
        char subdirname[13];
        strncpy(subdirname, dirname_start, dirname_end-dirname_start);
        subdirname[dirname_end-dirname_start]=0;
        SERIAL_ECHOLN(subdirname);
        if(!myDir.open(curDir,subdirname,O_READ))
    2bf2:	d1 01       	movw	r26, r2
    2bf4:	6d 91       	ld	r22, X+
    2bf6:	7c 91       	ld	r23, X
    2bf8:	61 15       	cp	r22, r1
    2bfa:	71 05       	cpc	r23, r1
    2bfc:	19 f0       	breq	.+6      	; 0x2c04 <_ZN10CardReader10removeFileEPc+0x116>
    2bfe:	6c 5f       	subi	r22, 0xFC	; 252
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <_ZN10CardReader10removeFileEPc+0x11a>
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	70 e0       	ldi	r23, 0x00	; 0
    2c08:	21 e0       	ldi	r18, 0x01	; 1
    2c0a:	ae 01       	movw	r20, r28
    2c0c:	40 5e       	subi	r20, 0xE0	; 224
    2c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c10:	ce 01       	movw	r24, r28
    2c12:	05 96       	adiw	r24, 0x05	; 5
    2c14:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    2c18:	81 11       	cpse	r24, r1
    2c1a:	53 c0       	rjmp	.+166    	; 0x2cc2 <_ZN10CardReader10removeFileEPc+0x1d4>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2c1c:	ef ee       	ldi	r30, 0xEF	; 239
    2c1e:	f1 e0       	ldi	r31, 0x01	; 1
    2c20:	34 91       	lpm	r19, Z
  while(ch)
    2c22:	33 23       	and	r19, r19
    2c24:	81 f0       	breq	.+32     	; 0x2c46 <_ZN10CardReader10removeFileEPc+0x158>
    2c26:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c28:	a0 ec       	ldi	r26, 0xC0	; 192
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2c2c:	86 ec       	ldi	r24, 0xC6	; 198
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c30:	2c 91       	ld	r18, X
    2c32:	25 ff       	sbrs	r18, 5
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <_ZN10CardReader10removeFileEPc+0x142>
        ;

      M_UDRx = c;
    2c36:	fc 01       	movw	r30, r24
    2c38:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2c3a:	4f 5f       	subi	r20, 0xFF	; 255
    2c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3e:	fa 01       	movw	r30, r20
    2c40:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2c42:	31 11       	cpse	r19, r1
    2c44:	f5 cf       	rjmp	.-22     	; 0x2c30 <_ZN10CardReader10removeFileEPc+0x142>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2c46:	38 a1       	ldd	r19, Y+32	; 0x20
    2c48:	33 23       	and	r19, r19
    2c4a:	89 f0       	breq	.+34     	; 0x2c6e <_ZN10CardReader10removeFileEPc+0x180>
    }
  }
  
}

void CardReader::removeFile(char* name)
    2c4c:	ae 01       	movw	r20, r28
    2c4e:	4f 5d       	subi	r20, 0xDF	; 223
    2c50:	5f 4f       	sbci	r21, 0xFF	; 255
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c52:	e0 ec       	ldi	r30, 0xC0	; 192
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    2c56:	86 ec       	ldi	r24, 0xC6	; 198
    2c58:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c5a:	20 81       	ld	r18, Z
    2c5c:	25 ff       	sbrs	r18, 5
    2c5e:	fd cf       	rjmp	.-6      	; 0x2c5a <_ZN10CardReader10removeFileEPc+0x16c>
        ;

      M_UDRx = c;
    2c60:	dc 01       	movw	r26, r24
    2c62:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2c64:	da 01       	movw	r26, r20
    2c66:	3d 91       	ld	r19, X+
    2c68:	ad 01       	movw	r20, r26
    2c6a:	31 11       	cpse	r19, r1
    2c6c:	f6 cf       	rjmp	.-20     	; 0x2c5a <_ZN10CardReader10removeFileEPc+0x16c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2c6e:	e3 e0       	ldi	r30, 0x03	; 3
    2c70:	f2 e0       	ldi	r31, 0x02	; 2
    2c72:	34 91       	lpm	r19, Z
  while(ch)
    2c74:	33 23       	and	r19, r19
    2c76:	81 f0       	breq	.+32     	; 0x2c98 <_ZN10CardReader10removeFileEPc+0x1aa>
    2c78:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c7a:	a0 ec       	ldi	r26, 0xC0	; 192
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2c7e:	86 ec       	ldi	r24, 0xC6	; 198
    2c80:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c82:	2c 91       	ld	r18, X
    2c84:	25 ff       	sbrs	r18, 5
    2c86:	fd cf       	rjmp	.-6      	; 0x2c82 <_ZN10CardReader10removeFileEPc+0x194>
        ;

      M_UDRx = c;
    2c88:	fc 01       	movw	r30, r24
    2c8a:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2c8c:	4f 5f       	subi	r20, 0xFF	; 255
    2c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c90:	fa 01       	movw	r30, r20
    2c92:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2c94:	31 11       	cpse	r19, r1
    2c96:	f5 cf       	rjmp	.-22     	; 0x2c82 <_ZN10CardReader10removeFileEPc+0x194>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2c98:	e0 ec       	ldi	r30, 0xC0	; 192
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	85 ff       	sbrs	r24, 5
    2ca0:	fd cf       	rjmp	.-6      	; 0x2c9c <_ZN10CardReader10removeFileEPc+0x1ae>
        ;

      M_UDRx = c;
    2ca2:	8a e0       	ldi	r24, 0x0A	; 10
    2ca4:	80 93 c6 00 	sts	0x00C6, r24
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief SdBaseFile with Print.
 */
class SdFile : public SdBaseFile, public Print {
    2ca8:	8a e2       	ldi	r24, 0x2A	; 42
    2caa:	94 e0       	ldi	r25, 0x04	; 4
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    2cb0:	88 85       	ldd	r24, Y+8	; 0x08
    2cb2:	88 23       	and	r24, r24
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <_ZN10CardReader10removeFileEPc+0x1ca>
    2cb6:	b3 c0       	rjmp	.+358    	; 0x2e1e <_ZN10CardReader10removeFileEPc+0x330>
    2cb8:	ce 01       	movw	r24, r28
    2cba:	05 96       	adiw	r24, 0x05	; 5
    2cbc:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    2cc0:	ae c0       	rjmp	.+348    	; 0x2e1e <_ZN10CardReader10removeFileEPc+0x330>
        else
        {
          //SERIAL_ECHOLN("dive ok");
        }
          
        curDir=&myDir; 
    2cc2:	e1 e0       	ldi	r30, 0x01	; 1
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	ec 0f       	add	r30, r28
    2cc8:	fd 1f       	adc	r31, r29
    2cca:	d1 01       	movw	r26, r2
    2ccc:	ed 93       	st	X+, r30
    2cce:	fc 93       	st	X, r31
        dirname_start=dirname_end+1;
    2cd0:	65 01       	movw	r12, r10
    2cd2:	ff ef       	ldi	r31, 0xFF	; 255
    2cd4:	cf 1a       	sub	r12, r31
    2cd6:	df 0a       	sbc	r13, r31
  
  char *dirname_start,*dirname_end;
  if(name[0]=='/')
  {
    dirname_start=strchr(name,'/')+1;
    while(dirname_start>0)
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <_ZN10CardReader10removeFileEPc+0x1ee>
    2cda:	59 cf       	rjmp	.-334    	; 0x2b8e <_ZN10CardReader10removeFileEPc+0xa0>
    2cdc:	0c c0       	rjmp	.+24     	; 0x2cf6 <_ZN10CardReader10removeFileEPc+0x208>
      
    }
  }
  else //relative path
  {
    curDir=&workDir;
    2cde:	f3 01       	movw	r30, r6
    2ce0:	e2 5b       	subi	r30, 0xB2	; 178
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	c3 01       	movw	r24, r6
    2ce6:	80 5b       	subi	r24, 0xB0	; 176
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <_ZN10CardReader10removeFileEPc+0x208>
    while(dirname_start>0)
    {
      dirname_end=strchr(dirname_start,'/');
      //SERIAL_ECHO("start:");SERIAL_ECHOLN((int)(dirname_start-name));
      //SERIAL_ECHO("end  :");SERIAL_ECHOLN((int)(dirname_end-name));
      if(dirname_end>0 && dirname_end>dirname_start)
    2cf0:	26 01       	movw	r4, r12
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <_ZN10CardReader10removeFileEPc+0x208>
    2cf4:	26 01       	movw	r4, r12
  }
  else //relative path
  {
    curDir=&workDir;
  }
    if (file.remove(curDir, fname)) 
    2cf6:	f3 01       	movw	r30, r6
    2cf8:	e2 5b       	subi	r30, 0xB2	; 178
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	11 f0       	breq	.+4      	; 0x2d08 <_ZN10CardReader10removeFileEPc+0x21a>
    2d04:	04 96       	adiw	r24, 0x04	; 4
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <_ZN10CardReader10removeFileEPc+0x21e>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	b2 01       	movw	r22, r4
    2d0e:	0e 94 05 62 	call	0xc40a	; 0xc40a <_ZN10SdBaseFile6removeEPS_PKc>
    2d12:	88 23       	and	r24, r24
    2d14:	91 f1       	breq	.+100    	; 0x2d7a <_ZN10CardReader10removeFileEPc+0x28c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2d16:	e5 e0       	ldi	r30, 0x05	; 5
    2d18:	f2 e0       	ldi	r31, 0x02	; 2
    2d1a:	34 91       	lpm	r19, Z
  while(ch)
    2d1c:	33 23       	and	r19, r19
    2d1e:	81 f0       	breq	.+32     	; 0x2d40 <_ZN10CardReader10removeFileEPc+0x252>
    2d20:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d22:	a0 ec       	ldi	r26, 0xC0	; 192
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2d26:	86 ec       	ldi	r24, 0xC6	; 198
    2d28:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d2a:	2c 91       	ld	r18, X
    2d2c:	25 ff       	sbrs	r18, 5
    2d2e:	fd cf       	rjmp	.-6      	; 0x2d2a <_ZN10CardReader10removeFileEPc+0x23c>
        ;

      M_UDRx = c;
    2d30:	fc 01       	movw	r30, r24
    2d32:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2d34:	4f 5f       	subi	r20, 0xFF	; 255
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	fa 01       	movw	r30, r20
    2d3a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2d3c:	31 11       	cpse	r19, r1
    2d3e:	f5 cf       	rjmp	.-22     	; 0x2d2a <_ZN10CardReader10removeFileEPc+0x23c>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2d40:	d2 01       	movw	r26, r4
    2d42:	3c 91       	ld	r19, X
    2d44:	33 23       	and	r19, r19
    2d46:	89 f0       	breq	.+34     	; 0x2d6a <_ZN10CardReader10removeFileEPc+0x27c>
    }
  }
  
}

void CardReader::removeFile(char* name)
    2d48:	bf ef       	ldi	r27, 0xFF	; 255
    2d4a:	4b 1a       	sub	r4, r27
    2d4c:	5b 0a       	sbc	r5, r27
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d4e:	e0 ec       	ldi	r30, 0xC0	; 192
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    2d52:	86 ec       	ldi	r24, 0xC6	; 198
    2d54:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d56:	20 81       	ld	r18, Z
    2d58:	25 ff       	sbrs	r18, 5
    2d5a:	fd cf       	rjmp	.-6      	; 0x2d56 <_ZN10CardReader10removeFileEPc+0x268>
        ;

      M_UDRx = c;
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2d60:	d2 01       	movw	r26, r4
    2d62:	3d 91       	ld	r19, X+
    2d64:	2d 01       	movw	r4, r26
    2d66:	31 11       	cpse	r19, r1
    2d68:	f6 cf       	rjmp	.-20     	; 0x2d56 <_ZN10CardReader10removeFileEPc+0x268>
  }
    if (file.remove(curDir, fname)) 
    {
      SERIAL_PROTOCOLPGM("File deleted:");
      SERIAL_PROTOCOL(fname);
      sdpos = 0;
    2d6a:	f3 01       	movw	r30, r6
    2d6c:	ef 50       	subi	r30, 0x0F	; 15
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	10 82       	st	Z, r1
    2d72:	11 82       	std	Z+1, r1	; 0x01
    2d74:	12 82       	std	Z+2, r1	; 0x02
    2d76:	13 82       	std	Z+3, r1	; 0x03
    2d78:	47 c0       	rjmp	.+142    	; 0x2e08 <_ZN10CardReader10removeFileEPc+0x31a>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2d7a:	e3 e1       	ldi	r30, 0x13	; 19
    2d7c:	f2 e0       	ldi	r31, 0x02	; 2
    2d7e:	34 91       	lpm	r19, Z
  while(ch)
    2d80:	33 23       	and	r19, r19
    2d82:	81 f0       	breq	.+32     	; 0x2da4 <_ZN10CardReader10removeFileEPc+0x2b6>
    2d84:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d86:	a0 ec       	ldi	r26, 0xC0	; 192
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2d8a:	86 ec       	ldi	r24, 0xC6	; 198
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2d8e:	2c 91       	ld	r18, X
    2d90:	25 ff       	sbrs	r18, 5
    2d92:	fd cf       	rjmp	.-6      	; 0x2d8e <_ZN10CardReader10removeFileEPc+0x2a0>
        ;

      M_UDRx = c;
    2d94:	fc 01       	movw	r30, r24
    2d96:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2d98:	4f 5f       	subi	r20, 0xFF	; 255
    2d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9c:	fa 01       	movw	r30, r20
    2d9e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2da0:	31 11       	cpse	r19, r1
    2da2:	f5 cf       	rjmp	.-22     	; 0x2d8e <_ZN10CardReader10removeFileEPc+0x2a0>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2da4:	d2 01       	movw	r26, r4
    2da6:	3c 91       	ld	r19, X
    2da8:	33 23       	and	r19, r19
    2daa:	89 f0       	breq	.+34     	; 0x2dce <_ZN10CardReader10removeFileEPc+0x2e0>
    }
  }
  
}

void CardReader::removeFile(char* name)
    2dac:	bf ef       	ldi	r27, 0xFF	; 255
    2dae:	4b 1a       	sub	r4, r27
    2db0:	5b 0a       	sbc	r5, r27
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2db2:	e0 ec       	ldi	r30, 0xC0	; 192
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    2db6:	86 ec       	ldi	r24, 0xC6	; 198
    2db8:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2dba:	20 81       	ld	r18, Z
    2dbc:	25 ff       	sbrs	r18, 5
    2dbe:	fd cf       	rjmp	.-6      	; 0x2dba <_ZN10CardReader10removeFileEPc+0x2cc>
        ;

      M_UDRx = c;
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    2dc4:	d2 01       	movw	r26, r4
    2dc6:	3d 91       	ld	r19, X+
    2dc8:	2d 01       	movw	r4, r26
    2dca:	31 11       	cpse	r19, r1
    2dcc:	f6 cf       	rjmp	.-20     	; 0x2dba <_ZN10CardReader10removeFileEPc+0x2cc>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2dce:	eb e2       	ldi	r30, 0x2B	; 43
    2dd0:	f2 e0       	ldi	r31, 0x02	; 2
    2dd2:	34 91       	lpm	r19, Z
  while(ch)
    2dd4:	33 23       	and	r19, r19
    2dd6:	81 f0       	breq	.+32     	; 0x2df8 <_ZN10CardReader10removeFileEPc+0x30a>
    2dd8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2dda:	a0 ec       	ldi	r26, 0xC0	; 192
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2dde:	86 ec       	ldi	r24, 0xC6	; 198
    2de0:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2de2:	2c 91       	ld	r18, X
    2de4:	25 ff       	sbrs	r18, 5
    2de6:	fd cf       	rjmp	.-6      	; 0x2de2 <_ZN10CardReader10removeFileEPc+0x2f4>
        ;

      M_UDRx = c;
    2de8:	fc 01       	movw	r30, r24
    2dea:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2dec:	4f 5f       	subi	r20, 0xFF	; 255
    2dee:	5f 4f       	sbci	r21, 0xFF	; 255
    2df0:	fa 01       	movw	r30, r20
    2df2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2df4:	31 11       	cpse	r19, r1
    2df6:	f5 cf       	rjmp	.-22     	; 0x2de2 <_ZN10CardReader10removeFileEPc+0x2f4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2df8:	e0 ec       	ldi	r30, 0xC0	; 192
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	85 ff       	sbrs	r24, 5
    2e00:	fd cf       	rjmp	.-6      	; 0x2dfc <_ZN10CardReader10removeFileEPc+0x30e>
        ;

      M_UDRx = c;
    2e02:	8a e0       	ldi	r24, 0x0A	; 10
    2e04:	80 93 c6 00 	sts	0x00C6, r24
    2e08:	8a e2       	ldi	r24, 0x2A	; 42
    2e0a:	94 e0       	ldi	r25, 0x04	; 4
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	88 85       	ldd	r24, Y+8	; 0x08
    2e12:	88 23       	and	r24, r24
    2e14:	21 f0       	breq	.+8      	; 0x2e1e <_ZN10CardReader10removeFileEPc+0x330>
    2e16:	ce 01       	movw	r24, r28
    2e18:	05 96       	adiw	r24, 0x05	; 5
    2e1a:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
      SERIAL_PROTOCOLPGM("Deletion failed, File: ");
      SERIAL_PROTOCOL(fname);
      SERIAL_PROTOCOLLNPGM(".");
    }
  
}
    2e1e:	ac 96       	adiw	r28, 0x2c	; 44
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	5f 90       	pop	r5
    2e48:	4f 90       	pop	r4
    2e4a:	3f 90       	pop	r3
    2e4c:	2f 90       	pop	r2
    2e4e:	08 95       	ret

00002e50 <_ZN10CardReader9getStatusEv>:

void CardReader::getStatus()
{
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	8c 01       	movw	r16, r24
  if(cardOK){
    2e5a:	ec 01       	movw	r28, r24
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	88 23       	and	r24, r24
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <_ZN10CardReader9getStatusEv+0x14>
    2e62:	45 c0       	rjmp	.+138    	; 0x2eee <_ZN10CardReader9getStatusEv+0x9e>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2e64:	ed e2       	ldi	r30, 0x2D	; 45
    2e66:	f2 e0       	ldi	r31, 0x02	; 2
    2e68:	34 91       	lpm	r19, Z
  while(ch)
    2e6a:	33 23       	and	r19, r19
    2e6c:	69 f0       	breq	.+26     	; 0x2e88 <_ZN10CardReader9getStatusEv+0x38>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2e6e:	a0 ec       	ldi	r26, 0xC0	; 192
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2e72:	86 ec       	ldi	r24, 0xC6	; 198
    2e74:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2e76:	2c 91       	ld	r18, X
    2e78:	25 ff       	sbrs	r18, 5
    2e7a:	fd cf       	rjmp	.-6      	; 0x2e76 <_ZN10CardReader9getStatusEv+0x26>
        ;

      M_UDRx = c;
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2e80:	31 96       	adiw	r30, 0x01	; 1
    2e82:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2e84:	31 11       	cpse	r19, r1
    2e86:	f7 cf       	rjmp	.-18     	; 0x2e76 <_ZN10CardReader9getStatusEv+0x26>
    SERIAL_PROTOCOLPGM(MSG_SD_PRINTING_BYTE);
    SERIAL_PROTOCOL(sdpos);
    2e88:	f8 01       	movw	r30, r16
    2e8a:	ef 50       	subi	r30, 0x0F	; 15
    2e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8e:	40 81       	ld	r20, Z
    2e90:	51 81       	ldd	r21, Z+1	; 0x01
    2e92:	62 81       	ldd	r22, Z+2	; 0x02
    2e94:	73 81       	ldd	r23, Z+3	; 0x03
    2e96:	2a e0       	ldi	r18, 0x0A	; 10
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	82 ed       	ldi	r24, 0xD2	; 210
    2e9c:	94 e0       	ldi	r25, 0x04	; 4
    2e9e:	b0 d7       	rcall	.+3936   	; 0x3e00 <_ZN12MarlinSerial5printEmi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2ea0:	ef e3       	ldi	r30, 0x3F	; 63
    2ea2:	f2 e0       	ldi	r31, 0x02	; 2
    2ea4:	34 91       	lpm	r19, Z
  while(ch)
    2ea6:	33 23       	and	r19, r19
    2ea8:	69 f0       	breq	.+26     	; 0x2ec4 <_ZN10CardReader9getStatusEv+0x74>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2eaa:	a0 ec       	ldi	r26, 0xC0	; 192
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2eae:	86 ec       	ldi	r24, 0xC6	; 198
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2eb2:	2c 91       	ld	r18, X
    2eb4:	25 ff       	sbrs	r18, 5
    2eb6:	fd cf       	rjmp	.-6      	; 0x2eb2 <_ZN10CardReader9getStatusEv+0x62>
        ;

      M_UDRx = c;
    2eb8:	ec 01       	movw	r28, r24
    2eba:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2ebc:	31 96       	adiw	r30, 0x01	; 1
    2ebe:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2ec0:	31 11       	cpse	r19, r1
    2ec2:	f7 cf       	rjmp	.-18     	; 0x2eb2 <_ZN10CardReader9getStatusEv+0x62>
    SERIAL_PROTOCOLPGM("/");
    SERIAL_PROTOCOLLN(filesize);
    2ec4:	e8 01       	movw	r28, r16
    2ec6:	c7 51       	subi	r28, 0x17	; 23
    2ec8:	de 4f       	sbci	r29, 0xFE	; 254
    2eca:	48 81       	ld	r20, Y
    2ecc:	59 81       	ldd	r21, Y+1	; 0x01
    2ece:	6a 81       	ldd	r22, Y+2	; 0x02
    2ed0:	7b 81       	ldd	r23, Y+3	; 0x03
    2ed2:	2a e0       	ldi	r18, 0x0A	; 10
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	82 ed       	ldi	r24, 0xD2	; 210
    2ed8:	94 e0       	ldi	r25, 0x04	; 4
    2eda:	92 d7       	rcall	.+3876   	; 0x3e00 <_ZN12MarlinSerial5printEmi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2edc:	e0 ec       	ldi	r30, 0xC0	; 192
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	85 ff       	sbrs	r24, 5
    2ee4:	fd cf       	rjmp	.-6      	; 0x2ee0 <_ZN10CardReader9getStatusEv+0x90>
        ;

      M_UDRx = c;
    2ee6:	8a e0       	ldi	r24, 0x0A	; 10
    2ee8:	80 93 c6 00 	sts	0x00C6, r24
    2eec:	19 c0       	rjmp	.+50     	; 0x2f20 <_ZN10CardReader9getStatusEv+0xd0>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2eee:	e1 e4       	ldi	r30, 0x41	; 65
    2ef0:	f2 e0       	ldi	r31, 0x02	; 2
    2ef2:	94 91       	lpm	r25, Z
  while(ch)
    2ef4:	99 23       	and	r25, r25
    2ef6:	61 f0       	breq	.+24     	; 0x2f10 <_ZN10CardReader9getStatusEv+0xc0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2ef8:	a0 ec       	ldi	r26, 0xC0	; 192
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2efc:	c6 ec       	ldi	r28, 0xC6	; 198
    2efe:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2f00:	8c 91       	ld	r24, X
    2f02:	85 ff       	sbrs	r24, 5
    2f04:	fd cf       	rjmp	.-6      	; 0x2f00 <_ZN10CardReader9getStatusEv+0xb0>
        ;

      M_UDRx = c;
    2f06:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2f08:	31 96       	adiw	r30, 0x01	; 1
    2f0a:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2f0c:	91 11       	cpse	r25, r1
    2f0e:	f8 cf       	rjmp	.-16     	; 0x2f00 <_ZN10CardReader9getStatusEv+0xb0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2f10:	e0 ec       	ldi	r30, 0xC0	; 192
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	85 ff       	sbrs	r24, 5
    2f18:	fd cf       	rjmp	.-6      	; 0x2f14 <_ZN10CardReader9getStatusEv+0xc4>
        ;

      M_UDRx = c;
    2f1a:	8a e0       	ldi	r24, 0x0A	; 10
    2f1c:	80 93 c6 00 	sts	0x00C6, r24
  }
  else{
    SERIAL_PROTOCOLLNPGM(MSG_SD_NOT_PRINTING);
  }
}
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	08 95       	ret

00002f2a <_ZN10CardReader13write_commandEPc>:
void CardReader::write_command(char *buf)
{
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	8c 01       	movw	r16, r24
    2f3c:	eb 01       	movw	r28, r22
  char* begin = buf;
  char* npos = 0;
  char* end = buf + strlen(buf) - 1;
    2f3e:	ec 2f       	mov	r30, r28
    2f40:	fd 2f       	mov	r31, r29
    2f42:	df 01       	movw	r26, r30
    2f44:	0d 90       	ld	r0, X+
    2f46:	00 20       	and	r0, r0
    2f48:	e9 f7       	brne	.-6      	; 0x2f44 <_ZN10CardReader13write_commandEPc+0x1a>
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	6d 01       	movw	r12, r26
    2f4e:	ce 1a       	sub	r12, r30
    2f50:	df 0a       	sbc	r13, r31

  file.writeError = false;
    2f52:	f8 01       	movw	r30, r16
    2f54:	e2 53       	subi	r30, 0x32	; 50
    2f56:	fe 4f       	sbci	r31, 0xFE	; 254
    2f58:	10 82       	st	Z, r1
  if((npos = strchr(buf, 'N')) != NULL)
    2f5a:	6e e4       	ldi	r22, 0x4E	; 78
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	ce 01       	movw	r24, r28
    2f60:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2f64:	7c 01       	movw	r14, r24
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	29 f4       	brne	.+10     	; 0x2f74 <_ZN10CardReader13write_commandEPc+0x4a>
}
void CardReader::write_command(char *buf)
{
  char* begin = buf;
  char* npos = 0;
  char* end = buf + strlen(buf) - 1;
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	31 97       	sbiw	r30, 0x01	; 1
    2f6e:	ec 0f       	add	r30, r28
    2f70:	fd 1f       	adc	r31, r29
    2f72:	0d c0       	rjmp	.+26     	; 0x2f8e <_ZN10CardReader13write_commandEPc+0x64>

  file.writeError = false;
  if((npos = strchr(buf, 'N')) != NULL)
  {
    begin = strchr(npos, ' ') + 1;
    2f74:	60 e2       	ldi	r22, 0x20	; 32
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2f7c:	ec 01       	movw	r28, r24
    2f7e:	21 96       	adiw	r28, 0x01	; 1
    end = strchr(npos, '*') - 1;
    2f80:	6a e2       	ldi	r22, 0x2A	; 42
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	c7 01       	movw	r24, r14
    2f86:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	31 97       	sbiw	r30, 0x01	; 1
  }
  end[1] = '\r';
    2f8e:	8d e0       	ldi	r24, 0x0D	; 13
    2f90:	81 83       	std	Z+1, r24	; 0x01
  end[2] = '\n';
    2f92:	8a e0       	ldi	r24, 0x0A	; 10
    2f94:	82 83       	std	Z+2, r24	; 0x02
  end[3] = '\0';
    2f96:	13 82       	std	Z+3, r1	; 0x03
  file.write(begin);
    2f98:	be 01       	movw	r22, r28
    2f9a:	c8 01       	movw	r24, r16
    2f9c:	86 53       	subi	r24, 0x36	; 54
    2f9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2fa0:	0e 94 4e 64 	call	0xc89c	; 0xc89c <_ZN6SdFile5writeEPKc>
  if (file.writeError)
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	e2 53       	subi	r30, 0x32	; 50
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	80 81       	ld	r24, Z
    2fac:	88 23       	and	r24, r24
    2fae:	51 f1       	breq	.+84     	; 0x3004 <_ZN10CardReader13write_commandEPc+0xda>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2fb0:	e2 e4       	ldi	r30, 0x42	; 66
    2fb2:	f1 e0       	ldi	r31, 0x01	; 1
    2fb4:	94 91       	lpm	r25, Z
  while(ch)
    2fb6:	99 23       	and	r25, r25
    2fb8:	61 f0       	breq	.+24     	; 0x2fd2 <_ZN10CardReader13write_commandEPc+0xa8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2fba:	a0 ec       	ldi	r26, 0xC0	; 192
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2fbe:	c6 ec       	ldi	r28, 0xC6	; 198
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2fc2:	8c 91       	ld	r24, X
    2fc4:	85 ff       	sbrs	r24, 5
    2fc6:	fd cf       	rjmp	.-6      	; 0x2fc2 <_ZN10CardReader13write_commandEPc+0x98>
        ;

      M_UDRx = c;
    2fc8:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2fca:	31 96       	adiw	r30, 0x01	; 1
    2fcc:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2fce:	91 11       	cpse	r25, r1
    2fd0:	f8 cf       	rjmp	.-16     	; 0x2fc2 <_ZN10CardReader13write_commandEPc+0x98>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    2fd2:	e1 e5       	ldi	r30, 0x51	; 81
    2fd4:	f2 e0       	ldi	r31, 0x02	; 2
    2fd6:	94 91       	lpm	r25, Z
  while(ch)
    2fd8:	99 23       	and	r25, r25
    2fda:	61 f0       	breq	.+24     	; 0x2ff4 <_ZN10CardReader13write_commandEPc+0xca>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2fdc:	a0 ec       	ldi	r26, 0xC0	; 192
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    2fe0:	c6 ec       	ldi	r28, 0xC6	; 198
    2fe2:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2fe4:	8c 91       	ld	r24, X
    2fe6:	85 ff       	sbrs	r24, 5
    2fe8:	fd cf       	rjmp	.-6      	; 0x2fe4 <_ZN10CardReader13write_commandEPc+0xba>
        ;

      M_UDRx = c;
    2fea:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    2fec:	31 96       	adiw	r30, 0x01	; 1
    2fee:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    2ff0:	91 11       	cpse	r25, r1
    2ff2:	f8 cf       	rjmp	.-16     	; 0x2fe4 <_ZN10CardReader13write_commandEPc+0xba>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    2ff4:	e0 ec       	ldi	r30, 0xC0	; 192
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	85 ff       	sbrs	r24, 5
    2ffc:	fd cf       	rjmp	.-6      	; 0x2ff8 <_ZN10CardReader13write_commandEPc+0xce>
        ;

      M_UDRx = c;
    2ffe:	8a e0       	ldi	r24, 0x0A	; 10
    3000:	80 93 c6 00 	sts	0x00C6, r24
  {
    SERIAL_ERROR_START;
    SERIAL_ERRORLNPGM(MSG_SD_ERR_WRITE_TO_FILE);
  }
}
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	08 95       	ret

00003016 <_ZN10CardReader14checkautostartEb>:


void CardReader::checkautostart(bool force)
{
    3016:	2f 92       	push	r2
    3018:	3f 92       	push	r3
    301a:	4f 92       	push	r4
    301c:	5f 92       	push	r5
    301e:	6f 92       	push	r6
    3020:	7f 92       	push	r7
    3022:	8f 92       	push	r8
    3024:	9f 92       	push	r9
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	cd 55       	subi	r28, 0x5D	; 93
    3040:	d1 09       	sbc	r29, r1
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	4c 01       	movw	r8, r24
  if(!force)
    304e:	61 11       	cpse	r22, r1
    3050:	16 c0       	rjmp	.+44     	; 0x307e <_ZN10CardReader14checkautostartEb+0x68>
  {
    if(!autostart_stilltocheck)
    3052:	fc 01       	movw	r30, r24
    3054:	eb 50       	subi	r30, 0x0B	; 11
    3056:	fe 4f       	sbci	r31, 0xFE	; 254
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	09 f4       	brne	.+2      	; 0x3060 <_ZN10CardReader14checkautostartEb+0x4a>
    305e:	c5 c0       	rjmp	.+394    	; 0x31ea <_ZN10CardReader14checkautostartEb+0x1d4>
      return;
    if(autostart_atmillis<millis())
    3060:	f4 01       	movw	r30, r8
    3062:	e3 51       	subi	r30, 0x13	; 19
    3064:	fe 4f       	sbci	r31, 0xFE	; 254
    3066:	c0 80       	ld	r12, Z
    3068:	d1 80       	ldd	r13, Z+1	; 0x01
    306a:	e2 80       	ldd	r14, Z+2	; 0x02
    306c:	f3 80       	ldd	r15, Z+3	; 0x03
    306e:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    3072:	c6 16       	cp	r12, r22
    3074:	d7 06       	cpc	r13, r23
    3076:	e8 06       	cpc	r14, r24
    3078:	f9 06       	cpc	r15, r25
    307a:	08 f4       	brcc	.+2      	; 0x307e <_ZN10CardReader14checkautostartEb+0x68>
    307c:	b6 c0       	rjmp	.+364    	; 0x31ea <_ZN10CardReader14checkautostartEb+0x1d4>
      return;
  }
  autostart_stilltocheck=false;
    307e:	f4 01       	movw	r30, r8
    3080:	eb 50       	subi	r30, 0x0B	; 11
    3082:	fe 4f       	sbci	r31, 0xFE	; 254
    3084:	10 82       	st	Z, r1
  if(!cardOK)
    3086:	f4 01       	movw	r30, r8
    3088:	83 81       	ldd	r24, Z+3	; 0x03
    308a:	81 11       	cpse	r24, r1
    308c:	07 c0       	rjmp	.+14     	; 0x309c <_ZN10CardReader14checkautostartEb+0x86>
  {
    initsd();
    308e:	c4 01       	movw	r24, r8
    3090:	56 d9       	rcall	.-3412   	; 0x233e <_ZN10CardReader6initsdEv>
    if(!cardOK) //fail
    3092:	f4 01       	movw	r30, r8
    3094:	83 81       	ldd	r24, Z+3	; 0x03
    3096:	88 23       	and	r24, r24
    3098:	09 f4       	brne	.+2      	; 0x309c <_ZN10CardReader14checkautostartEb+0x86>
    309a:	a7 c0       	rjmp	.+334    	; 0x31ea <_ZN10CardReader14checkautostartEb+0x1d4>
      return;
  }
  
  char autoname[30];
  sprintf_P(autoname, PSTR("auto%i.g"), lastnr);
    309c:	f4 01       	movw	r30, r8
    309e:	86 a5       	ldd	r24, Z+46	; 0x2e
    30a0:	8f 93       	push	r24
    30a2:	85 a5       	ldd	r24, Z+45	; 0x2d
    30a4:	8f 93       	push	r24
    30a6:	87 e6       	ldi	r24, 0x67	; 103
    30a8:	92 e0       	ldi	r25, 0x02	; 2
    30aa:	9f 93       	push	r25
    30ac:	8f 93       	push	r24
    30ae:	ce 01       	movw	r24, r28
    30b0:	cf 96       	adiw	r24, 0x3f	; 63
    30b2:	9f 93       	push	r25
    30b4:	8f 93       	push	r24
    30b6:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <sprintf_P>
  for(int8_t i=0;i<(int8_t)strlen(autoname);i++)
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	d1 2c       	mov	r13, r1
    30c8:	8e 01       	movw	r16, r28
    30ca:	01 5c       	subi	r16, 0xC1	; 193
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <_ZN10CardReader14checkautostartEb+0xd4>
    autoname[i]=tolower(autoname[i]);
    30d0:	78 01       	movw	r14, r16
    30d2:	ed 0c       	add	r14, r13
    30d4:	f1 1c       	adc	r15, r1
    30d6:	d7 fc       	sbrc	r13, 7
    30d8:	fa 94       	dec	r15
    30da:	f7 01       	movw	r30, r14
    30dc:	80 81       	ld	r24, Z
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 a7 c3 	call	0x1874e	; 0x1874e <tolower>
    30e4:	f7 01       	movw	r30, r14
    30e6:	80 83       	st	Z, r24
      return;
  }
  
  char autoname[30];
  sprintf_P(autoname, PSTR("auto%i.g"), lastnr);
  for(int8_t i=0;i<(int8_t)strlen(autoname);i++)
    30e8:	d3 94       	inc	r13
    30ea:	f8 01       	movw	r30, r16
    30ec:	01 90       	ld	r0, Z+
    30ee:	00 20       	and	r0, r0
    30f0:	e9 f7       	brne	.-6      	; 0x30ec <_ZN10CardReader14checkautostartEb+0xd6>
    30f2:	31 97       	sbiw	r30, 0x01	; 1
    30f4:	e0 1b       	sub	r30, r16
    30f6:	f1 0b       	sbc	r31, r17
    30f8:	de 16       	cp	r13, r30
    30fa:	54 f3       	brlt	.-44     	; 0x30d0 <_ZN10CardReader14checkautostartEb+0xba>
    autoname[i]=tolower(autoname[i]);
  dir_t p;

  root.rewind();
    30fc:	64 01       	movw	r12, r8
    30fe:	f3 e3       	ldi	r31, 0x33	; 51
    3100:	cf 0e       	add	r12, r31
    3102:	d1 1c       	adc	r13, r1
  int16_t read(void* buf, uint16_t nbyte);
  int8_t readDir(dir_t* dir, char* longFilename);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	ba 01       	movw	r22, r20
    310a:	c6 01       	movw	r24, r12
    310c:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
  
  bool found=false;
    3110:	6e 96       	adiw	r28, 0x1e	; 30
    3112:	1f ae       	std	Y+63, r1	; 0x3f
    3114:	6e 97       	sbiw	r28, 0x1e	; 30
  bool openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
  /** \deprecated Use: int8_t readDir(dir_t* dir);
   * \param[out] dir The dir_t struct that will receive the data.
   * \return bytes read for success zero for eof or -1 for failure.
   */
  int8_t readDir(dir_t& dir, char* longFilename) {return readDir(&dir, longFilename);}  // NOLINT
    3116:	8e 01       	movw	r16, r28
    3118:	0f 5f       	subi	r16, 0xFF	; 255
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
  while (root.readDir(p, NULL) > 0) 
    311c:	21 2c       	mov	r2, r1
    p.name[i]=tolower(p.name[i]);
    //Serial.print((char*)p.name);
    //Serial.print(" ");
    //Serial.println(autoname);
    if(p.name[9]!='~') //skip safety copies
    if(strncmp((char*)p.name,autoname,5)==0)
    311e:	5e 01       	movw	r10, r28
    3120:	8f e3       	ldi	r24, 0x3F	; 63
    3122:	a8 0e       	add	r10, r24
    3124:	b1 1c       	adc	r11, r1
    {
      char cmd[30];

      sprintf_P(cmd, PSTR("M23 %s"), autoname);
    3126:	0f 2e       	mov	r0, r31
    3128:	f0 e7       	ldi	r31, 0x70	; 112
    312a:	4f 2e       	mov	r4, r31
    312c:	f2 e0       	ldi	r31, 0x02	; 2
    312e:	5f 2e       	mov	r5, r31
    3130:	f0 2d       	mov	r31, r0
    3132:	3e 01       	movw	r6, r28
    3134:	e1 e2       	ldi	r30, 0x21	; 33
    3136:	6e 0e       	add	r6, r30
    3138:	71 1c       	adc	r7, r1
    313a:	3e c0       	rjmp	.+124    	; 0x31b8 <_ZN10CardReader14checkautostartEb+0x1a2>
  
  bool found=false;
  while (root.readDir(p, NULL) > 0) 
  {
    for(int8_t i=0;i<(int8_t)strlen((char*)p.name);i++)
    p.name[i]=tolower(p.name[i]);
    313c:	78 01       	movw	r14, r16
    313e:	e3 0c       	add	r14, r3
    3140:	f1 1c       	adc	r15, r1
    3142:	37 fc       	sbrc	r3, 7
    3144:	fa 94       	dec	r15
    3146:	f7 01       	movw	r30, r14
    3148:	80 81       	ld	r24, Z
    314a:	92 2d       	mov	r25, r2
    314c:	0e 94 a7 c3 	call	0x1874e	; 0x1874e <tolower>
    3150:	f7 01       	movw	r30, r14
    3152:	80 83       	st	Z, r24
  root.rewind();
  
  bool found=false;
  while (root.readDir(p, NULL) > 0) 
  {
    for(int8_t i=0;i<(int8_t)strlen((char*)p.name);i++)
    3154:	33 94       	inc	r3
    3156:	01 c0       	rjmp	.+2      	; 0x315a <_ZN10CardReader14checkautostartEb+0x144>
  dir_t p;

  root.rewind();
  
  bool found=false;
  while (root.readDir(p, NULL) > 0) 
    3158:	32 2c       	mov	r3, r2
  {
    for(int8_t i=0;i<(int8_t)strlen((char*)p.name);i++)
    315a:	f8 01       	movw	r30, r16
    315c:	01 90       	ld	r0, Z+
    315e:	00 20       	and	r0, r0
    3160:	e9 f7       	brne	.-6      	; 0x315c <_ZN10CardReader14checkautostartEb+0x146>
    3162:	31 97       	sbiw	r30, 0x01	; 1
    3164:	e0 1b       	sub	r30, r16
    3166:	f1 0b       	sbc	r31, r17
    3168:	3e 16       	cp	r3, r30
    316a:	44 f3       	brlt	.-48     	; 0x313c <_ZN10CardReader14checkautostartEb+0x126>
    p.name[i]=tolower(p.name[i]);
    //Serial.print((char*)p.name);
    //Serial.print(" ");
    //Serial.println(autoname);
    if(p.name[9]!='~') //skip safety copies
    316c:	8a 85       	ldd	r24, Y+10	; 0x0a
    316e:	8e 37       	cpi	r24, 0x7E	; 126
    3170:	19 f1       	breq	.+70     	; 0x31b8 <_ZN10CardReader14checkautostartEb+0x1a2>
    if(strncmp((char*)p.name,autoname,5)==0)
    3172:	45 e0       	ldi	r20, 0x05	; 5
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	b5 01       	movw	r22, r10
    3178:	c8 01       	movw	r24, r16
    317a:	0e 94 33 c4 	call	0x18866	; 0x18866 <strncmp>
    317e:	28 2f       	mov	r18, r24
    3180:	39 2f       	mov	r19, r25
    3182:	23 2b       	or	r18, r19
    3184:	c9 f4       	brne	.+50     	; 0x31b8 <_ZN10CardReader14checkautostartEb+0x1a2>
    {
      char cmd[30];

      sprintf_P(cmd, PSTR("M23 %s"), autoname);
    3186:	bf 92       	push	r11
    3188:	af 92       	push	r10
    318a:	5f 92       	push	r5
    318c:	4f 92       	push	r4
    318e:	7f 92       	push	r7
    3190:	6f 92       	push	r6
    3192:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <sprintf_P>
      enquecommand(cmd);
    3196:	c3 01       	movw	r24, r6
    3198:	0e 94 60 22 	call	0x44c0	; 0x44c0 <_Z12enquecommandPKc>
      enquecommand_P(PSTR("M24"));
    319c:	87 e7       	ldi	r24, 0x77	; 119
    319e:	92 e0       	ldi	r25, 0x02	; 2
    31a0:	0e 94 ed 22 	call	0x45da	; 0x45da <_Z14enquecommand_PPKc>
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
      found=true;
    31b0:	f1 e0       	ldi	r31, 0x01	; 1
    31b2:	6e 96       	adiw	r28, 0x1e	; 30
    31b4:	ff af       	std	Y+63, r31	; 0x3f
    31b6:	6e 97       	sbiw	r28, 0x1e	; 30
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	b8 01       	movw	r22, r16
    31be:	c6 01       	movw	r24, r12
    31c0:	0e 94 42 5d 	call	0xba84	; 0xba84 <_ZN10SdBaseFile7readDirEP14directoryEntryPc>
  dir_t p;

  root.rewind();
  
  bool found=false;
  while (root.readDir(p, NULL) > 0) 
    31c4:	18 16       	cp	r1, r24
    31c6:	44 f2       	brlt	.-112    	; 0x3158 <_ZN10CardReader14checkautostartEb+0x142>
      enquecommand(cmd);
      enquecommand_P(PSTR("M24"));
      found=true;
    }
  }
  if(!found)
    31c8:	6e 96       	adiw	r28, 0x1e	; 30
    31ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    31cc:	6e 97       	sbiw	r28, 0x1e	; 30
    31ce:	81 11       	cpse	r24, r1
    31d0:	06 c0       	rjmp	.+12     	; 0x31de <_ZN10CardReader14checkautostartEb+0x1c8>
    lastnr=-1;
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
    31d4:	9f ef       	ldi	r25, 0xFF	; 255
    31d6:	f4 01       	movw	r30, r8
    31d8:	96 a7       	std	Z+46, r25	; 0x2e
    31da:	85 a7       	std	Z+45, r24	; 0x2d
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <_ZN10CardReader14checkautostartEb+0x1d4>
  else
    lastnr++;
    31de:	f4 01       	movw	r30, r8
    31e0:	85 a5       	ldd	r24, Z+45	; 0x2d
    31e2:	96 a5       	ldd	r25, Z+46	; 0x2e
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	96 a7       	std	Z+46, r25	; 0x2e
    31e8:	85 a7       	std	Z+45, r24	; 0x2d
}
    31ea:	c3 5a       	subi	r28, 0xA3	; 163
    31ec:	df 4f       	sbci	r29, 0xFF	; 255
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	df 90       	pop	r13
    3206:	cf 90       	pop	r12
    3208:	bf 90       	pop	r11
    320a:	af 90       	pop	r10
    320c:	9f 90       	pop	r9
    320e:	8f 90       	pop	r8
    3210:	7f 90       	pop	r7
    3212:	6f 90       	pop	r6
    3214:	5f 90       	pop	r5
    3216:	4f 90       	pop	r4
    3218:	3f 90       	pop	r3
    321a:	2f 90       	pop	r2
    321c:	08 95       	ret

0000321e <_ZN10CardReader9closefileEv>:

void CardReader::closefile()
{
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
  file.sync();
    3228:	8c 01       	movw	r16, r24
    322a:	02 53       	subi	r16, 0x32	; 50
    322c:	1e 4f       	sbci	r17, 0xFE	; 254
    322e:	c8 01       	movw	r24, r16
    3230:	0e 94 ba 5e 	call	0xbd74	; 0xbd74 <_ZN10SdBaseFile4syncEv>
  file.close();
    3234:	c8 01       	movw	r24, r16
    3236:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
  saving = false; 
    323a:	18 82       	st	Y, r1
  logging = false;
    323c:	19 82       	std	Y+1, r1	; 0x01
}
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	08 95       	ret

00003248 <_ZN10CardReader11getfilenameEh>:

void CardReader::getfilename(const uint8_t nr)
{
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	6f 97       	sbiw	r28, 0x1f	; 31
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	8c 01       	movw	r16, r24
  curDir=&workDir;
    3266:	7c 01       	movw	r14, r24
    3268:	8e e4       	ldi	r24, 0x4E	; 78
    326a:	e8 0e       	add	r14, r24
    326c:	f1 1c       	adc	r15, r1
    326e:	c8 01       	movw	r24, r16
    3270:	80 5b       	subi	r24, 0xB0	; 176
    3272:	9f 4f       	sbci	r25, 0xFF	; 255
    3274:	f7 01       	movw	r30, r14
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
  lsAction=LS_GetFilename;
    327a:	f8 01       	movw	r30, r16
    327c:	ea 50       	subi	r30, 0x0A	; 10
    327e:	fe 4f       	sbci	r31, 0xFE	; 254
    3280:	22 e0       	ldi	r18, 0x02	; 2
    3282:	20 83       	st	Z, r18
  nrFiles=nr;
    3284:	f8 01       	movw	r30, r16
    3286:	e9 50       	subi	r30, 0x09	; 9
    3288:	fe 4f       	sbci	r31, 0xFE	; 254
    328a:	60 83       	st	Z, r22
    328c:	11 82       	std	Z+1, r1	; 0x01
  int16_t read(void* buf, uint16_t nbyte);
  int8_t readDir(dir_t* dir, char* longFilename);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	ba 01       	movw	r22, r20
    3294:	04 96       	adiw	r24, 0x04	; 4
    3296:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
  curDir->rewind();
  lsDive("",*curDir);
    329a:	f7 01       	movw	r30, r14
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	2b e1       	ldi	r18, 0x1B	; 27
    32a2:	fc 01       	movw	r30, r24
    32a4:	34 96       	adiw	r30, 0x04	; 4
    32a6:	de 01       	movw	r26, r28
    32a8:	15 96       	adiw	r26, 0x05	; 5
    32aa:	01 90       	ld	r0, Z+
    32ac:	0d 92       	st	X+, r0
    32ae:	2a 95       	dec	r18
    32b0:	e1 f7       	brne	.-8      	; 0x32aa <_ZN10CardReader11getfilenameEh+0x62>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    32b2:	fc 01       	movw	r30, r24
    32b4:	82 81       	ldd	r24, Z+2	; 0x02
    32b6:	93 81       	ldd	r25, Z+3	; 0x03
    32b8:	9c 83       	std	Y+4, r25	; 0x04
    32ba:	8b 83       	std	Y+3, r24	; 0x03
    32bc:	0f 2e       	mov	r0, r31
    32be:	fa e2       	ldi	r31, 0x2A	; 42
    32c0:	ef 2e       	mov	r14, r31
    32c2:	f4 e0       	ldi	r31, 0x04	; 4
    32c4:	ff 2e       	mov	r15, r31
    32c6:	f0 2d       	mov	r31, r0
    32c8:	fa 82       	std	Y+2, r15	; 0x02
    32ca:	e9 82       	std	Y+1, r14	; 0x01
    32cc:	ae 01       	movw	r20, r28
    32ce:	4f 5f       	subi	r20, 0xFF	; 255
    32d0:	5f 4f       	sbci	r21, 0xFF	; 255
    32d2:	61 e4       	ldi	r22, 0x41	; 65
    32d4:	74 e0       	ldi	r23, 0x04	; 4
    32d6:	c8 01       	movw	r24, r16
    32d8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN10CardReader6lsDiveEPKc6SdFile>
    32dc:	fa 82       	std	Y+2, r15	; 0x02
    32de:	e9 82       	std	Y+1, r14	; 0x01
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    32e0:	88 85       	ldd	r24, Y+8	; 0x08
    32e2:	88 23       	and	r24, r24
    32e4:	21 f0       	breq	.+8      	; 0x32ee <_ZN10CardReader11getfilenameEh+0xa6>
    32e6:	ce 01       	movw	r24, r28
    32e8:	05 96       	adiw	r24, 0x05	; 5
    32ea:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
  
}
    32ee:	6f 96       	adiw	r28, 0x1f	; 31
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	0f 91       	pop	r16
    3302:	ff 90       	pop	r15
    3304:	ef 90       	pop	r14
    3306:	08 95       	ret

00003308 <_ZN10CardReader14getnrfilenamesEv>:

uint16_t CardReader::getnrfilenames()
{
    3308:	ef 92       	push	r14
    330a:	ff 92       	push	r15
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	6f 97       	sbiw	r28, 0x1f	; 31
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	8c 01       	movw	r16, r24
  curDir=&workDir;
    3326:	7c 01       	movw	r14, r24
    3328:	8e e4       	ldi	r24, 0x4E	; 78
    332a:	e8 0e       	add	r14, r24
    332c:	f1 1c       	adc	r15, r1
    332e:	c8 01       	movw	r24, r16
    3330:	80 5b       	subi	r24, 0xB0	; 176
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	f7 01       	movw	r30, r14
    3336:	91 83       	std	Z+1, r25	; 0x01
    3338:	80 83       	st	Z, r24
  lsAction=LS_Count;
    333a:	f8 01       	movw	r30, r16
    333c:	ea 50       	subi	r30, 0x0A	; 10
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	21 e0       	ldi	r18, 0x01	; 1
    3342:	20 83       	st	Z, r18
  nrFiles=0;
    3344:	f8 01       	movw	r30, r16
    3346:	e9 50       	subi	r30, 0x09	; 9
    3348:	fe 4f       	sbci	r31, 0xFE	; 254
    334a:	11 82       	std	Z+1, r1	; 0x01
    334c:	10 82       	st	Z, r1
  int16_t read(void* buf, uint16_t nbyte);
  int8_t readDir(dir_t* dir, char* longFilename);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	50 e0       	ldi	r21, 0x00	; 0
    3352:	ba 01       	movw	r22, r20
    3354:	04 96       	adiw	r24, 0x04	; 4
    3356:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
  curDir->rewind();
  lsDive("",*curDir);
    335a:	f7 01       	movw	r30, r14
    335c:	80 81       	ld	r24, Z
    335e:	91 81       	ldd	r25, Z+1	; 0x01
    3360:	2b e1       	ldi	r18, 0x1B	; 27
    3362:	fc 01       	movw	r30, r24
    3364:	34 96       	adiw	r30, 0x04	; 4
    3366:	de 01       	movw	r26, r28
    3368:	15 96       	adiw	r26, 0x05	; 5
    336a:	01 90       	ld	r0, Z+
    336c:	0d 92       	st	X+, r0
    336e:	2a 95       	dec	r18
    3370:	e1 f7       	brne	.-8      	; 0x336a <_ZN10CardReader14getnrfilenamesEv+0x62>
    3372:	fc 01       	movw	r30, r24
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
    337c:	0f 2e       	mov	r0, r31
    337e:	fa e2       	ldi	r31, 0x2A	; 42
    3380:	ef 2e       	mov	r14, r31
    3382:	f4 e0       	ldi	r31, 0x04	; 4
    3384:	ff 2e       	mov	r15, r31
    3386:	f0 2d       	mov	r31, r0
    3388:	fa 82       	std	Y+2, r15	; 0x02
    338a:	e9 82       	std	Y+1, r14	; 0x01
    338c:	ae 01       	movw	r20, r28
    338e:	4f 5f       	subi	r20, 0xFF	; 255
    3390:	5f 4f       	sbci	r21, 0xFF	; 255
    3392:	61 e4       	ldi	r22, 0x41	; 65
    3394:	74 e0       	ldi	r23, 0x04	; 4
    3396:	c8 01       	movw	r24, r16
    3398:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN10CardReader6lsDiveEPKc6SdFile>
    339c:	fa 82       	std	Y+2, r15	; 0x02
    339e:	e9 82       	std	Y+1, r14	; 0x01
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    33a0:	88 85       	ldd	r24, Y+8	; 0x08
    33a2:	88 23       	and	r24, r24
    33a4:	21 f0       	breq	.+8      	; 0x33ae <_ZN10CardReader14getnrfilenamesEv+0xa6>
    33a6:	ce 01       	movw	r24, r28
    33a8:	05 96       	adiw	r24, 0x05	; 5
    33aa:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
  //SERIAL_ECHOLN(nrFiles);
  return nrFiles;
    33ae:	f8 01       	movw	r30, r16
    33b0:	e9 50       	subi	r30, 0x09	; 9
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
}
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	6f 96       	adiw	r28, 0x1f	; 31
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	08 95       	ret

000033d2 <_ZN10CardReader5chdirEPKc>:

void CardReader::chdir(const char * relpath)
{
    33d2:	cf 92       	push	r12
    33d4:	df 92       	push	r13
    33d6:	ef 92       	push	r14
    33d8:	ff 92       	push	r15
    33da:	0f 93       	push	r16
    33dc:	1f 93       	push	r17
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	6f 97       	sbiw	r28, 0x1f	; 31
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	7c 01       	movw	r14, r24
    33f4:	8b 01       	movw	r16, r22
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    33f6:	1d 82       	std	Y+5, r1	; 0x05
    33f8:	18 86       	std	Y+8, r1	; 0x08
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    33fa:	1c 82       	std	Y+4, r1	; 0x04
    33fc:	1b 82       	std	Y+3, r1	; 0x03
 public:
  SdFile() {}
    33fe:	8a e2       	ldi	r24, 0x2A	; 42
    3400:	94 e0       	ldi	r25, 0x04	; 4
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
  /** \return True if this is a directory else false. */
  bool isDir() const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a normal file else false. */
  bool isFile() const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
    3406:	f7 01       	movw	r30, r14
    3408:	ec 5a       	subi	r30, 0xAC	; 172
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
  SdFile newfile;
  SdFile *parent=&root;
  
  if(workDir.isOpen())
    340c:	83 81       	ldd	r24, Z+3	; 0x03
    340e:	81 11       	cpse	r24, r1
    3410:	05 c0       	rjmp	.+10     	; 0x341c <_ZN10CardReader5chdirEPKc+0x4a>
}

void CardReader::chdir(const char * relpath)
{
  SdFile newfile;
  SdFile *parent=&root;
    3412:	67 01       	movw	r12, r14
    3414:	8f e2       	ldi	r24, 0x2F	; 47
    3416:	c8 0e       	add	r12, r24
    3418:	d1 1c       	adc	r13, r1
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <_ZN10CardReader5chdirEPKc+0x52>
  
  if(workDir.isOpen())
    parent=&workDir;
    341c:	67 01       	movw	r12, r14
    341e:	a0 e5       	ldi	r26, 0x50	; 80
    3420:	ca 0e       	add	r12, r26
    3422:	d1 1c       	adc	r13, r1
  
  if(!newfile.open(*parent,relpath, O_READ))
    3424:	b6 01       	movw	r22, r12
    3426:	6c 5f       	subi	r22, 0xFC	; 252
    3428:	7f 4f       	sbci	r23, 0xFF	; 255
   * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
   * \return true for success or false for failure.
   */
  bool open(SdBaseFile& dirFile, // NOLINT
    const char* path, uint8_t oflag) {
    return open(&dirFile, path, oflag);
    342a:	21 e0       	ldi	r18, 0x01	; 1
    342c:	a8 01       	movw	r20, r16
    342e:	ce 01       	movw	r24, r28
    3430:	05 96       	adiw	r24, 0x05	; 5
    3432:	0e 94 48 61 	call	0xc290	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    3436:	81 11       	cpse	r24, r1
    3438:	47 c0       	rjmp	.+142    	; 0x34c8 <_ZN10CardReader5chdirEPKc+0xf6>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    343a:	ef e2       	ldi	r30, 0x2F	; 47
    343c:	f1 e0       	ldi	r31, 0x01	; 1
    343e:	34 91       	lpm	r19, Z
  while(ch)
    3440:	33 23       	and	r19, r19
    3442:	81 f0       	breq	.+32     	; 0x3464 <_ZN10CardReader5chdirEPKc+0x92>
    3444:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3446:	a0 ec       	ldi	r26, 0xC0	; 192
    3448:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    344a:	86 ec       	ldi	r24, 0xC6	; 198
    344c:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    344e:	2c 91       	ld	r18, X
    3450:	25 ff       	sbrs	r18, 5
    3452:	fd cf       	rjmp	.-6      	; 0x344e <_ZN10CardReader5chdirEPKc+0x7c>
        ;

      M_UDRx = c;
    3454:	fc 01       	movw	r30, r24
    3456:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    3458:	4f 5f       	subi	r20, 0xFF	; 255
    345a:	5f 4f       	sbci	r21, 0xFF	; 255
    345c:	fa 01       	movw	r30, r20
    345e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    3460:	31 11       	cpse	r19, r1
    3462:	f5 cf       	rjmp	.-22     	; 0x344e <_ZN10CardReader5chdirEPKc+0x7c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    3464:	eb e7       	ldi	r30, 0x7B	; 123
    3466:	f2 e0       	ldi	r31, 0x02	; 2
    3468:	34 91       	lpm	r19, Z
  while(ch)
    346a:	33 23       	and	r19, r19
    346c:	81 f0       	breq	.+32     	; 0x348e <_ZN10CardReader5chdirEPKc+0xbc>
    346e:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3470:	a0 ec       	ldi	r26, 0xC0	; 192
    3472:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    3474:	86 ec       	ldi	r24, 0xC6	; 198
    3476:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3478:	2c 91       	ld	r18, X
    347a:	25 ff       	sbrs	r18, 5
    347c:	fd cf       	rjmp	.-6      	; 0x3478 <_ZN10CardReader5chdirEPKc+0xa6>
        ;

      M_UDRx = c;
    347e:	fc 01       	movw	r30, r24
    3480:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    3482:	4f 5f       	subi	r20, 0xFF	; 255
    3484:	5f 4f       	sbci	r21, 0xFF	; 255
    3486:	fa 01       	movw	r30, r20
    3488:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    348a:	31 11       	cpse	r19, r1
    348c:	f5 cf       	rjmp	.-22     	; 0x3478 <_ZN10CardReader5chdirEPKc+0xa6>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    348e:	d8 01       	movw	r26, r16
    3490:	3c 91       	ld	r19, X
    3492:	33 23       	and	r19, r19
    3494:	81 f0       	breq	.+32     	; 0x34b6 <_ZN10CardReader5chdirEPKc+0xe4>
  lsDive("",*curDir);
  //SERIAL_ECHOLN(nrFiles);
  return nrFiles;
}

void CardReader::chdir(const char * relpath)
    3496:	0f 5f       	subi	r16, 0xFF	; 255
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    349a:	e0 ec       	ldi	r30, 0xC0	; 192
    349c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    349e:	86 ec       	ldi	r24, 0xC6	; 198
    34a0:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    34a2:	20 81       	ld	r18, Z
    34a4:	25 ff       	sbrs	r18, 5
    34a6:	fd cf       	rjmp	.-6      	; 0x34a2 <_ZN10CardReader5chdirEPKc+0xd0>
        ;

      M_UDRx = c;
    34a8:	dc 01       	movw	r26, r24
    34aa:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    34ac:	d8 01       	movw	r26, r16
    34ae:	3d 91       	ld	r19, X+
    34b0:	8d 01       	movw	r16, r26
    34b2:	31 11       	cpse	r19, r1
    34b4:	f6 cf       	rjmp	.-20     	; 0x34a2 <_ZN10CardReader5chdirEPKc+0xd0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    34b6:	e0 ec       	ldi	r30, 0xC0	; 192
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	85 ff       	sbrs	r24, 5
    34be:	fd cf       	rjmp	.-6      	; 0x34ba <_ZN10CardReader5chdirEPKc+0xe8>
        ;

      M_UDRx = c;
    34c0:	8a e0       	ldi	r24, 0x0A	; 10
    34c2:	80 93 c6 00 	sts	0x00C6, r24
    34c6:	62 c0       	rjmp	.+196    	; 0x358c <_ZN10CardReader5chdirEPKc+0x1ba>
   SERIAL_ECHOPGM(MSG_SD_CANT_ENTER_SUBDIR);
   SERIAL_ECHOLN(relpath);
  }
  else
  {
    if (workDirDepth < MAX_DIR_DEPTH) {
    34c8:	f7 01       	movw	r30, r14
    34ca:	eb 55       	subi	r30, 0x5B	; 91
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	20 81       	ld	r18, Z
    34d0:	31 81       	ldd	r19, Z+1	; 0x01
    34d2:	2a 30       	cpi	r18, 0x0A	; 10
    34d4:	31 05       	cpc	r19, r1
    34d6:	08 f0       	brcs	.+2      	; 0x34da <_ZN10CardReader5chdirEPKc+0x108>
    34d8:	48 c0       	rjmp	.+144    	; 0x356a <_ZN10CardReader5chdirEPKc+0x198>
      for (int d = ++workDirDepth; d--;)
    34da:	b9 01       	movw	r22, r18
    34dc:	6f 5f       	subi	r22, 0xFF	; 255
    34de:	7f 4f       	sbci	r23, 0xFF	; 255
    34e0:	f7 01       	movw	r30, r14
    34e2:	eb 55       	subi	r30, 0x5B	; 91
    34e4:	fe 4f       	sbci	r31, 0xFE	; 254
    34e6:	71 83       	std	Z+1, r23	; 0x01
    34e8:	60 83       	st	Z, r22
    34ea:	61 15       	cp	r22, r1
    34ec:	71 05       	cpc	r23, r1
    34ee:	49 f1       	breq	.+82     	; 0x3542 <_ZN10CardReader5chdirEPKc+0x170>
        workDirParents[d+1] = workDirParents[d];
    34f0:	1f e1       	ldi	r17, 0x1F	; 31
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief SdBaseFile with Print.
 */
class SdFile : public SdBaseFile, public Print {
    34f2:	0b e1       	ldi	r16, 0x1B	; 27
    34f4:	12 9f       	mul	r17, r18
    34f6:	a0 01       	movw	r20, r0
    34f8:	13 9f       	mul	r17, r19
    34fa:	50 0d       	add	r21, r0
    34fc:	11 24       	eor	r1, r1
    34fe:	41 59       	subi	r20, 0x91	; 145
    3500:	5f 4f       	sbci	r21, 0xFF	; 255
    3502:	4e 0d       	add	r20, r14
    3504:	5f 1d       	adc	r21, r15
    3506:	16 9f       	mul	r17, r22
    3508:	c0 01       	movw	r24, r0
    350a:	17 9f       	mul	r17, r23
    350c:	90 0d       	add	r25, r0
    350e:	11 24       	eor	r1, r1
    3510:	81 59       	subi	r24, 0x91	; 145
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	8e 0d       	add	r24, r14
    3516:	9f 1d       	adc	r25, r15
    3518:	fa 01       	movw	r30, r20
    351a:	34 96       	adiw	r30, 0x04	; 4
    351c:	dc 01       	movw	r26, r24
    351e:	14 96       	adiw	r26, 0x04	; 4
    3520:	60 2f       	mov	r22, r16
    3522:	01 90       	ld	r0, Z+
    3524:	0d 92       	st	X+, r0
    3526:	6a 95       	dec	r22
    3528:	e1 f7       	brne	.-8      	; 0x3522 <_ZN10CardReader5chdirEPKc+0x150>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    352a:	fa 01       	movw	r30, r20
    352c:	42 81       	ldd	r20, Z+2	; 0x02
    352e:	53 81       	ldd	r21, Z+3	; 0x03
    3530:	dc 01       	movw	r26, r24
    3532:	13 96       	adiw	r26, 0x03	; 3
    3534:	5c 93       	st	X, r21
    3536:	4e 93       	st	-X, r20
    3538:	12 97       	sbiw	r26, 0x02	; 2
    353a:	b9 01       	movw	r22, r18
   SERIAL_ECHOLN(relpath);
  }
  else
  {
    if (workDirDepth < MAX_DIR_DEPTH) {
      for (int d = ++workDirDepth; d--;)
    353c:	21 50       	subi	r18, 0x01	; 1
    353e:	31 09       	sbc	r19, r1
    3540:	c8 f6       	brcc	.-78     	; 0x34f4 <_ZN10CardReader5chdirEPKc+0x122>
    3542:	c7 01       	movw	r24, r14
    3544:	81 59       	subi	r24, 0x91	; 145
    3546:	9f 4f       	sbci	r25, 0xFF	; 255
    3548:	2b e1       	ldi	r18, 0x1B	; 27
    354a:	f6 01       	movw	r30, r12
    354c:	34 96       	adiw	r30, 0x04	; 4
    354e:	dc 01       	movw	r26, r24
    3550:	14 96       	adiw	r26, 0x04	; 4
    3552:	01 90       	ld	r0, Z+
    3554:	0d 92       	st	X+, r0
    3556:	2a 95       	dec	r18
    3558:	e1 f7       	brne	.-8      	; 0x3552 <_ZN10CardReader5chdirEPKc+0x180>
    355a:	f6 01       	movw	r30, r12
    355c:	22 81       	ldd	r18, Z+2	; 0x02
    355e:	33 81       	ldd	r19, Z+3	; 0x03
    3560:	dc 01       	movw	r26, r24
    3562:	13 96       	adiw	r26, 0x03	; 3
    3564:	3c 93       	st	X, r19
    3566:	2e 93       	st	-X, r18
    3568:	12 97       	sbiw	r26, 0x02	; 2
    356a:	c7 01       	movw	r24, r14
    356c:	80 5b       	subi	r24, 0xB0	; 176
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	2b e1       	ldi	r18, 0x1B	; 27
    3572:	fe 01       	movw	r30, r28
    3574:	35 96       	adiw	r30, 0x05	; 5
    3576:	dc 01       	movw	r26, r24
    3578:	14 96       	adiw	r26, 0x04	; 4
    357a:	01 90       	ld	r0, Z+
    357c:	0d 92       	st	X+, r0
    357e:	2a 95       	dec	r18
    3580:	e1 f7       	brne	.-8      	; 0x357a <_ZN10CardReader5chdirEPKc+0x1a8>
    3582:	2b 81       	ldd	r18, Y+3	; 0x03
    3584:	3c 81       	ldd	r19, Y+4	; 0x04
    3586:	fc 01       	movw	r30, r24
    3588:	33 83       	std	Z+3, r19	; 0x03
    358a:	22 83       	std	Z+2, r18	; 0x02
    358c:	8a e2       	ldi	r24, 0x2A	; 42
    358e:	94 e0       	ldi	r25, 0x04	; 4
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
  SdBaseFile(const char* path, uint8_t oflag);
  ~SdBaseFile() {if(isOpen()) close();}
    3594:	88 85       	ldd	r24, Y+8	; 0x08
    3596:	88 23       	and	r24, r24
    3598:	21 f0       	breq	.+8      	; 0x35a2 <_ZN10CardReader5chdirEPKc+0x1d0>
    359a:	ce 01       	movw	r24, r28
    359c:	05 96       	adiw	r24, 0x05	; 5
    359e:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
        workDirParents[d+1] = workDirParents[d];
      workDirParents[0]=*parent;
    }
    workDir=newfile;
  }
}
    35a2:	6f 96       	adiw	r28, 0x1f	; 31
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	df 90       	pop	r13
    35bc:	cf 90       	pop	r12
    35be:	08 95       	ret

000035c0 <_ZN10CardReader5updirEv>:

void CardReader::updir()
{
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
  if(workDirDepth > 0)
    35cc:	fc 01       	movw	r30, r24
    35ce:	eb 55       	subi	r30, 0x5B	; 91
    35d0:	fe 4f       	sbci	r31, 0xFE	; 254
    35d2:	20 81       	ld	r18, Z
    35d4:	31 81       	ldd	r19, Z+1	; 0x01
    35d6:	21 15       	cp	r18, r1
    35d8:	31 05       	cpc	r19, r1
    35da:	09 f4       	brne	.+2      	; 0x35de <_ZN10CardReader5updirEv+0x1e>
    35dc:	53 c0       	rjmp	.+166    	; 0x3684 <_ZN10CardReader5updirEv+0xc4>
  {
    --workDirDepth;
    35de:	ef 01       	movw	r28, r30
    35e0:	21 50       	subi	r18, 0x01	; 1
    35e2:	31 09       	sbc	r19, r1
    35e4:	31 83       	std	Z+1, r19	; 0x01
    35e6:	20 83       	st	Z, r18
    35e8:	9c 01       	movw	r18, r24
    35ea:	20 5b       	subi	r18, 0xB0	; 176
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	ac 01       	movw	r20, r24
    35f0:	41 59       	subi	r20, 0x91	; 145
    35f2:	5f 4f       	sbci	r21, 0xFF	; 255
    35f4:	6b e1       	ldi	r22, 0x1B	; 27
    35f6:	fa 01       	movw	r30, r20
    35f8:	34 96       	adiw	r30, 0x04	; 4
    35fa:	d9 01       	movw	r26, r18
    35fc:	14 96       	adiw	r26, 0x04	; 4
    35fe:	01 90       	ld	r0, Z+
    3600:	0d 92       	st	X+, r0
    3602:	6a 95       	dec	r22
    3604:	e1 f7       	brne	.-8      	; 0x35fe <_ZN10CardReader5updirEv+0x3e>
    3606:	fa 01       	movw	r30, r20
    3608:	42 81       	ldd	r20, Z+2	; 0x02
    360a:	53 81       	ldd	r21, Z+3	; 0x03
    360c:	f9 01       	movw	r30, r18
    360e:	53 83       	std	Z+3, r21	; 0x03
    3610:	42 83       	std	Z+2, r20	; 0x02
    workDir = workDirParents[0];
    int d;
    for (int d = 0; d < workDirDepth; d++)
    3612:	28 81       	ld	r18, Y
    3614:	39 81       	ldd	r19, Y+1	; 0x01
    3616:	23 2b       	or	r18, r19
    3618:	a9 f1       	breq	.+106    	; 0x3684 <_ZN10CardReader5updirEv+0xc4>
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
      workDirParents[d] = workDirParents[d+1];
    361e:	0f 2e       	mov	r0, r31
    3620:	ff e1       	ldi	r31, 0x1F	; 31
    3622:	ff 2e       	mov	r15, r31
    3624:	f0 2d       	mov	r31, r0
    3626:	0f 2e       	mov	r0, r31
    3628:	fb e1       	ldi	r31, 0x1B	; 27
    362a:	ef 2e       	mov	r14, r31
    362c:	f0 2d       	mov	r31, r0
  if(workDirDepth > 0)
  {
    --workDirDepth;
    workDir = workDirParents[0];
    int d;
    for (int d = 0; d < workDirDepth; d++)
    362e:	8e 01       	movw	r16, r28
      workDirParents[d] = workDirParents[d+1];
    3630:	a9 01       	movw	r20, r18
    3632:	4f 5f       	subi	r20, 0xFF	; 255
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	f4 9e       	mul	r15, r20
    3638:	b0 01       	movw	r22, r0
    363a:	f5 9e       	mul	r15, r21
    363c:	70 0d       	add	r23, r0
    363e:	11 24       	eor	r1, r1
    3640:	61 59       	subi	r22, 0x91	; 145
    3642:	7f 4f       	sbci	r23, 0xFF	; 255
    3644:	68 0f       	add	r22, r24
    3646:	79 1f       	adc	r23, r25
    3648:	f2 9e       	mul	r15, r18
    364a:	e0 01       	movw	r28, r0
    364c:	f3 9e       	mul	r15, r19
    364e:	d0 0d       	add	r29, r0
    3650:	11 24       	eor	r1, r1
    3652:	c1 59       	subi	r28, 0x91	; 145
    3654:	df 4f       	sbci	r29, 0xFF	; 255
    3656:	c8 0f       	add	r28, r24
    3658:	d9 1f       	adc	r29, r25
    365a:	fb 01       	movw	r30, r22
    365c:	34 96       	adiw	r30, 0x04	; 4
    365e:	de 01       	movw	r26, r28
    3660:	14 96       	adiw	r26, 0x04	; 4
    3662:	2e 2d       	mov	r18, r14
    3664:	01 90       	ld	r0, Z+
    3666:	0d 92       	st	X+, r0
    3668:	2a 95       	dec	r18
    366a:	e1 f7       	brne	.-8      	; 0x3664 <_ZN10CardReader5updirEv+0xa4>
    366c:	fb 01       	movw	r30, r22
    366e:	22 81       	ldd	r18, Z+2	; 0x02
    3670:	33 81       	ldd	r19, Z+3	; 0x03
    3672:	3b 83       	std	Y+3, r19	; 0x03
    3674:	2a 83       	std	Y+2, r18	; 0x02
  if(workDirDepth > 0)
  {
    --workDirDepth;
    workDir = workDirParents[0];
    int d;
    for (int d = 0; d < workDirDepth; d++)
    3676:	9a 01       	movw	r18, r20
    3678:	f8 01       	movw	r30, r16
    367a:	40 81       	ld	r20, Z
    367c:	51 81       	ldd	r21, Z+1	; 0x01
    367e:	24 17       	cp	r18, r20
    3680:	35 07       	cpc	r19, r21
    3682:	b0 f2       	brcs	.-84     	; 0x3630 <_ZN10CardReader5updirEv+0x70>
      workDirParents[d] = workDirParents[d+1];
  }
}
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	08 95       	ret

00003692 <_ZN10CardReader19printingHasFinishedEv>:


void CardReader::printingHasFinished()
{
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	ec 01       	movw	r28, r24
    st_synchronize();
    3698:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    quickStop();
    369c:	0e 94 86 72 	call	0xe50c	; 0xe50c <_Z9quickStopv>
    file.close();
    36a0:	ce 01       	movw	r24, r28
    36a2:	82 53       	subi	r24, 0x32	; 50
    36a4:	9e 4f       	sbci	r25, 0xFE	; 254
    36a6:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    sdprinting = false;
    36aa:	1a 82       	std	Y+2, r1	; 0x02
    if(SD_FINISHED_STEPPERRELEASE)
    {
        //finishAndDisableSteppers();
        enquecommand_P(PSTR(SD_FINISHED_RELEASECOMMAND));
    36ac:	81 e9       	ldi	r24, 0x91	; 145
    36ae:	92 e0       	ldi	r25, 0x02	; 2
    36b0:	94 d7       	rcall	.+3880   	; 0x45da <_Z14enquecommand_PPKc>
void setWatch();
void updatePID();

FORCE_INLINE void autotempShutdown(){
 #ifdef AUTOTEMP
 if(autotemp_enabled)
    36b2:	80 91 29 0e 	lds	r24, 0x0E29
    36b6:	88 23       	and	r24, r24
    36b8:	21 f1       	breq	.+72     	; 0x3702 <_ZN10CardReader19printingHasFinishedEv+0x70>
 {
  autotemp_enabled=false;
    36ba:	10 92 29 0e 	sts	0x0E29, r1
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    36be:	c0 91 63 05 	lds	r28, 0x0563
    36c2:	d0 e0       	ldi	r29, 0x00	; 0
    36c4:	fe 01       	movw	r30, r28
    36c6:	ee 0f       	add	r30, r30
    36c8:	ff 1f       	adc	r31, r31
    36ca:	e7 5e       	subi	r30, 0xE7	; 231
    36cc:	fe 4e       	sbci	r31, 0xEE	; 238
    36ce:	60 81       	ld	r22, Z
    36d0:	71 81       	ldd	r23, Z+1	; 0x01
    36d2:	88 27       	eor	r24, r24
    36d4:	77 fd       	sbrc	r23, 7
    36d6:	80 95       	com	r24
    36d8:	98 2f       	mov	r25, r24
    36da:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
FORCE_INLINE void autotempShutdown(){
 #ifdef AUTOTEMP
 if(autotemp_enabled)
 {
  autotemp_enabled=false;
  if(degTargetHotend(active_extruder)>autotemp_min)
    36de:	20 91 42 02 	lds	r18, 0x0242
    36e2:	30 91 43 02 	lds	r19, 0x0243
    36e6:	40 91 44 02 	lds	r20, 0x0244
    36ea:	50 91 45 02 	lds	r21, 0x0245
    36ee:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    36f2:	18 16       	cp	r1, r24
    36f4:	34 f4       	brge	.+12     	; 0x3702 <_ZN10CardReader19printingHasFinishedEv+0x70>
FORCE_INLINE float degTargetBed() {   
  return target_temperature_bed;
};

FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  
  target_temperature[extruder] = celsius;
    36f6:	cc 0f       	add	r28, r28
    36f8:	dd 1f       	adc	r29, r29
    36fa:	c7 5e       	subi	r28, 0xE7	; 231
    36fc:	de 4e       	sbci	r29, 0xEE	; 238
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	18 82       	st	Y, r1
    }
    autotempShutdown();
}
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	08 95       	ret

00003708 <_Z19Config_ResetDefaultv>:
    Config_PrintSettings();
}
#endif

void Config_ResetDefault()
{
    3708:	af 92       	push	r10
    370a:	bf 92       	push	r11
    370c:	cf 92       	push	r12
    370e:	df 92       	push	r13
    3710:	ef 92       	push	r14
    3712:	ff 92       	push	r15
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	e0 97       	sbiw	r28, 0x30	; 48
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    float tmp1[]=DEFAULT_AXIS_STEPS_PER_UNIT;
    372c:	80 e1       	ldi	r24, 0x10	; 16
    372e:	ed e7       	ldi	r30, 0x7D	; 125
    3730:	f2 e0       	ldi	r31, 0x02	; 2
    3732:	de 01       	movw	r26, r28
    3734:	91 96       	adiw	r26, 0x21	; 33
    3736:	01 90       	ld	r0, Z+
    3738:	0d 92       	st	X+, r0
    373a:	8a 95       	dec	r24
    373c:	e1 f7       	brne	.-8      	; 0x3736 <_Z19Config_ResetDefaultv+0x2e>
    float tmp2[]=DEFAULT_MAX_FEEDRATE;
    373e:	80 e1       	ldi	r24, 0x10	; 16
    3740:	ed e8       	ldi	r30, 0x8D	; 141
    3742:	f2 e0       	ldi	r31, 0x02	; 2
    3744:	de 01       	movw	r26, r28
    3746:	51 96       	adiw	r26, 0x11	; 17
    3748:	01 90       	ld	r0, Z+
    374a:	0d 92       	st	X+, r0
    374c:	8a 95       	dec	r24
    374e:	e1 f7       	brne	.-8      	; 0x3748 <_Z19Config_ResetDefaultv+0x40>
    long tmp3[]=DEFAULT_MAX_ACCELERATION;
    3750:	80 e1       	ldi	r24, 0x10	; 16
    3752:	ed e9       	ldi	r30, 0x9D	; 157
    3754:	f2 e0       	ldi	r31, 0x02	; 2
    3756:	de 01       	movw	r26, r28
    3758:	11 96       	adiw	r26, 0x01	; 1
    375a:	01 90       	ld	r0, Z+
    375c:	0d 92       	st	X+, r0
    375e:	8a 95       	dec	r24
    3760:	e1 f7       	brne	.-8      	; 0x375a <_Z19Config_ResetDefaultv+0x52>
    3762:	6e 01       	movw	r12, r28
    3764:	81 e2       	ldi	r24, 0x21	; 33
    3766:	c8 0e       	add	r12, r24
    3768:	d1 1c       	adc	r13, r1
    376a:	0f 2e       	mov	r0, r31
    376c:	f6 e7       	ldi	r31, 0x76	; 118
    376e:	ef 2e       	mov	r14, r31
    3770:	fe e0       	ldi	r31, 0x0E	; 14
    3772:	ff 2e       	mov	r15, r31
    3774:	f0 2d       	mov	r31, r0
    3776:	8e 01       	movw	r16, r28
    3778:	0f 5e       	subi	r16, 0xEF	; 239
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	66 e8       	ldi	r22, 0x86	; 134
    377e:	7e e0       	ldi	r23, 0x0E	; 14
    3780:	ae 01       	movw	r20, r28
    3782:	4f 5f       	subi	r20, 0xFF	; 255
    3784:	5f 4f       	sbci	r21, 0xFF	; 255
    3786:	0f 2e       	mov	r0, r31
    3788:	f6 e6       	ldi	r31, 0x66	; 102
    378a:	af 2e       	mov	r10, r31
    378c:	fe e0       	ldi	r31, 0x0E	; 14
    378e:	bf 2e       	mov	r11, r31
    3790:	f0 2d       	mov	r31, r0
    for (short i=0;i<4;i++) 
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    {
        axis_steps_per_unit[i]=tmp1[i];  
    3796:	f6 01       	movw	r30, r12
    3798:	81 91       	ld	r24, Z+
    379a:	91 91       	ld	r25, Z+
    379c:	a1 91       	ld	r26, Z+
    379e:	b1 91       	ld	r27, Z+
    37a0:	6f 01       	movw	r12, r30
    37a2:	f7 01       	movw	r30, r14
    37a4:	81 93       	st	Z+, r24
    37a6:	91 93       	st	Z+, r25
    37a8:	a1 93       	st	Z+, r26
    37aa:	b1 93       	st	Z+, r27
    37ac:	7f 01       	movw	r14, r30
        max_feedrate[i]=tmp2[i];  
    37ae:	f8 01       	movw	r30, r16
    37b0:	81 91       	ld	r24, Z+
    37b2:	91 91       	ld	r25, Z+
    37b4:	a1 91       	ld	r26, Z+
    37b6:	b1 91       	ld	r27, Z+
    37b8:	8f 01       	movw	r16, r30
    37ba:	fb 01       	movw	r30, r22
    37bc:	81 93       	st	Z+, r24
    37be:	91 93       	st	Z+, r25
    37c0:	a1 93       	st	Z+, r26
    37c2:	b1 93       	st	Z+, r27
    37c4:	bf 01       	movw	r22, r30
        max_acceleration_units_per_sq_second[i]=tmp3[i];
    37c6:	fa 01       	movw	r30, r20
    37c8:	81 91       	ld	r24, Z+
    37ca:	91 91       	ld	r25, Z+
    37cc:	a1 91       	ld	r26, Z+
    37ce:	b1 91       	ld	r27, Z+
    37d0:	af 01       	movw	r20, r30
    37d2:	f5 01       	movw	r30, r10
    37d4:	81 93       	st	Z+, r24
    37d6:	91 93       	st	Z+, r25
    37d8:	a1 93       	st	Z+, r26
    37da:	b1 93       	st	Z+, r27
    37dc:	5f 01       	movw	r10, r30
void Config_ResetDefault()
{
    float tmp1[]=DEFAULT_AXIS_STEPS_PER_UNIT;
    float tmp2[]=DEFAULT_MAX_FEEDRATE;
    long tmp3[]=DEFAULT_MAX_ACCELERATION;
    for (short i=0;i<4;i++) 
    37de:	2f 5f       	subi	r18, 0xFF	; 255
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	24 30       	cpi	r18, 0x04	; 4
    37e4:	31 05       	cpc	r19, r1
    37e6:	b9 f6       	brne	.-82     	; 0x3796 <_Z19Config_ResetDefaultv+0x8e>
        max_feedrate[i]=tmp2[i];  
        max_acceleration_units_per_sq_second[i]=tmp3[i];
    }
    
    // steps per sq second need to be updated to agree with the units per sq second
    reset_acceleration_rates();
    37e8:	0e 94 aa 57 	call	0xaf54	; 0xaf54 <_Z24reset_acceleration_ratesv>
    
    acceleration=DEFAULT_ACCELERATION;
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e8       	ldi	r25, 0x80	; 128
    37f0:	ab e3       	ldi	r26, 0x3B	; 59
    37f2:	b5 e4       	ldi	r27, 0x45	; 69
    37f4:	80 93 5e 0e 	sts	0x0E5E, r24
    37f8:	90 93 5f 0e 	sts	0x0E5F, r25
    37fc:	a0 93 60 0e 	sts	0x0E60, r26
    3800:	b0 93 61 0e 	sts	0x0E61, r27
    retract_acceleration=DEFAULT_RETRACT_ACCELERATION;
    3804:	80 93 5a 0e 	sts	0x0E5A, r24
    3808:	90 93 5b 0e 	sts	0x0E5B, r25
    380c:	a0 93 5c 0e 	sts	0x0E5C, r26
    3810:	b0 93 5d 0e 	sts	0x0E5D, r27
    minimumfeedrate=DEFAULT_MINIMUMFEEDRATE;
    3814:	10 92 62 0e 	sts	0x0E62, r1
    3818:	10 92 63 0e 	sts	0x0E63, r1
    381c:	10 92 64 0e 	sts	0x0E64, r1
    3820:	10 92 65 0e 	sts	0x0E65, r1
    minsegmenttime=DEFAULT_MINSEGMENTTIME;       
    3824:	80 e2       	ldi	r24, 0x20	; 32
    3826:	9e e4       	ldi	r25, 0x4E	; 78
    3828:	a0 e0       	ldi	r26, 0x00	; 0
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	80 93 96 0e 	sts	0x0E96, r24
    3830:	90 93 97 0e 	sts	0x0E97, r25
    3834:	a0 93 98 0e 	sts	0x0E98, r26
    3838:	b0 93 99 0e 	sts	0x0E99, r27
    mintravelfeedrate=DEFAULT_MINTRAVELFEEDRATE;
    383c:	10 92 4a 0e 	sts	0x0E4A, r1
    3840:	10 92 4b 0e 	sts	0x0E4B, r1
    3844:	10 92 4c 0e 	sts	0x0E4C, r1
    3848:	10 92 4d 0e 	sts	0x0E4D, r1
    max_xy_jerk=DEFAULT_XYJERK;
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	a0 ea       	ldi	r26, 0xA0	; 160
    3852:	b1 e4       	ldi	r27, 0x41	; 65
    3854:	80 93 56 0e 	sts	0x0E56, r24
    3858:	90 93 57 0e 	sts	0x0E57, r25
    385c:	a0 93 58 0e 	sts	0x0E58, r26
    3860:	b0 93 59 0e 	sts	0x0E59, r27
    max_z_jerk=DEFAULT_ZJERK;
    3864:	8d ec       	ldi	r24, 0xCD	; 205
    3866:	9c ec       	ldi	r25, 0xCC	; 204
    3868:	ac ec       	ldi	r26, 0xCC	; 204
    386a:	be e3       	ldi	r27, 0x3E	; 62
    386c:	80 93 52 0e 	sts	0x0E52, r24
    3870:	90 93 53 0e 	sts	0x0E53, r25
    3874:	a0 93 54 0e 	sts	0x0E54, r26
    3878:	b0 93 55 0e 	sts	0x0E55, r27
    max_e_jerk=DEFAULT_EJERK;
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	a0 ea       	ldi	r26, 0xA0	; 160
    3882:	b0 e4       	ldi	r27, 0x40	; 64
    3884:	80 93 4e 0e 	sts	0x0E4E, r24
    3888:	90 93 4f 0e 	sts	0x0E4F, r25
    388c:	a0 93 50 0e 	sts	0x0E50, r26
    3890:	b0 93 51 0e 	sts	0x0E51, r27
    add_homeing[0] = add_homeing[1] = add_homeing[2] = 0;
    3894:	10 92 78 05 	sts	0x0578, r1
    3898:	10 92 79 05 	sts	0x0579, r1
    389c:	10 92 7a 05 	sts	0x057A, r1
    38a0:	10 92 7b 05 	sts	0x057B, r1
    38a4:	10 92 74 05 	sts	0x0574, r1
    38a8:	10 92 75 05 	sts	0x0575, r1
    38ac:	10 92 76 05 	sts	0x0576, r1
    38b0:	10 92 77 05 	sts	0x0577, r1
    38b4:	10 92 70 05 	sts	0x0570, r1
    38b8:	10 92 71 05 	sts	0x0571, r1
    38bc:	10 92 72 05 	sts	0x0572, r1
    38c0:	10 92 73 05 	sts	0x0573, r1
#ifdef DELTA
    endstop_adj[0] = endstop_adj[1] = endstop_adj[2] = 0;
#endif
#ifdef ULTIPANEL
    plaPreheatHotendTemp = PLA_PREHEAT_HOTEND_TEMP;
    38c4:	84 eb       	ldi	r24, 0xB4	; 180
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	90 93 23 12 	sts	0x1223, r25
    38cc:	80 93 22 12 	sts	0x1222, r24
    plaPreheatHPBTemp = PLA_PREHEAT_HPB_TEMP;
    38d0:	86 e4       	ldi	r24, 0x46	; 70
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	90 93 21 12 	sts	0x1221, r25
    38d8:	80 93 20 12 	sts	0x1220, r24
    plaPreheatFanSpeed = PLA_PREHEAT_FAN_SPEED;
    38dc:	8f ef       	ldi	r24, 0xFF	; 255
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	90 93 1f 12 	sts	0x121F, r25
    38e4:	80 93 1e 12 	sts	0x121E, r24
    absPreheatHotendTemp = ABS_PREHEAT_HOTEND_TEMP;
    38e8:	20 ef       	ldi	r18, 0xF0	; 240
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	30 93 1d 12 	sts	0x121D, r19
    38f0:	20 93 1c 12 	sts	0x121C, r18
    absPreheatHPBTemp = ABS_PREHEAT_HPB_TEMP;
    38f4:	24 e6       	ldi	r18, 0x64	; 100
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	30 93 1b 12 	sts	0x121B, r19
    38fc:	20 93 1a 12 	sts	0x121A, r18
    absPreheatFanSpeed = ABS_PREHEAT_FAN_SPEED;
    3900:	90 93 19 12 	sts	0x1219, r25
    3904:	80 93 18 12 	sts	0x1218, r24
#endif
#ifdef DOGLCD
    lcd_contrast = DEFAULT_LCD_CONTRAST;
#endif
#ifdef PIDTEMP
    Kp = DEFAULT_Kp;
    3908:	8a e9       	ldi	r24, 0x9A	; 154
    390a:	99 e9       	ldi	r25, 0x99	; 153
    390c:	a1 eb       	ldi	r26, 0xB1	; 177
    390e:	b1 e4       	ldi	r27, 0x41	; 65
    3910:	80 93 5b 02 	sts	0x025B, r24
    3914:	90 93 5c 02 	sts	0x025C, r25
    3918:	a0 93 5d 02 	sts	0x025D, r26
    391c:	b0 93 5e 02 	sts	0x025E, r27
    Ki = scalePID_i(DEFAULT_Ki);
    3920:	61 e7       	ldi	r22, 0x71	; 113
    3922:	7d e3       	ldi	r23, 0x3D	; 61
    3924:	8a e8       	ldi	r24, 0x8A	; 138
    3926:	9f e3       	ldi	r25, 0x3F	; 63
    3928:	0e 94 8a 7d 	call	0xfb14	; 0xfb14 <_Z10scalePID_if>
    392c:	60 93 57 02 	sts	0x0257, r22
    3930:	70 93 58 02 	sts	0x0258, r23
    3934:	80 93 59 02 	sts	0x0259, r24
    3938:	90 93 5a 02 	sts	0x025A, r25
    Kd = scalePID_d(DEFAULT_Kd);
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	84 ee       	ldi	r24, 0xE4	; 228
    3942:	92 e4       	ldi	r25, 0x42	; 66
    3944:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <_Z10scalePID_df>
    3948:	60 93 53 02 	sts	0x0253, r22
    394c:	70 93 54 02 	sts	0x0254, r23
    3950:	80 93 55 02 	sts	0x0255, r24
    3954:	90 93 56 02 	sts	0x0256, r25
    
    // call updatePID (similar to when we have processed M301)
    updatePID();
    3958:	0e 94 1c 73 	call	0xe638	; 0xe638 <_Z9updatePIDv>
    
#ifdef PID_ADD_EXTRUSION_RATE
    Kc = DEFAULT_Kc;
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	a0 e8       	ldi	r26, 0x80	; 128
    3962:	bf e3       	ldi	r27, 0x3F	; 63
    3964:	80 93 4f 02 	sts	0x024F, r24
    3968:	90 93 50 02 	sts	0x0250, r25
    396c:	a0 93 51 02 	sts	0x0251, r26
    3970:	b0 93 52 02 	sts	0x0252, r27


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    3974:	ed e9       	ldi	r30, 0x9D	; 157
    3976:	f2 e0       	ldi	r31, 0x02	; 2
    3978:	34 91       	lpm	r19, Z
  while(ch)
    397a:	33 23       	and	r19, r19
    397c:	81 f0       	breq	.+32     	; 0x399e <_Z19Config_ResetDefaultv+0x296>
    397e:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3980:	a0 ec       	ldi	r26, 0xC0	; 192
    3982:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    3984:	86 ec       	ldi	r24, 0xC6	; 198
    3986:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3988:	2c 91       	ld	r18, X
    398a:	25 ff       	sbrs	r18, 5
    398c:	fd cf       	rjmp	.-6      	; 0x3988 <_Z19Config_ResetDefaultv+0x280>
        ;

      M_UDRx = c;
    398e:	fc 01       	movw	r30, r24
    3990:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    3992:	4f 5f       	subi	r20, 0xFF	; 255
    3994:	5f 4f       	sbci	r21, 0xFF	; 255
    3996:	fa 01       	movw	r30, r20
    3998:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    399a:	31 11       	cpse	r19, r1
    399c:	f5 cf       	rjmp	.-22     	; 0x3988 <_Z19Config_ResetDefaultv+0x280>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    399e:	e3 ea       	ldi	r30, 0xA3	; 163
    39a0:	f2 e0       	ldi	r31, 0x02	; 2
    39a2:	34 91       	lpm	r19, Z
  while(ch)
    39a4:	33 23       	and	r19, r19
    39a6:	81 f0       	breq	.+32     	; 0x39c8 <_Z19Config_ResetDefaultv+0x2c0>
    39a8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    39aa:	a0 ec       	ldi	r26, 0xC0	; 192
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    39ae:	86 ec       	ldi	r24, 0xC6	; 198
    39b0:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    39b2:	2c 91       	ld	r18, X
    39b4:	25 ff       	sbrs	r18, 5
    39b6:	fd cf       	rjmp	.-6      	; 0x39b2 <_Z19Config_ResetDefaultv+0x2aa>
        ;

      M_UDRx = c;
    39b8:	fc 01       	movw	r30, r24
    39ba:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    39bc:	4f 5f       	subi	r20, 0xFF	; 255
    39be:	5f 4f       	sbci	r21, 0xFF	; 255
    39c0:	fa 01       	movw	r30, r20
    39c2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    39c4:	31 11       	cpse	r19, r1
    39c6:	f5 cf       	rjmp	.-22     	; 0x39b2 <_Z19Config_ResetDefaultv+0x2aa>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    39c8:	e0 ec       	ldi	r30, 0xC0	; 192
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	85 ff       	sbrs	r24, 5
    39d0:	fd cf       	rjmp	.-6      	; 0x39cc <_Z19Config_ResetDefaultv+0x2c4>
        ;

      M_UDRx = c;
    39d2:	8a e0       	ldi	r24, 0x0A	; 10
    39d4:	80 93 c6 00 	sts	0x00C6, r24
#endif//PIDTEMP

SERIAL_ECHO_START;
SERIAL_ECHOLNPGM("Hardcoded Default Settings Loaded");

}
    39d8:	e0 96       	adiw	r28, 0x30	; 48
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    39ec:	ff 90       	pop	r15
    39ee:	ef 90       	pop	r14
    39f0:	df 90       	pop	r13
    39f2:	cf 90       	pop	r12
    39f4:	bf 90       	pop	r11
    39f6:	af 90       	pop	r10
    39f8:	08 95       	ret

000039fa <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    39fa:	20 91 b0 04 	lds	r18, 0x04B0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	80 91 b1 04 	lds	r24, 0x04B1
    3a04:	28 1b       	sub	r18, r24
    3a06:	31 09       	sbc	r19, r1
    3a08:	82 2f       	mov	r24, r18
    3a0a:	93 2f       	mov	r25, r19
    3a0c:	08 95       	ret

00003a0e <_ZN7TwoWire4readEv>:
    3a0e:	80 91 b1 04 	lds	r24, 0x04B1
    3a12:	90 91 b0 04 	lds	r25, 0x04B0
    3a16:	89 17       	cp	r24, r25
    3a18:	50 f4       	brcc	.+20     	; 0x3a2e <_ZN7TwoWire4readEv+0x20>
    3a1a:	e8 2f       	mov	r30, r24
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	ee 54       	subi	r30, 0x4E	; 78
    3a20:	fb 4f       	sbci	r31, 0xFB	; 251
    3a22:	20 81       	ld	r18, Z
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	8f 5f       	subi	r24, 0xFF	; 255
    3a28:	80 93 b1 04 	sts	0x04B1, r24
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <_ZN7TwoWire4readEv+0x24>
    3a2e:	2f ef       	ldi	r18, 0xFF	; 255
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	82 2f       	mov	r24, r18
    3a34:	93 2f       	mov	r25, r19
    3a36:	08 95       	ret

00003a38 <_ZN7TwoWire4peekEv>:
    3a38:	e0 91 b1 04 	lds	r30, 0x04B1
    3a3c:	80 91 b0 04 	lds	r24, 0x04B0
    3a40:	e8 17       	cp	r30, r24
    3a42:	30 f4       	brcc	.+12     	; 0x3a50 <_ZN7TwoWire4peekEv+0x18>
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	ee 54       	subi	r30, 0x4E	; 78
    3a48:	fb 4f       	sbci	r31, 0xFB	; 251
    3a4a:	20 81       	ld	r18, Z
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <_ZN7TwoWire4peekEv+0x1c>
    3a50:	2f ef       	ldi	r18, 0xFF	; 255
    3a52:	3f ef       	ldi	r19, 0xFF	; 255
    3a54:	82 2f       	mov	r24, r18
    3a56:	93 2f       	mov	r25, r19
    3a58:	08 95       	ret

00003a5a <_ZN7TwoWire5flushEv>:
    3a5a:	08 95       	ret

00003a5c <_ZN7TwoWire5writeEPKhj>:
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	8c 01       	movw	r16, r24
    3a6e:	86 2f       	mov	r24, r22
    3a70:	6a 01       	movw	r12, r20
    3a72:	20 91 8c 04 	lds	r18, 0x048C
    3a76:	22 23       	and	r18, r18
    3a78:	a9 f0       	breq	.+42     	; 0x3aa4 <_ZN7TwoWire5writeEPKhj+0x48>
    3a7a:	41 15       	cp	r20, r1
    3a7c:	51 05       	cpc	r21, r1
    3a7e:	b1 f0       	breq	.+44     	; 0x3aac <_ZN7TwoWire5writeEPKhj+0x50>
    3a80:	c6 2f       	mov	r28, r22
    3a82:	d7 2f       	mov	r29, r23
    3a84:	7a 01       	movw	r14, r20
    3a86:	ec 0e       	add	r14, r28
    3a88:	fd 1e       	adc	r15, r29
    3a8a:	69 91       	ld	r22, Y+
    3a8c:	d8 01       	movw	r26, r16
    3a8e:	ed 91       	ld	r30, X+
    3a90:	fc 91       	ld	r31, X
    3a92:	01 90       	ld	r0, Z+
    3a94:	f0 81       	ld	r31, Z
    3a96:	e0 2d       	mov	r30, r0
    3a98:	c8 01       	movw	r24, r16
    3a9a:	19 95       	eicall
    3a9c:	ce 15       	cp	r28, r14
    3a9e:	df 05       	cpc	r29, r15
    3aa0:	a1 f7       	brne	.-24     	; 0x3a8a <_ZN7TwoWire5writeEPKhj+0x2e>
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <_ZN7TwoWire5writeEPKhj+0x50>
    3aa4:	64 2f       	mov	r22, r20
    3aa6:	97 2f       	mov	r25, r23
    3aa8:	0e 94 58 7e 	call	0xfcb0	; 0xfcb0 <twi_transmit>
    3aac:	8c 2d       	mov	r24, r12
    3aae:	9d 2d       	mov	r25, r13
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	ff 90       	pop	r15
    3aba:	ef 90       	pop	r14
    3abc:	df 90       	pop	r13
    3abe:	cf 90       	pop	r12
    3ac0:	08 95       	ret

00003ac2 <_ZN7TwoWire5writeEh>:
    3ac2:	cf 93       	push	r28
    3ac4:	df 93       	push	r29
    3ac6:	1f 92       	push	r1
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	69 83       	std	Y+1, r22	; 0x01
    3ace:	20 91 8c 04 	lds	r18, 0x048C
    3ad2:	22 23       	and	r18, r18
    3ad4:	e1 f0       	breq	.+56     	; 0x3b0e <_ZN7TwoWire5writeEh+0x4c>
    3ad6:	20 91 8d 04 	lds	r18, 0x048D
    3ada:	20 32       	cpi	r18, 0x20	; 32
    3adc:	40 f0       	brcs	.+16     	; 0x3aee <_ZN7TwoWire5writeEh+0x2c>
    3ade:	21 e0       	ldi	r18, 0x01	; 1
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	33 83       	std	Z+3, r19	; 0x03
    3ae6:	22 83       	std	Z+2, r18	; 0x02
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	17 c0       	rjmp	.+46     	; 0x3b1c <_ZN7TwoWire5writeEh+0x5a>
    3aee:	80 91 8e 04 	lds	r24, 0x048E
    3af2:	e8 2f       	mov	r30, r24
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	e1 57       	subi	r30, 0x71	; 113
    3af8:	fb 4f       	sbci	r31, 0xFB	; 251
    3afa:	99 81       	ldd	r25, Y+1	; 0x01
    3afc:	90 83       	st	Z, r25
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	80 93 8e 04 	sts	0x048E, r24
    3b04:	80 93 8d 04 	sts	0x048D, r24
    3b08:	21 e0       	ldi	r18, 0x01	; 1
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	07 c0       	rjmp	.+14     	; 0x3b1c <_ZN7TwoWire5writeEh+0x5a>
    3b0e:	61 e0       	ldi	r22, 0x01	; 1
    3b10:	ce 01       	movw	r24, r28
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	0e 94 58 7e 	call	0xfcb0	; 0xfcb0 <twi_transmit>
    3b18:	21 e0       	ldi	r18, 0x01	; 1
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	82 2f       	mov	r24, r18
    3b1e:	93 2f       	mov	r25, r19
    3b20:	0f 90       	pop	r0
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	08 95       	ret

00003b28 <_ZN7TwoWireC1Ev>:
    3b28:	fc 01       	movw	r30, r24
    3b2a:	13 82       	std	Z+3, r1	; 0x03
    3b2c:	12 82       	std	Z+2, r1	; 0x02
    3b2e:	48 ee       	ldi	r20, 0xE8	; 232
    3b30:	53 e0       	ldi	r21, 0x03	; 3
    3b32:	60 e0       	ldi	r22, 0x00	; 0
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	44 83       	std	Z+4, r20	; 0x04
    3b38:	55 83       	std	Z+5, r21	; 0x05
    3b3a:	66 83       	std	Z+6, r22	; 0x06
    3b3c:	77 83       	std	Z+7, r23	; 0x07
    3b3e:	84 e2       	ldi	r24, 0x24	; 36
    3b40:	93 e0       	ldi	r25, 0x03	; 3
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
    3b46:	08 95       	ret

00003b48 <_ZN7TwoWire5beginEv>:
    3b48:	10 92 b1 04 	sts	0x04B1, r1
    3b4c:	10 92 b0 04 	sts	0x04B0, r1
    3b50:	10 92 8e 04 	sts	0x048E, r1
    3b54:	10 92 8d 04 	sts	0x048D, r1
    3b58:	0c 94 a2 7d 	jmp	0xfb44	; 0xfb44 <twi_init>

00003b5c <_ZN7TwoWire11requestFromEhhh>:
    3b5c:	86 2f       	mov	r24, r22
    3b5e:	41 32       	cpi	r20, 0x21	; 33
    3b60:	08 f0       	brcs	.+2      	; 0x3b64 <_ZN7TwoWire11requestFromEhhh+0x8>
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	62 eb       	ldi	r22, 0xB2	; 178
    3b66:	74 e0       	ldi	r23, 0x04	; 4
    3b68:	0e 94 c0 7d 	call	0xfb80	; 0xfb80 <twi_readFrom>
    3b6c:	10 92 b1 04 	sts	0x04B1, r1
    3b70:	80 93 b0 04 	sts	0x04B0, r24
    3b74:	08 95       	ret

00003b76 <_ZN7TwoWire11requestFromEhh>:
    3b76:	21 e0       	ldi	r18, 0x01	; 1
    3b78:	f1 cf       	rjmp	.-30     	; 0x3b5c <_ZN7TwoWire11requestFromEhhh>

00003b7a <_ZN7TwoWire17beginTransmissionEh>:
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	80 93 8c 04 	sts	0x048C, r24
    3b80:	60 93 af 04 	sts	0x04AF, r22
    3b84:	10 92 8e 04 	sts	0x048E, r1
    3b88:	10 92 8d 04 	sts	0x048D, r1
    3b8c:	08 95       	ret

00003b8e <_ZN7TwoWire15endTransmissionEh>:
    3b8e:	0f 93       	push	r16
    3b90:	06 2f       	mov	r16, r22
    3b92:	21 e0       	ldi	r18, 0x01	; 1
    3b94:	40 91 8d 04 	lds	r20, 0x048D
    3b98:	6f e8       	ldi	r22, 0x8F	; 143
    3b9a:	74 e0       	ldi	r23, 0x04	; 4
    3b9c:	80 91 af 04 	lds	r24, 0x04AF
    3ba0:	0e 94 05 7e 	call	0xfc0a	; 0xfc0a <twi_writeTo>
    3ba4:	10 92 8e 04 	sts	0x048E, r1
    3ba8:	10 92 8d 04 	sts	0x048D, r1
    3bac:	10 92 8c 04 	sts	0x048C, r1
    3bb0:	0f 91       	pop	r16
    3bb2:	08 95       	ret

00003bb4 <_ZN7TwoWire15endTransmissionEv>:
    3bb4:	61 e0       	ldi	r22, 0x01	; 1
    3bb6:	eb cf       	rjmp	.-42     	; 0x3b8e <_ZN7TwoWire15endTransmissionEh>

00003bb8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3bb8:	80 e8       	ldi	r24, 0x80	; 128
    3bba:	94 e0       	ldi	r25, 0x04	; 4
    3bbc:	b5 cf       	rjmp	.-150    	; 0x3b28 <_ZN7TwoWireC1Ev>

00003bbe <__vector_25>:

void MarlinSerial::println(long n, int base)
{
  print(n, base);
  println();
}
    3bbe:	1f 92       	push	r1
    3bc0:	0f 92       	push	r0
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	0f 92       	push	r0
    3bc6:	11 24       	eor	r1, r1
    3bc8:	0b b6       	in	r0, 0x3b	; 59
    3bca:	0f 92       	push	r0
    3bcc:	2f 93       	push	r18
    3bce:	3f 93       	push	r19
    3bd0:	4f 93       	push	r20
    3bd2:	5f 93       	push	r21
    3bd4:	6f 93       	push	r22
    3bd6:	8f 93       	push	r24
    3bd8:	9f 93       	push	r25
    3bda:	ef 93       	push	r30
    3bdc:	ff 93       	push	r31
    3bde:	60 91 c6 00 	lds	r22, 0x00C6
    3be2:	20 91 53 05 	lds	r18, 0x0553
    3be6:	30 91 54 05 	lds	r19, 0x0554
    3bea:	c9 01       	movw	r24, r18
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	8f 77       	andi	r24, 0x7F	; 127
    3bf0:	99 27       	eor	r25, r25
    3bf2:	40 91 55 05 	lds	r20, 0x0555
    3bf6:	50 91 56 05 	lds	r21, 0x0556
    3bfa:	84 17       	cp	r24, r20
    3bfc:	95 07       	cpc	r25, r21
    3bfe:	41 f0       	breq	.+16     	; 0x3c10 <__vector_25+0x52>
    3c00:	f9 01       	movw	r30, r18
    3c02:	ed 52       	subi	r30, 0x2D	; 45
    3c04:	fb 4f       	sbci	r31, 0xFB	; 251
    3c06:	60 83       	st	Z, r22
    3c08:	90 93 54 05 	sts	0x0554, r25
    3c0c:	80 93 53 05 	sts	0x0553, r24
    3c10:	ff 91       	pop	r31
    3c12:	ef 91       	pop	r30
    3c14:	9f 91       	pop	r25
    3c16:	8f 91       	pop	r24
    3c18:	6f 91       	pop	r22
    3c1a:	5f 91       	pop	r21
    3c1c:	4f 91       	pop	r20
    3c1e:	3f 91       	pop	r19
    3c20:	2f 91       	pop	r18
    3c22:	0f 90       	pop	r0
    3c24:	0b be       	out	0x3b, r0	; 59
    3c26:	0f 90       	pop	r0
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	0f 90       	pop	r0
    3c2c:	1f 90       	pop	r1
    3c2e:	18 95       	reti

00003c30 <_ZN12MarlinSerial5beginEl>:
    3c30:	9a 01       	movw	r18, r20
    3c32:	ab 01       	movw	r20, r22
    3c34:	21 15       	cp	r18, r1
    3c36:	81 ee       	ldi	r24, 0xE1	; 225
    3c38:	38 07       	cpc	r19, r24
    3c3a:	41 05       	cpc	r20, r1
    3c3c:	51 05       	cpc	r21, r1
    3c3e:	e9 f0       	breq	.+58     	; 0x3c7a <_ZN12MarlinSerial5beginEl+0x4a>
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	80 93 c0 00 	sts	0x00C0, r24
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	79 e0       	ldi	r23, 0x09	; 9
    3c4a:	8d e3       	ldi	r24, 0x3D	; 61
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
    3c52:	da 01       	movw	r26, r20
    3c54:	c9 01       	movw	r24, r18
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	a1 09       	sbc	r26, r1
    3c5a:	b1 09       	sbc	r27, r1
    3c5c:	ac 01       	movw	r20, r24
    3c5e:	bd 01       	movw	r22, r26
    3c60:	22 f4       	brpl	.+8      	; 0x3c6a <_ZN12MarlinSerial5beginEl+0x3a>
    3c62:	4f 5f       	subi	r20, 0xFF	; 255
    3c64:	5f 4f       	sbci	r21, 0xFF	; 255
    3c66:	6f 4f       	sbci	r22, 0xFF	; 255
    3c68:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6a:	db 01       	movw	r26, r22
    3c6c:	ca 01       	movw	r24, r20
    3c6e:	b5 95       	asr	r27
    3c70:	a7 95       	ror	r26
    3c72:	97 95       	ror	r25
    3c74:	87 95       	ror	r24
    3c76:	9c 01       	movw	r18, r24
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <_ZN12MarlinSerial5beginEl+0x52>
    3c7a:	10 92 c0 00 	sts	0x00C0, r1
    3c7e:	20 e1       	ldi	r18, 0x10	; 16
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	30 93 c5 00 	sts	0x00C5, r19
    3c86:	20 93 c4 00 	sts	0x00C4, r18
    3c8a:	e1 ec       	ldi	r30, 0xC1	; 193
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	80 81       	ld	r24, Z
    3c90:	80 61       	ori	r24, 0x10	; 16
    3c92:	80 83       	st	Z, r24
    3c94:	80 81       	ld	r24, Z
    3c96:	88 60       	ori	r24, 0x08	; 8
    3c98:	80 83       	st	Z, r24
    3c9a:	80 81       	ld	r24, Z
    3c9c:	80 68       	ori	r24, 0x80	; 128
    3c9e:	80 83       	st	Z, r24
    3ca0:	08 95       	ret

00003ca2 <_ZN12MarlinSerial4readEv>:
    3ca2:	20 91 55 05 	lds	r18, 0x0555
    3ca6:	30 91 56 05 	lds	r19, 0x0556
    3caa:	80 91 53 05 	lds	r24, 0x0553
    3cae:	90 91 54 05 	lds	r25, 0x0554
    3cb2:	82 17       	cp	r24, r18
    3cb4:	93 07       	cpc	r25, r19
    3cb6:	79 f0       	breq	.+30     	; 0x3cd6 <_ZN12MarlinSerial4readEv+0x34>
    3cb8:	f9 01       	movw	r30, r18
    3cba:	ed 52       	subi	r30, 0x2D	; 45
    3cbc:	fb 4f       	sbci	r31, 0xFB	; 251
    3cbe:	80 81       	ld	r24, Z
    3cc0:	2f 5f       	subi	r18, 0xFF	; 255
    3cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc4:	2f 77       	andi	r18, 0x7F	; 127
    3cc6:	33 27       	eor	r19, r19
    3cc8:	30 93 56 05 	sts	0x0556, r19
    3ccc:	20 93 55 05 	sts	0x0555, r18
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	02 c0       	rjmp	.+4      	; 0x3cda <_ZN12MarlinSerial4readEv+0x38>
    3cd6:	2f ef       	ldi	r18, 0xFF	; 255
    3cd8:	3f ef       	ldi	r19, 0xFF	; 255
    3cda:	82 2f       	mov	r24, r18
    3cdc:	93 2f       	mov	r25, r19
    3cde:	08 95       	ret

00003ce0 <_ZN12MarlinSerial5flushEv>:
    3ce0:	80 91 55 05 	lds	r24, 0x0555
    3ce4:	90 91 56 05 	lds	r25, 0x0556
    3ce8:	90 93 54 05 	sts	0x0554, r25
    3cec:	80 93 53 05 	sts	0x0553, r24
    3cf0:	08 95       	ret

00003cf2 <_ZN12MarlinSerial11printNumberEmh>:
    3cf2:	4f 92       	push	r4
    3cf4:	5f 92       	push	r5
    3cf6:	6f 92       	push	r6
    3cf8:	7f 92       	push	r7
    3cfa:	8f 92       	push	r8
    3cfc:	9f 92       	push	r9
    3cfe:	af 92       	push	r10
    3d00:	bf 92       	push	r11
    3d02:	cf 92       	push	r12
    3d04:	df 92       	push	r13
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    3d16:	a0 97       	sbiw	r28, 0x20	; 32
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	8c 01       	movw	r16, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	ba 01       	movw	r22, r20
    3d28:	61 15       	cp	r22, r1
    3d2a:	71 05       	cpc	r23, r1
    3d2c:	81 05       	cpc	r24, r1
    3d2e:	91 05       	cpc	r25, r1
    3d30:	31 f4       	brne	.+12     	; 0x3d3e <_ZN12MarlinSerial11printNumberEmh+0x4c>
    3d32:	40 e0       	ldi	r20, 0x00	; 0
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	60 e3       	ldi	r22, 0x30	; 48
    3d38:	c8 01       	movw	r24, r16
    3d3a:	b3 d0       	rcall	.+358    	; 0x3ea2 <_ZN12MarlinSerial5printEci>
    3d3c:	4a c0       	rjmp	.+148    	; 0x3dd2 <_ZN12MarlinSerial11printNumberEmh+0xe0>
    3d3e:	ee 24       	eor	r14, r14
    3d40:	e3 94       	inc	r14
    3d42:	f1 2c       	mov	r15, r1
    3d44:	ec 0e       	add	r14, r28
    3d46:	fd 1e       	adc	r15, r29
    3d48:	81 2c       	mov	r8, r1
    3d4a:	91 2c       	mov	r9, r1
    3d4c:	54 01       	movw	r10, r8
    3d4e:	42 2e       	mov	r4, r18
    3d50:	51 2c       	mov	r5, r1
    3d52:	61 2c       	mov	r6, r1
    3d54:	71 2c       	mov	r7, r1
    3d56:	a3 01       	movw	r20, r6
    3d58:	92 01       	movw	r18, r4
    3d5a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
    3d5e:	f7 01       	movw	r30, r14
    3d60:	61 93       	st	Z+, r22
    3d62:	7f 01       	movw	r14, r30
    3d64:	ff ef       	ldi	r31, 0xFF	; 255
    3d66:	8f 1a       	sub	r8, r31
    3d68:	9f 0a       	sbc	r9, r31
    3d6a:	af 0a       	sbc	r10, r31
    3d6c:	bf 0a       	sbc	r11, r31
    3d6e:	62 2f       	mov	r22, r18
    3d70:	73 2f       	mov	r23, r19
    3d72:	84 2f       	mov	r24, r20
    3d74:	95 2f       	mov	r25, r21
    3d76:	61 15       	cp	r22, r1
    3d78:	71 05       	cpc	r23, r1
    3d7a:	81 05       	cpc	r24, r1
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	59 f7       	brne	.-42     	; 0x3d56 <_ZN12MarlinSerial11printNumberEmh+0x64>
    3d80:	81 14       	cp	r8, r1
    3d82:	91 04       	cpc	r9, r1
    3d84:	a1 04       	cpc	r10, r1
    3d86:	b1 04       	cpc	r11, r1
    3d88:	21 f1       	breq	.+72     	; 0x3dd2 <_ZN12MarlinSerial11printNumberEmh+0xe0>
    3d8a:	cc 24       	eor	r12, r12
    3d8c:	ca 94       	dec	r12
    3d8e:	dc 2c       	mov	r13, r12
    3d90:	76 01       	movw	r14, r12
    3d92:	c8 0c       	add	r12, r8
    3d94:	d9 1c       	adc	r13, r9
    3d96:	ea 1c       	adc	r14, r10
    3d98:	fb 1c       	adc	r15, r11
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <_ZN12MarlinSerial11printNumberEmh+0xae>
    3d9c:	6c 01       	movw	r12, r24
    3d9e:	7d 01       	movw	r14, r26
    3da0:	e1 e0       	ldi	r30, 0x01	; 1
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	ec 0f       	add	r30, r28
    3da6:	fd 1f       	adc	r31, r29
    3da8:	ec 0d       	add	r30, r12
    3daa:	fd 1d       	adc	r31, r13
    3dac:	60 81       	ld	r22, Z
    3dae:	6a 30       	cpi	r22, 0x0A	; 10
    3db0:	10 f4       	brcc	.+4      	; 0x3db6 <_ZN12MarlinSerial11printNumberEmh+0xc4>
    3db2:	60 5d       	subi	r22, 0xD0	; 208
    3db4:	01 c0       	rjmp	.+2      	; 0x3db8 <_ZN12MarlinSerial11printNumberEmh+0xc6>
    3db6:	69 5c       	subi	r22, 0xC9	; 201
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	c8 01       	movw	r24, r16
    3dbe:	71 d0       	rcall	.+226    	; 0x3ea2 <_ZN12MarlinSerial5printEci>
    3dc0:	d7 01       	movw	r26, r14
    3dc2:	c6 01       	movw	r24, r12
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	a1 09       	sbc	r26, r1
    3dc8:	b1 09       	sbc	r27, r1
    3dca:	cd 28       	or	r12, r13
    3dcc:	ce 28       	or	r12, r14
    3dce:	cf 28       	or	r12, r15
    3dd0:	29 f7       	brne	.-54     	; 0x3d9c <_ZN12MarlinSerial11printNumberEmh+0xaa>
    3dd2:	a0 96       	adiw	r28, 0x20	; 32
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	ff 90       	pop	r15
    3de8:	ef 90       	pop	r14
    3dea:	df 90       	pop	r13
    3dec:	cf 90       	pop	r12
    3dee:	bf 90       	pop	r11
    3df0:	af 90       	pop	r10
    3df2:	9f 90       	pop	r9
    3df4:	8f 90       	pop	r8
    3df6:	7f 90       	pop	r7
    3df8:	6f 90       	pop	r6
    3dfa:	5f 90       	pop	r5
    3dfc:	4f 90       	pop	r4
    3dfe:	08 95       	ret

00003e00 <_ZN12MarlinSerial5printEmi>:
    3e00:	21 15       	cp	r18, r1
    3e02:	31 05       	cpc	r19, r1
    3e04:	41 f4       	brne	.+16     	; 0x3e16 <_ZN12MarlinSerial5printEmi+0x16>
    3e06:	e0 ec       	ldi	r30, 0xC0	; 192
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	85 ff       	sbrs	r24, 5
    3e0e:	fd cf       	rjmp	.-6      	; 0x3e0a <_ZN12MarlinSerial5printEmi+0xa>
    3e10:	40 93 c6 00 	sts	0x00C6, r20
    3e14:	08 95       	ret
    3e16:	6d cf       	rjmp	.-294    	; 0x3cf2 <_ZN12MarlinSerial11printNumberEmh>

00003e18 <_ZN12MarlinSerial5printEji>:
    3e18:	9a 01       	movw	r18, r20
    3e1a:	ab 01       	movw	r20, r22
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	ef cf       	rjmp	.-34     	; 0x3e00 <_ZN12MarlinSerial5printEmi>

00003e22 <_ZN12MarlinSerial5printEhi>:
    3e22:	9a 01       	movw	r18, r20
    3e24:	46 2f       	mov	r20, r22
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	e9 cf       	rjmp	.-46     	; 0x3e00 <_ZN12MarlinSerial5printEmi>

00003e2e <_ZN12MarlinSerial5printEli>:
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	ec 01       	movw	r28, r24
    3e3c:	6a 01       	movw	r12, r20
    3e3e:	7b 01       	movw	r14, r22
    3e40:	21 15       	cp	r18, r1
    3e42:	31 05       	cpc	r19, r1
    3e44:	41 f4       	brne	.+16     	; 0x3e56 <_ZN12MarlinSerial5printEli+0x28>
    3e46:	e0 ec       	ldi	r30, 0xC0	; 192
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	85 ff       	sbrs	r24, 5
    3e4e:	fd cf       	rjmp	.-6      	; 0x3e4a <_ZN12MarlinSerial5printEli+0x1c>
    3e50:	c0 92 c6 00 	sts	0x00C6, r12
    3e54:	18 c0       	rjmp	.+48     	; 0x3e86 <_ZN12MarlinSerial5printEli+0x58>
    3e56:	2a 30       	cpi	r18, 0x0A	; 10
    3e58:	31 05       	cpc	r19, r1
    3e5a:	a1 f4       	brne	.+40     	; 0x3e84 <_ZN12MarlinSerial5printEli+0x56>
    3e5c:	77 23       	and	r23, r23
    3e5e:	64 f4       	brge	.+24     	; 0x3e78 <_ZN12MarlinSerial5printEli+0x4a>
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	6d e2       	ldi	r22, 0x2D	; 45
    3e66:	1d d0       	rcall	.+58     	; 0x3ea2 <_ZN12MarlinSerial5printEci>
    3e68:	f0 94       	com	r15
    3e6a:	e0 94       	com	r14
    3e6c:	d0 94       	com	r13
    3e6e:	c0 94       	com	r12
    3e70:	c1 1c       	adc	r12, r1
    3e72:	d1 1c       	adc	r13, r1
    3e74:	e1 1c       	adc	r14, r1
    3e76:	f1 1c       	adc	r15, r1
    3e78:	2a e0       	ldi	r18, 0x0A	; 10
    3e7a:	b7 01       	movw	r22, r14
    3e7c:	a6 01       	movw	r20, r12
    3e7e:	ce 01       	movw	r24, r28
    3e80:	38 df       	rcall	.-400    	; 0x3cf2 <_ZN12MarlinSerial11printNumberEmh>
    3e82:	01 c0       	rjmp	.+2      	; 0x3e86 <_ZN12MarlinSerial5printEli+0x58>
    3e84:	36 df       	rcall	.-404    	; 0x3cf2 <_ZN12MarlinSerial11printNumberEmh>
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	08 95       	ret

00003e94 <_ZN12MarlinSerial5printEii>:
    3e94:	9a 01       	movw	r18, r20
    3e96:	ab 01       	movw	r20, r22
    3e98:	66 27       	eor	r22, r22
    3e9a:	57 fd       	sbrc	r21, 7
    3e9c:	60 95       	com	r22
    3e9e:	76 2f       	mov	r23, r22
    3ea0:	c6 cf       	rjmp	.-116    	; 0x3e2e <_ZN12MarlinSerial5printEli>

00003ea2 <_ZN12MarlinSerial5printEci>:
    3ea2:	9a 01       	movw	r18, r20
    3ea4:	46 2f       	mov	r20, r22
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	c0 cf       	rjmp	.-128    	; 0x3e2e <_ZN12MarlinSerial5printEli>

00003eae <_ZN12MarlinSerial7printlnEv>:
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	ec 01       	movw	r28, r24
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	6d e0       	ldi	r22, 0x0D	; 13
    3eba:	f3 df       	rcall	.-26     	; 0x3ea2 <_ZN12MarlinSerial5printEci>
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	6a e0       	ldi	r22, 0x0A	; 10
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	ee df       	rcall	.-36     	; 0x3ea2 <_ZN12MarlinSerial5printEci>
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	08 95       	ret

00003ecc <_ZN12MarlinSerial7printlnEji>:
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ec 01       	movw	r28, r24
    3ed2:	a2 df       	rcall	.-188    	; 0x3e18 <_ZN12MarlinSerial5printEji>
    3ed4:	ce 01       	movw	r24, r28
    3ed6:	eb df       	rcall	.-42     	; 0x3eae <_ZN12MarlinSerial7printlnEv>
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	08 95       	ret

00003ede <_ZN12MarlinSerial10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void MarlinSerial::printFloat(double number, uint8_t digits) 
{ 
    3ede:	9f 92       	push	r9
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	ec 01       	movw	r28, r24
    3ef6:	6a 01       	movw	r12, r20
    3ef8:	7b 01       	movw	r14, r22
    3efa:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	a9 01       	movw	r20, r18
    3f02:	c7 01       	movw	r24, r14
    3f04:	b6 01       	movw	r22, r12
    3f06:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    3f0a:	88 23       	and	r24, r24
    3f0c:	4c f4       	brge	.+18     	; 0x3f20 <_ZN12MarlinSerial10printFloatEdh+0x42>
  {
     print('-');
    3f0e:	40 e0       	ldi	r20, 0x00	; 0
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	6d e2       	ldi	r22, 0x2D	; 45
    3f14:	ce 01       	movw	r24, r28
    3f16:	c5 df       	rcall	.-118    	; 0x3ea2 <_ZN12MarlinSerial5printEci>
     number = -number;
    3f18:	f7 fa       	bst	r15, 7
    3f1a:	f0 94       	com	r15
    3f1c:	f7 f8       	bld	r15, 7
    3f1e:	f0 94       	com	r15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3f20:	11 23       	and	r17, r17
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <_ZN12MarlinSerial10printFloatEdh+0x48>
    3f24:	6c c0       	rjmp	.+216    	; 0x3ffe <_ZN12MarlinSerial10printFloatEdh+0x120>
    3f26:	00 e0       	ldi	r16, 0x00	; 0
     print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3f28:	60 e0       	ldi	r22, 0x00	; 0
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e2       	ldi	r20, 0x20	; 32
    3f36:	51 e4       	ldi	r21, 0x41	; 65
    3f38:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3f3c:	0f 5f       	subi	r16, 0xFF	; 255
    3f3e:	01 13       	cpse	r16, r17
    3f40:	f7 cf       	rjmp	.-18     	; 0x3f30 <_ZN12MarlinSerial10printFloatEdh+0x52>
    3f42:	32 c0       	rjmp	.+100    	; 0x3fa8 <_ZN12MarlinSerial10printFloatEdh+0xca>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3f44:	20 81       	ld	r18, Z
    3f46:	25 ff       	sbrs	r18, 5
    3f48:	fd cf       	rjmp	.-6      	; 0x3f44 <_ZN12MarlinSerial10printFloatEdh+0x66>
        ;

      M_UDRx = c;
    3f4a:	8e e2       	ldi	r24, 0x2E	; 46
    3f4c:	80 93 c6 00 	sts	0x00C6, r24
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e2       	ldi	r20, 0x20	; 32
    3f56:	51 e4       	ldi	r21, 0x41	; 65
    3f58:	69 2d       	mov	r22, r9
    3f5a:	7a 2d       	mov	r23, r10
    3f5c:	8b 2d       	mov	r24, r11
    3f5e:	9c 2d       	mov	r25, r12
    3f60:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    3f64:	b6 2e       	mov	r11, r22
    3f66:	c7 2e       	mov	r12, r23
    3f68:	d8 2e       	mov	r13, r24
    3f6a:	09 2f       	mov	r16, r25
    int toPrint = int(remainder);
    3f6c:	90 2f       	mov	r25, r16
    3f6e:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    3f72:	7b 01       	movw	r14, r22
    print(toPrint);
    3f74:	4a e0       	ldi	r20, 0x0A	; 10
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	ce 01       	movw	r24, r28
    3f7a:	8c df       	rcall	.-232    	; 0x3e94 <_ZN12MarlinSerial5printEii>
    remainder -= toPrint; 
    3f7c:	b7 01       	movw	r22, r14
    3f7e:	88 27       	eor	r24, r24
    3f80:	77 fd       	sbrc	r23, 7
    3f82:	80 95       	com	r24
    3f84:	98 2f       	mov	r25, r24
    3f86:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    3f8a:	9b 01       	movw	r18, r22
    3f8c:	ac 01       	movw	r20, r24
    3f8e:	6b 2d       	mov	r22, r11
    3f90:	7c 2d       	mov	r23, r12
    3f92:	8d 2d       	mov	r24, r13
    3f94:	90 2f       	mov	r25, r16
    3f96:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    3f9a:	96 2e       	mov	r9, r22
    3f9c:	a7 2e       	mov	r10, r23
    3f9e:	b8 2e       	mov	r11, r24
    3fa0:	c9 2e       	mov	r12, r25
    3fa2:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3fa4:	a9 f6       	brne	.-86     	; 0x3f50 <_ZN12MarlinSerial10printFloatEdh+0x72>
    3fa6:	3b c0       	rjmp	.+118    	; 0x401e <_ZN12MarlinSerial10printFloatEdh+0x140>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    3fa8:	26 2f       	mov	r18, r22
    3faa:	37 2f       	mov	r19, r23
    3fac:	48 2f       	mov	r20, r24
    3fae:	59 2f       	mov	r21, r25
    3fb0:	c7 01       	movw	r24, r14
    3fb2:	b6 01       	movw	r22, r12
    3fb4:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    3fb8:	96 2e       	mov	r9, r22
    3fba:	a7 2e       	mov	r10, r23
    3fbc:	b8 2e       	mov	r11, r24
    3fbe:	c9 2e       	mov	r12, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3fc0:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    3fc4:	d6 2e       	mov	r13, r22
    3fc6:	e7 2e       	mov	r14, r23
    3fc8:	f8 2e       	mov	r15, r24
    3fca:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    3fcc:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    3fd0:	9b 01       	movw	r18, r22
    3fd2:	ac 01       	movw	r20, r24
    3fd4:	69 2d       	mov	r22, r9
    3fd6:	7a 2d       	mov	r23, r10
    3fd8:	8b 2d       	mov	r24, r11
    3fda:	9c 2d       	mov	r25, r12
    3fdc:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    3fe0:	96 2e       	mov	r9, r22
    3fe2:	a7 2e       	mov	r10, r23
    3fe4:	b8 2e       	mov	r11, r24
    3fe6:	c9 2e       	mov	r12, r25
  print(int_part);
    3fe8:	2a e0       	ldi	r18, 0x0A	; 10
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4d 2d       	mov	r20, r13
    3fee:	5e 2d       	mov	r21, r14
    3ff0:	6f 2d       	mov	r22, r15
    3ff2:	70 2f       	mov	r23, r16
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	04 df       	rcall	.-504    	; 0x3e00 <_ZN12MarlinSerial5printEmi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    3ff8:	e0 ec       	ldi	r30, 0xC0	; 192
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	a3 cf       	rjmp	.-186    	; 0x3f44 <_ZN12MarlinSerial10printFloatEdh+0x66>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e0       	ldi	r20, 0x00	; 0
    4004:	5f e3       	ldi	r21, 0x3F	; 63
    4006:	c7 01       	movw	r24, r14
    4008:	b6 01       	movw	r22, r12
    400a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    400e:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    4012:	ab 01       	movw	r20, r22
    4014:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  print(int_part);
    4016:	2a e0       	ldi	r18, 0x0A	; 10
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	ce 01       	movw	r24, r28
    401c:	f1 de       	rcall	.-542    	; 0x3e00 <_ZN12MarlinSerial5printEmi>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
    402e:	bf 90       	pop	r11
    4030:	af 90       	pop	r10
    4032:	9f 90       	pop	r9
    4034:	08 95       	ret

00004036 <_ZN12MarlinSerial5printEdi>:
  else printNumber(n, base);
}

void MarlinSerial::print(double n, int digits)
{
  printFloat(n, digits);
    4036:	53 cf       	rjmp	.-346    	; 0x3ede <_ZN12MarlinSerial10printFloatEdh>
    4038:	08 95       	ret

0000403a <_ZL8homeaxisi>:
    WRITE(SUICIDE_PIN, LOW);
  #endif
}

void servo_init()
{
    403a:	2f 92       	push	r2
    403c:	3f 92       	push	r3
    403e:	4f 92       	push	r4
    4040:	5f 92       	push	r5
    4042:	6f 92       	push	r6
    4044:	7f 92       	push	r7
    4046:	8f 92       	push	r8
    4048:	9f 92       	push	r9
    404a:	af 92       	push	r10
    404c:	bf 92       	push	r11
    404e:	cf 92       	push	r12
    4050:	df 92       	push	r13
    4052:	ef 92       	push	r14
    4054:	ff 92       	push	r15
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	00 d0       	rcall	.+0      	; 0x4060 <_ZL8homeaxisi+0x26>
    4060:	00 d0       	rcall	.+0      	; 0x4062 <_ZL8homeaxisi+0x28>
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	83 30       	cpi	r24, 0x03	; 3
    4068:	91 05       	cpc	r25, r1
    406a:	08 f0       	brcs	.+2      	; 0x406e <_ZL8homeaxisi+0x34>
    406c:	6d c1       	rjmp	.+730    	; 0x4348 <_ZL8homeaxisi+0x30e>
    406e:	fc 01       	movw	r30, r24
    4070:	ec 5d       	subi	r30, 0xDC	; 220
    4072:	f8 4f       	sbci	r31, 0xF8	; 248
    4074:	14 91       	lpm	r17, Z
    4076:	9c 01       	movw	r18, r24
    4078:	22 0f       	add	r18, r18
    407a:	33 1f       	adc	r19, r19
    407c:	22 0f       	add	r18, r18
    407e:	33 1f       	adc	r19, r19
    4080:	3e 83       	std	Y+6, r19	; 0x06
    4082:	2d 83       	std	Y+5, r18	; 0x05
    4084:	24 58       	subi	r18, 0x84	; 132
    4086:	3a 4f       	sbci	r19, 0xFA	; 250
    4088:	3c 83       	std	Y+4, r19	; 0x04
    408a:	2b 83       	std	Y+3, r18	; 0x03
    408c:	f9 01       	movw	r30, r18
    408e:	10 82       	st	Z, r1
    4090:	11 82       	std	Z+1, r1	; 0x01
    4092:	12 82       	std	Z+2, r1	; 0x02
    4094:	13 82       	std	Z+3, r1	; 0x03
    4096:	28 e8       	ldi	r18, 0x88	; 136
    4098:	35 e0       	ldi	r19, 0x05	; 5
    409a:	44 e8       	ldi	r20, 0x84	; 132
    409c:	55 e0       	ldi	r21, 0x05	; 5
    409e:	60 e8       	ldi	r22, 0x80	; 128
    40a0:	75 e0       	ldi	r23, 0x05	; 5
    40a2:	8c e7       	ldi	r24, 0x7C	; 124
    40a4:	95 e0       	ldi	r25, 0x05	; 5
    40a6:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <_Z17plan_set_positionRKfS0_S0_S0_>
    40aa:	ed 81       	ldd	r30, Y+5	; 0x05
    40ac:	fe 81       	ldd	r31, Y+6	; 0x06
    40ae:	e9 5d       	subi	r30, 0xD9	; 217
    40b0:	f8 4f       	sbci	r31, 0xF8	; 248
    40b2:	45 90       	lpm	r4, Z+
    40b4:	55 90       	lpm	r5, Z+
    40b6:	65 90       	lpm	r6, Z+
    40b8:	74 90       	lpm	r7, Z
    40ba:	61 2f       	mov	r22, r17
    40bc:	77 27       	eor	r23, r23
    40be:	67 fd       	sbrc	r22, 7
    40c0:	70 95       	com	r23
    40c2:	87 2f       	mov	r24, r23
    40c4:	97 2f       	mov	r25, r23
    40c6:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    40ca:	4b 01       	movw	r8, r22
    40cc:	5c 01       	movw	r10, r24
    40ce:	2d 81       	ldd	r18, Y+5	; 0x05
    40d0:	3e 81       	ldd	r19, Y+6	; 0x06
    40d2:	23 5d       	subi	r18, 0xD3	; 211
    40d4:	36 4f       	sbci	r19, 0xF6	; 246
    40d6:	3a 83       	std	Y+2, r19	; 0x02
    40d8:	29 83       	std	Y+1, r18	; 0x01
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 ec       	ldi	r20, 0xC0	; 192
    40e0:	5f e3       	ldi	r21, 0x3F	; 63
    40e2:	64 2d       	mov	r22, r4
    40e4:	75 2d       	mov	r23, r5
    40e6:	86 2d       	mov	r24, r6
    40e8:	97 2d       	mov	r25, r7
    40ea:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    40ee:	a5 01       	movw	r20, r10
    40f0:	94 01       	movw	r18, r8
    40f2:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    40f6:	e9 81       	ldd	r30, Y+1	; 0x01
    40f8:	fa 81       	ldd	r31, Y+2	; 0x02
    40fa:	60 83       	st	Z, r22
    40fc:	71 83       	std	Z+1, r23	; 0x01
    40fe:	82 83       	std	Z+2, r24	; 0x02
    4100:	93 83       	std	Z+3, r25	; 0x03
    4102:	0f 2e       	mov	r0, r31
    4104:	f1 e2       	ldi	r31, 0x21	; 33
    4106:	2f 2e       	mov	r2, r31
    4108:	f2 e0       	ldi	r31, 0x02	; 2
    410a:	3f 2e       	mov	r3, r31
    410c:	f0 2d       	mov	r31, r0
    410e:	2d 81       	ldd	r18, Y+5	; 0x05
    4110:	3e 81       	ldd	r19, Y+6	; 0x06
    4112:	22 0e       	add	r2, r18
    4114:	33 1e       	adc	r3, r19
    4116:	f1 01       	movw	r30, r2
    4118:	60 81       	ld	r22, Z
    411a:	71 81       	ldd	r23, Z+1	; 0x01
    411c:	82 81       	ldd	r24, Z+2	; 0x02
    411e:	93 81       	ldd	r25, Z+3	; 0x03
    4120:	60 93 31 02 	sts	0x0231, r22
    4124:	70 93 32 02 	sts	0x0232, r23
    4128:	80 93 33 02 	sts	0x0233, r24
    412c:	90 93 34 02 	sts	0x0234, r25
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e7       	ldi	r20, 0x70	; 112
    4136:	52 e4       	ldi	r21, 0x42	; 66
    4138:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    413c:	0f 2e       	mov	r0, r31
    413e:	f3 e6       	ldi	r31, 0x63	; 99
    4140:	cf 2e       	mov	r12, r31
    4142:	f5 e0       	ldi	r31, 0x05	; 5
    4144:	df 2e       	mov	r13, r31
    4146:	f0 2d       	mov	r31, r0
    4148:	7b 01       	movw	r14, r22
    414a:	8c 01       	movw	r16, r24
    414c:	29 e3       	ldi	r18, 0x39	; 57
    414e:	39 e0       	ldi	r19, 0x09	; 9
    4150:	45 e3       	ldi	r20, 0x35	; 53
    4152:	59 e0       	ldi	r21, 0x09	; 9
    4154:	61 e3       	ldi	r22, 0x31	; 49
    4156:	79 e0       	ldi	r23, 0x09	; 9
    4158:	8d e2       	ldi	r24, 0x2D	; 45
    415a:	99 e0       	ldi	r25, 0x09	; 9
    415c:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
    4160:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    4164:	eb 81       	ldd	r30, Y+3	; 0x03
    4166:	fc 81       	ldd	r31, Y+4	; 0x04
    4168:	10 82       	st	Z, r1
    416a:	11 82       	std	Z+1, r1	; 0x01
    416c:	12 82       	std	Z+2, r1	; 0x02
    416e:	13 82       	std	Z+3, r1	; 0x03
    4170:	28 e8       	ldi	r18, 0x88	; 136
    4172:	35 e0       	ldi	r19, 0x05	; 5
    4174:	44 e8       	ldi	r20, 0x84	; 132
    4176:	55 e0       	ldi	r21, 0x05	; 5
    4178:	60 e8       	ldi	r22, 0x80	; 128
    417a:	75 e0       	ldi	r23, 0x05	; 5
    417c:	8c e7       	ldi	r24, 0x7C	; 124
    417e:	95 e0       	ldi	r25, 0x05	; 5
    4180:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <_Z17plan_set_positionRKfS0_S0_S0_>
    4184:	ed 81       	ldd	r30, Y+5	; 0x05
    4186:	fe 81       	ldd	r31, Y+6	; 0x06
    4188:	ed 5c       	subi	r30, 0xCD	; 205
    418a:	f8 4f       	sbci	r31, 0xF8	; 248
    418c:	45 90       	lpm	r4, Z+
    418e:	55 90       	lpm	r5, Z+
    4190:	65 90       	lpm	r6, Z+
    4192:	74 90       	lpm	r7, Z
    4194:	a3 01       	movw	r20, r6
    4196:	92 01       	movw	r18, r4
    4198:	50 58       	subi	r21, 0x80	; 128
    419a:	c5 01       	movw	r24, r10
    419c:	b4 01       	movw	r22, r8
    419e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    41a2:	e9 81       	ldd	r30, Y+1	; 0x01
    41a4:	fa 81       	ldd	r31, Y+2	; 0x02
    41a6:	60 83       	st	Z, r22
    41a8:	71 83       	std	Z+1, r23	; 0x01
    41aa:	82 83       	std	Z+2, r24	; 0x02
    41ac:	93 83       	std	Z+3, r25	; 0x03
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e7       	ldi	r20, 0x70	; 112
    41b4:	52 e4       	ldi	r21, 0x42	; 66
    41b6:	60 91 31 02 	lds	r22, 0x0231
    41ba:	70 91 32 02 	lds	r23, 0x0232
    41be:	80 91 33 02 	lds	r24, 0x0233
    41c2:	90 91 34 02 	lds	r25, 0x0234
    41c6:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    41ca:	7b 01       	movw	r14, r22
    41cc:	8c 01       	movw	r16, r24
    41ce:	29 e3       	ldi	r18, 0x39	; 57
    41d0:	39 e0       	ldi	r19, 0x09	; 9
    41d2:	45 e3       	ldi	r20, 0x35	; 53
    41d4:	59 e0       	ldi	r21, 0x09	; 9
    41d6:	61 e3       	ldi	r22, 0x31	; 49
    41d8:	79 e0       	ldi	r23, 0x09	; 9
    41da:	8d e2       	ldi	r24, 0x2D	; 45
    41dc:	99 e0       	ldi	r25, 0x09	; 9
    41de:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
    41e2:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    41e6:	24 2d       	mov	r18, r4
    41e8:	35 2d       	mov	r19, r5
    41ea:	46 2d       	mov	r20, r6
    41ec:	57 2d       	mov	r21, r7
    41ee:	64 2d       	mov	r22, r4
    41f0:	75 2d       	mov	r23, r5
    41f2:	86 2d       	mov	r24, r6
    41f4:	97 2d       	mov	r25, r7
    41f6:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    41fa:	9b 01       	movw	r18, r22
    41fc:	ac 01       	movw	r20, r24
    41fe:	c5 01       	movw	r24, r10
    4200:	b4 01       	movw	r22, r8
    4202:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    4206:	e9 81       	ldd	r30, Y+1	; 0x01
    4208:	fa 81       	ldd	r31, Y+2	; 0x02
    420a:	60 83       	st	Z, r22
    420c:	71 83       	std	Z+1, r23	; 0x01
    420e:	82 83       	std	Z+2, r24	; 0x02
    4210:	93 83       	std	Z+3, r25	; 0x03
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	5f e3       	ldi	r21, 0x3F	; 63
    421a:	f1 01       	movw	r30, r2
    421c:	60 81       	ld	r22, Z
    421e:	71 81       	ldd	r23, Z+1	; 0x01
    4220:	82 81       	ldd	r24, Z+2	; 0x02
    4222:	93 81       	ldd	r25, Z+3	; 0x03
    4224:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    4228:	e6 2f       	mov	r30, r22
    422a:	f7 2f       	mov	r31, r23
    422c:	46 2f       	mov	r20, r22
    422e:	57 2f       	mov	r21, r23
    4230:	68 2f       	mov	r22, r24
    4232:	79 2f       	mov	r23, r25
    4234:	40 93 31 02 	sts	0x0231, r20
    4238:	50 93 32 02 	sts	0x0232, r21
    423c:	60 93 33 02 	sts	0x0233, r22
    4240:	70 93 34 02 	sts	0x0234, r23
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e7       	ldi	r20, 0x70	; 112
    424a:	52 e4       	ldi	r21, 0x42	; 66
    424c:	6e 2f       	mov	r22, r30
    424e:	7f 2f       	mov	r23, r31
    4250:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    4254:	7b 01       	movw	r14, r22
    4256:	8c 01       	movw	r16, r24
    4258:	29 e3       	ldi	r18, 0x39	; 57
    425a:	39 e0       	ldi	r19, 0x09	; 9
    425c:	45 e3       	ldi	r20, 0x35	; 53
    425e:	59 e0       	ldi	r21, 0x09	; 9
    4260:	61 e3       	ldi	r22, 0x31	; 49
    4262:	79 e0       	ldi	r23, 0x09	; 9
    4264:	8d e2       	ldi	r24, 0x2D	; 45
    4266:	99 e0       	ldi	r25, 0x09	; 9
    4268:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
    426c:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    4270:	ed 81       	ldd	r30, Y+5	; 0x05
    4272:	fe 81       	ldd	r31, Y+6	; 0x06
    4274:	e1 5c       	subi	r30, 0xC1	; 193
    4276:	f8 4f       	sbci	r31, 0xF8	; 248
    4278:	85 91       	lpm	r24, Z+
    427a:	95 91       	lpm	r25, Z+
    427c:	a5 91       	lpm	r26, Z+
    427e:	b4 91       	lpm	r27, Z
    4280:	ed 81       	ldd	r30, Y+5	; 0x05
    4282:	fe 81       	ldd	r31, Y+6	; 0x06
    4284:	e0 59       	subi	r30, 0x90	; 144
    4286:	fa 4f       	sbci	r31, 0xFA	; 250
    4288:	40 80       	ld	r4, Z
    428a:	51 80       	ldd	r5, Z+1	; 0x01
    428c:	62 80       	ldd	r6, Z+2	; 0x02
    428e:	73 80       	ldd	r7, Z+3	; 0x03
    4290:	a3 01       	movw	r20, r6
    4292:	92 01       	movw	r18, r4
    4294:	68 2f       	mov	r22, r24
    4296:	79 2f       	mov	r23, r25
    4298:	8a 2f       	mov	r24, r26
    429a:	9b 2f       	mov	r25, r27
    429c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    42a0:	e6 2e       	mov	r14, r22
    42a2:	f7 2e       	mov	r15, r23
    42a4:	28 2e       	mov	r2, r24
    42a6:	39 2e       	mov	r3, r25
    42a8:	86 2f       	mov	r24, r22
    42aa:	9f 2d       	mov	r25, r15
    42ac:	a2 2d       	mov	r26, r2
    42ae:	b3 2d       	mov	r27, r3
    42b0:	eb 81       	ldd	r30, Y+3	; 0x03
    42b2:	fc 81       	ldd	r31, Y+4	; 0x04
    42b4:	80 83       	st	Z, r24
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	a2 83       	std	Z+2, r26	; 0x02
    42ba:	b3 83       	std	Z+3, r27	; 0x03
    42bc:	ed 81       	ldd	r30, Y+5	; 0x05
    42be:	fe 81       	ldd	r31, Y+6	; 0x06
    42c0:	e5 5b       	subi	r30, 0xB5	; 181
    42c2:	f8 4f       	sbci	r31, 0xF8	; 248
    42c4:	85 91       	lpm	r24, Z+
    42c6:	95 91       	lpm	r25, Z+
    42c8:	a5 91       	lpm	r26, Z+
    42ca:	b4 91       	lpm	r27, Z
    42cc:	0d 81       	ldd	r16, Y+5	; 0x05
    42ce:	1e 81       	ldd	r17, Y+6	; 0x06
    42d0:	0c 59       	subi	r16, 0x9C	; 156
    42d2:	1a 4f       	sbci	r17, 0xFA	; 250
    42d4:	28 2f       	mov	r18, r24
    42d6:	39 2f       	mov	r19, r25
    42d8:	4a 2f       	mov	r20, r26
    42da:	5b 2f       	mov	r21, r27
    42dc:	c3 01       	movw	r24, r6
    42de:	b2 01       	movw	r22, r4
    42e0:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    42e4:	f8 01       	movw	r30, r16
    42e6:	60 83       	st	Z, r22
    42e8:	71 83       	std	Z+1, r23	; 0x01
    42ea:	82 83       	std	Z+2, r24	; 0x02
    42ec:	93 83       	std	Z+3, r25	; 0x03
    42ee:	ed 81       	ldd	r30, Y+5	; 0x05
    42f0:	fe 81       	ldd	r31, Y+6	; 0x06
    42f2:	e9 5a       	subi	r30, 0xA9	; 169
    42f4:	f8 4f       	sbci	r31, 0xF8	; 248
    42f6:	85 91       	lpm	r24, Z+
    42f8:	95 91       	lpm	r25, Z+
    42fa:	a5 91       	lpm	r26, Z+
    42fc:	b4 91       	lpm	r27, Z
    42fe:	0d 81       	ldd	r16, Y+5	; 0x05
    4300:	1e 81       	ldd	r17, Y+6	; 0x06
    4302:	0f 5e       	subi	r16, 0xEF	; 239
    4304:	1d 4f       	sbci	r17, 0xFD	; 253
    4306:	28 2f       	mov	r18, r24
    4308:	39 2f       	mov	r19, r25
    430a:	4a 2f       	mov	r20, r26
    430c:	5b 2f       	mov	r21, r27
    430e:	c3 01       	movw	r24, r6
    4310:	b2 01       	movw	r22, r4
    4312:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    4316:	f8 01       	movw	r30, r16
    4318:	60 83       	st	Z, r22
    431a:	71 83       	std	Z+1, r23	; 0x01
    431c:	82 83       	std	Z+2, r24	; 0x02
    431e:	93 83       	std	Z+3, r25	; 0x03
    4320:	8e 2d       	mov	r24, r14
    4322:	9f 2d       	mov	r25, r15
    4324:	a2 2d       	mov	r26, r2
    4326:	b3 2d       	mov	r27, r3
    4328:	e9 81       	ldd	r30, Y+1	; 0x01
    432a:	fa 81       	ldd	r31, Y+2	; 0x02
    432c:	80 83       	st	Z, r24
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	a2 83       	std	Z+2, r26	; 0x02
    4332:	b3 83       	std	Z+3, r27	; 0x03
    4334:	10 92 31 02 	sts	0x0231, r1
    4338:	10 92 32 02 	sts	0x0232, r1
    433c:	10 92 33 02 	sts	0x0233, r1
    4340:	10 92 34 02 	sts	0x0234, r1
    4344:	0e 94 07 6a 	call	0xd40e	; 0xd40e <_Z23endstops_hit_on_purposev>
    4348:	26 96       	adiw	r28, 0x06	; 6
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	ff 90       	pop	r15
    435e:	ef 90       	pop	r14
    4360:	df 90       	pop	r13
    4362:	cf 90       	pop	r12
    4364:	bf 90       	pop	r11
    4366:	af 90       	pop	r10
    4368:	9f 90       	pop	r9
    436a:	8f 90       	pop	r8
    436c:	7f 90       	pop	r7
    436e:	6f 90       	pop	r6
    4370:	5f 90       	pop	r5
    4372:	4f 90       	pop	r4
    4374:	3f 90       	pop	r3
    4376:	2f 90       	pop	r2
    4378:	08 95       	ret

0000437a <_Z41__static_initialization_and_destruction_0ii>:
    437a:	ef 92       	push	r14
    437c:	ff 92       	push	r15
    437e:	0f 93       	push	r16
    4380:	1f 93       	push	r17
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	81 30       	cpi	r24, 0x01	; 1
    4388:	91 05       	cpc	r25, r1
    438a:	49 f4       	brne	.+18     	; 0x439e <_Z41__static_initialization_and_destruction_0ii+0x24>
    438c:	6f 3f       	cpi	r22, 0xFF	; 255
    438e:	7f 4f       	sbci	r23, 0xFF	; 255
    4390:	09 f0       	breq	.+2      	; 0x4394 <_Z41__static_initialization_and_destruction_0ii+0x1a>
    4392:	54 c0       	rjmp	.+168    	; 0x443c <_Z41__static_initialization_and_destruction_0ii+0xc2>
    4394:	82 e9       	ldi	r24, 0x92	; 146
    4396:	95 e0       	ldi	r25, 0x05	; 5
    4398:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN10CardReaderC1Ev>
    439c:	4f c0       	rjmp	.+158    	; 0x443c <_Z41__static_initialization_and_destruction_0ii+0xc2>
    439e:	89 2b       	or	r24, r25
    43a0:	09 f0       	breq	.+2      	; 0x43a4 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    43a2:	4c c0       	rjmp	.+152    	; 0x443c <_Z41__static_initialization_and_destruction_0ii+0xc2>
    43a4:	6f 3f       	cpi	r22, 0xFF	; 255
    43a6:	7f 4f       	sbci	r23, 0xFF	; 255
    43a8:	09 f0       	breq	.+2      	; 0x43ac <_Z41__static_initialization_and_destruction_0ii+0x32>
    43aa:	48 c0       	rjmp	.+144    	; 0x443c <_Z41__static_initialization_and_destruction_0ii+0xc2>
    43ac:	8a e2       	ldi	r24, 0x2A	; 42
    43ae:	94 e0       	ldi	r25, 0x04	; 4
    43b0:	90 93 5d 07 	sts	0x075D, r25
    43b4:	80 93 5c 07 	sts	0x075C, r24
    43b8:	80 91 63 07 	lds	r24, 0x0763
    43bc:	88 23       	and	r24, r24
    43be:	21 f0       	breq	.+8      	; 0x43c8 <_Z41__static_initialization_and_destruction_0ii+0x4e>
    43c0:	80 e6       	ldi	r24, 0x60	; 96
    43c2:	97 e0       	ldi	r25, 0x07	; 7
    43c4:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    43c8:	cf e1       	ldi	r28, 0x1F	; 31
    43ca:	d7 e0       	ldi	r29, 0x07	; 7
    43cc:	87 e3       	ldi	r24, 0x37	; 55
    43ce:	97 e0       	ldi	r25, 0x07	; 7
    43d0:	0f 2e       	mov	r0, r31
    43d2:	fa e2       	ldi	r31, 0x2A	; 42
    43d4:	ef 2e       	mov	r14, r31
    43d6:	f4 e0       	ldi	r31, 0x04	; 4
    43d8:	ff 2e       	mov	r15, r31
    43da:	f0 2d       	mov	r31, r0
    43dc:	06 c0       	rjmp	.+12     	; 0x43ea <_Z41__static_initialization_and_destruction_0ii+0x70>
    43de:	6f 97       	sbiw	r28, 0x1f	; 31
    43e0:	c8 01       	movw	r24, r16
    43e2:	e6 e0       	ldi	r30, 0x06	; 6
    43e4:	01 30       	cpi	r16, 0x01	; 1
    43e6:	1e 07       	cpc	r17, r30
    43e8:	69 f0       	breq	.+26     	; 0x4404 <_Z41__static_initialization_and_destruction_0ii+0x8a>
    43ea:	8c 01       	movw	r16, r24
    43ec:	0f 51       	subi	r16, 0x1F	; 31
    43ee:	11 09       	sbc	r17, r1
    43f0:	f8 01       	movw	r30, r16
    43f2:	f1 82       	std	Z+1, r15	; 0x01
    43f4:	e0 82       	st	Z, r14
    43f6:	28 81       	ld	r18, Y
    43f8:	22 23       	and	r18, r18
    43fa:	89 f3       	breq	.-30     	; 0x43de <_Z41__static_initialization_and_destruction_0ii+0x64>
    43fc:	4b 97       	sbiw	r24, 0x1b	; 27
    43fe:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    4402:	ed cf       	rjmp	.-38     	; 0x43de <_Z41__static_initialization_and_destruction_0ii+0x64>
    4404:	8a e2       	ldi	r24, 0x2A	; 42
    4406:	94 e0       	ldi	r25, 0x04	; 4
    4408:	90 93 e3 05 	sts	0x05E3, r25
    440c:	80 93 e2 05 	sts	0x05E2, r24
    4410:	80 91 e9 05 	lds	r24, 0x05E9
    4414:	88 23       	and	r24, r24
    4416:	21 f0       	breq	.+8      	; 0x4420 <_Z41__static_initialization_and_destruction_0ii+0xa6>
    4418:	86 ee       	ldi	r24, 0xE6	; 230
    441a:	95 e0       	ldi	r25, 0x05	; 5
    441c:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    4420:	8a e2       	ldi	r24, 0x2A	; 42
    4422:	94 e0       	ldi	r25, 0x04	; 4
    4424:	90 93 c2 05 	sts	0x05C2, r25
    4428:	80 93 c1 05 	sts	0x05C1, r24
    442c:	80 91 c8 05 	lds	r24, 0x05C8
    4430:	88 23       	and	r24, r24
    4432:	21 f0       	breq	.+8      	; 0x443c <_Z41__static_initialization_and_destruction_0ii+0xc2>
    4434:	85 ec       	ldi	r24, 0xC5	; 197
    4436:	95 e0       	ldi	r25, 0x05	; 5
    4438:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	08 95       	ret

0000444a <_Z17serial_echopair_PPKcf>:
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	fc 01       	movw	r30, r24
    4450:	94 91       	lpm	r25, Z
    4452:	99 23       	and	r25, r25
    4454:	61 f0       	breq	.+24     	; 0x446e <_Z17serial_echopair_PPKcf+0x24>
    4456:	a0 ec       	ldi	r26, 0xC0	; 192
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	c6 ec       	ldi	r28, 0xC6	; 198
    445c:	d0 e0       	ldi	r29, 0x00	; 0
    445e:	8c 91       	ld	r24, X
    4460:	85 ff       	sbrs	r24, 5
    4462:	fd cf       	rjmp	.-6      	; 0x445e <_Z17serial_echopair_PPKcf+0x14>
    4464:	98 83       	st	Y, r25
    4466:	31 96       	adiw	r30, 0x01	; 1
    4468:	94 91       	lpm	r25, Z
    446a:	91 11       	cpse	r25, r1
    446c:	f8 cf       	rjmp	.-16     	; 0x445e <_Z17serial_echopair_PPKcf+0x14>
    446e:	22 e0       	ldi	r18, 0x02	; 2
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	82 ed       	ldi	r24, 0xD2	; 210
    4474:	94 e0       	ldi	r25, 0x04	; 4
    4476:	df dd       	rcall	.-1090   	; 0x4036 <_ZN12MarlinSerial5printEdi>
    4478:	df 91       	pop	r29
    447a:	cf 91       	pop	r28
    447c:	08 95       	ret

0000447e <freeMemory>:
    447e:	cf 93       	push	r28
    4480:	df 93       	push	r29
    4482:	1f 92       	push	r1
    4484:	1f 92       	push	r1
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	80 91 5c 12 	lds	r24, 0x125C
    448e:	90 91 5d 12 	lds	r25, 0x125D
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	31 f4       	brne	.+12     	; 0x44a2 <freeMemory+0x24>
    4496:	ce 01       	movw	r24, r28
    4498:	81 56       	subi	r24, 0x61	; 97
    449a:	92 41       	sbci	r25, 0x12	; 18
    449c:	9a 83       	std	Y+2, r25	; 0x02
    449e:	89 83       	std	Y+1, r24	; 0x01
    44a0:	08 c0       	rjmp	.+16     	; 0x44b2 <freeMemory+0x34>
    44a2:	9e 01       	movw	r18, r28
    44a4:	2f 5f       	subi	r18, 0xFF	; 255
    44a6:	3f 4f       	sbci	r19, 0xFF	; 255
    44a8:	a9 01       	movw	r20, r18
    44aa:	48 1b       	sub	r20, r24
    44ac:	59 0b       	sbc	r21, r25
    44ae:	5a 83       	std	Y+2, r21	; 0x02
    44b0:	49 83       	std	Y+1, r20	; 0x01
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	9a 81       	ldd	r25, Y+2	; 0x02
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	08 95       	ret

000044c0 <_Z12enquecommandPKc>:
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	20 91 8d 07 	lds	r18, 0x078D
    44c8:	30 91 8e 07 	lds	r19, 0x078E
    44cc:	24 30       	cpi	r18, 0x04	; 4
    44ce:	31 05       	cpc	r19, r1
    44d0:	0c f0       	brlt	.+2      	; 0x44d4 <_Z12enquecommandPKc+0x14>
    44d2:	80 c0       	rjmp	.+256    	; 0x45d4 <_Z12enquecommandPKc+0x114>
    44d4:	40 91 8f 07 	lds	r20, 0x078F
    44d8:	50 91 90 07 	lds	r21, 0x0790
    44dc:	60 e6       	ldi	r22, 0x60	; 96
    44de:	64 9f       	mul	r22, r20
    44e0:	90 01       	movw	r18, r0
    44e2:	65 9f       	mul	r22, r21
    44e4:	30 0d       	add	r19, r0
    44e6:	11 24       	eor	r1, r1
    44e8:	bc 01       	movw	r22, r24
    44ea:	c9 01       	movw	r24, r18
    44ec:	8f 56       	subi	r24, 0x6F	; 111
    44ee:	98 4f       	sbci	r25, 0xF8	; 248
    44f0:	0e 94 2c c4 	call	0x18858	; 0x18858 <strcpy>
    44f4:	e5 ec       	ldi	r30, 0xC5	; 197
    44f6:	f2 e0       	ldi	r31, 0x02	; 2
    44f8:	94 91       	lpm	r25, Z
    44fa:	99 23       	and	r25, r25
    44fc:	61 f0       	breq	.+24     	; 0x4516 <_Z12enquecommandPKc+0x56>
    44fe:	a0 ec       	ldi	r26, 0xC0	; 192
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	c6 ec       	ldi	r28, 0xC6	; 198
    4504:	d0 e0       	ldi	r29, 0x00	; 0
    4506:	8c 91       	ld	r24, X
    4508:	85 ff       	sbrs	r24, 5
    450a:	fd cf       	rjmp	.-6      	; 0x4506 <_Z12enquecommandPKc+0x46>
    450c:	98 83       	st	Y, r25
    450e:	31 96       	adiw	r30, 0x01	; 1
    4510:	94 91       	lpm	r25, Z
    4512:	91 11       	cpse	r25, r1
    4514:	f8 cf       	rjmp	.-16     	; 0x4506 <_Z12enquecommandPKc+0x46>
    4516:	eb ec       	ldi	r30, 0xCB	; 203
    4518:	f2 e0       	ldi	r31, 0x02	; 2
    451a:	94 91       	lpm	r25, Z
    451c:	99 23       	and	r25, r25
    451e:	61 f0       	breq	.+24     	; 0x4538 <_Z12enquecommandPKc+0x78>
    4520:	a0 ec       	ldi	r26, 0xC0	; 192
    4522:	b0 e0       	ldi	r27, 0x00	; 0
    4524:	c6 ec       	ldi	r28, 0xC6	; 198
    4526:	d0 e0       	ldi	r29, 0x00	; 0
    4528:	8c 91       	ld	r24, X
    452a:	85 ff       	sbrs	r24, 5
    452c:	fd cf       	rjmp	.-6      	; 0x4528 <_Z12enquecommandPKc+0x68>
    452e:	98 83       	st	Y, r25
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	94 91       	lpm	r25, Z
    4534:	91 11       	cpse	r25, r1
    4536:	f8 cf       	rjmp	.-16     	; 0x4528 <_Z12enquecommandPKc+0x68>
    4538:	80 91 8f 07 	lds	r24, 0x078F
    453c:	90 91 90 07 	lds	r25, 0x0790
    4540:	20 e6       	ldi	r18, 0x60	; 96
    4542:	28 9f       	mul	r18, r24
    4544:	d0 01       	movw	r26, r0
    4546:	29 9f       	mul	r18, r25
    4548:	b0 0d       	add	r27, r0
    454a:	11 24       	eor	r1, r1
    454c:	af 56       	subi	r26, 0x6F	; 111
    454e:	b8 4f       	sbci	r27, 0xF8	; 248
    4550:	9c 91       	ld	r25, X
    4552:	99 23       	and	r25, r25
    4554:	61 f0       	breq	.+24     	; 0x456e <_Z12enquecommandPKc+0xae>
    4556:	11 96       	adiw	r26, 0x01	; 1
    4558:	e0 ec       	ldi	r30, 0xC0	; 192
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	c6 ec       	ldi	r28, 0xC6	; 198
    455e:	d0 e0       	ldi	r29, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	85 ff       	sbrs	r24, 5
    4564:	fd cf       	rjmp	.-6      	; 0x4560 <_Z12enquecommandPKc+0xa0>
    4566:	98 83       	st	Y, r25
    4568:	9d 91       	ld	r25, X+
    456a:	91 11       	cpse	r25, r1
    456c:	f9 cf       	rjmp	.-14     	; 0x4560 <_Z12enquecommandPKc+0xa0>
    456e:	e6 ed       	ldi	r30, 0xD6	; 214
    4570:	f2 e0       	ldi	r31, 0x02	; 2
    4572:	94 91       	lpm	r25, Z
    4574:	99 23       	and	r25, r25
    4576:	61 f0       	breq	.+24     	; 0x4590 <_Z12enquecommandPKc+0xd0>
    4578:	a0 ec       	ldi	r26, 0xC0	; 192
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	c6 ec       	ldi	r28, 0xC6	; 198
    457e:	d0 e0       	ldi	r29, 0x00	; 0
    4580:	8c 91       	ld	r24, X
    4582:	85 ff       	sbrs	r24, 5
    4584:	fd cf       	rjmp	.-6      	; 0x4580 <_Z12enquecommandPKc+0xc0>
    4586:	98 83       	st	Y, r25
    4588:	31 96       	adiw	r30, 0x01	; 1
    458a:	94 91       	lpm	r25, Z
    458c:	91 11       	cpse	r25, r1
    458e:	f8 cf       	rjmp	.-16     	; 0x4580 <_Z12enquecommandPKc+0xc0>
    4590:	e0 ec       	ldi	r30, 0xC0	; 192
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	85 ff       	sbrs	r24, 5
    4598:	fd cf       	rjmp	.-6      	; 0x4594 <_Z12enquecommandPKc+0xd4>
    459a:	8a e0       	ldi	r24, 0x0A	; 10
    459c:	80 93 c6 00 	sts	0x00C6, r24
    45a0:	80 91 8f 07 	lds	r24, 0x078F
    45a4:	90 91 90 07 	lds	r25, 0x0790
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	83 70       	andi	r24, 0x03	; 3
    45ac:	90 78       	andi	r25, 0x80	; 128
    45ae:	99 23       	and	r25, r25
    45b0:	24 f4       	brge	.+8      	; 0x45ba <_Z12enquecommandPKc+0xfa>
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	8c 6f       	ori	r24, 0xFC	; 252
    45b6:	9f 6f       	ori	r25, 0xFF	; 255
    45b8:	01 96       	adiw	r24, 0x01	; 1
    45ba:	90 93 90 07 	sts	0x0790, r25
    45be:	80 93 8f 07 	sts	0x078F, r24
    45c2:	80 91 8d 07 	lds	r24, 0x078D
    45c6:	90 91 8e 07 	lds	r25, 0x078E
    45ca:	01 96       	adiw	r24, 0x01	; 1
    45cc:	90 93 8e 07 	sts	0x078E, r25
    45d0:	80 93 8d 07 	sts	0x078D, r24
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	08 95       	ret

000045da <_Z14enquecommand_PPKc>:
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	20 91 8d 07 	lds	r18, 0x078D
    45e2:	30 91 8e 07 	lds	r19, 0x078E
    45e6:	24 30       	cpi	r18, 0x04	; 4
    45e8:	31 05       	cpc	r19, r1
    45ea:	0c f0       	brlt	.+2      	; 0x45ee <_Z14enquecommand_PPKc+0x14>
    45ec:	80 c0       	rjmp	.+256    	; 0x46ee <_Z14enquecommand_PPKc+0x114>
    45ee:	40 91 8f 07 	lds	r20, 0x078F
    45f2:	50 91 90 07 	lds	r21, 0x0790
    45f6:	60 e6       	ldi	r22, 0x60	; 96
    45f8:	64 9f       	mul	r22, r20
    45fa:	90 01       	movw	r18, r0
    45fc:	65 9f       	mul	r22, r21
    45fe:	30 0d       	add	r19, r0
    4600:	11 24       	eor	r1, r1
    4602:	bc 01       	movw	r22, r24
    4604:	c9 01       	movw	r24, r18
    4606:	8f 56       	subi	r24, 0x6F	; 111
    4608:	98 4f       	sbci	r25, 0xF8	; 248
    460a:	0e 94 af c3 	call	0x1875e	; 0x1875e <strcpy_P>
    460e:	e5 ec       	ldi	r30, 0xC5	; 197
    4610:	f2 e0       	ldi	r31, 0x02	; 2
    4612:	94 91       	lpm	r25, Z
    4614:	99 23       	and	r25, r25
    4616:	61 f0       	breq	.+24     	; 0x4630 <_Z14enquecommand_PPKc+0x56>
    4618:	a0 ec       	ldi	r26, 0xC0	; 192
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	c6 ec       	ldi	r28, 0xC6	; 198
    461e:	d0 e0       	ldi	r29, 0x00	; 0
    4620:	8c 91       	ld	r24, X
    4622:	85 ff       	sbrs	r24, 5
    4624:	fd cf       	rjmp	.-6      	; 0x4620 <_Z14enquecommand_PPKc+0x46>
    4626:	98 83       	st	Y, r25
    4628:	31 96       	adiw	r30, 0x01	; 1
    462a:	94 91       	lpm	r25, Z
    462c:	91 11       	cpse	r25, r1
    462e:	f8 cf       	rjmp	.-16     	; 0x4620 <_Z14enquecommand_PPKc+0x46>
    4630:	e8 ed       	ldi	r30, 0xD8	; 216
    4632:	f2 e0       	ldi	r31, 0x02	; 2
    4634:	94 91       	lpm	r25, Z
    4636:	99 23       	and	r25, r25
    4638:	61 f0       	breq	.+24     	; 0x4652 <_Z14enquecommand_PPKc+0x78>
    463a:	a0 ec       	ldi	r26, 0xC0	; 192
    463c:	b0 e0       	ldi	r27, 0x00	; 0
    463e:	c6 ec       	ldi	r28, 0xC6	; 198
    4640:	d0 e0       	ldi	r29, 0x00	; 0
    4642:	8c 91       	ld	r24, X
    4644:	85 ff       	sbrs	r24, 5
    4646:	fd cf       	rjmp	.-6      	; 0x4642 <_Z14enquecommand_PPKc+0x68>
    4648:	98 83       	st	Y, r25
    464a:	31 96       	adiw	r30, 0x01	; 1
    464c:	94 91       	lpm	r25, Z
    464e:	91 11       	cpse	r25, r1
    4650:	f8 cf       	rjmp	.-16     	; 0x4642 <_Z14enquecommand_PPKc+0x68>
    4652:	80 91 8f 07 	lds	r24, 0x078F
    4656:	90 91 90 07 	lds	r25, 0x0790
    465a:	20 e6       	ldi	r18, 0x60	; 96
    465c:	28 9f       	mul	r18, r24
    465e:	d0 01       	movw	r26, r0
    4660:	29 9f       	mul	r18, r25
    4662:	b0 0d       	add	r27, r0
    4664:	11 24       	eor	r1, r1
    4666:	af 56       	subi	r26, 0x6F	; 111
    4668:	b8 4f       	sbci	r27, 0xF8	; 248
    466a:	9c 91       	ld	r25, X
    466c:	99 23       	and	r25, r25
    466e:	61 f0       	breq	.+24     	; 0x4688 <_Z14enquecommand_PPKc+0xae>
    4670:	11 96       	adiw	r26, 0x01	; 1
    4672:	e0 ec       	ldi	r30, 0xC0	; 192
    4674:	f0 e0       	ldi	r31, 0x00	; 0
    4676:	c6 ec       	ldi	r28, 0xC6	; 198
    4678:	d0 e0       	ldi	r29, 0x00	; 0
    467a:	80 81       	ld	r24, Z
    467c:	85 ff       	sbrs	r24, 5
    467e:	fd cf       	rjmp	.-6      	; 0x467a <_Z14enquecommand_PPKc+0xa0>
    4680:	98 83       	st	Y, r25
    4682:	9d 91       	ld	r25, X+
    4684:	91 11       	cpse	r25, r1
    4686:	f9 cf       	rjmp	.-14     	; 0x467a <_Z14enquecommand_PPKc+0xa0>
    4688:	e3 ee       	ldi	r30, 0xE3	; 227
    468a:	f2 e0       	ldi	r31, 0x02	; 2
    468c:	94 91       	lpm	r25, Z
    468e:	99 23       	and	r25, r25
    4690:	61 f0       	breq	.+24     	; 0x46aa <_Z14enquecommand_PPKc+0xd0>
    4692:	a0 ec       	ldi	r26, 0xC0	; 192
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	c6 ec       	ldi	r28, 0xC6	; 198
    4698:	d0 e0       	ldi	r29, 0x00	; 0
    469a:	8c 91       	ld	r24, X
    469c:	85 ff       	sbrs	r24, 5
    469e:	fd cf       	rjmp	.-6      	; 0x469a <_Z14enquecommand_PPKc+0xc0>
    46a0:	98 83       	st	Y, r25
    46a2:	31 96       	adiw	r30, 0x01	; 1
    46a4:	94 91       	lpm	r25, Z
    46a6:	91 11       	cpse	r25, r1
    46a8:	f8 cf       	rjmp	.-16     	; 0x469a <_Z14enquecommand_PPKc+0xc0>
    46aa:	e0 ec       	ldi	r30, 0xC0	; 192
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	85 ff       	sbrs	r24, 5
    46b2:	fd cf       	rjmp	.-6      	; 0x46ae <_Z14enquecommand_PPKc+0xd4>
    46b4:	8a e0       	ldi	r24, 0x0A	; 10
    46b6:	80 93 c6 00 	sts	0x00C6, r24
    46ba:	80 91 8f 07 	lds	r24, 0x078F
    46be:	90 91 90 07 	lds	r25, 0x0790
    46c2:	01 96       	adiw	r24, 0x01	; 1
    46c4:	83 70       	andi	r24, 0x03	; 3
    46c6:	90 78       	andi	r25, 0x80	; 128
    46c8:	99 23       	and	r25, r25
    46ca:	24 f4       	brge	.+8      	; 0x46d4 <_Z14enquecommand_PPKc+0xfa>
    46cc:	01 97       	sbiw	r24, 0x01	; 1
    46ce:	8c 6f       	ori	r24, 0xFC	; 252
    46d0:	9f 6f       	ori	r25, 0xFF	; 255
    46d2:	01 96       	adiw	r24, 0x01	; 1
    46d4:	90 93 90 07 	sts	0x0790, r25
    46d8:	80 93 8f 07 	sts	0x078F, r24
    46dc:	80 91 8d 07 	lds	r24, 0x078D
    46e0:	90 91 8e 07 	lds	r25, 0x078E
    46e4:	01 96       	adiw	r24, 0x01	; 1
    46e6:	90 93 8e 07 	sts	0x078E, r25
    46ea:	80 93 8d 07 	sts	0x078D, r24
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	08 95       	ret

000046f4 <_Z15setup_powerholdv>:
    46f4:	80 9a       	sbi	0x10, 0	; 16
    46f6:	88 9a       	sbi	0x11, 0	; 17
    46f8:	26 9a       	sbi	0x04, 6	; 4
    46fa:	2e 98       	cbi	0x05, 6	; 5
    46fc:	08 95       	ret

000046fe <_Z7suicidev>:
    46fe:	80 9a       	sbi	0x10, 0	; 16
    4700:	88 98       	cbi	0x11, 0	; 17
    4702:	08 95       	ret

00004704 <setup>:
  }
  #endif
}

void setup()
{
    4704:	cf 93       	push	r28
    4706:	df 93       	push	r29
  setup_killpin();
  setup_powerhold();
    4708:	f5 df       	rcall	.-22     	; 0x46f4 <_Z15setup_powerholdv>
  MYSERIAL.begin(BAUDRATE);
    470a:	40 e9       	ldi	r20, 0x90	; 144
    470c:	50 ed       	ldi	r21, 0xD0	; 208
    470e:	63 e0       	ldi	r22, 0x03	; 3
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	82 ed       	ldi	r24, 0xD2	; 210
    4714:	94 e0       	ldi	r25, 0x04	; 4
    4716:	8c da       	rcall	.-2792   	; 0x3c30 <_ZN12MarlinSerial5beginEl>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4718:	e5 ee       	ldi	r30, 0xE5	; 229
    471a:	f2 e0       	ldi	r31, 0x02	; 2
    471c:	94 91       	lpm	r25, Z
  while(ch)
    471e:	99 23       	and	r25, r25
    4720:	61 f0       	breq	.+24     	; 0x473a <setup+0x36>
    4722:	a0 ec       	ldi	r26, 0xC0	; 192
    4724:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4726:	c6 ec       	ldi	r28, 0xC6	; 198
    4728:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    472a:	8c 91       	ld	r24, X
    472c:	85 ff       	sbrs	r24, 5
    472e:	fd cf       	rjmp	.-6      	; 0x472a <setup+0x26>
        ;

      M_UDRx = c;
    4730:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4732:	31 96       	adiw	r30, 0x01	; 1
    4734:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4736:	91 11       	cpse	r25, r1
    4738:	f8 cf       	rjmp	.-16     	; 0x472a <setup+0x26>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    473a:	e0 ec       	ldi	r30, 0xC0	; 192
    473c:	f0 e0       	ldi	r31, 0x00	; 0
    473e:	80 81       	ld	r24, Z
    4740:	85 ff       	sbrs	r24, 5
    4742:	fd cf       	rjmp	.-6      	; 0x473e <setup+0x3a>
        ;

      M_UDRx = c;
    4744:	8a e0       	ldi	r24, 0x0A	; 10
    4746:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    474a:	85 ec       	ldi	r24, 0xC5	; 197
    474c:	92 e0       	ldi	r25, 0x02	; 2
    474e:	fc 01       	movw	r30, r24
    4750:	34 91       	lpm	r19, Z
  while(ch)
    4752:	33 23       	and	r19, r19
    4754:	61 f0       	breq	.+24     	; 0x476e <setup+0x6a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4756:	a0 ec       	ldi	r26, 0xC0	; 192
    4758:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    475a:	c6 ec       	ldi	r28, 0xC6	; 198
    475c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    475e:	2c 91       	ld	r18, X
    4760:	25 ff       	sbrs	r18, 5
    4762:	fd cf       	rjmp	.-6      	; 0x475e <setup+0x5a>
        ;

      M_UDRx = c;
    4764:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4766:	31 96       	adiw	r30, 0x01	; 1
    4768:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    476a:	31 11       	cpse	r19, r1
    476c:	f8 cf       	rjmp	.-16     	; 0x475e <setup+0x5a>
  SERIAL_PROTOCOLLNPGM("start");
  SERIAL_ECHO_START;

  // Check startup - does nothing if bootloader sets MCUSR to 0
  byte mcu = MCUSR;
    476e:	24 b7       	in	r18, 0x34	; 52
  if(mcu & 1) SERIAL_ECHOLNPGM(MSG_POWERUP);
    4770:	20 ff       	sbrs	r18, 0
    4772:	19 c0       	rjmp	.+50     	; 0x47a6 <setup+0xa2>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4774:	eb ee       	ldi	r30, 0xEB	; 235
    4776:	f2 e0       	ldi	r31, 0x02	; 2
    4778:	44 91       	lpm	r20, Z
  while(ch)
    477a:	44 23       	and	r20, r20
    477c:	61 f0       	breq	.+24     	; 0x4796 <setup+0x92>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    477e:	a0 ec       	ldi	r26, 0xC0	; 192
    4780:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4782:	c6 ec       	ldi	r28, 0xC6	; 198
    4784:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4786:	3c 91       	ld	r19, X
    4788:	35 ff       	sbrs	r19, 5
    478a:	fd cf       	rjmp	.-6      	; 0x4786 <setup+0x82>
        ;

      M_UDRx = c;
    478c:	48 83       	st	Y, r20
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    478e:	31 96       	adiw	r30, 0x01	; 1
    4790:	44 91       	lpm	r20, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4792:	41 11       	cpse	r20, r1
    4794:	f8 cf       	rjmp	.-16     	; 0x4786 <setup+0x82>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4796:	e0 ec       	ldi	r30, 0xC0	; 192
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	30 81       	ld	r19, Z
    479c:	35 ff       	sbrs	r19, 5
    479e:	fd cf       	rjmp	.-6      	; 0x479a <setup+0x96>
        ;

      M_UDRx = c;
    47a0:	3a e0       	ldi	r19, 0x0A	; 10
    47a2:	30 93 c6 00 	sts	0x00C6, r19
  if(mcu & 2) SERIAL_ECHOLNPGM(MSG_EXTERNAL_RESET);
    47a6:	21 ff       	sbrs	r18, 1
    47a8:	19 c0       	rjmp	.+50     	; 0x47dc <setup+0xd8>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    47aa:	e3 ef       	ldi	r30, 0xF3	; 243
    47ac:	f2 e0       	ldi	r31, 0x02	; 2
    47ae:	44 91       	lpm	r20, Z
  while(ch)
    47b0:	44 23       	and	r20, r20
    47b2:	61 f0       	breq	.+24     	; 0x47cc <setup+0xc8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    47b4:	a0 ec       	ldi	r26, 0xC0	; 192
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    47b8:	c6 ec       	ldi	r28, 0xC6	; 198
    47ba:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    47bc:	3c 91       	ld	r19, X
    47be:	35 ff       	sbrs	r19, 5
    47c0:	fd cf       	rjmp	.-6      	; 0x47bc <setup+0xb8>
        ;

      M_UDRx = c;
    47c2:	48 83       	st	Y, r20
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    47c4:	31 96       	adiw	r30, 0x01	; 1
    47c6:	44 91       	lpm	r20, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    47c8:	41 11       	cpse	r20, r1
    47ca:	f8 cf       	rjmp	.-16     	; 0x47bc <setup+0xb8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    47cc:	e0 ec       	ldi	r30, 0xC0	; 192
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	30 81       	ld	r19, Z
    47d2:	35 ff       	sbrs	r19, 5
    47d4:	fd cf       	rjmp	.-6      	; 0x47d0 <setup+0xcc>
        ;

      M_UDRx = c;
    47d6:	3a e0       	ldi	r19, 0x0A	; 10
    47d8:	30 93 c6 00 	sts	0x00C6, r19
  if(mcu & 4) SERIAL_ECHOLNPGM(MSG_BROWNOUT_RESET);
    47dc:	22 ff       	sbrs	r18, 2
    47de:	19 c0       	rjmp	.+50     	; 0x4812 <setup+0x10e>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    47e0:	e3 e0       	ldi	r30, 0x03	; 3
    47e2:	f3 e0       	ldi	r31, 0x03	; 3
    47e4:	44 91       	lpm	r20, Z
  while(ch)
    47e6:	44 23       	and	r20, r20
    47e8:	61 f0       	breq	.+24     	; 0x4802 <setup+0xfe>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    47ea:	a0 ec       	ldi	r26, 0xC0	; 192
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    47ee:	c6 ec       	ldi	r28, 0xC6	; 198
    47f0:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    47f2:	3c 91       	ld	r19, X
    47f4:	35 ff       	sbrs	r19, 5
    47f6:	fd cf       	rjmp	.-6      	; 0x47f2 <setup+0xee>
        ;

      M_UDRx = c;
    47f8:	48 83       	st	Y, r20
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    47fa:	31 96       	adiw	r30, 0x01	; 1
    47fc:	44 91       	lpm	r20, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    47fe:	41 11       	cpse	r20, r1
    4800:	f8 cf       	rjmp	.-16     	; 0x47f2 <setup+0xee>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4802:	e0 ec       	ldi	r30, 0xC0	; 192
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	30 81       	ld	r19, Z
    4808:	35 ff       	sbrs	r19, 5
    480a:	fd cf       	rjmp	.-6      	; 0x4806 <setup+0x102>
        ;

      M_UDRx = c;
    480c:	3a e0       	ldi	r19, 0x0A	; 10
    480e:	30 93 c6 00 	sts	0x00C6, r19
  if(mcu & 8) SERIAL_ECHOLNPGM(MSG_WATCHDOG_RESET);
    4812:	23 ff       	sbrs	r18, 3
    4814:	19 c0       	rjmp	.+50     	; 0x4848 <setup+0x144>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4816:	e4 e1       	ldi	r30, 0x14	; 20
    4818:	f3 e0       	ldi	r31, 0x03	; 3
    481a:	44 91       	lpm	r20, Z
  while(ch)
    481c:	44 23       	and	r20, r20
    481e:	61 f0       	breq	.+24     	; 0x4838 <setup+0x134>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4820:	a0 ec       	ldi	r26, 0xC0	; 192
    4822:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4824:	c6 ec       	ldi	r28, 0xC6	; 198
    4826:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4828:	3c 91       	ld	r19, X
    482a:	35 ff       	sbrs	r19, 5
    482c:	fd cf       	rjmp	.-6      	; 0x4828 <setup+0x124>
        ;

      M_UDRx = c;
    482e:	48 83       	st	Y, r20
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4830:	31 96       	adiw	r30, 0x01	; 1
    4832:	44 91       	lpm	r20, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4834:	41 11       	cpse	r20, r1
    4836:	f8 cf       	rjmp	.-16     	; 0x4828 <setup+0x124>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4838:	e0 ec       	ldi	r30, 0xC0	; 192
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	30 81       	ld	r19, Z
    483e:	35 ff       	sbrs	r19, 5
    4840:	fd cf       	rjmp	.-6      	; 0x483c <setup+0x138>
        ;

      M_UDRx = c;
    4842:	3a e0       	ldi	r19, 0x0A	; 10
    4844:	30 93 c6 00 	sts	0x00C6, r19
  if(mcu & 32) SERIAL_ECHOLNPGM(MSG_SOFTWARE_RESET);
    4848:	25 ff       	sbrs	r18, 5
    484a:	19 c0       	rjmp	.+50     	; 0x487e <setup+0x17a>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    484c:	e4 e2       	ldi	r30, 0x24	; 36
    484e:	f3 e0       	ldi	r31, 0x03	; 3
    4850:	34 91       	lpm	r19, Z
  while(ch)
    4852:	33 23       	and	r19, r19
    4854:	61 f0       	breq	.+24     	; 0x486e <setup+0x16a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4856:	a0 ec       	ldi	r26, 0xC0	; 192
    4858:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    485a:	c6 ec       	ldi	r28, 0xC6	; 198
    485c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    485e:	2c 91       	ld	r18, X
    4860:	25 ff       	sbrs	r18, 5
    4862:	fd cf       	rjmp	.-6      	; 0x485e <setup+0x15a>
        ;

      M_UDRx = c;
    4864:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4866:	31 96       	adiw	r30, 0x01	; 1
    4868:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    486a:	31 11       	cpse	r19, r1
    486c:	f8 cf       	rjmp	.-16     	; 0x485e <setup+0x15a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    486e:	e0 ec       	ldi	r30, 0xC0	; 192
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	20 81       	ld	r18, Z
    4874:	25 ff       	sbrs	r18, 5
    4876:	fd cf       	rjmp	.-6      	; 0x4872 <setup+0x16e>
        ;

      M_UDRx = c;
    4878:	2a e0       	ldi	r18, 0x0A	; 10
    487a:	20 93 c6 00 	sts	0x00C6, r18
  MCUSR=0;
    487e:	14 be       	out	0x34, r1	; 52


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4880:	e4 e3       	ldi	r30, 0x34	; 52
    4882:	f3 e0       	ldi	r31, 0x03	; 3
    4884:	34 91       	lpm	r19, Z
  while(ch)
    4886:	33 23       	and	r19, r19
    4888:	61 f0       	breq	.+24     	; 0x48a2 <setup+0x19e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    488a:	a0 ec       	ldi	r26, 0xC0	; 192
    488c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    488e:	c6 ec       	ldi	r28, 0xC6	; 198
    4890:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4892:	2c 91       	ld	r18, X
    4894:	25 ff       	sbrs	r18, 5
    4896:	fd cf       	rjmp	.-6      	; 0x4892 <setup+0x18e>
        ;

      M_UDRx = c;
    4898:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    489a:	31 96       	adiw	r30, 0x01	; 1
    489c:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    489e:	31 11       	cpse	r19, r1
    48a0:	f8 cf       	rjmp	.-16     	; 0x4892 <setup+0x18e>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    48a2:	ec e3       	ldi	r30, 0x3C	; 60
    48a4:	f3 e0       	ldi	r31, 0x03	; 3
    48a6:	34 91       	lpm	r19, Z
  while(ch)
    48a8:	33 23       	and	r19, r19
    48aa:	61 f0       	breq	.+24     	; 0x48c4 <setup+0x1c0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    48ac:	a0 ec       	ldi	r26, 0xC0	; 192
    48ae:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    48b0:	c6 ec       	ldi	r28, 0xC6	; 198
    48b2:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    48b4:	2c 91       	ld	r18, X
    48b6:	25 ff       	sbrs	r18, 5
    48b8:	fd cf       	rjmp	.-6      	; 0x48b4 <setup+0x1b0>
        ;

      M_UDRx = c;
    48ba:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    48bc:	31 96       	adiw	r30, 0x01	; 1
    48be:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    48c0:	31 11       	cpse	r19, r1
    48c2:	f8 cf       	rjmp	.-16     	; 0x48b4 <setup+0x1b0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    48c4:	e0 ec       	ldi	r30, 0xC0	; 192
    48c6:	f0 e0       	ldi	r31, 0x00	; 0
    48c8:	20 81       	ld	r18, Z
    48ca:	25 ff       	sbrs	r18, 5
    48cc:	fd cf       	rjmp	.-6      	; 0x48c8 <setup+0x1c4>
        ;

      M_UDRx = c;
    48ce:	2a e0       	ldi	r18, 0x0A	; 10
    48d0:	20 93 c6 00 	sts	0x00C6, r18


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    48d4:	fc 01       	movw	r30, r24
    48d6:	34 91       	lpm	r19, Z
  while(ch)
    48d8:	33 23       	and	r19, r19
    48da:	71 f0       	breq	.+28     	; 0x48f8 <setup+0x1f4>
    48dc:	e5 ec       	ldi	r30, 0xC5	; 197
    48de:	f2 e0       	ldi	r31, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    48e0:	a0 ec       	ldi	r26, 0xC0	; 192
    48e2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    48e4:	c6 ec       	ldi	r28, 0xC6	; 198
    48e6:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    48e8:	2c 91       	ld	r18, X
    48ea:	25 ff       	sbrs	r18, 5
    48ec:	fd cf       	rjmp	.-6      	; 0x48e8 <setup+0x1e4>
        ;

      M_UDRx = c;
    48ee:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    48f0:	31 96       	adiw	r30, 0x01	; 1
    48f2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    48f4:	31 11       	cpse	r19, r1
    48f6:	f8 cf       	rjmp	.-16     	; 0x48e8 <setup+0x1e4>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    48f8:	e2 e4       	ldi	r30, 0x42	; 66
    48fa:	f3 e0       	ldi	r31, 0x03	; 3
    48fc:	34 91       	lpm	r19, Z
  while(ch)
    48fe:	33 23       	and	r19, r19
    4900:	61 f0       	breq	.+24     	; 0x491a <setup+0x216>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4902:	a0 ec       	ldi	r26, 0xC0	; 192
    4904:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4906:	c6 ec       	ldi	r28, 0xC6	; 198
    4908:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    490a:	2c 91       	ld	r18, X
    490c:	25 ff       	sbrs	r18, 5
    490e:	fd cf       	rjmp	.-6      	; 0x490a <setup+0x206>
        ;

      M_UDRx = c;
    4910:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4912:	31 96       	adiw	r30, 0x01	; 1
    4914:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4916:	31 11       	cpse	r19, r1
    4918:	f8 cf       	rjmp	.-16     	; 0x490a <setup+0x206>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    491a:	e2 e5       	ldi	r30, 0x52	; 82
    491c:	f3 e0       	ldi	r31, 0x03	; 3
    491e:	34 91       	lpm	r19, Z
  while(ch)
    4920:	33 23       	and	r19, r19
    4922:	61 f0       	breq	.+24     	; 0x493c <setup+0x238>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4924:	a0 ec       	ldi	r26, 0xC0	; 192
    4926:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4928:	c6 ec       	ldi	r28, 0xC6	; 198
    492a:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    492c:	2c 91       	ld	r18, X
    492e:	25 ff       	sbrs	r18, 5
    4930:	fd cf       	rjmp	.-6      	; 0x492c <setup+0x228>
        ;

      M_UDRx = c;
    4932:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4934:	31 96       	adiw	r30, 0x01	; 1
    4936:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4938:	31 11       	cpse	r19, r1
    493a:	f8 cf       	rjmp	.-16     	; 0x492c <setup+0x228>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    493c:	e7 e6       	ldi	r30, 0x67	; 103
    493e:	f3 e0       	ldi	r31, 0x03	; 3
    4940:	34 91       	lpm	r19, Z
  while(ch)
    4942:	33 23       	and	r19, r19
    4944:	61 f0       	breq	.+24     	; 0x495e <setup+0x25a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4946:	a0 ec       	ldi	r26, 0xC0	; 192
    4948:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    494a:	c6 ec       	ldi	r28, 0xC6	; 198
    494c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    494e:	2c 91       	ld	r18, X
    4950:	25 ff       	sbrs	r18, 5
    4952:	fd cf       	rjmp	.-6      	; 0x494e <setup+0x24a>
        ;

      M_UDRx = c;
    4954:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4956:	31 96       	adiw	r30, 0x01	; 1
    4958:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    495a:	31 11       	cpse	r19, r1
    495c:	f8 cf       	rjmp	.-16     	; 0x494e <setup+0x24a>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    495e:	e3 e7       	ldi	r30, 0x73	; 115
    4960:	f3 e0       	ldi	r31, 0x03	; 3
    4962:	34 91       	lpm	r19, Z
  while(ch)
    4964:	33 23       	and	r19, r19
    4966:	61 f0       	breq	.+24     	; 0x4980 <setup+0x27c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4968:	a0 ec       	ldi	r26, 0xC0	; 192
    496a:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    496c:	c6 ec       	ldi	r28, 0xC6	; 198
    496e:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4970:	2c 91       	ld	r18, X
    4972:	25 ff       	sbrs	r18, 5
    4974:	fd cf       	rjmp	.-6      	; 0x4970 <setup+0x26c>
        ;

      M_UDRx = c;
    4976:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4978:	31 96       	adiw	r30, 0x01	; 1
    497a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    497c:	31 11       	cpse	r19, r1
    497e:	f8 cf       	rjmp	.-16     	; 0x4970 <setup+0x26c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4980:	e0 ec       	ldi	r30, 0xC0	; 192
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	20 81       	ld	r18, Z
    4986:	25 ff       	sbrs	r18, 5
    4988:	fd cf       	rjmp	.-6      	; 0x4984 <setup+0x280>
        ;

      M_UDRx = c;
    498a:	2a e0       	ldi	r18, 0x0A	; 10
    498c:	20 93 c6 00 	sts	0x00C6, r18


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4990:	ea e8       	ldi	r30, 0x8A	; 138
    4992:	f3 e0       	ldi	r31, 0x03	; 3
    4994:	34 91       	lpm	r19, Z
  while(ch)
    4996:	33 23       	and	r19, r19
    4998:	61 f0       	breq	.+24     	; 0x49b2 <setup+0x2ae>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    499a:	a0 ec       	ldi	r26, 0xC0	; 192
    499c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    499e:	c6 ec       	ldi	r28, 0xC6	; 198
    49a0:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49a2:	2c 91       	ld	r18, X
    49a4:	25 ff       	sbrs	r18, 5
    49a6:	fd cf       	rjmp	.-6      	; 0x49a2 <setup+0x29e>
        ;

      M_UDRx = c;
    49a8:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    49aa:	31 96       	adiw	r30, 0x01	; 1
    49ac:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    49ae:	31 11       	cpse	r19, r1
    49b0:	f8 cf       	rjmp	.-16     	; 0x49a2 <setup+0x29e>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    49b2:	e5 e9       	ldi	r30, 0x95	; 149
    49b4:	f3 e0       	ldi	r31, 0x03	; 3
    49b6:	34 91       	lpm	r19, Z
  while(ch)
    49b8:	33 23       	and	r19, r19
    49ba:	61 f0       	breq	.+24     	; 0x49d4 <setup+0x2d0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49bc:	a0 ec       	ldi	r26, 0xC0	; 192
    49be:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    49c0:	c6 ec       	ldi	r28, 0xC6	; 198
    49c2:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49c4:	2c 91       	ld	r18, X
    49c6:	25 ff       	sbrs	r18, 5
    49c8:	fd cf       	rjmp	.-6      	; 0x49c4 <setup+0x2c0>
        ;

      M_UDRx = c;
    49ca:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    49cc:	31 96       	adiw	r30, 0x01	; 1
    49ce:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    49d0:	31 11       	cpse	r19, r1
    49d2:	f8 cf       	rjmp	.-16     	; 0x49c4 <setup+0x2c0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49d4:	e0 ec       	ldi	r30, 0xC0	; 192
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	20 81       	ld	r18, Z
    49da:	25 ff       	sbrs	r18, 5
    49dc:	fd cf       	rjmp	.-6      	; 0x49d8 <setup+0x2d4>
        ;

      M_UDRx = c;
    49de:	2a e0       	ldi	r18, 0x0A	; 10
    49e0:	20 93 c6 00 	sts	0x00C6, r18


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    49e4:	fc 01       	movw	r30, r24
    49e6:	84 91       	lpm	r24, Z
  while(ch)
    49e8:	88 23       	and	r24, r24
    49ea:	71 f0       	breq	.+28     	; 0x4a08 <setup+0x304>
    49ec:	e5 ec       	ldi	r30, 0xC5	; 197
    49ee:	f2 e0       	ldi	r31, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49f0:	a0 ec       	ldi	r26, 0xC0	; 192
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    49f4:	c6 ec       	ldi	r28, 0xC6	; 198
    49f6:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    49f8:	9c 91       	ld	r25, X
    49fa:	95 ff       	sbrs	r25, 5
    49fc:	fd cf       	rjmp	.-6      	; 0x49f8 <setup+0x2f4>
        ;

      M_UDRx = c;
    49fe:	88 83       	st	Y, r24
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4a00:	31 96       	adiw	r30, 0x01	; 1
    4a02:	84 91       	lpm	r24, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4a04:	81 11       	cpse	r24, r1
    4a06:	f8 cf       	rjmp	.-16     	; 0x49f8 <setup+0x2f4>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4a08:	e1 ea       	ldi	r30, 0xA1	; 161
    4a0a:	f3 e0       	ldi	r31, 0x03	; 3
    4a0c:	94 91       	lpm	r25, Z
  while(ch)
    4a0e:	99 23       	and	r25, r25
    4a10:	61 f0       	breq	.+24     	; 0x4a2a <setup+0x326>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4a12:	a0 ec       	ldi	r26, 0xC0	; 192
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4a16:	c6 ec       	ldi	r28, 0xC6	; 198
    4a18:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4a1a:	8c 91       	ld	r24, X
    4a1c:	85 ff       	sbrs	r24, 5
    4a1e:	fd cf       	rjmp	.-6      	; 0x4a1a <setup+0x316>
        ;

      M_UDRx = c;
    4a20:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4a22:	31 96       	adiw	r30, 0x01	; 1
    4a24:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4a26:	91 11       	cpse	r25, r1
    4a28:	f8 cf       	rjmp	.-16     	; 0x4a1a <setup+0x316>
      SERIAL_ECHOLNPGM(__DATE__);
    #endif
  #endif
  SERIAL_ECHO_START;
  SERIAL_ECHOPGM(MSG_FREE_MEMORY);
  SERIAL_ECHO(freeMemory());
    4a2a:	29 dd       	rcall	.-1454   	; 0x447e <freeMemory>
    4a2c:	4a e0       	ldi	r20, 0x0A	; 10
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	bc 01       	movw	r22, r24
    4a32:	82 ed       	ldi	r24, 0xD2	; 210
    4a34:	94 e0       	ldi	r25, 0x04	; 4
    4a36:	2e da       	rcall	.-2980   	; 0x3e94 <_ZN12MarlinSerial5printEii>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4a38:	e0 eb       	ldi	r30, 0xB0	; 176
    4a3a:	f3 e0       	ldi	r31, 0x03	; 3
    4a3c:	94 91       	lpm	r25, Z
  while(ch)
    4a3e:	99 23       	and	r25, r25
    4a40:	61 f0       	breq	.+24     	; 0x4a5a <setup+0x356>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4a42:	a0 ec       	ldi	r26, 0xC0	; 192
    4a44:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4a46:	c6 ec       	ldi	r28, 0xC6	; 198
    4a48:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4a4a:	8c 91       	ld	r24, X
    4a4c:	85 ff       	sbrs	r24, 5
    4a4e:	fd cf       	rjmp	.-6      	; 0x4a4a <setup+0x346>
        ;

      M_UDRx = c;
    4a50:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4a52:	31 96       	adiw	r30, 0x01	; 1
    4a54:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4a56:	91 11       	cpse	r25, r1
    4a58:	f8 cf       	rjmp	.-16     	; 0x4a4a <setup+0x346>
  SERIAL_ECHOPGM(MSG_PLANNER_BUFFER_BYTES);
  SERIAL_ECHOLN((int)sizeof(block_t)*BLOCK_BUFFER_SIZE);
    4a5a:	4a e0       	ldi	r20, 0x0A	; 10
    4a5c:	50 e0       	ldi	r21, 0x00	; 0
    4a5e:	60 ed       	ldi	r22, 0xD0	; 208
    4a60:	74 e0       	ldi	r23, 0x04	; 4
    4a62:	82 ed       	ldi	r24, 0xD2	; 210
    4a64:	94 e0       	ldi	r25, 0x04	; 4
    4a66:	16 da       	rcall	.-3028   	; 0x3e94 <_ZN12MarlinSerial5printEii>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4a68:	e0 ec       	ldi	r30, 0xC0	; 192
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	80 81       	ld	r24, Z
    4a6e:	85 ff       	sbrs	r24, 5
    4a70:	fd cf       	rjmp	.-6      	; 0x4a6c <setup+0x368>
        ;

      M_UDRx = c;
    4a72:	8a e0       	ldi	r24, 0x0A	; 10
    4a74:	80 93 c6 00 	sts	0x00C6, r24
  for(int8_t i = 0; i < BUFSIZE; i++)
  {
    fromsd[i] = false;
    4a78:	10 92 11 09 	sts	0x0911, r1
    4a7c:	10 92 12 09 	sts	0x0912, r1
    4a80:	10 92 13 09 	sts	0x0913, r1
    4a84:	10 92 14 09 	sts	0x0914, r1
#ifdef EEPROM_SETTINGS
void Config_StoreSettings();
void Config_RetrieveSettings();
#else
FORCE_INLINE void Config_StoreSettings() {}
FORCE_INLINE void Config_RetrieveSettings() { Config_ResetDefault(); Config_PrintSettings(); }
    4a88:	0e 94 84 1b 	call	0x3708	; 0x3708 <_Z19Config_ResetDefaultv>
  }

  // loads data from EEPROM if available else uses defaults (and resets step acceleration rate)
  Config_RetrieveSettings();

  tp_init();    // Initialize temperature loop
    4a8c:	0e 94 33 75 	call	0xea66	; 0xea66 <_Z7tp_initv>
  plan_init();  // Initialize planner;
    4a90:	0e 94 6b 4a 	call	0x94d6	; 0x94d6 <_Z9plan_initv>
  watchdog_init();
  st_init();    // Initialize stepper, this enables interrupts!
    4a94:	0e 94 96 71 	call	0xe32c	; 0xe32c <_Z7st_initv>
  setup_photpin();
  servo_init();

  lcd_init();
    4a98:	0e 94 90 95 	call	0x12b20	; 0x12b20 <_Z8lcd_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4a9c:	8f e9       	ldi	r24, 0x9F	; 159
    4a9e:	9f e0       	ldi	r25, 0x0F	; 15
    4aa0:	01 97       	sbiw	r24, 0x01	; 1
    4aa2:	f1 f7       	brne	.-4      	; 0x4aa0 <setup+0x39c>
    4aa4:	00 c0       	rjmp	.+0      	; 0x4aa6 <setup+0x3a2>
    4aa6:	00 00       	nop
  _delay_ms(1);	// wait 1sec to display the splash screen

  #if defined(CONTROLLERFAN_PIN) && CONTROLLERFAN_PIN > -1
    SET_OUTPUT(CONTROLLERFAN_PIN); //Set pin used for driver cooling fan
  #endif
}
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <_Z10code_valuev>:
}


float code_value()
{
  return (strtod(&cmdbuffer[bufindr][strchr_pointer - cmdbuffer[bufindr] + 1], NULL));
    4aae:	80 91 1b 09 	lds	r24, 0x091B
    4ab2:	90 91 1c 09 	lds	r25, 0x091C
    4ab6:	60 e0       	ldi	r22, 0x00	; 0
    4ab8:	70 e0       	ldi	r23, 0x00	; 0
    4aba:	01 96       	adiw	r24, 0x01	; 1
    4abc:	0c 94 20 c1 	jmp	0x18240	; 0x18240 <strtod>

00004ac0 <_Z15code_value_longv>:
}

long code_value_long()
{
  return (strtol(&cmdbuffer[bufindr][strchr_pointer - cmdbuffer[bufindr] + 1], NULL, 10));
    4ac0:	80 91 1b 09 	lds	r24, 0x091B
    4ac4:	90 91 1c 09 	lds	r25, 0x091C
    4ac8:	4a e0       	ldi	r20, 0x0A	; 10
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	01 96       	adiw	r24, 0x01	; 1
    4ad2:	0c 94 76 c2 	jmp	0x184ec	; 0x184ec <strtol>

00004ad6 <_Z9code_seenc>:
}

bool code_seen(char code)
{
  strchr_pointer = strchr(cmdbuffer[bufindr], code);
    4ad6:	40 91 15 09 	lds	r20, 0x0915
    4ada:	50 91 16 09 	lds	r21, 0x0916
    4ade:	90 e6       	ldi	r25, 0x60	; 96
    4ae0:	94 9f       	mul	r25, r20
    4ae2:	90 01       	movw	r18, r0
    4ae4:	95 9f       	mul	r25, r21
    4ae6:	30 0d       	add	r19, r0
    4ae8:	11 24       	eor	r1, r1
    4aea:	68 2f       	mov	r22, r24
    4aec:	70 e0       	ldi	r23, 0x00	; 0
    4aee:	c9 01       	movw	r24, r18
    4af0:	8f 56       	subi	r24, 0x6F	; 111
    4af2:	98 4f       	sbci	r25, 0xF8	; 248
    4af4:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    4af8:	90 93 1c 09 	sts	0x091C, r25
    4afc:	80 93 1b 09 	sts	0x091B, r24
  return (strchr_pointer != NULL);  //Return True if a character was found
    4b00:	21 e0       	ldi	r18, 0x01	; 1
    4b02:	89 2b       	or	r24, r25
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <_Z9code_seenc+0x32>
    4b06:	20 e0       	ldi	r18, 0x00	; 0
}
    4b08:	82 2f       	mov	r24, r18
    4b0a:	08 95       	ret

00004b0c <_Z11ClearToSendv>:
  SERIAL_PROTOCOLLN(gcode_LastN + 1);
  ClearToSend();
}

void ClearToSend()
{
    4b0c:	cf 93       	push	r28
    4b0e:	df 93       	push	r29
  previous_millis_cmd = millis();
    4b10:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    4b14:	60 93 25 09 	sts	0x0925, r22
    4b18:	70 93 26 09 	sts	0x0926, r23
    4b1c:	80 93 27 09 	sts	0x0927, r24
    4b20:	90 93 28 09 	sts	0x0928, r25
  #ifdef SDSUPPORT
  if(fromsd[bufindr])
    4b24:	e0 91 15 09 	lds	r30, 0x0915
    4b28:	f0 91 16 09 	lds	r31, 0x0916
    4b2c:	ef 5e       	subi	r30, 0xEF	; 239
    4b2e:	f6 4f       	sbci	r31, 0xF6	; 246
    4b30:	80 81       	ld	r24, Z
    4b32:	81 11       	cpse	r24, r1
    4b34:	19 c0       	rjmp	.+50     	; 0x4b68 <_Z11ClearToSendv+0x5c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4b36:	ec e6       	ldi	r30, 0x6C	; 108
    4b38:	f7 e0       	ldi	r31, 0x07	; 7
    4b3a:	94 91       	lpm	r25, Z
  while(ch)
    4b3c:	99 23       	and	r25, r25
    4b3e:	61 f0       	breq	.+24     	; 0x4b58 <_Z11ClearToSendv+0x4c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4b40:	a0 ec       	ldi	r26, 0xC0	; 192
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4b44:	c6 ec       	ldi	r28, 0xC6	; 198
    4b46:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4b48:	8c 91       	ld	r24, X
    4b4a:	85 ff       	sbrs	r24, 5
    4b4c:	fd cf       	rjmp	.-6      	; 0x4b48 <_Z11ClearToSendv+0x3c>
        ;

      M_UDRx = c;
    4b4e:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4b50:	31 96       	adiw	r30, 0x01	; 1
    4b52:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4b54:	91 11       	cpse	r25, r1
    4b56:	f8 cf       	rjmp	.-16     	; 0x4b48 <_Z11ClearToSendv+0x3c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4b58:	e0 ec       	ldi	r30, 0xC0	; 192
    4b5a:	f0 e0       	ldi	r31, 0x00	; 0
    4b5c:	80 81       	ld	r24, Z
    4b5e:	85 ff       	sbrs	r24, 5
    4b60:	fd cf       	rjmp	.-6      	; 0x4b5c <_Z11ClearToSendv+0x50>
        ;

      M_UDRx = c;
    4b62:	8a e0       	ldi	r24, 0x0A	; 10
    4b64:	80 93 c6 00 	sts	0x00C6, r24
    return;
  #endif //SDSUPPORT
  SERIAL_PROTOCOLLNPGM(MSG_OK);
}
    4b68:	df 91       	pop	r29
    4b6a:	cf 91       	pop	r28
    4b6c:	08 95       	ret

00004b6e <_Z24FlushSerialRequestResendv>:

  ClearToSend();
}

void FlushSerialRequestResend()
{
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
  //char cmdbuffer[bufindr][100]="Resend:";
  MYSERIAL.flush();
    4b72:	82 ed       	ldi	r24, 0xD2	; 210
    4b74:	94 e0       	ldi	r25, 0x04	; 4
    4b76:	b4 d8       	rcall	.-3736   	; 0x3ce0 <_ZN12MarlinSerial5flushEv>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4b78:	e3 e6       	ldi	r30, 0x63	; 99
    4b7a:	f7 e0       	ldi	r31, 0x07	; 7
    4b7c:	94 91       	lpm	r25, Z
  while(ch)
    4b7e:	99 23       	and	r25, r25
    4b80:	61 f0       	breq	.+24     	; 0x4b9a <_Z24FlushSerialRequestResendv+0x2c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4b82:	a0 ec       	ldi	r26, 0xC0	; 192
    4b84:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4b86:	c6 ec       	ldi	r28, 0xC6	; 198
    4b88:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4b8a:	8c 91       	ld	r24, X
    4b8c:	85 ff       	sbrs	r24, 5
    4b8e:	fd cf       	rjmp	.-6      	; 0x4b8a <_Z24FlushSerialRequestResendv+0x1c>
        ;

      M_UDRx = c;
    4b90:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4b92:	31 96       	adiw	r30, 0x01	; 1
    4b94:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4b96:	91 11       	cpse	r25, r1
    4b98:	f8 cf       	rjmp	.-16     	; 0x4b8a <_Z24FlushSerialRequestResendv+0x1c>
  SERIAL_PROTOCOLPGM(MSG_RESEND);
  SERIAL_PROTOCOLLN(gcode_LastN + 1);
    4b9a:	40 91 21 09 	lds	r20, 0x0921
    4b9e:	50 91 22 09 	lds	r21, 0x0922
    4ba2:	60 91 23 09 	lds	r22, 0x0923
    4ba6:	70 91 24 09 	lds	r23, 0x0924
    4baa:	4f 5f       	subi	r20, 0xFF	; 255
    4bac:	5f 4f       	sbci	r21, 0xFF	; 255
    4bae:	6f 4f       	sbci	r22, 0xFF	; 255
    4bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb2:	2a e0       	ldi	r18, 0x0A	; 10
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	82 ed       	ldi	r24, 0xD2	; 210
    4bb8:	94 e0       	ldi	r25, 0x04	; 4
    4bba:	39 d9       	rcall	.-3470   	; 0x3e2e <_ZN12MarlinSerial5printEli>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4bbc:	e0 ec       	ldi	r30, 0xC0	; 192
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	85 ff       	sbrs	r24, 5
    4bc4:	fd cf       	rjmp	.-6      	; 0x4bc0 <_Z24FlushSerialRequestResendv+0x52>
        ;

      M_UDRx = c;
    4bc6:	8a e0       	ldi	r24, 0x0A	; 10
    4bc8:	80 93 c6 00 	sts	0x00C6, r24
  ClearToSend();
    4bcc:	9f df       	rcall	.-194    	; 0x4b0c <_Z11ClearToSendv>
}
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	08 95       	ret

00004bd4 <_Z11get_commandv>:
  checkHitEndstops();
  lcd_update();
}

void get_command()
{
    4bd4:	2f 92       	push	r2
    4bd6:	3f 92       	push	r3
    4bd8:	4f 92       	push	r4
    4bda:	5f 92       	push	r5
    4bdc:	6f 92       	push	r6
    4bde:	7f 92       	push	r7
    4be0:	8f 92       	push	r8
    4be2:	9f 92       	push	r9
    4be4:	af 92       	push	r10
    4be6:	bf 92       	push	r11
    4be8:	cf 92       	push	r12
    4bea:	df 92       	push	r13
    4bec:	ef 92       	push	r14
    4bee:	ff 92       	push	r15
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	cd b7       	in	r28, 0x3d	; 61
    4bfa:	de b7       	in	r29, 0x3e	; 62
    4bfc:	a2 97       	sbiw	r28, 0x22	; 34
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	cd bf       	out	0x3d, r28	; 61
    int read(void);
    void flush(void);
    
    FORCE_INLINE int available(void)
    {
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    4c08:	0f 2e       	mov	r0, r31
    4c0a:	f3 e5       	ldi	r31, 0x53	; 83
    4c0c:	af 2e       	mov	r10, r31
    4c0e:	f5 e0       	ldi	r31, 0x05	; 5
    4c10:	bf 2e       	mov	r11, r31
    4c12:	f0 2d       	mov	r31, r0
    4c14:	0f 2e       	mov	r0, r31
    4c16:	f5 e5       	ldi	r31, 0x55	; 85
    4c18:	4f 2e       	mov	r4, r31
    4c1a:	f5 e0       	ldi	r31, 0x05	; 5
    4c1c:	5f 2e       	mov	r5, r31
    4c1e:	f0 2d       	mov	r31, r0
    {
      if(!serial_count) { //if empty line
        comment_mode = false; //for new command
        return;
      }
      cmdbuffer[bufindw][serial_count] = 0; //terminate string
    4c20:	0f 2e       	mov	r0, r31
    4c22:	f0 e6       	ldi	r31, 0x60	; 96
    4c24:	7f 2e       	mov	r7, r31
    4c26:	f0 2d       	mov	r31, r0


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4c28:	0f 2e       	mov	r0, r31
    4c2a:	f5 e9       	ldi	r31, 0x95	; 149
    4c2c:	2f 2e       	mov	r2, r31
    4c2e:	f4 e0       	ldi	r31, 0x04	; 4
    4c30:	3f 2e       	mov	r3, r31
    4c32:	f0 2d       	mov	r31, r0
    4c34:	f1 01       	movw	r30, r2
    4c36:	f4 91       	lpm	r31, Z
    4c38:	f9 a3       	std	Y+33, r31	; 0x21
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4c3a:	00 ec       	ldi	r16, 0xC0	; 192
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
        ;

      M_UDRx = c;
    4c3e:	0f 2e       	mov	r0, r31
    4c40:	f6 ec       	ldi	r31, 0xC6	; 198
    4c42:	cf 2e       	mov	r12, r31
    4c44:	d1 2c       	mov	r13, r1
    4c46:	f0 2d       	mov	r31, r0
    4c48:	e2 e9       	ldi	r30, 0x92	; 146
    4c4a:	f4 e0       	ldi	r31, 0x04	; 4
    4c4c:	f4 91       	lpm	r31, Z
    4c4e:	fa a3       	std	Y+34, r31	; 0x22
  lcd_update();
}

void get_command()
{
  while( MYSERIAL.available() > 0  && buflen < BUFSIZE) {
    4c50:	94 c2       	rjmp	.+1320   	; 0x517a <_Z11get_commandv+0x5a6>
    serial_char = MYSERIAL.read();
    if(serial_char == '\n' ||
    4c52:	8d 30       	cpi	r24, 0x0D	; 13
    4c54:	79 f0       	breq	.+30     	; 0x4c74 <_Z11get_commandv+0xa0>
    4c56:	8a 33       	cpi	r24, 0x3A	; 58
    4c58:	29 f4       	brne	.+10     	; 0x4c64 <_Z11get_commandv+0x90>
    4c5a:	80 91 18 09 	lds	r24, 0x0918
    4c5e:	88 23       	and	r24, r24
    4c60:	49 f0       	breq	.+18     	; 0x4c74 <_Z11get_commandv+0xa0>
    4c62:	f2 c3       	rjmp	.+2020   	; 0x5448 <_Z11get_commandv+0x874>
    4c64:	20 91 19 09 	lds	r18, 0x0919
    4c68:	30 91 1a 09 	lds	r19, 0x091A
    4c6c:	2f 35       	cpi	r18, 0x5F	; 95
    4c6e:	31 05       	cpc	r19, r1
    4c70:	0c f4       	brge	.+2      	; 0x4c74 <_Z11get_commandv+0xa0>
    4c72:	65 c2       	rjmp	.+1226   	; 0x513e <_Z11get_commandv+0x56a>
       serial_char == '\r' ||
       (serial_char == ':' && comment_mode == false) ||
       serial_count >= (MAX_CMD_SIZE - 1) )
    {
      if(!serial_count) { //if empty line
    4c74:	80 91 19 09 	lds	r24, 0x0919
    4c78:	90 91 1a 09 	lds	r25, 0x091A
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	19 f4       	brne	.+6      	; 0x4c86 <_Z11get_commandv+0xb2>
        comment_mode = false; //for new command
    4c80:	10 92 18 09 	sts	0x0918, r1
        return;
    4c84:	2f c4       	rjmp	.+2142   	; 0x54e4 <_Z11get_commandv+0x910>
      }
      cmdbuffer[bufindw][serial_count] = 0; //terminate string
    4c86:	e0 90 8f 07 	lds	r14, 0x078F
    4c8a:	f0 90 90 07 	lds	r15, 0x0790
    4c8e:	7e 9c       	mul	r7, r14
    4c90:	f0 01       	movw	r30, r0
    4c92:	7f 9c       	mul	r7, r15
    4c94:	f0 0d       	add	r31, r0
    4c96:	11 24       	eor	r1, r1
    4c98:	8e 0f       	add	r24, r30
    4c9a:	9f 1f       	adc	r25, r31
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	ef 56       	subi	r30, 0x6F	; 111
    4ca0:	f8 4f       	sbci	r31, 0xF8	; 248
    4ca2:	10 82       	st	Z, r1
      if(!comment_mode){
    4ca4:	80 91 18 09 	lds	r24, 0x0918
    4ca8:	81 11       	cpse	r24, r1
    4caa:	44 c2       	rjmp	.+1160   	; 0x5134 <_Z11get_commandv+0x560>
        comment_mode = false; //for new command
    4cac:	10 92 18 09 	sts	0x0918, r1
        fromsd[bufindw] = false;
    4cb0:	f7 01       	movw	r30, r14
    4cb2:	ef 5e       	subi	r30, 0xEF	; 239
    4cb4:	f6 4f       	sbci	r31, 0xF6	; 246
    4cb6:	10 82       	st	Z, r1
        if(strchr(cmdbuffer[bufindw], 'N') != NULL)
    4cb8:	7e 9c       	mul	r7, r14
    4cba:	c0 01       	movw	r24, r0
    4cbc:	7f 9c       	mul	r7, r15
    4cbe:	90 0d       	add	r25, r0
    4cc0:	11 24       	eor	r1, r1
    4cc2:	0f 2e       	mov	r0, r31
    4cc4:	f1 e9       	ldi	r31, 0x91	; 145
    4cc6:	8f 2e       	mov	r8, r31
    4cc8:	f7 e0       	ldi	r31, 0x07	; 7
    4cca:	9f 2e       	mov	r9, r31
    4ccc:	f0 2d       	mov	r31, r0
    4cce:	88 0e       	add	r8, r24
    4cd0:	99 1e       	adc	r9, r25
    4cd2:	6e e4       	ldi	r22, 0x4E	; 78
    4cd4:	70 e0       	ldi	r23, 0x00	; 0
    4cd6:	c4 01       	movw	r24, r8
    4cd8:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	09 f4       	brne	.+2      	; 0x4ce2 <_Z11get_commandv+0x10e>
    4ce0:	59 c1       	rjmp	.+690    	; 0x4f94 <_Z11get_commandv+0x3c0>
        {
          strchr_pointer = strchr(cmdbuffer[bufindw], 'N');
    4ce2:	90 93 1c 09 	sts	0x091C, r25
    4ce6:	80 93 1b 09 	sts	0x091B, r24
          gcode_N = (strtol(&cmdbuffer[bufindw][strchr_pointer - cmdbuffer[bufindw] + 1], NULL, 10));
    4cea:	7e 9c       	mul	r7, r14
    4cec:	90 01       	movw	r18, r0
    4cee:	7f 9c       	mul	r7, r15
    4cf0:	30 0d       	add	r19, r0
    4cf2:	11 24       	eor	r1, r1
    4cf4:	88 19       	sub	r24, r8
    4cf6:	99 09       	sbc	r25, r9
    4cf8:	82 0f       	add	r24, r18
    4cfa:	93 1f       	adc	r25, r19
    4cfc:	4a e0       	ldi	r20, 0x0A	; 10
    4cfe:	50 e0       	ldi	r21, 0x00	; 0
    4d00:	60 e0       	ldi	r22, 0x00	; 0
    4d02:	70 e0       	ldi	r23, 0x00	; 0
    4d04:	8e 56       	subi	r24, 0x6E	; 110
    4d06:	98 4f       	sbci	r25, 0xF8	; 248
    4d08:	0e 94 76 c2 	call	0x184ec	; 0x184ec <strtol>
    4d0c:	60 93 1d 09 	sts	0x091D, r22
    4d10:	70 93 1e 09 	sts	0x091E, r23
    4d14:	80 93 1f 09 	sts	0x091F, r24
    4d18:	90 93 20 09 	sts	0x0920, r25
          if(gcode_N != gcode_LastN+1 && (strstr_P(cmdbuffer[bufindw], PSTR("M110")) == NULL) ) {
    4d1c:	20 91 21 09 	lds	r18, 0x0921
    4d20:	30 91 22 09 	lds	r19, 0x0922
    4d24:	40 91 23 09 	lds	r20, 0x0923
    4d28:	50 91 24 09 	lds	r21, 0x0924
    4d2c:	2f 5f       	subi	r18, 0xFF	; 255
    4d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d30:	4f 4f       	sbci	r20, 0xFF	; 255
    4d32:	5f 4f       	sbci	r21, 0xFF	; 255
    4d34:	62 17       	cp	r22, r18
    4d36:	73 07       	cpc	r23, r19
    4d38:	84 07       	cpc	r24, r20
    4d3a:	95 07       	cpc	r25, r21
    4d3c:	09 f4       	brne	.+2      	; 0x4d40 <_Z11get_commandv+0x16c>
    4d3e:	93 c3       	rjmp	.+1830   	; 0x5466 <_Z11get_commandv+0x892>
    4d40:	20 91 8f 07 	lds	r18, 0x078F
    4d44:	30 91 90 07 	lds	r19, 0x0790
    4d48:	72 9e       	mul	r7, r18
    4d4a:	c0 01       	movw	r24, r0
    4d4c:	73 9e       	mul	r7, r19
    4d4e:	90 0d       	add	r25, r0
    4d50:	11 24       	eor	r1, r1
    4d52:	60 ee       	ldi	r22, 0xE0	; 224
    4d54:	73 e0       	ldi	r23, 0x03	; 3
    4d56:	8f 56       	subi	r24, 0x6F	; 111
    4d58:	98 4f       	sbci	r25, 0xF8	; 248
    4d5a:	0e 94 e6 c3 	call	0x187cc	; 0x187cc <strstr_P>
    4d5e:	89 2b       	or	r24, r25
    4d60:	09 f0       	breq	.+2      	; 0x4d64 <_Z11get_commandv+0x190>
    4d62:	81 c3       	rjmp	.+1794   	; 0x5466 <_Z11get_commandv+0x892>
    4d64:	7a c3       	rjmp	.+1780   	; 0x545a <_Z11get_commandv+0x886>
  while(ch)
    4d66:	e5 ee       	ldi	r30, 0xE5	; 229
    4d68:	f3 e0       	ldi	r31, 0x03	; 3
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4d6a:	a0 ec       	ldi	r26, 0xC0	; 192
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4d6e:	86 ec       	ldi	r24, 0xC6	; 198
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4d74:	2c 91       	ld	r18, X
    4d76:	25 ff       	sbrs	r18, 5
    4d78:	fd cf       	rjmp	.-6      	; 0x4d74 <_Z11get_commandv+0x1a0>
        ;

      M_UDRx = c;
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4d7e:	4f 5f       	subi	r20, 0xFF	; 255
    4d80:	5f 4f       	sbci	r21, 0xFF	; 255
    4d82:	fa 01       	movw	r30, r20
    4d84:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4d86:	31 11       	cpse	r19, r1
    4d88:	f5 cf       	rjmp	.-22     	; 0x4d74 <_Z11get_commandv+0x1a0>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4d8a:	ec ee       	ldi	r30, 0xEC	; 236
    4d8c:	f3 e0       	ldi	r31, 0x03	; 3
    4d8e:	34 91       	lpm	r19, Z
  while(ch)
    4d90:	33 23       	and	r19, r19
    4d92:	81 f0       	breq	.+32     	; 0x4db4 <_Z11get_commandv+0x1e0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4d94:	a0 ec       	ldi	r26, 0xC0	; 192
    4d96:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4d98:	86 ec       	ldi	r24, 0xC6	; 198
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4d9e:	2c 91       	ld	r18, X
    4da0:	25 ff       	sbrs	r18, 5
    4da2:	fd cf       	rjmp	.-6      	; 0x4d9e <_Z11get_commandv+0x1ca>
        ;

      M_UDRx = c;
    4da4:	fc 01       	movw	r30, r24
    4da6:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4da8:	4f 5f       	subi	r20, 0xFF	; 255
    4daa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dac:	fa 01       	movw	r30, r20
    4dae:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4db0:	31 11       	cpse	r19, r1
    4db2:	f5 cf       	rjmp	.-22     	; 0x4d9e <_Z11get_commandv+0x1ca>
            SERIAL_ERROR_START;
            SERIAL_ERRORPGM(MSG_ERR_LINE_NO);
            SERIAL_ERRORLN(gcode_LastN);
    4db4:	40 91 21 09 	lds	r20, 0x0921
    4db8:	50 91 22 09 	lds	r21, 0x0922
    4dbc:	60 91 23 09 	lds	r22, 0x0923
    4dc0:	70 91 24 09 	lds	r23, 0x0924
    4dc4:	2a e0       	ldi	r18, 0x0A	; 10
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	82 ed       	ldi	r24, 0xD2	; 210
    4dca:	94 e0       	ldi	r25, 0x04	; 4
    4dcc:	30 d8       	rcall	.-4000   	; 0x3e2e <_ZN12MarlinSerial5printEli>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4dce:	e0 ec       	ldi	r30, 0xC0	; 192
    4dd0:	f0 e0       	ldi	r31, 0x00	; 0
    4dd2:	80 81       	ld	r24, Z
    4dd4:	85 ff       	sbrs	r24, 5
    4dd6:	fd cf       	rjmp	.-6      	; 0x4dd2 <_Z11get_commandv+0x1fe>
        ;

      M_UDRx = c;
    4dd8:	8a e0       	ldi	r24, 0x0A	; 10
    4dda:	80 93 c6 00 	sts	0x00C6, r24
            //Serial.println(gcode_N);
            FlushSerialRequestResend();
    4dde:	c7 de       	rcall	.-626    	; 0x4b6e <_Z24FlushSerialRequestResendv>
            serial_count = 0;
    4de0:	10 92 1a 09 	sts	0x091A, r1
    4de4:	10 92 19 09 	sts	0x0919, r1
            return;
    4de8:	7d c3       	rjmp	.+1786   	; 0x54e4 <_Z11get_commandv+0x910>

          if(strchr(cmdbuffer[bufindw], '*') != NULL)
          {
            byte checksum = 0;
            byte count = 0;
            while(cmdbuffer[bufindw][count] != '*') checksum = checksum^cmdbuffer[bufindw][count++];
    4dea:	7e 9c       	mul	r7, r14
    4dec:	f0 01       	movw	r30, r0
    4dee:	7f 9c       	mul	r7, r15
    4df0:	f0 0d       	add	r31, r0
    4df2:	11 24       	eor	r1, r1
    4df4:	ef 56       	subi	r30, 0x6F	; 111
    4df6:	f8 4f       	sbci	r31, 0xF8	; 248
    4df8:	40 81       	ld	r20, Z
    4dfa:	4a 32       	cpi	r20, 0x2A	; 42
    4dfc:	91 f0       	breq	.+36     	; 0x4e22 <_Z11get_commandv+0x24e>
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	61 2c       	mov	r6, r1
    4e02:	7e 9c       	mul	r7, r14
    4e04:	90 01       	movw	r18, r0
    4e06:	7f 9c       	mul	r7, r15
    4e08:	30 0d       	add	r19, r0
    4e0a:	11 24       	eor	r1, r1
    4e0c:	64 26       	eor	r6, r20
    4e0e:	5f 5f       	subi	r21, 0xFF	; 255
    4e10:	f9 01       	movw	r30, r18
    4e12:	e5 0f       	add	r30, r21
    4e14:	f1 1d       	adc	r31, r1
    4e16:	ef 56       	subi	r30, 0x6F	; 111
    4e18:	f8 4f       	sbci	r31, 0xF8	; 248
    4e1a:	40 81       	ld	r20, Z
    4e1c:	4a 32       	cpi	r20, 0x2A	; 42
    4e1e:	b1 f7       	brne	.-20     	; 0x4e0c <_Z11get_commandv+0x238>
    4e20:	01 c0       	rjmp	.+2      	; 0x4e24 <_Z11get_commandv+0x250>
    4e22:	61 2c       	mov	r6, r1
            strchr_pointer = strchr(cmdbuffer[bufindw], '*');
    4e24:	90 93 1c 09 	sts	0x091C, r25
    4e28:	80 93 1b 09 	sts	0x091B, r24

            if( (int)(strtod(&cmdbuffer[bufindw][strchr_pointer - cmdbuffer[bufindw] + 1], NULL)) != checksum) {
    4e2c:	7e 9c       	mul	r7, r14
    4e2e:	90 01       	movw	r18, r0
    4e30:	7f 9c       	mul	r7, r15
    4e32:	30 0d       	add	r19, r0
    4e34:	11 24       	eor	r1, r1
    4e36:	88 19       	sub	r24, r8
    4e38:	99 09       	sbc	r25, r9
    4e3a:	82 0f       	add	r24, r18
    4e3c:	93 1f       	adc	r25, r19
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	70 e0       	ldi	r23, 0x00	; 0
    4e42:	8e 56       	subi	r24, 0x6E	; 110
    4e44:	98 4f       	sbci	r25, 0xF8	; 248
    4e46:	0e 94 20 c1 	call	0x18240	; 0x18240 <strtod>
    4e4a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    4e4e:	26 2d       	mov	r18, r6
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	26 17       	cp	r18, r22
    4e54:	37 07       	cpc	r19, r23
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <_Z11get_commandv+0x286>
    4e58:	8c c0       	rjmp	.+280    	; 0x4f72 <_Z11get_commandv+0x39e>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4e5a:	e5 ee       	ldi	r30, 0xE5	; 229
    4e5c:	f3 e0       	ldi	r31, 0x03	; 3
    4e5e:	34 91       	lpm	r19, Z
  while(ch)
    4e60:	33 23       	and	r19, r19
    4e62:	81 f0       	breq	.+32     	; 0x4e84 <_Z11get_commandv+0x2b0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4e64:	a0 ec       	ldi	r26, 0xC0	; 192
    4e66:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4e68:	86 ec       	ldi	r24, 0xC6	; 198
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4e6e:	2c 91       	ld	r18, X
    4e70:	25 ff       	sbrs	r18, 5
    4e72:	fd cf       	rjmp	.-6      	; 0x4e6e <_Z11get_commandv+0x29a>
        ;

      M_UDRx = c;
    4e74:	fc 01       	movw	r30, r24
    4e76:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4e78:	4f 5f       	subi	r20, 0xFF	; 255
    4e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e7c:	fa 01       	movw	r30, r20
    4e7e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4e80:	31 11       	cpse	r19, r1
    4e82:	f5 cf       	rjmp	.-22     	; 0x4e6e <_Z11get_commandv+0x29a>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4e84:	ef e1       	ldi	r30, 0x1F	; 31
    4e86:	f4 e0       	ldi	r31, 0x04	; 4
    4e88:	34 91       	lpm	r19, Z
  while(ch)
    4e8a:	33 23       	and	r19, r19
    4e8c:	81 f0       	breq	.+32     	; 0x4eae <_Z11get_commandv+0x2da>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4e8e:	a0 ec       	ldi	r26, 0xC0	; 192
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4e92:	86 ec       	ldi	r24, 0xC6	; 198
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4e98:	2c 91       	ld	r18, X
    4e9a:	25 ff       	sbrs	r18, 5
    4e9c:	fd cf       	rjmp	.-6      	; 0x4e98 <_Z11get_commandv+0x2c4>
        ;

      M_UDRx = c;
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4ea2:	4f 5f       	subi	r20, 0xFF	; 255
    4ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea6:	fa 01       	movw	r30, r20
    4ea8:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4eaa:	31 11       	cpse	r19, r1
    4eac:	f5 cf       	rjmp	.-22     	; 0x4e98 <_Z11get_commandv+0x2c4>
              SERIAL_ERROR_START;
              SERIAL_ERRORPGM(MSG_ERR_CHECKSUM_MISMATCH);
              SERIAL_ERRORLN(gcode_LastN);
    4eae:	40 91 21 09 	lds	r20, 0x0921
    4eb2:	50 91 22 09 	lds	r21, 0x0922
    4eb6:	60 91 23 09 	lds	r22, 0x0923
    4eba:	70 91 24 09 	lds	r23, 0x0924
    4ebe:	2a e0       	ldi	r18, 0x0A	; 10
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	82 ed       	ldi	r24, 0xD2	; 210
    4ec4:	94 e0       	ldi	r25, 0x04	; 4
    4ec6:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN12MarlinSerial5printEli>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4eca:	e0 ec       	ldi	r30, 0xC0	; 192
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	80 81       	ld	r24, Z
    4ed0:	85 ff       	sbrs	r24, 5
    4ed2:	fd cf       	rjmp	.-6      	; 0x4ece <_Z11get_commandv+0x2fa>
        ;

      M_UDRx = c;
    4ed4:	8a e0       	ldi	r24, 0x0A	; 10
    4ed6:	80 93 c6 00 	sts	0x00C6, r24
              FlushSerialRequestResend();
    4eda:	49 de       	rcall	.-878    	; 0x4b6e <_Z24FlushSerialRequestResendv>
              serial_count = 0;
    4edc:	10 92 1a 09 	sts	0x091A, r1
    4ee0:	10 92 19 09 	sts	0x0919, r1
              return;
    4ee4:	ff c2       	rjmp	.+1534   	; 0x54e4 <_Z11get_commandv+0x910>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4ee6:	e5 ee       	ldi	r30, 0xE5	; 229
    4ee8:	f3 e0       	ldi	r31, 0x03	; 3
    4eea:	34 91       	lpm	r19, Z
  while(ch)
    4eec:	33 23       	and	r19, r19
    4eee:	81 f0       	breq	.+32     	; 0x4f10 <_Z11get_commandv+0x33c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4ef0:	a0 ec       	ldi	r26, 0xC0	; 192
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4ef4:	86 ec       	ldi	r24, 0xC6	; 198
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4efa:	2c 91       	ld	r18, X
    4efc:	25 ff       	sbrs	r18, 5
    4efe:	fd cf       	rjmp	.-6      	; 0x4efa <_Z11get_commandv+0x326>
        ;

      M_UDRx = c;
    4f00:	fc 01       	movw	r30, r24
    4f02:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4f04:	4f 5f       	subi	r20, 0xFF	; 255
    4f06:	5f 4f       	sbci	r21, 0xFF	; 255
    4f08:	fa 01       	movw	r30, r20
    4f0a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4f0c:	31 11       	cpse	r19, r1
    4f0e:	f5 cf       	rjmp	.-22     	; 0x4efa <_Z11get_commandv+0x326>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4f10:	ee e3       	ldi	r30, 0x3E	; 62
    4f12:	f4 e0       	ldi	r31, 0x04	; 4
    4f14:	34 91       	lpm	r19, Z
  while(ch)
    4f16:	33 23       	and	r19, r19
    4f18:	81 f0       	breq	.+32     	; 0x4f3a <_Z11get_commandv+0x366>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4f1a:	a0 ec       	ldi	r26, 0xC0	; 192
    4f1c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4f1e:	86 ec       	ldi	r24, 0xC6	; 198
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4f24:	2c 91       	ld	r18, X
    4f26:	25 ff       	sbrs	r18, 5
    4f28:	fd cf       	rjmp	.-6      	; 0x4f24 <_Z11get_commandv+0x350>
        ;

      M_UDRx = c;
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4f2e:	4f 5f       	subi	r20, 0xFF	; 255
    4f30:	5f 4f       	sbci	r21, 0xFF	; 255
    4f32:	fa 01       	movw	r30, r20
    4f34:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4f36:	31 11       	cpse	r19, r1
    4f38:	f5 cf       	rjmp	.-22     	; 0x4f24 <_Z11get_commandv+0x350>
          }
          else
          {
            SERIAL_ERROR_START;
            SERIAL_ERRORPGM(MSG_ERR_NO_CHECKSUM);
            SERIAL_ERRORLN(gcode_LastN);
    4f3a:	40 91 21 09 	lds	r20, 0x0921
    4f3e:	50 91 22 09 	lds	r21, 0x0922
    4f42:	60 91 23 09 	lds	r22, 0x0923
    4f46:	70 91 24 09 	lds	r23, 0x0924
    4f4a:	2a e0       	ldi	r18, 0x0A	; 10
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	82 ed       	ldi	r24, 0xD2	; 210
    4f50:	94 e0       	ldi	r25, 0x04	; 4
    4f52:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN12MarlinSerial5printEli>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4f56:	e0 ec       	ldi	r30, 0xC0	; 192
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	80 81       	ld	r24, Z
    4f5c:	85 ff       	sbrs	r24, 5
    4f5e:	fd cf       	rjmp	.-6      	; 0x4f5a <_Z11get_commandv+0x386>
        ;

      M_UDRx = c;
    4f60:	8a e0       	ldi	r24, 0x0A	; 10
    4f62:	80 93 c6 00 	sts	0x00C6, r24
            FlushSerialRequestResend();
    4f66:	03 de       	rcall	.-1018   	; 0x4b6e <_Z24FlushSerialRequestResendv>
            serial_count = 0;
    4f68:	10 92 1a 09 	sts	0x091A, r1
    4f6c:	10 92 19 09 	sts	0x0919, r1
            return;
    4f70:	b9 c2       	rjmp	.+1394   	; 0x54e4 <_Z11get_commandv+0x910>
          }

          gcode_LastN = gcode_N;
    4f72:	80 91 1d 09 	lds	r24, 0x091D
    4f76:	90 91 1e 09 	lds	r25, 0x091E
    4f7a:	a0 91 1f 09 	lds	r26, 0x091F
    4f7e:	b0 91 20 09 	lds	r27, 0x0920
    4f82:	80 93 21 09 	sts	0x0921, r24
    4f86:	90 93 22 09 	sts	0x0922, r25
    4f8a:	a0 93 23 09 	sts	0x0923, r26
    4f8e:	b0 93 24 09 	sts	0x0924, r27
    4f92:	4d c0       	rjmp	.+154    	; 0x502e <_Z11get_commandv+0x45a>
          //if no errors, continue parsing
        }
        else  // if we don't receive 'N' but still see '*'
        {
          if((strchr(cmdbuffer[bufindw], '*') != NULL))
    4f94:	6a e2       	ldi	r22, 0x2A	; 42
    4f96:	70 e0       	ldi	r23, 0x00	; 0
    4f98:	c4 01       	movw	r24, r8
    4f9a:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    4f9e:	89 2b       	or	r24, r25
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <_Z11get_commandv+0x3d0>
    4fa2:	45 c0       	rjmp	.+138    	; 0x502e <_Z11get_commandv+0x45a>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4fa4:	e5 ee       	ldi	r30, 0xE5	; 229
    4fa6:	f3 e0       	ldi	r31, 0x03	; 3
    4fa8:	34 91       	lpm	r19, Z
  while(ch)
    4faa:	33 23       	and	r19, r19
    4fac:	81 f0       	breq	.+32     	; 0x4fce <_Z11get_commandv+0x3fa>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4fae:	a0 ec       	ldi	r26, 0xC0	; 192
    4fb0:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4fb2:	86 ec       	ldi	r24, 0xC6	; 198
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4fb8:	2c 91       	ld	r18, X
    4fba:	25 ff       	sbrs	r18, 5
    4fbc:	fd cf       	rjmp	.-6      	; 0x4fb8 <_Z11get_commandv+0x3e4>
        ;

      M_UDRx = c;
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4fc2:	4f 5f       	subi	r20, 0xFF	; 255
    4fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fc6:	fa 01       	movw	r30, r20
    4fc8:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4fca:	31 11       	cpse	r19, r1
    4fcc:	f5 cf       	rjmp	.-22     	; 0x4fb8 <_Z11get_commandv+0x3e4>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    4fce:	e8 e6       	ldi	r30, 0x68	; 104
    4fd0:	f4 e0       	ldi	r31, 0x04	; 4
    4fd2:	34 91       	lpm	r19, Z
  while(ch)
    4fd4:	33 23       	and	r19, r19
    4fd6:	81 f0       	breq	.+32     	; 0x4ff8 <_Z11get_commandv+0x424>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4fd8:	a0 ec       	ldi	r26, 0xC0	; 192
    4fda:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    4fdc:	86 ec       	ldi	r24, 0xC6	; 198
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    4fe2:	2c 91       	ld	r18, X
    4fe4:	25 ff       	sbrs	r18, 5
    4fe6:	fd cf       	rjmp	.-6      	; 0x4fe2 <_Z11get_commandv+0x40e>
        ;

      M_UDRx = c;
    4fe8:	fc 01       	movw	r30, r24
    4fea:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    4fec:	4f 5f       	subi	r20, 0xFF	; 255
    4fee:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff0:	fa 01       	movw	r30, r20
    4ff2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    4ff4:	31 11       	cpse	r19, r1
    4ff6:	f5 cf       	rjmp	.-22     	; 0x4fe2 <_Z11get_commandv+0x40e>
          {
            SERIAL_ERROR_START;
            SERIAL_ERRORPGM(MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM);
            SERIAL_ERRORLN(gcode_LastN);
    4ff8:	40 91 21 09 	lds	r20, 0x0921
    4ffc:	50 91 22 09 	lds	r21, 0x0922
    5000:	60 91 23 09 	lds	r22, 0x0923
    5004:	70 91 24 09 	lds	r23, 0x0924
    5008:	2a e0       	ldi	r18, 0x0A	; 10
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	82 ed       	ldi	r24, 0xD2	; 210
    500e:	94 e0       	ldi	r25, 0x04	; 4
    5010:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN12MarlinSerial5printEli>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5014:	e0 ec       	ldi	r30, 0xC0	; 192
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 81       	ld	r24, Z
    501a:	85 ff       	sbrs	r24, 5
    501c:	fd cf       	rjmp	.-6      	; 0x5018 <_Z11get_commandv+0x444>
        ;

      M_UDRx = c;
    501e:	8a e0       	ldi	r24, 0x0A	; 10
    5020:	80 93 c6 00 	sts	0x00C6, r24
            serial_count = 0;
    5024:	10 92 1a 09 	sts	0x091A, r1
    5028:	10 92 19 09 	sts	0x0919, r1
            return;
    502c:	5b c2       	rjmp	.+1206   	; 0x54e4 <_Z11get_commandv+0x910>
          }
        }
        if((strchr(cmdbuffer[bufindw], 'G') != NULL)){
    502e:	80 90 8f 07 	lds	r8, 0x078F
    5032:	90 90 90 07 	lds	r9, 0x0790
    5036:	78 9c       	mul	r7, r8
    5038:	c0 01       	movw	r24, r0
    503a:	79 9c       	mul	r7, r9
    503c:	90 0d       	add	r25, r0
    503e:	11 24       	eor	r1, r1
    5040:	0f 2e       	mov	r0, r31
    5042:	f1 e9       	ldi	r31, 0x91	; 145
    5044:	ef 2e       	mov	r14, r31
    5046:	f7 e0       	ldi	r31, 0x07	; 7
    5048:	ff 2e       	mov	r15, r31
    504a:	f0 2d       	mov	r31, r0
    504c:	e8 0e       	add	r14, r24
    504e:	f9 1e       	adc	r15, r25
    5050:	67 e4       	ldi	r22, 0x47	; 71
    5052:	70 e0       	ldi	r23, 0x00	; 0
    5054:	c7 01       	movw	r24, r14
    5056:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    505a:	00 97       	sbiw	r24, 0x00	; 0
    505c:	09 f4       	brne	.+2      	; 0x5060 <_Z11get_commandv+0x48c>
    505e:	50 c0       	rjmp	.+160    	; 0x5100 <_Z11get_commandv+0x52c>
          strchr_pointer = strchr(cmdbuffer[bufindw], 'G');
    5060:	90 93 1c 09 	sts	0x091C, r25
    5064:	80 93 1b 09 	sts	0x091B, r24
          switch((int)((strtod(&cmdbuffer[bufindw][strchr_pointer - cmdbuffer[bufindw] + 1], NULL)))){
    5068:	78 9c       	mul	r7, r8
    506a:	90 01       	movw	r18, r0
    506c:	79 9c       	mul	r7, r9
    506e:	30 0d       	add	r19, r0
    5070:	11 24       	eor	r1, r1
    5072:	8e 19       	sub	r24, r14
    5074:	9f 09       	sbc	r25, r15
    5076:	82 0f       	add	r24, r18
    5078:	93 1f       	adc	r25, r19
    507a:	60 e0       	ldi	r22, 0x00	; 0
    507c:	70 e0       	ldi	r23, 0x00	; 0
    507e:	8e 56       	subi	r24, 0x6E	; 110
    5080:	98 4f       	sbci	r25, 0xF8	; 248
    5082:	0e 94 20 c1 	call	0x18240	; 0x18240 <strtod>
    5086:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    508a:	64 30       	cpi	r22, 0x04	; 4
    508c:	71 05       	cpc	r23, r1
    508e:	c0 f5       	brcc	.+112    	; 0x5100 <_Z11get_commandv+0x52c>
          case 0:
          case 1:
          case 2:
          case 3:
            if(Stopped == false) { // If printer is stopped by an error the G[0-3] codes are ignored.
    5090:	80 91 58 05 	lds	r24, 0x0558
    5094:	81 11       	cpse	r24, r1
    5096:	1b c0       	rjmp	.+54     	; 0x50ce <_Z11get_commandv+0x4fa>
          #ifdef SDSUPPORT
              if(card.saving)
    5098:	80 91 92 05 	lds	r24, 0x0592
    509c:	81 11       	cpse	r24, r1
    509e:	30 c0       	rjmp	.+96     	; 0x5100 <_Z11get_commandv+0x52c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    50a0:	9a a1       	ldd	r25, Y+34	; 0x22
  while(ch)
    50a2:	99 23       	and	r25, r25
    50a4:	61 f0       	breq	.+24     	; 0x50be <_Z11get_commandv+0x4ea>
    50a6:	e2 e9       	ldi	r30, 0x92	; 146
    50a8:	f4 e0       	ldi	r31, 0x04	; 4
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    50aa:	d8 01       	movw	r26, r16
    50ac:	8c 91       	ld	r24, X
    50ae:	85 ff       	sbrs	r24, 5
    50b0:	fc cf       	rjmp	.-8      	; 0x50aa <_Z11get_commandv+0x4d6>
        ;

      M_UDRx = c;
    50b2:	d6 01       	movw	r26, r12
    50b4:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    50b6:	31 96       	adiw	r30, 0x01	; 1
    50b8:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    50ba:	91 11       	cpse	r25, r1
    50bc:	f6 cf       	rjmp	.-20     	; 0x50aa <_Z11get_commandv+0x4d6>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    50be:	f8 01       	movw	r30, r16
    50c0:	80 81       	ld	r24, Z
    50c2:	85 ff       	sbrs	r24, 5
    50c4:	fc cf       	rjmp	.-8      	; 0x50be <_Z11get_commandv+0x4ea>
        ;

      M_UDRx = c;
    50c6:	ea e0       	ldi	r30, 0x0A	; 10
    50c8:	d6 01       	movw	r26, r12
    50ca:	ec 93       	st	X, r30
    50cc:	19 c0       	rjmp	.+50     	; 0x5100 <_Z11get_commandv+0x52c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    50ce:	99 a1       	ldd	r25, Y+33	; 0x21
  while(ch)
    50d0:	99 23       	and	r25, r25
    50d2:	59 f0       	breq	.+22     	; 0x50ea <_Z11get_commandv+0x516>
    50d4:	f1 01       	movw	r30, r2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    50d6:	d8 01       	movw	r26, r16
    50d8:	8c 91       	ld	r24, X
    50da:	85 ff       	sbrs	r24, 5
    50dc:	fc cf       	rjmp	.-8      	; 0x50d6 <_Z11get_commandv+0x502>
        ;

      M_UDRx = c;
    50de:	d6 01       	movw	r26, r12
    50e0:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    50e2:	31 96       	adiw	r30, 0x01	; 1
    50e4:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    50e6:	91 11       	cpse	r25, r1
    50e8:	f6 cf       	rjmp	.-20     	; 0x50d6 <_Z11get_commandv+0x502>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    50ea:	f8 01       	movw	r30, r16
    50ec:	80 81       	ld	r24, Z
    50ee:	85 ff       	sbrs	r24, 5
    50f0:	fc cf       	rjmp	.-8      	; 0x50ea <_Z11get_commandv+0x516>
        ;

      M_UDRx = c;
    50f2:	ea e0       	ldi	r30, 0x0A	; 10
    50f4:	d6 01       	movw	r26, r12
    50f6:	ec 93       	st	X, r30
          #endif //SDSUPPORT
              SERIAL_PROTOCOLLNPGM(MSG_OK);
            }
            else {
              SERIAL_ERRORLNPGM(MSG_ERR_STOPPED);
              LCD_MESSAGEPGM(MSG_STOPPED);
    50f8:	8b e0       	ldi	r24, 0x0B	; 11
    50fa:	95 e0       	ldi	r25, 0x05	; 5
    50fc:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
          default:
            break;
          }

        }
        bufindw = (bufindw + 1)%BUFSIZE;
    5100:	80 91 8f 07 	lds	r24, 0x078F
    5104:	90 91 90 07 	lds	r25, 0x0790
    5108:	01 96       	adiw	r24, 0x01	; 1
    510a:	83 70       	andi	r24, 0x03	; 3
    510c:	90 78       	andi	r25, 0x80	; 128
    510e:	99 23       	and	r25, r25
    5110:	24 f4       	brge	.+8      	; 0x511a <_Z11get_commandv+0x546>
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	8c 6f       	ori	r24, 0xFC	; 252
    5116:	9f 6f       	ori	r25, 0xFF	; 255
    5118:	01 96       	adiw	r24, 0x01	; 1
    511a:	90 93 90 07 	sts	0x0790, r25
    511e:	80 93 8f 07 	sts	0x078F, r24
        buflen += 1;
    5122:	80 91 8d 07 	lds	r24, 0x078D
    5126:	90 91 8e 07 	lds	r25, 0x078E
    512a:	01 96       	adiw	r24, 0x01	; 1
    512c:	90 93 8e 07 	sts	0x078E, r25
    5130:	80 93 8d 07 	sts	0x078D, r24
      }
      serial_count = 0; //clear buffer
    5134:	10 92 1a 09 	sts	0x091A, r1
    5138:	10 92 19 09 	sts	0x0919, r1
    513c:	1e c0       	rjmp	.+60     	; 0x517a <_Z11get_commandv+0x5a6>
    }
    else
    {
      if(serial_char == ';') comment_mode = true;
    513e:	8b 33       	cpi	r24, 0x3B	; 59
    5140:	21 f4       	brne	.+8      	; 0x514a <_Z11get_commandv+0x576>
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	80 93 18 09 	sts	0x0918, r24
    5148:	18 c0       	rjmp	.+48     	; 0x517a <_Z11get_commandv+0x5a6>
      if(!comment_mode) cmdbuffer[bufindw][serial_count++] = serial_char;
    514a:	90 91 18 09 	lds	r25, 0x0918
    514e:	91 11       	cpse	r25, r1
    5150:	14 c0       	rjmp	.+40     	; 0x517a <_Z11get_commandv+0x5a6>
    5152:	40 91 8f 07 	lds	r20, 0x078F
    5156:	50 91 90 07 	lds	r21, 0x0790
    515a:	74 9e       	mul	r7, r20
    515c:	f0 01       	movw	r30, r0
    515e:	75 9e       	mul	r7, r21
    5160:	f0 0d       	add	r31, r0
    5162:	11 24       	eor	r1, r1
    5164:	e2 0f       	add	r30, r18
    5166:	f3 1f       	adc	r31, r19
    5168:	ef 56       	subi	r30, 0x6F	; 111
    516a:	f8 4f       	sbci	r31, 0xF8	; 248
    516c:	80 83       	st	Z, r24
    516e:	2f 5f       	subi	r18, 0xFF	; 255
    5170:	3f 4f       	sbci	r19, 0xFF	; 255
    5172:	30 93 1a 09 	sts	0x091A, r19
    5176:	20 93 19 09 	sts	0x0919, r18
    int read(void);
    void flush(void);
    
    FORCE_INLINE int available(void)
    {
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    517a:	d5 01       	movw	r26, r10
    517c:	8d 91       	ld	r24, X+
    517e:	9c 91       	ld	r25, X
    5180:	f2 01       	movw	r30, r4
    5182:	20 81       	ld	r18, Z
    5184:	31 81       	ldd	r19, Z+1	; 0x01
    5186:	82 1b       	sub	r24, r18
    5188:	93 0b       	sbc	r25, r19
    518a:	8f 77       	andi	r24, 0x7F	; 127
    518c:	99 27       	eor	r25, r25
  lcd_update();
}

void get_command()
{
  while( MYSERIAL.available() > 0  && buflen < BUFSIZE) {
    518e:	18 16       	cp	r1, r24
    5190:	19 06       	cpc	r1, r25
    5192:	0c f0       	brlt	.+2      	; 0x5196 <_Z11get_commandv+0x5c2>
    5194:	8c c1       	rjmp	.+792    	; 0x54ae <_Z11get_commandv+0x8da>
    5196:	80 91 8d 07 	lds	r24, 0x078D
    519a:	90 91 8e 07 	lds	r25, 0x078E
    519e:	04 97       	sbiw	r24, 0x04	; 4
    51a0:	0c f4       	brge	.+2      	; 0x51a4 <_Z11get_commandv+0x5d0>
    51a2:	7b c1       	rjmp	.+758    	; 0x549a <_Z11get_commandv+0x8c6>
    51a4:	84 c1       	rjmp	.+776    	; 0x54ae <_Z11get_commandv+0x8da>
      if(serial_char == ';') comment_mode = true;
      if(!comment_mode) cmdbuffer[bufindw][serial_count++] = serial_char;
    }
  }
  #ifdef SDSUPPORT
  if(!card.sdprinting || serial_count!=0){
    51a6:	80 91 19 09 	lds	r24, 0x0919
    51aa:	90 91 1a 09 	lds	r25, 0x091A
    51ae:	89 2b       	or	r24, r25
    51b0:	09 f4       	brne	.+2      	; 0x51b4 <_Z11get_commandv+0x5e0>
    51b2:	13 c1       	rjmp	.+550    	; 0x53da <_Z11get_commandv+0x806>
    51b4:	97 c1       	rjmp	.+814    	; 0x54e4 <_Z11get_commandv+0x910>
    return;
  }
  while( !card.eof()  && buflen < BUFSIZE) {
    int16_t n=card.get();
    serial_char = (char)n;
    if(serial_char == '\n' ||
    51b6:	4d 30       	cpi	r20, 0x0D	; 13
    51b8:	81 f0       	breq	.+32     	; 0x51da <_Z11get_commandv+0x606>
    51ba:	4a 33       	cpi	r20, 0x3A	; 58
    51bc:	21 f4       	brne	.+8      	; 0x51c6 <_Z11get_commandv+0x5f2>
    51be:	20 91 18 09 	lds	r18, 0x0918
    51c2:	22 23       	and	r18, r18
    51c4:	51 f0       	breq	.+20     	; 0x51da <_Z11get_commandv+0x606>
    51c6:	20 91 19 09 	lds	r18, 0x0919
    51ca:	30 91 1a 09 	lds	r19, 0x091A
    51ce:	2f 35       	cpi	r18, 0x5F	; 95
    51d0:	31 05       	cpc	r19, r1
    51d2:	1c f4       	brge	.+6      	; 0x51da <_Z11get_commandv+0x606>
    51d4:	01 96       	adiw	r24, 0x01	; 1
    51d6:	09 f0       	breq	.+2      	; 0x51da <_Z11get_commandv+0x606>
    51d8:	e0 c0       	rjmp	.+448    	; 0x539a <_Z11get_commandv+0x7c6>
       serial_char == '\r' ||
       (serial_char == ':' && comment_mode == false) ||
       serial_count >= (MAX_CMD_SIZE - 1)||n==-1)
    {
      if(card.eof()){
    51da:	d5 01       	movw	r26, r10
    51dc:	4d 91       	ld	r20, X+
    51de:	5d 91       	ld	r21, X+
    51e0:	6d 91       	ld	r22, X+
    51e2:	7c 91       	ld	r23, X
    51e4:	f1 01       	movw	r30, r2
    51e6:	80 81       	ld	r24, Z
    51e8:	91 81       	ldd	r25, Z+1	; 0x01
    51ea:	a2 81       	ldd	r26, Z+2	; 0x02
    51ec:	b3 81       	ldd	r27, Z+3	; 0x03
    51ee:	48 17       	cp	r20, r24
    51f0:	59 07       	cpc	r21, r25
    51f2:	6a 07       	cpc	r22, r26
    51f4:	7b 07       	cpc	r23, r27
    51f6:	08 f4       	brcc	.+2      	; 0x51fa <_Z11get_commandv+0x626>
    51f8:	93 c0       	rjmp	.+294    	; 0x5320 <_Z11get_commandv+0x74c>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    51fa:	99 a1       	ldd	r25, Y+33	; 0x21
  while(ch)
    51fc:	99 23       	and	r25, r25
    51fe:	61 f0       	breq	.+24     	; 0x5218 <_Z11get_commandv+0x644>
    5200:	e5 e1       	ldi	r30, 0x15	; 21
    5202:	f5 e0       	ldi	r31, 0x05	; 5
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5204:	d8 01       	movw	r26, r16
    5206:	8c 91       	ld	r24, X
    5208:	85 ff       	sbrs	r24, 5
    520a:	fc cf       	rjmp	.-8      	; 0x5204 <_Z11get_commandv+0x630>
        ;

      M_UDRx = c;
    520c:	d4 01       	movw	r26, r8
    520e:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5210:	31 96       	adiw	r30, 0x01	; 1
    5212:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5214:	91 11       	cpse	r25, r1
    5216:	f6 cf       	rjmp	.-20     	; 0x5204 <_Z11get_commandv+0x630>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5218:	f8 01       	movw	r30, r16
    521a:	80 81       	ld	r24, Z
    521c:	85 ff       	sbrs	r24, 5
    521e:	fc cf       	rjmp	.-8      	; 0x5218 <_Z11get_commandv+0x644>
        ;

      M_UDRx = c;
    5220:	8a e0       	ldi	r24, 0x0A	; 10
    5222:	d4 01       	movw	r26, r8
    5224:	8c 93       	st	X, r24
        SERIAL_PROTOCOLLNPGM(MSG_FILE_PRINTED);
        stoptime=millis();
    5226:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    522a:	60 93 59 05 	sts	0x0559, r22
    522e:	70 93 5a 05 	sts	0x055A, r23
    5232:	80 93 5b 05 	sts	0x055B, r24
    5236:	90 93 5c 05 	sts	0x055C, r25
        char time[30];
        unsigned long t=(stoptime-starttime)/1000;
    523a:	c0 90 5d 05 	lds	r12, 0x055D
    523e:	d0 90 5e 05 	lds	r13, 0x055E
    5242:	e0 90 5f 05 	lds	r14, 0x055F
    5246:	f0 90 60 05 	lds	r15, 0x0560
    524a:	6c 19       	sub	r22, r12
    524c:	7d 09       	sbc	r23, r13
    524e:	8e 09       	sbc	r24, r14
    5250:	9f 09       	sbc	r25, r15
    5252:	28 ee       	ldi	r18, 0xE8	; 232
    5254:	33 e0       	ldi	r19, 0x03	; 3
    5256:	40 e0       	ldi	r20, 0x00	; 0
    5258:	50 e0       	ldi	r21, 0x00	; 0
    525a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
    525e:	69 01       	movw	r12, r18
    5260:	7a 01       	movw	r14, r20
        int hours, minutes;
        minutes=(t/60)%60;
    5262:	0f 2e       	mov	r0, r31
    5264:	fc e3       	ldi	r31, 0x3C	; 60
    5266:	4f 2e       	mov	r4, r31
    5268:	51 2c       	mov	r5, r1
    526a:	61 2c       	mov	r6, r1
    526c:	71 2c       	mov	r7, r1
    526e:	f0 2d       	mov	r31, r0
    5270:	ca 01       	movw	r24, r20
    5272:	b9 01       	movw	r22, r18
    5274:	a3 01       	movw	r20, r6
    5276:	92 01       	movw	r18, r4
    5278:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
    527c:	ca 01       	movw	r24, r20
    527e:	b9 01       	movw	r22, r18
    5280:	a3 01       	movw	r20, r6
    5282:	92 01       	movw	r18, r4
    5284:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
        hours=t/60/60;
        sprintf_P(time, PSTR("%i hours %i minutes"),hours, minutes);
    5288:	7f 93       	push	r23
    528a:	6f 93       	push	r22
        stoptime=millis();
        char time[30];
        unsigned long t=(stoptime-starttime)/1000;
        int hours, minutes;
        minutes=(t/60)%60;
        hours=t/60/60;
    528c:	c7 01       	movw	r24, r14
    528e:	b6 01       	movw	r22, r12
    5290:	20 e1       	ldi	r18, 0x10	; 16
    5292:	3e e0       	ldi	r19, 0x0E	; 14
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	50 e0       	ldi	r21, 0x00	; 0
    5298:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
        sprintf_P(time, PSTR("%i hours %i minutes"),hours, minutes);
    529c:	3f 93       	push	r19
    529e:	2f 93       	push	r18
    52a0:	88 e2       	ldi	r24, 0x28	; 40
    52a2:	95 e0       	ldi	r25, 0x05	; 5
    52a4:	9f 93       	push	r25
    52a6:	8f 93       	push	r24
    52a8:	b8 a1       	ldd	r27, Y+32	; 0x20
    52aa:	bf 93       	push	r27
    52ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
    52ae:	ef 93       	push	r30
    52b0:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <sprintf_P>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    52b4:	9a a1       	ldd	r25, Y+34	; 0x22
  while(ch)
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	99 23       	and	r25, r25
    52c2:	61 f0       	breq	.+24     	; 0x52dc <_Z11get_commandv+0x708>
    52c4:	e5 ec       	ldi	r30, 0xC5	; 197
    52c6:	f2 e0       	ldi	r31, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    52c8:	d8 01       	movw	r26, r16
    52ca:	8c 91       	ld	r24, X
    52cc:	85 ff       	sbrs	r24, 5
    52ce:	fc cf       	rjmp	.-8      	; 0x52c8 <_Z11get_commandv+0x6f4>
        ;

      M_UDRx = c;
    52d0:	d4 01       	movw	r26, r8
    52d2:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    52d4:	31 96       	adiw	r30, 0x01	; 1
    52d6:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    52d8:	91 11       	cpse	r25, r1
    52da:	f6 cf       	rjmp	.-20     	; 0x52c8 <_Z11get_commandv+0x6f4>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    52dc:	99 81       	ldd	r25, Y+1	; 0x01
    52de:	99 23       	and	r25, r25
    52e0:	59 f0       	breq	.+22     	; 0x52f8 <_Z11get_commandv+0x724>
  manage_inactivity();
  checkHitEndstops();
  lcd_update();
}

void get_command()
    52e2:	fe 01       	movw	r30, r28
    52e4:	32 96       	adiw	r30, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    52e6:	d8 01       	movw	r26, r16
    52e8:	8c 91       	ld	r24, X
    52ea:	85 ff       	sbrs	r24, 5
    52ec:	fc cf       	rjmp	.-8      	; 0x52e6 <_Z11get_commandv+0x712>
        ;

      M_UDRx = c;
    52ee:	d4 01       	movw	r26, r8
    52f0:	9c 93       	st	X, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    52f2:	91 91       	ld	r25, Z+
    52f4:	91 11       	cpse	r25, r1
    52f6:	f7 cf       	rjmp	.-18     	; 0x52e6 <_Z11get_commandv+0x712>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    52f8:	f8 01       	movw	r30, r16
    52fa:	80 81       	ld	r24, Z
    52fc:	85 ff       	sbrs	r24, 5
    52fe:	fc cf       	rjmp	.-8      	; 0x52f8 <_Z11get_commandv+0x724>
        ;

      M_UDRx = c;
    5300:	8a e0       	ldi	r24, 0x0A	; 10
    5302:	d4 01       	movw	r26, r8
    5304:	8c 93       	st	X, r24
        minutes=(t/60)%60;
        hours=t/60/60;
        sprintf_P(time, PSTR("%i hours %i minutes"),hours, minutes);
        SERIAL_ECHO_START;
        SERIAL_ECHOLN(time);
        lcd_setstatus(time);
    5306:	ce 01       	movw	r24, r28
    5308:	01 96       	adiw	r24, 0x01	; 1
    530a:	0e 94 28 94 	call	0x12850	; 0x12850 <_Z13lcd_setstatusPKc>
        card.printingHasFinished();
    530e:	82 e9       	ldi	r24, 0x92	; 146
    5310:	95 e0       	ldi	r25, 0x05	; 5
    5312:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN10CardReader19printingHasFinishedEv>
        card.checkautostart(true);
    5316:	61 e0       	ldi	r22, 0x01	; 1
    5318:	82 e9       	ldi	r24, 0x92	; 146
    531a:	95 e0       	ldi	r25, 0x05	; 5
    531c:	0e 94 0b 18 	call	0x3016	; 0x3016 <_ZN10CardReader14checkautostartEb>

      }
      if(!serial_count)
    5320:	20 91 19 09 	lds	r18, 0x0919
    5324:	30 91 1a 09 	lds	r19, 0x091A
    5328:	21 15       	cp	r18, r1
    532a:	31 05       	cpc	r19, r1
    532c:	19 f4       	brne	.+6      	; 0x5334 <_Z11get_commandv+0x760>
      {
        comment_mode = false; //for new command
    532e:	10 92 18 09 	sts	0x0918, r1
        return; //if empty line
    5332:	d8 c0       	rjmp	.+432    	; 0x54e4 <_Z11get_commandv+0x910>
      }
      cmdbuffer[bufindw][serial_count] = 0; //terminate string
    5334:	80 91 8f 07 	lds	r24, 0x078F
    5338:	90 91 90 07 	lds	r25, 0x0790
    533c:	40 e6       	ldi	r20, 0x60	; 96
    533e:	48 9f       	mul	r20, r24
    5340:	f0 01       	movw	r30, r0
    5342:	49 9f       	mul	r20, r25
    5344:	f0 0d       	add	r31, r0
    5346:	11 24       	eor	r1, r1
    5348:	2e 0f       	add	r18, r30
    534a:	3f 1f       	adc	r19, r31
    534c:	f9 01       	movw	r30, r18
    534e:	ef 56       	subi	r30, 0x6F	; 111
    5350:	f8 4f       	sbci	r31, 0xF8	; 248
    5352:	10 82       	st	Z, r1
//      if(!comment_mode){
        fromsd[bufindw] = true;
    5354:	fc 01       	movw	r30, r24
    5356:	ef 5e       	subi	r30, 0xEF	; 239
    5358:	f6 4f       	sbci	r31, 0xF6	; 246
    535a:	21 e0       	ldi	r18, 0x01	; 1
    535c:	20 83       	st	Z, r18
        buflen += 1;
    535e:	20 91 8d 07 	lds	r18, 0x078D
    5362:	30 91 8e 07 	lds	r19, 0x078E
    5366:	2f 5f       	subi	r18, 0xFF	; 255
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	30 93 8e 07 	sts	0x078E, r19
    536e:	20 93 8d 07 	sts	0x078D, r18
        bufindw = (bufindw + 1)%BUFSIZE;
    5372:	01 96       	adiw	r24, 0x01	; 1
    5374:	83 70       	andi	r24, 0x03	; 3
    5376:	90 78       	andi	r25, 0x80	; 128
    5378:	99 23       	and	r25, r25
    537a:	24 f4       	brge	.+8      	; 0x5384 <_Z11get_commandv+0x7b0>
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	8c 6f       	ori	r24, 0xFC	; 252
    5380:	9f 6f       	ori	r25, 0xFF	; 255
    5382:	01 96       	adiw	r24, 0x01	; 1
    5384:	90 93 90 07 	sts	0x0790, r25
    5388:	80 93 8f 07 	sts	0x078F, r24
//      }
      comment_mode = false; //for new command
    538c:	10 92 18 09 	sts	0x0918, r1
      serial_count = 0; //clear buffer
    5390:	10 92 1a 09 	sts	0x091A, r1
    5394:	10 92 19 09 	sts	0x0919, r1
    5398:	40 c0       	rjmp	.+128    	; 0x541a <_Z11get_commandv+0x846>
    }
    else
    {
      if(serial_char == ';') comment_mode = true;
    539a:	4b 33       	cpi	r20, 0x3B	; 59
    539c:	21 f4       	brne	.+8      	; 0x53a6 <_Z11get_commandv+0x7d2>
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	80 93 18 09 	sts	0x0918, r24
    53a4:	3a c0       	rjmp	.+116    	; 0x541a <_Z11get_commandv+0x846>
      if(!comment_mode) cmdbuffer[bufindw][serial_count++] = serial_char;
    53a6:	80 91 18 09 	lds	r24, 0x0918
    53aa:	81 11       	cpse	r24, r1
    53ac:	36 c0       	rjmp	.+108    	; 0x541a <_Z11get_commandv+0x846>
    53ae:	80 91 8f 07 	lds	r24, 0x078F
    53b2:	90 91 90 07 	lds	r25, 0x0790
    53b6:	50 e6       	ldi	r21, 0x60	; 96
    53b8:	58 9f       	mul	r21, r24
    53ba:	f0 01       	movw	r30, r0
    53bc:	59 9f       	mul	r21, r25
    53be:	f0 0d       	add	r31, r0
    53c0:	11 24       	eor	r1, r1
    53c2:	e2 0f       	add	r30, r18
    53c4:	f3 1f       	adc	r31, r19
    53c6:	ef 56       	subi	r30, 0x6F	; 111
    53c8:	f8 4f       	sbci	r31, 0xF8	; 248
    53ca:	40 83       	st	Z, r20
    53cc:	2f 5f       	subi	r18, 0xFF	; 255
    53ce:	3f 4f       	sbci	r19, 0xFF	; 255
    53d0:	30 93 1a 09 	sts	0x091A, r19
    53d4:	20 93 19 09 	sts	0x0919, r18
    53d8:	20 c0       	rjmp	.+64     	; 0x541a <_Z11get_commandv+0x846>
  void updir();
  void setroot();


  FORCE_INLINE bool isFileOpen() { return file.isOpen(); }
  FORCE_INLINE bool eof() { return sdpos>=filesize ;};
    53da:	0f 2e       	mov	r0, r31
    53dc:	f3 e8       	ldi	r31, 0x83	; 131
    53de:	af 2e       	mov	r10, r31
    53e0:	f7 e0       	ldi	r31, 0x07	; 7
    53e2:	bf 2e       	mov	r11, r31
    53e4:	f0 2d       	mov	r31, r0
    53e6:	0f 2e       	mov	r0, r31
    53e8:	fb e7       	ldi	r31, 0x7B	; 123
    53ea:	2f 2e       	mov	r2, r31
    53ec:	f7 e0       	ldi	r31, 0x07	; 7
    53ee:	3f 2e       	mov	r3, r31
    53f0:	f0 2d       	mov	r31, r0


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    53f2:	e5 e1       	ldi	r30, 0x15	; 21
    53f4:	f5 e0       	ldi	r31, 0x05	; 5
    53f6:	f4 91       	lpm	r31, Z
    53f8:	f9 a3       	std	Y+33, r31	; 0x21
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    53fa:	00 ec       	ldi	r16, 0xC0	; 192
    53fc:	10 e0       	ldi	r17, 0x00	; 0
        ;

      M_UDRx = c;
    53fe:	0f 2e       	mov	r0, r31
    5400:	f6 ec       	ldi	r31, 0xC6	; 198
    5402:	8f 2e       	mov	r8, r31
    5404:	91 2c       	mov	r9, r1
    5406:	f0 2d       	mov	r31, r0
        char time[30];
        unsigned long t=(stoptime-starttime)/1000;
        int hours, minutes;
        minutes=(t/60)%60;
        hours=t/60/60;
        sprintf_P(time, PSTR("%i hours %i minutes"),hours, minutes);
    5408:	9e 01       	movw	r18, r28
    540a:	2f 5f       	subi	r18, 0xFF	; 255
    540c:	3f 4f       	sbci	r19, 0xFF	; 255
    540e:	38 a3       	std	Y+32, r19	; 0x20
    5410:	2f 8f       	std	Y+31, r18	; 0x1f
    5412:	e5 ec       	ldi	r30, 0xC5	; 197
    5414:	f2 e0       	ldi	r31, 0x02	; 2
    5416:	f4 91       	lpm	r31, Z
    5418:	fa a3       	std	Y+34, r31	; 0x22
  }
  #ifdef SDSUPPORT
  if(!card.sdprinting || serial_count!=0){
    return;
  }
  while( !card.eof()  && buflen < BUFSIZE) {
    541a:	d5 01       	movw	r26, r10
    541c:	4d 91       	ld	r20, X+
    541e:	5d 91       	ld	r21, X+
    5420:	6d 91       	ld	r22, X+
    5422:	7c 91       	ld	r23, X
    5424:	f1 01       	movw	r30, r2
    5426:	80 81       	ld	r24, Z
    5428:	91 81       	ldd	r25, Z+1	; 0x01
    542a:	a2 81       	ldd	r26, Z+2	; 0x02
    542c:	b3 81       	ldd	r27, Z+3	; 0x03
    542e:	48 17       	cp	r20, r24
    5430:	59 07       	cpc	r21, r25
    5432:	6a 07       	cpc	r22, r26
    5434:	7b 07       	cpc	r23, r27
    5436:	08 f0       	brcs	.+2      	; 0x543a <_Z11get_commandv+0x866>
    5438:	55 c0       	rjmp	.+170    	; 0x54e4 <_Z11get_commandv+0x910>
    543a:	80 91 8d 07 	lds	r24, 0x078D
    543e:	90 91 8e 07 	lds	r25, 0x078E
    5442:	04 97       	sbiw	r24, 0x04	; 4
    5444:	cc f1       	brlt	.+114    	; 0x54b8 <_Z11get_commandv+0x8e4>
    5446:	4e c0       	rjmp	.+156    	; 0x54e4 <_Z11get_commandv+0x910>

void get_command()
{
  while( MYSERIAL.available() > 0  && buflen < BUFSIZE) {
    serial_char = MYSERIAL.read();
    if(serial_char == '\n' ||
    5448:	80 91 19 09 	lds	r24, 0x0919
    544c:	90 91 1a 09 	lds	r25, 0x091A
    5450:	8f 35       	cpi	r24, 0x5F	; 95
    5452:	91 05       	cpc	r25, r1
    5454:	0c f0       	brlt	.+2      	; 0x5458 <_Z11get_commandv+0x884>
    5456:	0e cc       	rjmp	.-2020   	; 0x4c74 <_Z11get_commandv+0xa0>
    5458:	90 ce       	rjmp	.-736    	; 0x517a <_Z11get_commandv+0x5a6>
    545a:	e5 ee       	ldi	r30, 0xE5	; 229
    545c:	f3 e0       	ldi	r31, 0x03	; 3
    545e:	34 91       	lpm	r19, Z
  while(ch)
    5460:	31 11       	cpse	r19, r1
    5462:	81 cc       	rjmp	.-1790   	; 0x4d66 <_Z11get_commandv+0x192>
    5464:	92 cc       	rjmp	.-1756   	; 0x4d8a <_Z11get_commandv+0x1b6>
            FlushSerialRequestResend();
            serial_count = 0;
            return;
          }

          if(strchr(cmdbuffer[bufindw], '*') != NULL)
    5466:	e0 90 8f 07 	lds	r14, 0x078F
    546a:	f0 90 90 07 	lds	r15, 0x0790
    546e:	7e 9c       	mul	r7, r14
    5470:	c0 01       	movw	r24, r0
    5472:	7f 9c       	mul	r7, r15
    5474:	90 0d       	add	r25, r0
    5476:	11 24       	eor	r1, r1
    5478:	0f 2e       	mov	r0, r31
    547a:	f1 e9       	ldi	r31, 0x91	; 145
    547c:	8f 2e       	mov	r8, r31
    547e:	f7 e0       	ldi	r31, 0x07	; 7
    5480:	9f 2e       	mov	r9, r31
    5482:	f0 2d       	mov	r31, r0
    5484:	88 0e       	add	r8, r24
    5486:	99 1e       	adc	r9, r25
    5488:	6a e2       	ldi	r22, 0x2A	; 42
    548a:	70 e0       	ldi	r23, 0x00	; 0
    548c:	c4 01       	movw	r24, r8
    548e:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    5492:	00 97       	sbiw	r24, 0x00	; 0
    5494:	09 f0       	breq	.+2      	; 0x5498 <_Z11get_commandv+0x8c4>
    5496:	a9 cc       	rjmp	.-1710   	; 0x4dea <_Z11get_commandv+0x216>
    5498:	26 cd       	rjmp	.-1460   	; 0x4ee6 <_Z11get_commandv+0x312>
}

void get_command()
{
  while( MYSERIAL.available() > 0  && buflen < BUFSIZE) {
    serial_char = MYSERIAL.read();
    549a:	82 ed       	ldi	r24, 0xD2	; 210
    549c:	94 e0       	ldi	r25, 0x04	; 4
    549e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN12MarlinSerial4readEv>
    54a2:	80 93 17 09 	sts	0x0917, r24
    if(serial_char == '\n' ||
    54a6:	8a 30       	cpi	r24, 0x0A	; 10
    54a8:	09 f0       	breq	.+2      	; 0x54ac <_Z11get_commandv+0x8d8>
    54aa:	d3 cb       	rjmp	.-2138   	; 0x4c52 <_Z11get_commandv+0x7e>
    54ac:	e3 cb       	rjmp	.-2106   	; 0x4c74 <_Z11get_commandv+0xa0>
      if(serial_char == ';') comment_mode = true;
      if(!comment_mode) cmdbuffer[bufindw][serial_count++] = serial_char;
    }
  }
  #ifdef SDSUPPORT
  if(!card.sdprinting || serial_count!=0){
    54ae:	80 91 94 05 	lds	r24, 0x0594
    54b2:	81 11       	cpse	r24, r1
    54b4:	78 ce       	rjmp	.-784    	; 0x51a6 <_Z11get_commandv+0x5d2>
    54b6:	16 c0       	rjmp	.+44     	; 0x54e4 <_Z11get_commandv+0x910>
  FORCE_INLINE int16_t get() {  sdpos = file.curPosition();return (int16_t)file.read();};
    54b8:	e8 e6       	ldi	r30, 0x68	; 104
    54ba:	f7 e0       	ldi	r31, 0x07	; 7
    54bc:	80 81       	ld	r24, Z
    54be:	91 81       	ldd	r25, Z+1	; 0x01
    54c0:	a2 81       	ldd	r26, Z+2	; 0x02
    54c2:	b3 81       	ldd	r27, Z+3	; 0x03
    54c4:	f5 01       	movw	r30, r10
    54c6:	80 83       	st	Z, r24
    54c8:	91 83       	std	Z+1, r25	; 0x01
    54ca:	a2 83       	std	Z+2, r26	; 0x02
    54cc:	b3 83       	std	Z+3, r27	; 0x03
    54ce:	80 e6       	ldi	r24, 0x60	; 96
    54d0:	97 e0       	ldi	r25, 0x07	; 7
    54d2:	0e 94 2a 5d 	call	0xba54	; 0xba54 <_ZN10SdBaseFile4readEv>
    return;
  }
  while( !card.eof()  && buflen < BUFSIZE) {
    int16_t n=card.get();
    serial_char = (char)n;
    54d6:	48 2f       	mov	r20, r24
    54d8:	80 93 17 09 	sts	0x0917, r24
    if(serial_char == '\n' ||
    54dc:	8a 30       	cpi	r24, 0x0A	; 10
    54de:	09 f0       	breq	.+2      	; 0x54e2 <_Z11get_commandv+0x90e>
    54e0:	6a ce       	rjmp	.-812    	; 0x51b6 <_Z11get_commandv+0x5e2>
    54e2:	7b ce       	rjmp	.-778    	; 0x51da <_Z11get_commandv+0x606>
    }
  }

  #endif //SDSUPPORT

}
    54e4:	a2 96       	adiw	r28, 0x22	; 34
    54e6:	0f b6       	in	r0, 0x3f	; 63
    54e8:	f8 94       	cli
    54ea:	de bf       	out	0x3e, r29	; 62
    54ec:	0f be       	out	0x3f, r0	; 63
    54ee:	cd bf       	out	0x3d, r28	; 61
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	1f 91       	pop	r17
    54f6:	0f 91       	pop	r16
    54f8:	ff 90       	pop	r15
    54fa:	ef 90       	pop	r14
    54fc:	df 90       	pop	r13
    54fe:	cf 90       	pop	r12
    5500:	bf 90       	pop	r11
    5502:	af 90       	pop	r10
    5504:	9f 90       	pop	r9
    5506:	8f 90       	pop	r8
    5508:	7f 90       	pop	r7
    550a:	6f 90       	pop	r6
    550c:	5f 90       	pop	r5
    550e:	4f 90       	pop	r4
    5510:	3f 90       	pop	r3
    5512:	2f 90       	pop	r2
    5514:	08 95       	ret

00005516 <_Z15get_coordinatesv>:
  #endif //SDSUPPORT
  SERIAL_PROTOCOLLNPGM(MSG_OK);
}

void get_coordinates()
{
    5516:	4f 92       	push	r4
    5518:	5f 92       	push	r5
    551a:	6f 92       	push	r6
    551c:	7f 92       	push	r7
    551e:	9f 92       	push	r9
    5520:	af 92       	push	r10
    5522:	bf 92       	push	r11
    5524:	cf 92       	push	r12
    5526:	df 92       	push	r13
    5528:	ef 92       	push	r14
    552a:	ff 92       	push	r15
    552c:	0f 93       	push	r16
    552e:	1f 93       	push	r17
    5530:	cf 93       	push	r28
    5532:	df 93       	push	r29
    5534:	0f 2e       	mov	r0, r31
    5536:	fa ee       	ldi	r31, 0xEA	; 234
    5538:	ef 2e       	mov	r14, r31
    553a:	f3 e0       	ldi	r31, 0x03	; 3
    553c:	ff 2e       	mov	r15, r31
    553e:	f0 2d       	mov	r31, r0
    5540:	0c e7       	ldi	r16, 0x7C	; 124
    5542:	15 e0       	ldi	r17, 0x05	; 5
    5544:	cd e2       	ldi	r28, 0x2D	; 45
    5546:	d9 e0       	ldi	r29, 0x09	; 9
    5548:	0f 2e       	mov	r0, r31
    554a:	fe e8       	ldi	r31, 0x8E	; 142
    554c:	cf 2e       	mov	r12, r31
    554e:	f5 e0       	ldi	r31, 0x05	; 5
    5550:	df 2e       	mov	r13, r31
    5552:	f0 2d       	mov	r31, r0
    return;
  #endif //SDSUPPORT
  SERIAL_PROTOCOLLNPGM(MSG_OK);
}

void get_coordinates()
    5554:	0f 2e       	mov	r0, r31
    5556:	fe ee       	ldi	r31, 0xEE	; 238
    5558:	af 2e       	mov	r10, r31
    555a:	f3 e0       	ldi	r31, 0x03	; 3
    555c:	bf 2e       	mov	r11, r31
    555e:	f0 2d       	mov	r31, r0
{
  bool seen[4]={false,false,false,false};
  for(int8_t i=0; i < NUM_AXIS; i++) {
    if(code_seen(axis_codes[i]))
    {
      destination[i] = (float)code_value() + (axis_relative_modes[i] || relative_mode)*current_position[i];
    5560:	99 24       	eor	r9, r9
    5562:	93 94       	inc	r9

void get_coordinates()
{
  bool seen[4]={false,false,false,false};
  for(int8_t i=0; i < NUM_AXIS; i++) {
    if(code_seen(axis_codes[i]))
    5564:	f7 01       	movw	r30, r14
    5566:	81 91       	ld	r24, Z+
    5568:	7f 01       	movw	r14, r30
    556a:	b5 da       	rcall	.-2710   	; 0x4ad6 <_Z9code_seenc>
    556c:	88 23       	and	r24, r24
    556e:	11 f1       	breq	.+68     	; 0x55b4 <_Z15get_coordinatesv+0x9e>
    {
      destination[i] = (float)code_value() + (axis_relative_modes[i] || relative_mode)*current_position[i];
    5570:	9e da       	rcall	.-2756   	; 0x4aae <_Z10code_valuev>
    5572:	2b 01       	movw	r4, r22
    5574:	3c 01       	movw	r6, r24
    5576:	f6 01       	movw	r30, r12
    5578:	80 81       	ld	r24, Z
    557a:	81 11       	cpse	r24, r1
    557c:	03 c0       	rjmp	.+6      	; 0x5584 <_Z15get_coordinatesv+0x6e>
    557e:	60 91 3d 09 	lds	r22, 0x093D
    5582:	01 c0       	rjmp	.+2      	; 0x5586 <_Z15get_coordinatesv+0x70>
    5584:	69 2d       	mov	r22, r9
    5586:	70 e0       	ldi	r23, 0x00	; 0
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    5590:	f8 01       	movw	r30, r16
    5592:	20 81       	ld	r18, Z
    5594:	31 81       	ldd	r19, Z+1	; 0x01
    5596:	42 81       	ldd	r20, Z+2	; 0x02
    5598:	53 81       	ldd	r21, Z+3	; 0x03
    559a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    559e:	9b 01       	movw	r18, r22
    55a0:	ac 01       	movw	r20, r24
    55a2:	c3 01       	movw	r24, r6
    55a4:	b2 01       	movw	r22, r4
    55a6:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    55aa:	68 83       	st	Y, r22
    55ac:	79 83       	std	Y+1, r23	; 0x01
    55ae:	8a 83       	std	Y+2, r24	; 0x02
    55b0:	9b 83       	std	Y+3, r25	; 0x03
    55b2:	09 c0       	rjmp	.+18     	; 0x55c6 <_Z15get_coordinatesv+0xb0>
      seen[i]=true;
    }
    else destination[i] = current_position[i]; //Are these else lines really needed?
    55b4:	f8 01       	movw	r30, r16
    55b6:	80 81       	ld	r24, Z
    55b8:	91 81       	ldd	r25, Z+1	; 0x01
    55ba:	a2 81       	ldd	r26, Z+2	; 0x02
    55bc:	b3 81       	ldd	r27, Z+3	; 0x03
    55be:	88 83       	st	Y, r24
    55c0:	99 83       	std	Y+1, r25	; 0x01
    55c2:	aa 83       	std	Y+2, r26	; 0x02
    55c4:	bb 83       	std	Y+3, r27	; 0x03
    55c6:	0c 5f       	subi	r16, 0xFC	; 252
    55c8:	1f 4f       	sbci	r17, 0xFF	; 255
    55ca:	24 96       	adiw	r28, 0x04	; 4
    55cc:	ff ef       	ldi	r31, 0xFF	; 255
    55ce:	cf 1a       	sub	r12, r31
    55d0:	df 0a       	sbc	r13, r31
}

void get_coordinates()
{
  bool seen[4]={false,false,false,false};
  for(int8_t i=0; i < NUM_AXIS; i++) {
    55d2:	ea 14       	cp	r14, r10
    55d4:	fb 04       	cpc	r15, r11
    55d6:	31 f6       	brne	.-116    	; 0x5564 <_Z15get_coordinatesv+0x4e>
      destination[i] = (float)code_value() + (axis_relative_modes[i] || relative_mode)*current_position[i];
      seen[i]=true;
    }
    else destination[i] = current_position[i]; //Are these else lines really needed?
  }
  if(code_seen('F')) {
    55d8:	86 e4       	ldi	r24, 0x46	; 70
    55da:	7d da       	rcall	.-2822   	; 0x4ad6 <_Z9code_seenc>
    55dc:	88 23       	and	r24, r24
    55de:	d1 f0       	breq	.+52     	; 0x5614 <_Z15get_coordinatesv+0xfe>
    next_feedrate = code_value();
    55e0:	66 da       	rcall	.-2868   	; 0x4aae <_Z10code_valuev>
    55e2:	6b 01       	movw	r12, r22
    55e4:	7c 01       	movw	r14, r24
    55e6:	60 93 47 09 	sts	0x0947, r22
    55ea:	70 93 48 09 	sts	0x0948, r23
    55ee:	80 93 49 09 	sts	0x0949, r24
    55f2:	90 93 4a 09 	sts	0x094A, r25
    if(next_feedrate > 0.0) feedrate = next_feedrate;
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	a9 01       	movw	r20, r18
    55fc:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    5600:	18 16       	cp	r1, r24
    5602:	44 f4       	brge	.+16     	; 0x5614 <_Z15get_coordinatesv+0xfe>
    5604:	c0 92 31 02 	sts	0x0231, r12
    5608:	d0 92 32 02 	sts	0x0232, r13
    560c:	e0 92 33 02 	sts	0x0233, r14
    5610:	f0 92 34 02 	sts	0x0234, r15
      }
    }

  }
  #endif //FWRETRACT
}
    5614:	df 91       	pop	r29
    5616:	cf 91       	pop	r28
    5618:	1f 91       	pop	r17
    561a:	0f 91       	pop	r16
    561c:	ff 90       	pop	r15
    561e:	ef 90       	pop	r14
    5620:	df 90       	pop	r13
    5622:	cf 90       	pop	r12
    5624:	bf 90       	pop	r11
    5626:	af 90       	pop	r10
    5628:	9f 90       	pop	r9
    562a:	7f 90       	pop	r7
    562c:	6f 90       	pop	r6
    562e:	5f 90       	pop	r5
    5630:	4f 90       	pop	r4
    5632:	08 95       	ret

00005634 <_Z19get_arc_coordinatesv>:
{
#ifdef SF_ARC_FIX
   bool relative_mode_backup = relative_mode;
   relative_mode = true;
#endif
   get_coordinates();
    5634:	70 df       	rcall	.-288    	; 0x5516 <_Z15get_coordinatesv>
#ifdef SF_ARC_FIX
   relative_mode=relative_mode_backup;
#endif

   if(code_seen('I')) {
    5636:	89 e4       	ldi	r24, 0x49	; 73
    5638:	4e da       	rcall	.-2916   	; 0x4ad6 <_Z9code_seenc>
    563a:	88 23       	and	r24, r24
    563c:	51 f0       	breq	.+20     	; 0x5652 <_Z19get_arc_coordinatesv+0x1e>
     offset[0] = code_value();
    563e:	37 da       	rcall	.-2962   	; 0x4aae <_Z10code_valuev>
    5640:	60 93 4b 09 	sts	0x094B, r22
    5644:	70 93 4c 09 	sts	0x094C, r23
    5648:	80 93 4d 09 	sts	0x094D, r24
    564c:	90 93 4e 09 	sts	0x094E, r25
    5650:	08 c0       	rjmp	.+16     	; 0x5662 <_Z19get_arc_coordinatesv+0x2e>
   }
   else {
     offset[0] = 0.0;
    5652:	10 92 4b 09 	sts	0x094B, r1
    5656:	10 92 4c 09 	sts	0x094C, r1
    565a:	10 92 4d 09 	sts	0x094D, r1
    565e:	10 92 4e 09 	sts	0x094E, r1
   }
   if(code_seen('J')) {
    5662:	8a e4       	ldi	r24, 0x4A	; 74
    5664:	38 da       	rcall	.-2960   	; 0x4ad6 <_Z9code_seenc>
    5666:	88 23       	and	r24, r24
    5668:	51 f0       	breq	.+20     	; 0x567e <_Z19get_arc_coordinatesv+0x4a>
     offset[1] = code_value();
    566a:	21 da       	rcall	.-3006   	; 0x4aae <_Z10code_valuev>
    566c:	60 93 4f 09 	sts	0x094F, r22
    5670:	70 93 50 09 	sts	0x0950, r23
    5674:	80 93 51 09 	sts	0x0951, r24
    5678:	90 93 52 09 	sts	0x0952, r25
    567c:	08 95       	ret
   }
   else {
     offset[1] = 0.0;
    567e:	10 92 4f 09 	sts	0x094F, r1
    5682:	10 92 50 09 	sts	0x0950, r1
    5686:	10 92 51 09 	sts	0x0951, r1
    568a:	10 92 52 09 	sts	0x0952, r1
    568e:	08 95       	ret

00005690 <_Z26clamp_to_software_endstopsPf>:
   }
}

void clamp_to_software_endstops(float target[3])
{
    5690:	cf 92       	push	r12
    5692:	df 92       	push	r13
    5694:	ef 92       	push	r14
    5696:	ff 92       	push	r15
    5698:	cf 93       	push	r28
    569a:	df 93       	push	r29
    569c:	ec 01       	movw	r28, r24
  if (min_software_endstops) {
    if (target[X_AXIS] < min_pos[X_AXIS]) target[X_AXIS] = min_pos[X_AXIS];
    569e:	c0 90 64 05 	lds	r12, 0x0564
    56a2:	d0 90 65 05 	lds	r13, 0x0565
    56a6:	e0 90 66 05 	lds	r14, 0x0566
    56aa:	f0 90 67 05 	lds	r15, 0x0567
    56ae:	a7 01       	movw	r20, r14
    56b0:	96 01       	movw	r18, r12
    56b2:	68 81       	ld	r22, Y
    56b4:	79 81       	ldd	r23, Y+1	; 0x01
    56b6:	8a 81       	ldd	r24, Y+2	; 0x02
    56b8:	9b 81       	ldd	r25, Y+3	; 0x03
    56ba:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    56be:	88 23       	and	r24, r24
    56c0:	24 f4       	brge	.+8      	; 0x56ca <_Z26clamp_to_software_endstopsPf+0x3a>
    56c2:	c8 82       	st	Y, r12
    56c4:	d9 82       	std	Y+1, r13	; 0x01
    56c6:	ea 82       	std	Y+2, r14	; 0x02
    56c8:	fb 82       	std	Y+3, r15	; 0x03
    if (target[Y_AXIS] < min_pos[Y_AXIS]) target[Y_AXIS] = min_pos[Y_AXIS];
    56ca:	c0 90 68 05 	lds	r12, 0x0568
    56ce:	d0 90 69 05 	lds	r13, 0x0569
    56d2:	e0 90 6a 05 	lds	r14, 0x056A
    56d6:	f0 90 6b 05 	lds	r15, 0x056B
    56da:	a7 01       	movw	r20, r14
    56dc:	96 01       	movw	r18, r12
    56de:	6c 81       	ldd	r22, Y+4	; 0x04
    56e0:	7d 81       	ldd	r23, Y+5	; 0x05
    56e2:	8e 81       	ldd	r24, Y+6	; 0x06
    56e4:	9f 81       	ldd	r25, Y+7	; 0x07
    56e6:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    56ea:	88 23       	and	r24, r24
    56ec:	24 f4       	brge	.+8      	; 0x56f6 <_Z26clamp_to_software_endstopsPf+0x66>
    56ee:	cc 82       	std	Y+4, r12	; 0x04
    56f0:	dd 82       	std	Y+5, r13	; 0x05
    56f2:	ee 82       	std	Y+6, r14	; 0x06
    56f4:	ff 82       	std	Y+7, r15	; 0x07
    if (target[Z_AXIS] < min_pos[Z_AXIS]) target[Z_AXIS] = min_pos[Z_AXIS];
    56f6:	c0 90 6c 05 	lds	r12, 0x056C
    56fa:	d0 90 6d 05 	lds	r13, 0x056D
    56fe:	e0 90 6e 05 	lds	r14, 0x056E
    5702:	f0 90 6f 05 	lds	r15, 0x056F
    5706:	a7 01       	movw	r20, r14
    5708:	96 01       	movw	r18, r12
    570a:	68 85       	ldd	r22, Y+8	; 0x08
    570c:	79 85       	ldd	r23, Y+9	; 0x09
    570e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5710:	9b 85       	ldd	r25, Y+11	; 0x0b
    5712:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    5716:	88 23       	and	r24, r24
    5718:	24 f4       	brge	.+8      	; 0x5722 <_Z26clamp_to_software_endstopsPf+0x92>
    571a:	c8 86       	std	Y+8, r12	; 0x08
    571c:	d9 86       	std	Y+9, r13	; 0x09
    571e:	ea 86       	std	Y+10, r14	; 0x0a
    5720:	fb 86       	std	Y+11, r15	; 0x0b
  }

  if (max_software_endstops) {
    if (target[X_AXIS] > max_pos[X_AXIS]) target[X_AXIS] = max_pos[X_AXIS];
    5722:	c0 90 11 02 	lds	r12, 0x0211
    5726:	d0 90 12 02 	lds	r13, 0x0212
    572a:	e0 90 13 02 	lds	r14, 0x0213
    572e:	f0 90 14 02 	lds	r15, 0x0214
    5732:	a7 01       	movw	r20, r14
    5734:	96 01       	movw	r18, r12
    5736:	68 81       	ld	r22, Y
    5738:	79 81       	ldd	r23, Y+1	; 0x01
    573a:	8a 81       	ldd	r24, Y+2	; 0x02
    573c:	9b 81       	ldd	r25, Y+3	; 0x03
    573e:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    5742:	18 16       	cp	r1, r24
    5744:	24 f4       	brge	.+8      	; 0x574e <_Z26clamp_to_software_endstopsPf+0xbe>
    5746:	c8 82       	st	Y, r12
    5748:	d9 82       	std	Y+1, r13	; 0x01
    574a:	ea 82       	std	Y+2, r14	; 0x02
    574c:	fb 82       	std	Y+3, r15	; 0x03
    if (target[Y_AXIS] > max_pos[Y_AXIS]) target[Y_AXIS] = max_pos[Y_AXIS];
    574e:	c0 90 15 02 	lds	r12, 0x0215
    5752:	d0 90 16 02 	lds	r13, 0x0216
    5756:	e0 90 17 02 	lds	r14, 0x0217
    575a:	f0 90 18 02 	lds	r15, 0x0218
    575e:	a7 01       	movw	r20, r14
    5760:	96 01       	movw	r18, r12
    5762:	6c 81       	ldd	r22, Y+4	; 0x04
    5764:	7d 81       	ldd	r23, Y+5	; 0x05
    5766:	8e 81       	ldd	r24, Y+6	; 0x06
    5768:	9f 81       	ldd	r25, Y+7	; 0x07
    576a:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    576e:	18 16       	cp	r1, r24
    5770:	24 f4       	brge	.+8      	; 0x577a <_Z26clamp_to_software_endstopsPf+0xea>
    5772:	cc 82       	std	Y+4, r12	; 0x04
    5774:	dd 82       	std	Y+5, r13	; 0x05
    5776:	ee 82       	std	Y+6, r14	; 0x06
    5778:	ff 82       	std	Y+7, r15	; 0x07
    if (target[Z_AXIS] > max_pos[Z_AXIS]) target[Z_AXIS] = max_pos[Z_AXIS];
    577a:	c0 90 19 02 	lds	r12, 0x0219
    577e:	d0 90 1a 02 	lds	r13, 0x021A
    5782:	e0 90 1b 02 	lds	r14, 0x021B
    5786:	f0 90 1c 02 	lds	r15, 0x021C
    578a:	a7 01       	movw	r20, r14
    578c:	96 01       	movw	r18, r12
    578e:	68 85       	ldd	r22, Y+8	; 0x08
    5790:	79 85       	ldd	r23, Y+9	; 0x09
    5792:	8a 85       	ldd	r24, Y+10	; 0x0a
    5794:	9b 85       	ldd	r25, Y+11	; 0x0b
    5796:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    579a:	18 16       	cp	r1, r24
    579c:	24 f4       	brge	.+8      	; 0x57a6 <_Z26clamp_to_software_endstopsPf+0x116>
    579e:	c8 86       	std	Y+8, r12	; 0x08
    57a0:	d9 86       	std	Y+9, r13	; 0x09
    57a2:	ea 86       	std	Y+10, r14	; 0x0a
    57a4:	fb 86       	std	Y+11, r15	; 0x0b
  }
}
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	ff 90       	pop	r15
    57ac:	ef 90       	pop	r14
    57ae:	df 90       	pop	r13
    57b0:	cf 90       	pop	r12
    57b2:	08 95       	ret

000057b4 <_Z12prepare_movev>:
  */
}
#endif

void prepare_move()
{
    57b4:	cf 92       	push	r12
    57b6:	df 92       	push	r13
    57b8:	ef 92       	push	r14
    57ba:	ff 92       	push	r15
    57bc:	0f 93       	push	r16
    57be:	1f 93       	push	r17
  clamp_to_software_endstops(destination);
    57c0:	8d e2       	ldi	r24, 0x2D	; 45
    57c2:	99 e0       	ldi	r25, 0x09	; 9
    57c4:	65 df       	rcall	.-310    	; 0x5690 <_Z26clamp_to_software_endstopsPf>

  previous_millis_cmd = millis();
    57c6:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    57ca:	60 93 25 09 	sts	0x0925, r22
    57ce:	70 93 26 09 	sts	0x0926, r23
    57d2:	80 93 27 09 	sts	0x0927, r24
    57d6:	90 93 28 09 	sts	0x0928, r25
    }
  }
#endif //DUAL_X_CARRIAGE

  // Do not use feedmultiply for E or Z only moves
  if( (current_position[X_AXIS] == destination [X_AXIS]) && (current_position[Y_AXIS] == destination [Y_AXIS])) {
    57da:	20 91 2d 09 	lds	r18, 0x092D
    57de:	30 91 2e 09 	lds	r19, 0x092E
    57e2:	40 91 2f 09 	lds	r20, 0x092F
    57e6:	50 91 30 09 	lds	r21, 0x0930
    57ea:	60 91 7c 05 	lds	r22, 0x057C
    57ee:	70 91 7d 05 	lds	r23, 0x057D
    57f2:	80 91 7e 05 	lds	r24, 0x057E
    57f6:	90 91 7f 05 	lds	r25, 0x057F
    57fa:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    57fe:	81 11       	cpse	r24, r1
    5800:	35 c0       	rjmp	.+106    	; 0x586c <_Z12prepare_movev+0xb8>
    5802:	20 91 31 09 	lds	r18, 0x0931
    5806:	30 91 32 09 	lds	r19, 0x0932
    580a:	40 91 33 09 	lds	r20, 0x0933
    580e:	50 91 34 09 	lds	r21, 0x0934
    5812:	60 91 80 05 	lds	r22, 0x0580
    5816:	70 91 81 05 	lds	r23, 0x0581
    581a:	80 91 82 05 	lds	r24, 0x0582
    581e:	90 91 83 05 	lds	r25, 0x0583
    5822:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    5826:	81 11       	cpse	r24, r1
    5828:	21 c0       	rjmp	.+66     	; 0x586c <_Z12prepare_movev+0xb8>
      plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);
    582a:	20 e0       	ldi	r18, 0x00	; 0
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	40 e7       	ldi	r20, 0x70	; 112
    5830:	52 e4       	ldi	r21, 0x42	; 66
    5832:	60 91 31 02 	lds	r22, 0x0231
    5836:	70 91 32 02 	lds	r23, 0x0232
    583a:	80 91 33 02 	lds	r24, 0x0233
    583e:	90 91 34 02 	lds	r25, 0x0234
    5842:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    5846:	0f 2e       	mov	r0, r31
    5848:	f3 e6       	ldi	r31, 0x63	; 99
    584a:	cf 2e       	mov	r12, r31
    584c:	f5 e0       	ldi	r31, 0x05	; 5
    584e:	df 2e       	mov	r13, r31
    5850:	f0 2d       	mov	r31, r0
    5852:	7b 01       	movw	r14, r22
    5854:	8c 01       	movw	r16, r24
    5856:	29 e3       	ldi	r18, 0x39	; 57
    5858:	39 e0       	ldi	r19, 0x09	; 9
    585a:	45 e3       	ldi	r20, 0x35	; 53
    585c:	59 e0       	ldi	r21, 0x09	; 9
    585e:	61 e3       	ldi	r22, 0x31	; 49
    5860:	79 e0       	ldi	r23, 0x09	; 9
    5862:	8d e2       	ldi	r24, 0x2D	; 45
    5864:	99 e0       	ldi	r25, 0x09	; 9
    5866:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
    586a:	32 c0       	rjmp	.+100    	; 0x58d0 <_Z12prepare_movev+0x11c>
  }
  else {
    plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate*feedmultiply/60/100.0, active_extruder);
    586c:	60 91 1f 02 	lds	r22, 0x021F
    5870:	70 91 20 02 	lds	r23, 0x0220
    5874:	88 27       	eor	r24, r24
    5876:	77 fd       	sbrc	r23, 7
    5878:	80 95       	com	r24
    587a:	98 2f       	mov	r25, r24
    587c:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    5880:	20 91 31 02 	lds	r18, 0x0231
    5884:	30 91 32 02 	lds	r19, 0x0232
    5888:	40 91 33 02 	lds	r20, 0x0233
    588c:	50 91 34 02 	lds	r21, 0x0234
    5890:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    5894:	20 e0       	ldi	r18, 0x00	; 0
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	40 e7       	ldi	r20, 0x70	; 112
    589a:	52 e4       	ldi	r21, 0x42	; 66
    589c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	48 ec       	ldi	r20, 0xC8	; 200
    58a6:	52 e4       	ldi	r21, 0x42	; 66
    58a8:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    58ac:	0f 2e       	mov	r0, r31
    58ae:	f3 e6       	ldi	r31, 0x63	; 99
    58b0:	cf 2e       	mov	r12, r31
    58b2:	f5 e0       	ldi	r31, 0x05	; 5
    58b4:	df 2e       	mov	r13, r31
    58b6:	f0 2d       	mov	r31, r0
    58b8:	7b 01       	movw	r14, r22
    58ba:	8c 01       	movw	r16, r24
    58bc:	29 e3       	ldi	r18, 0x39	; 57
    58be:	39 e0       	ldi	r19, 0x09	; 9
    58c0:	45 e3       	ldi	r20, 0x35	; 53
    58c2:	59 e0       	ldi	r21, 0x09	; 9
    58c4:	61 e3       	ldi	r22, 0x31	; 49
    58c6:	79 e0       	ldi	r23, 0x09	; 9
    58c8:	8d e2       	ldi	r24, 0x2D	; 45
    58ca:	99 e0       	ldi	r25, 0x09	; 9
    58cc:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
  }
#endif //else DELTA
  for(int8_t i=0; i < NUM_AXIS; i++) {
    current_position[i] = destination[i];
    58d0:	80 91 2d 09 	lds	r24, 0x092D
    58d4:	90 91 2e 09 	lds	r25, 0x092E
    58d8:	a0 91 2f 09 	lds	r26, 0x092F
    58dc:	b0 91 30 09 	lds	r27, 0x0930
    58e0:	80 93 7c 05 	sts	0x057C, r24
    58e4:	90 93 7d 05 	sts	0x057D, r25
    58e8:	a0 93 7e 05 	sts	0x057E, r26
    58ec:	b0 93 7f 05 	sts	0x057F, r27
    58f0:	80 91 31 09 	lds	r24, 0x0931
    58f4:	90 91 32 09 	lds	r25, 0x0932
    58f8:	a0 91 33 09 	lds	r26, 0x0933
    58fc:	b0 91 34 09 	lds	r27, 0x0934
    5900:	80 93 80 05 	sts	0x0580, r24
    5904:	90 93 81 05 	sts	0x0581, r25
    5908:	a0 93 82 05 	sts	0x0582, r26
    590c:	b0 93 83 05 	sts	0x0583, r27
    5910:	80 91 35 09 	lds	r24, 0x0935
    5914:	90 91 36 09 	lds	r25, 0x0936
    5918:	a0 91 37 09 	lds	r26, 0x0937
    591c:	b0 91 38 09 	lds	r27, 0x0938
    5920:	80 93 84 05 	sts	0x0584, r24
    5924:	90 93 85 05 	sts	0x0585, r25
    5928:	a0 93 86 05 	sts	0x0586, r26
    592c:	b0 93 87 05 	sts	0x0587, r27
    5930:	80 91 39 09 	lds	r24, 0x0939
    5934:	90 91 3a 09 	lds	r25, 0x093A
    5938:	a0 91 3b 09 	lds	r26, 0x093B
    593c:	b0 91 3c 09 	lds	r27, 0x093C
    5940:	80 93 88 05 	sts	0x0588, r24
    5944:	90 93 89 05 	sts	0x0589, r25
    5948:	a0 93 8a 05 	sts	0x058A, r26
    594c:	b0 93 8b 05 	sts	0x058B, r27
  }
}
    5950:	1f 91       	pop	r17
    5952:	0f 91       	pop	r16
    5954:	ff 90       	pop	r15
    5956:	ef 90       	pop	r14
    5958:	df 90       	pop	r13
    595a:	cf 90       	pop	r12
    595c:	08 95       	ret

0000595e <_Z16prepare_arc_movec>:

void prepare_arc_move(char isclockwise) {
    595e:	af 92       	push	r10
    5960:	bf 92       	push	r11
    5962:	cf 92       	push	r12
    5964:	df 92       	push	r13
    5966:	ef 92       	push	r14
    5968:	ff 92       	push	r15
    596a:	0f 93       	push	r16
    596c:	1f 93       	push	r17
    596e:	cf 93       	push	r28
    5970:	df 93       	push	r29
    5972:	d8 2f       	mov	r29, r24
  float r = hypot(offset[X_AXIS], offset[Y_AXIS]); // Compute arc radius for mc_arc
    5974:	20 91 4f 09 	lds	r18, 0x094F
    5978:	30 91 50 09 	lds	r19, 0x0950
    597c:	40 91 51 09 	lds	r20, 0x0951
    5980:	50 91 52 09 	lds	r21, 0x0952
    5984:	60 91 4b 09 	lds	r22, 0x094B
    5988:	70 91 4c 09 	lds	r23, 0x094C
    598c:	80 91 4d 09 	lds	r24, 0x094D
    5990:	90 91 4e 09 	lds	r25, 0x094E
    5994:	0e 94 30 b8 	call	0x17060	; 0x17060 <hypot>
    5998:	c6 2f       	mov	r28, r22
    599a:	17 2f       	mov	r17, r23
    599c:	08 2f       	mov	r16, r24
    599e:	f9 2e       	mov	r15, r25

  // Trace the arc
  mc_arc(current_position, destination, offset, X_AXIS, Y_AXIS, Z_AXIS, feedrate*feedmultiply/60/100.0, r, isclockwise, active_extruder);
    59a0:	60 91 1f 02 	lds	r22, 0x021F
    59a4:	70 91 20 02 	lds	r23, 0x0220
    59a8:	88 27       	eor	r24, r24
    59aa:	77 fd       	sbrc	r23, 7
    59ac:	80 95       	com	r24
    59ae:	98 2f       	mov	r25, r24
    59b0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    59b4:	20 91 31 02 	lds	r18, 0x0231
    59b8:	30 91 32 02 	lds	r19, 0x0232
    59bc:	40 91 33 02 	lds	r20, 0x0233
    59c0:	50 91 34 02 	lds	r21, 0x0234
    59c4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	40 e7       	ldi	r20, 0x70	; 112
    59ce:	52 e4       	ldi	r21, 0x42	; 66
    59d0:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    59d4:	20 e0       	ldi	r18, 0x00	; 0
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	48 ec       	ldi	r20, 0xC8	; 200
    59da:	52 e4       	ldi	r21, 0x42	; 66
    59dc:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    59e0:	20 91 63 05 	lds	r18, 0x0563
    59e4:	2f 93       	push	r18
    59e6:	df 93       	push	r29
    59e8:	ff 92       	push	r15
    59ea:	0f 93       	push	r16
    59ec:	1f 93       	push	r17
    59ee:	cf 93       	push	r28
    59f0:	5b 01       	movw	r10, r22
    59f2:	6c 01       	movw	r12, r24
    59f4:	68 94       	set
    59f6:	ee 24       	eor	r14, r14
    59f8:	e1 f8       	bld	r14, 1
    59fa:	01 e0       	ldi	r16, 0x01	; 1
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	4b e4       	ldi	r20, 0x4B	; 75
    5a00:	59 e0       	ldi	r21, 0x09	; 9
    5a02:	6d e2       	ldi	r22, 0x2D	; 45
    5a04:	79 e0       	ldi	r23, 0x09	; 9
    5a06:	8c e7       	ldi	r24, 0x7C	; 124
    5a08:	95 e0       	ldi	r25, 0x05	; 5
    5a0a:	0e 94 7b 42 	call	0x84f6	; 0x84f6 <_Z6mc_arcPfS_S_hhhffhh>

  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  for(int8_t i=0; i < NUM_AXIS; i++) {
    current_position[i] = destination[i];
    5a0e:	80 91 2d 09 	lds	r24, 0x092D
    5a12:	90 91 2e 09 	lds	r25, 0x092E
    5a16:	a0 91 2f 09 	lds	r26, 0x092F
    5a1a:	b0 91 30 09 	lds	r27, 0x0930
    5a1e:	80 93 7c 05 	sts	0x057C, r24
    5a22:	90 93 7d 05 	sts	0x057D, r25
    5a26:	a0 93 7e 05 	sts	0x057E, r26
    5a2a:	b0 93 7f 05 	sts	0x057F, r27
    5a2e:	80 91 31 09 	lds	r24, 0x0931
    5a32:	90 91 32 09 	lds	r25, 0x0932
    5a36:	a0 91 33 09 	lds	r26, 0x0933
    5a3a:	b0 91 34 09 	lds	r27, 0x0934
    5a3e:	80 93 80 05 	sts	0x0580, r24
    5a42:	90 93 81 05 	sts	0x0581, r25
    5a46:	a0 93 82 05 	sts	0x0582, r26
    5a4a:	b0 93 83 05 	sts	0x0583, r27
    5a4e:	80 91 35 09 	lds	r24, 0x0935
    5a52:	90 91 36 09 	lds	r25, 0x0936
    5a56:	a0 91 37 09 	lds	r26, 0x0937
    5a5a:	b0 91 38 09 	lds	r27, 0x0938
    5a5e:	80 93 84 05 	sts	0x0584, r24
    5a62:	90 93 85 05 	sts	0x0585, r25
    5a66:	a0 93 86 05 	sts	0x0586, r26
    5a6a:	b0 93 87 05 	sts	0x0587, r27
    5a6e:	80 91 39 09 	lds	r24, 0x0939
    5a72:	90 91 3a 09 	lds	r25, 0x093A
    5a76:	a0 91 3b 09 	lds	r26, 0x093B
    5a7a:	b0 91 3c 09 	lds	r27, 0x093C
    5a7e:	80 93 88 05 	sts	0x0588, r24
    5a82:	90 93 89 05 	sts	0x0589, r25
    5a86:	a0 93 8a 05 	sts	0x058A, r26
    5a8a:	b0 93 8b 05 	sts	0x058B, r27
  }
  previous_millis_cmd = millis();
    5a8e:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5a92:	60 93 25 09 	sts	0x0925, r22
    5a96:	70 93 26 09 	sts	0x0926, r23
    5a9a:	80 93 27 09 	sts	0x0927, r24
    5a9e:	90 93 28 09 	sts	0x0928, r25
    5aa2:	0f 90       	pop	r0
    5aa4:	0f 90       	pop	r0
    5aa6:	0f 90       	pop	r0
    5aa8:	0f 90       	pop	r0
    5aaa:	0f 90       	pop	r0
    5aac:	0f 90       	pop	r0
}
    5aae:	df 91       	pop	r29
    5ab0:	cf 91       	pop	r28
    5ab2:	1f 91       	pop	r17
    5ab4:	0f 91       	pop	r16
    5ab6:	ff 90       	pop	r15
    5ab8:	ef 90       	pop	r14
    5aba:	df 90       	pop	r13
    5abc:	cf 90       	pop	r12
    5abe:	bf 90       	pop	r11
    5ac0:	af 90       	pop	r10
    5ac2:	08 95       	ret

00005ac4 <_Z4killv>:
  check_axes_activity();
}

void kill()
{
  cli(); // Stop interrupts
    5ac4:	f8 94       	cli
  disable_heater();
    5ac6:	0e 94 b5 75 	call	0xeb6a	; 0xeb6a <_Z14disable_heaterv>

  disable_x();
    5aca:	15 9a       	sbi	0x02, 5	; 2
  disable_y();
    5acc:	17 9a       	sbi	0x02, 7	; 2
  disable_z();
    5ace:	42 9a       	sbi	0x08, 2	; 8
  disable_e0();
    5ad0:	a0 9a       	sbi	0x14, 0	; 20
  disable_e1();
  disable_e2();

#if defined(PS_ON_PIN) && PS_ON_PIN > -1
  pinMode(PS_ON_PIN,INPUT);
    5ad2:	60 e0       	ldi	r22, 0x00	; 0
    5ad4:	8c e0       	ldi	r24, 0x0C	; 12
    5ad6:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    5ada:	e5 ee       	ldi	r30, 0xE5	; 229
    5adc:	f3 e0       	ldi	r31, 0x03	; 3
    5ade:	34 91       	lpm	r19, Z
  while(ch)
    5ae0:	33 23       	and	r19, r19
    5ae2:	61 f0       	breq	.+24     	; 0x5afc <_Z4killv+0x38>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5ae4:	a0 ec       	ldi	r26, 0xC0	; 192
    5ae6:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    5ae8:	c6 ec       	ldi	r28, 0xC6	; 198
    5aea:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5aec:	2c 91       	ld	r18, X
    5aee:	25 ff       	sbrs	r18, 5
    5af0:	fd cf       	rjmp	.-6      	; 0x5aec <_Z4killv+0x28>
        ;

      M_UDRx = c;
    5af2:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5af4:	31 96       	adiw	r30, 0x01	; 1
    5af6:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5af8:	31 11       	cpse	r19, r1
    5afa:	f8 cf       	rjmp	.-16     	; 0x5aec <_Z4killv+0x28>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    5afc:	ef e6       	ldi	r30, 0x6F	; 111
    5afe:	f7 e0       	ldi	r31, 0x07	; 7
    5b00:	34 91       	lpm	r19, Z
  while(ch)
    5b02:	33 23       	and	r19, r19
    5b04:	61 f0       	breq	.+24     	; 0x5b1e <_Z4killv+0x5a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5b06:	a0 ec       	ldi	r26, 0xC0	; 192
    5b08:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    5b0a:	c6 ec       	ldi	r28, 0xC6	; 198
    5b0c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5b0e:	2c 91       	ld	r18, X
    5b10:	25 ff       	sbrs	r18, 5
    5b12:	fd cf       	rjmp	.-6      	; 0x5b0e <_Z4killv+0x4a>
        ;

      M_UDRx = c;
    5b14:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5b16:	31 96       	adiw	r30, 0x01	; 1
    5b18:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5b1a:	31 11       	cpse	r19, r1
    5b1c:	f8 cf       	rjmp	.-16     	; 0x5b0e <_Z4killv+0x4a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5b1e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b20:	f0 e0       	ldi	r31, 0x00	; 0
    5b22:	80 81       	ld	r24, Z
    5b24:	85 ff       	sbrs	r24, 5
    5b26:	fd cf       	rjmp	.-6      	; 0x5b22 <_Z4killv+0x5e>
        ;

      M_UDRx = c;
    5b28:	8a e0       	ldi	r24, 0x0A	; 10
    5b2a:	80 93 c6 00 	sts	0x00C6, r24
#endif
  SERIAL_ERROR_START;
  SERIAL_ERRORLNPGM(MSG_ERR_KILLED);
  LCD_ALERTMESSAGEPGM(MSG_KILLED);
    5b2e:	8e e8       	ldi	r24, 0x8E	; 142
    5b30:	97 e0       	ldi	r25, 0x07	; 7
    5b32:	0e 94 46 94 	call	0x1288c	; 0x1288c <_Z21lcd_setalertstatuspgmPKc>
  suicide();
    5b36:	0e 94 7f 23 	call	0x46fe	; 0x46fe <_Z7suicidev>
    5b3a:	ff cf       	rjmp	.-2      	; 0x5b3a <_Z4killv+0x76>

00005b3c <_Z17manage_inactivityv>:
  }
}
#endif

void manage_inactivity()
{
    5b3c:	cf 92       	push	r12
    5b3e:	df 92       	push	r13
    5b40:	ef 92       	push	r14
    5b42:	ff 92       	push	r15
    5b44:	0f 93       	push	r16
    5b46:	1f 93       	push	r17
  if( (millis() - previous_millis_cmd) >  max_inactive_time )
    5b48:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5b4c:	c0 90 3f 09 	lds	r12, 0x093F
    5b50:	d0 90 40 09 	lds	r13, 0x0940
    5b54:	e0 90 41 09 	lds	r14, 0x0941
    5b58:	f0 90 42 09 	lds	r15, 0x0942
    5b5c:	00 91 25 09 	lds	r16, 0x0925
    5b60:	10 91 26 09 	lds	r17, 0x0926
    5b64:	20 91 27 09 	lds	r18, 0x0927
    5b68:	30 91 28 09 	lds	r19, 0x0928
    5b6c:	ab 01       	movw	r20, r22
    5b6e:	bc 01       	movw	r22, r24
    5b70:	40 1b       	sub	r20, r16
    5b72:	51 0b       	sbc	r21, r17
    5b74:	62 0b       	sbc	r22, r18
    5b76:	73 0b       	sbc	r23, r19
    5b78:	c4 16       	cp	r12, r20
    5b7a:	d5 06       	cpc	r13, r21
    5b7c:	e6 06       	cpc	r14, r22
    5b7e:	f7 06       	cpc	r15, r23
    5b80:	28 f4       	brcc	.+10     	; 0x5b8c <_Z17manage_inactivityv+0x50>
    if(max_inactive_time)
    5b82:	cd 28       	or	r12, r13
    5b84:	ce 28       	or	r12, r14
    5b86:	cf 28       	or	r12, r15
    5b88:	09 f0       	breq	.+2      	; 0x5b8c <_Z17manage_inactivityv+0x50>
      kill();
    5b8a:	9c df       	rcall	.-200    	; 0x5ac4 <_Z4killv>
  if(stepper_inactive_time)  {
    5b8c:	80 91 36 02 	lds	r24, 0x0236
    5b90:	90 91 37 02 	lds	r25, 0x0237
    5b94:	a0 91 38 02 	lds	r26, 0x0238
    5b98:	b0 91 39 02 	lds	r27, 0x0239
    5b9c:	89 2b       	or	r24, r25
    5b9e:	8a 2b       	or	r24, r26
    5ba0:	8b 2b       	or	r24, r27
    5ba2:	39 f1       	breq	.+78     	; 0x5bf2 <_Z17manage_inactivityv+0xb6>
    if( (millis() - previous_millis_cmd) >  stepper_inactive_time )
    5ba4:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5ba8:	00 91 25 09 	lds	r16, 0x0925
    5bac:	10 91 26 09 	lds	r17, 0x0926
    5bb0:	20 91 27 09 	lds	r18, 0x0927
    5bb4:	30 91 28 09 	lds	r19, 0x0928
    5bb8:	6b 01       	movw	r12, r22
    5bba:	7c 01       	movw	r14, r24
    5bbc:	c0 1a       	sub	r12, r16
    5bbe:	d1 0a       	sbc	r13, r17
    5bc0:	e2 0a       	sbc	r14, r18
    5bc2:	f3 0a       	sbc	r15, r19
    5bc4:	80 91 36 02 	lds	r24, 0x0236
    5bc8:	90 91 37 02 	lds	r25, 0x0237
    5bcc:	a0 91 38 02 	lds	r26, 0x0238
    5bd0:	b0 91 39 02 	lds	r27, 0x0239
    5bd4:	8c 15       	cp	r24, r12
    5bd6:	9d 05       	cpc	r25, r13
    5bd8:	ae 05       	cpc	r26, r14
    5bda:	bf 05       	cpc	r27, r15
    5bdc:	50 f4       	brcc	.+20     	; 0x5bf2 <_Z17manage_inactivityv+0xb6>
}

// Gets the current block. Returns NULL if buffer empty
FORCE_INLINE bool blocks_queued() 
{
  if (block_buffer_head == block_buffer_tail) { 
    5bde:	90 91 58 09 	lds	r25, 0x0958
    5be2:	80 91 57 09 	lds	r24, 0x0957
    {
      if(blocks_queued() == false) {
    5be6:	98 13       	cpse	r25, r24
    5be8:	04 c0       	rjmp	.+8      	; 0x5bf2 <_Z17manage_inactivityv+0xb6>
        disable_x();
    5bea:	15 9a       	sbi	0x02, 5	; 2
        disable_y();
    5bec:	17 9a       	sbi	0x02, 7	; 2
        disable_z();
    5bee:	42 9a       	sbi	0x08, 2	; 8
        disable_e0();
    5bf0:	a0 9a       	sbi	0x14, 0	; 20
      delayed_move_time = 0xFFFFFFFFUL; // force moves to be done
      memcpy(destination,current_position,sizeof(destination));
      prepare_move(); 
    }
  #endif  
  check_axes_activity();
    5bf2:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <_Z19check_axes_activityv>
}
    5bf6:	1f 91       	pop	r17
    5bf8:	0f 91       	pop	r16
    5bfa:	ff 90       	pop	r15
    5bfc:	ef 90       	pop	r14
    5bfe:	df 90       	pop	r13
    5c00:	cf 90       	pop	r12
    5c02:	08 95       	ret

00005c04 <_Z4Stopv>:
  suicide();
  while(1) { /* Intentionally left empty */ } // Wait for reset
}

void Stop()
{
    5c04:	cf 93       	push	r28
    5c06:	df 93       	push	r29
  disable_heater();
    5c08:	0e 94 b5 75 	call	0xeb6a	; 0xeb6a <_Z14disable_heaterv>
  if(Stopped == false) {
    5c0c:	80 91 58 05 	lds	r24, 0x0558
    5c10:	81 11       	cpse	r24, r1
    5c12:	41 c0       	rjmp	.+130    	; 0x5c96 <_Z4Stopv+0x92>
    Stopped = true;
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	80 93 58 05 	sts	0x0558, r24
    Stopped_gcode_LastN = gcode_LastN; // Save last g_code for restart
    5c1a:	80 91 21 09 	lds	r24, 0x0921
    5c1e:	90 91 22 09 	lds	r25, 0x0922
    5c22:	a0 91 23 09 	lds	r26, 0x0923
    5c26:	b0 91 24 09 	lds	r27, 0x0924
    5c2a:	80 93 43 09 	sts	0x0943, r24
    5c2e:	90 93 44 09 	sts	0x0944, r25
    5c32:	a0 93 45 09 	sts	0x0945, r26
    5c36:	b0 93 46 09 	sts	0x0946, r27


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    5c3a:	e5 ee       	ldi	r30, 0xE5	; 229
    5c3c:	f3 e0       	ldi	r31, 0x03	; 3
    5c3e:	94 91       	lpm	r25, Z
  while(ch)
    5c40:	99 23       	and	r25, r25
    5c42:	61 f0       	breq	.+24     	; 0x5c5c <_Z4Stopv+0x58>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5c44:	a0 ec       	ldi	r26, 0xC0	; 192
    5c46:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    5c48:	c6 ec       	ldi	r28, 0xC6	; 198
    5c4a:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5c4c:	8c 91       	ld	r24, X
    5c4e:	85 ff       	sbrs	r24, 5
    5c50:	fd cf       	rjmp	.-6      	; 0x5c4c <_Z4Stopv+0x48>
        ;

      M_UDRx = c;
    5c52:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5c54:	31 96       	adiw	r30, 0x01	; 1
    5c56:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5c58:	91 11       	cpse	r25, r1
    5c5a:	f8 cf       	rjmp	.-16     	; 0x5c4c <_Z4Stopv+0x48>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    5c5c:	e7 e9       	ldi	r30, 0x97	; 151
    5c5e:	f7 e0       	ldi	r31, 0x07	; 7
    5c60:	94 91       	lpm	r25, Z
  while(ch)
    5c62:	99 23       	and	r25, r25
    5c64:	61 f0       	breq	.+24     	; 0x5c7e <_Z4Stopv+0x7a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5c66:	a0 ec       	ldi	r26, 0xC0	; 192
    5c68:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    5c6a:	c6 ec       	ldi	r28, 0xC6	; 198
    5c6c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5c6e:	8c 91       	ld	r24, X
    5c70:	85 ff       	sbrs	r24, 5
    5c72:	fd cf       	rjmp	.-6      	; 0x5c6e <_Z4Stopv+0x6a>
        ;

      M_UDRx = c;
    5c74:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5c76:	31 96       	adiw	r30, 0x01	; 1
    5c78:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5c7a:	91 11       	cpse	r25, r1
    5c7c:	f8 cf       	rjmp	.-16     	; 0x5c6e <_Z4Stopv+0x6a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5c7e:	e0 ec       	ldi	r30, 0xC0	; 192
    5c80:	f0 e0       	ldi	r31, 0x00	; 0
    5c82:	80 81       	ld	r24, Z
    5c84:	85 ff       	sbrs	r24, 5
    5c86:	fd cf       	rjmp	.-6      	; 0x5c82 <_Z4Stopv+0x7e>
        ;

      M_UDRx = c;
    5c88:	8a e0       	ldi	r24, 0x0A	; 10
    5c8a:	80 93 c6 00 	sts	0x00C6, r24
    SERIAL_ERROR_START;
    SERIAL_ERRORLNPGM(MSG_ERR_STOPPED);
    LCD_MESSAGEPGM(MSG_STOPPED);
    5c8e:	8d e0       	ldi	r24, 0x0D	; 13
    5c90:	98 e0       	ldi	r25, 0x08	; 8
    5c92:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
  }
}
    5c96:	df 91       	pop	r29
    5c98:	cf 91       	pop	r28
    5c9a:	08 95       	ret

00005c9c <_Z9IsStoppedv>:

bool IsStopped() { return Stopped; };
    5c9c:	80 91 58 05 	lds	r24, 0x0558
    5ca0:	08 95       	ret

00005ca2 <_Z17setTargetedHotendi>:

  }
}
#endif //FAST_PWM_FAN

bool setTargetedHotend(int code){
    5ca2:	0f 93       	push	r16
    5ca4:	1f 93       	push	r17
    5ca6:	cf 93       	push	r28
    5ca8:	df 93       	push	r29
    5caa:	8c 01       	movw	r16, r24
  tmp_extruder = active_extruder;
    5cac:	80 91 63 05 	lds	r24, 0x0563
    5cb0:	80 93 3e 09 	sts	0x093E, r24
  if(code_seen('T')) {
    5cb4:	84 e5       	ldi	r24, 0x54	; 84
    5cb6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    5cba:	88 23       	and	r24, r24
    5cbc:	09 f4       	brne	.+2      	; 0x5cc0 <_Z17setTargetedHotendi+0x1e>
    5cbe:	78 c0       	rjmp	.+240    	; 0x5db0 <_Z17setTargetedHotendi+0x10e>
    tmp_extruder = code_value();
    5cc0:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    5cc4:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    5cc8:	60 93 3e 09 	sts	0x093E, r22
    if(tmp_extruder >= EXTRUDERS) {
    5ccc:	66 23       	and	r22, r22
    5cce:	09 f4       	brne	.+2      	; 0x5cd2 <_Z17setTargetedHotendi+0x30>
    5cd0:	71 c0       	rjmp	.+226    	; 0x5db4 <_Z17setTargetedHotendi+0x112>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    5cd2:	e5 ec       	ldi	r30, 0xC5	; 197
    5cd4:	f2 e0       	ldi	r31, 0x02	; 2
    5cd6:	34 91       	lpm	r19, Z
  while(ch)
    5cd8:	33 23       	and	r19, r19
    5cda:	69 f0       	breq	.+26     	; 0x5cf6 <_Z17setTargetedHotendi+0x54>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5cdc:	a0 ec       	ldi	r26, 0xC0	; 192
    5cde:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    5ce0:	86 ec       	ldi	r24, 0xC6	; 198
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5ce4:	2c 91       	ld	r18, X
    5ce6:	25 ff       	sbrs	r18, 5
    5ce8:	fd cf       	rjmp	.-6      	; 0x5ce4 <_Z17setTargetedHotendi+0x42>
        ;

      M_UDRx = c;
    5cea:	ec 01       	movw	r28, r24
    5cec:	38 83       	st	Y, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    5cee:	31 96       	adiw	r30, 0x01	; 1
    5cf0:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    5cf2:	31 11       	cpse	r19, r1
    5cf4:	f7 cf       	rjmp	.-18     	; 0x5ce4 <_Z17setTargetedHotendi+0x42>
      SERIAL_ECHO_START;
      switch(code){
    5cf6:	09 36       	cpi	r16, 0x69	; 105
    5cf8:	11 05       	cpc	r17, r1
    5cfa:	e1 f0       	breq	.+56     	; 0x5d34 <_Z17setTargetedHotendi+0x92>
    5cfc:	2c f4       	brge	.+10     	; 0x5d08 <_Z17setTargetedHotendi+0x66>
    5cfe:	08 36       	cpi	r16, 0x68	; 104
    5d00:	11 05       	cpc	r17, r1
    5d02:	09 f0       	breq	.+2      	; 0x5d06 <_Z17setTargetedHotendi+0x64>
    5d04:	43 c0       	rjmp	.+134    	; 0x5d8c <_Z17setTargetedHotendi+0xea>
    5d06:	07 c0       	rjmp	.+14     	; 0x5d16 <_Z17setTargetedHotendi+0x74>
    5d08:	0d 36       	cpi	r16, 0x6D	; 109
    5d0a:	11 05       	cpc	r17, r1
    5d0c:	11 f1       	breq	.+68     	; 0x5d52 <_Z17setTargetedHotendi+0xb0>
    5d0e:	0a 3d       	cpi	r16, 0xDA	; 218
    5d10:	11 05       	cpc	r17, r1
    5d12:	e1 f5       	brne	.+120    	; 0x5d8c <_Z17setTargetedHotendi+0xea>
    5d14:	2d c0       	rjmp	.+90     	; 0x5d70 <_Z17setTargetedHotendi+0xce>
    5d16:	a1 e3       	ldi	r26, 0x31	; 49
    5d18:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    5d1a:	9d e4       	ldi	r25, 0x4D	; 77
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d1c:	e0 ec       	ldi	r30, 0xC0	; 192
    5d1e:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    5d20:	c6 ec       	ldi	r28, 0xC6	; 198
    5d22:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d24:	80 81       	ld	r24, Z
    5d26:	85 ff       	sbrs	r24, 5
    5d28:	fd cf       	rjmp	.-6      	; 0x5d24 <_Z17setTargetedHotendi+0x82>
        ;

      M_UDRx = c;
    5d2a:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    5d2c:	9d 91       	ld	r25, X+
    5d2e:	91 11       	cpse	r25, r1
    5d30:	f9 cf       	rjmp	.-14     	; 0x5d24 <_Z17setTargetedHotendi+0x82>
    5d32:	2c c0       	rjmp	.+88     	; 0x5d8c <_Z17setTargetedHotendi+0xea>
    5d34:	a8 e4       	ldi	r26, 0x48	; 72
    5d36:	b3 e0       	ldi	r27, 0x03	; 3
    5d38:	9d e4       	ldi	r25, 0x4D	; 77
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d3a:	e0 ec       	ldi	r30, 0xC0	; 192
    5d3c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    5d3e:	c6 ec       	ldi	r28, 0xC6	; 198
    5d40:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d42:	80 81       	ld	r24, Z
    5d44:	85 ff       	sbrs	r24, 5
    5d46:	fd cf       	rjmp	.-6      	; 0x5d42 <_Z17setTargetedHotendi+0xa0>
        ;

      M_UDRx = c;
    5d48:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    5d4a:	9d 91       	ld	r25, X+
    5d4c:	91 11       	cpse	r25, r1
    5d4e:	f9 cf       	rjmp	.-14     	; 0x5d42 <_Z17setTargetedHotendi+0xa0>
    5d50:	1d c0       	rjmp	.+58     	; 0x5d8c <_Z17setTargetedHotendi+0xea>
    5d52:	af e5       	ldi	r26, 0x5F	; 95
    5d54:	b3 e0       	ldi	r27, 0x03	; 3
    5d56:	9d e4       	ldi	r25, 0x4D	; 77
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d58:	e0 ec       	ldi	r30, 0xC0	; 192
    5d5a:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    5d5c:	c6 ec       	ldi	r28, 0xC6	; 198
    5d5e:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d60:	80 81       	ld	r24, Z
    5d62:	85 ff       	sbrs	r24, 5
    5d64:	fd cf       	rjmp	.-6      	; 0x5d60 <_Z17setTargetedHotendi+0xbe>
        ;

      M_UDRx = c;
    5d66:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    5d68:	9d 91       	ld	r25, X+
    5d6a:	91 11       	cpse	r25, r1
    5d6c:	f9 cf       	rjmp	.-14     	; 0x5d60 <_Z17setTargetedHotendi+0xbe>
    5d6e:	0e c0       	rjmp	.+28     	; 0x5d8c <_Z17setTargetedHotendi+0xea>
    5d70:	a6 e7       	ldi	r26, 0x76	; 118
    5d72:	b3 e0       	ldi	r27, 0x03	; 3
    5d74:	9d e4       	ldi	r25, 0x4D	; 77
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d76:	e0 ec       	ldi	r30, 0xC0	; 192
    5d78:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    5d7a:	c6 ec       	ldi	r28, 0xC6	; 198
    5d7c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d7e:	80 81       	ld	r24, Z
    5d80:	85 ff       	sbrs	r24, 5
    5d82:	fd cf       	rjmp	.-6      	; 0x5d7e <_Z17setTargetedHotendi+0xdc>
        ;

      M_UDRx = c;
    5d84:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    5d86:	9d 91       	ld	r25, X+
    5d88:	91 11       	cpse	r25, r1
    5d8a:	f9 cf       	rjmp	.-14     	; 0x5d7e <_Z17setTargetedHotendi+0xdc>
          break;
        case 218:
          SERIAL_ECHO(MSG_M218_INVALID_EXTRUDER);
          break;
      }
      SERIAL_ECHOLN(tmp_extruder);
    5d8c:	40 e0       	ldi	r20, 0x00	; 0
    5d8e:	50 e0       	ldi	r21, 0x00	; 0
    5d90:	60 91 3e 09 	lds	r22, 0x093E
    5d94:	82 ed       	ldi	r24, 0xD2	; 210
    5d96:	94 e0       	ldi	r25, 0x04	; 4
    5d98:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN12MarlinSerial5printEhi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    5d9c:	e0 ec       	ldi	r30, 0xC0	; 192
    5d9e:	f0 e0       	ldi	r31, 0x00	; 0
    5da0:	80 81       	ld	r24, Z
    5da2:	85 ff       	sbrs	r24, 5
    5da4:	fd cf       	rjmp	.-6      	; 0x5da0 <_Z17setTargetedHotendi+0xfe>
        ;

      M_UDRx = c;
    5da6:	8a e0       	ldi	r24, 0x0A	; 10
    5da8:	80 93 c6 00 	sts	0x00C6, r24
      return true;
    5dac:	81 e0       	ldi	r24, 0x01	; 1
    5dae:	03 c0       	rjmp	.+6      	; 0x5db6 <_Z17setTargetedHotendi+0x114>
    }
  }
  return false;
    5db0:	80 e0       	ldi	r24, 0x00	; 0
    5db2:	01 c0       	rjmp	.+2      	; 0x5db6 <_Z17setTargetedHotendi+0x114>
    5db4:	80 e0       	ldi	r24, 0x00	; 0
}
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	1f 91       	pop	r17
    5dbc:	0f 91       	pop	r16
    5dbe:	08 95       	ret

00005dc0 <_Z16process_commandsv>:
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
{
    5dc0:	2f 92       	push	r2
    5dc2:	3f 92       	push	r3
    5dc4:	4f 92       	push	r4
    5dc6:	5f 92       	push	r5
    5dc8:	6f 92       	push	r6
    5dca:	7f 92       	push	r7
    5dcc:	8f 92       	push	r8
    5dce:	9f 92       	push	r9
    5dd0:	af 92       	push	r10
    5dd2:	bf 92       	push	r11
    5dd4:	cf 92       	push	r12
    5dd6:	df 92       	push	r13
    5dd8:	ef 92       	push	r14
    5dda:	ff 92       	push	r15
    5ddc:	0f 93       	push	r16
    5dde:	1f 93       	push	r17
    5de0:	cf 93       	push	r28
    5de2:	df 93       	push	r29
    5de4:	cd b7       	in	r28, 0x3d	; 61
    5de6:	de b7       	in	r29, 0x3e	; 62
    5de8:	a1 97       	sbiw	r28, 0x21	; 33
    5dea:	0f b6       	in	r0, 0x3f	; 63
    5dec:	f8 94       	cli
    5dee:	de bf       	out	0x3e, r29	; 62
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	cd bf       	out	0x3d, r28	; 61
  unsigned long codenum; //throw away variable
  char *starpos = NULL;

  if(code_seen('G'))
    5df4:	87 e4       	ldi	r24, 0x47	; 71
    5df6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    5dfa:	88 23       	and	r24, r24
    5dfc:	09 f4       	brne	.+2      	; 0x5e00 <_Z16process_commandsv+0x40>
    5dfe:	1f c2       	rjmp	.+1086   	; 0x623e <_Z16process_commandsv+0x47e>
  {
    switch((int)code_value())
    5e00:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    5e04:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    5e08:	64 30       	cpi	r22, 0x04	; 4
    5e0a:	71 05       	cpc	r23, r1
    5e0c:	c1 f1       	breq	.+112    	; 0x5e7e <_Z16process_commandsv+0xbe>
    5e0e:	44 f4       	brge	.+16     	; 0x5e20 <_Z16process_commandsv+0x60>
    5e10:	62 30       	cpi	r22, 0x02	; 2
    5e12:	71 05       	cpc	r23, r1
    5e14:	11 f1       	breq	.+68     	; 0x5e5a <_Z16process_commandsv+0x9a>
    5e16:	54 f5       	brge	.+84     	; 0x5e6c <_Z16process_commandsv+0xac>
    5e18:	77 23       	and	r23, r23
    5e1a:	bc f4       	brge	.+46     	; 0x5e4a <_Z16process_commandsv+0x8a>
    5e1c:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    5e20:	6a 35       	cpi	r22, 0x5A	; 90
    5e22:	71 05       	cpc	r23, r1
    5e24:	09 f4       	brne	.+2      	; 0x5e28 <_Z16process_commandsv+0x68>
    5e26:	af c1       	rjmp	.+862    	; 0x6186 <_Z16process_commandsv+0x3c6>
    5e28:	34 f4       	brge	.+12     	; 0x5e36 <_Z16process_commandsv+0x76>
    5e2a:	6c 31       	cpi	r22, 0x1C	; 28
    5e2c:	71 05       	cpc	r23, r1
    5e2e:	11 f0       	breq	.+4      	; 0x5e34 <_Z16process_commandsv+0x74>
    5e30:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    5e34:	6d c0       	rjmp	.+218    	; 0x5f10 <_Z16process_commandsv+0x150>
    5e36:	6b 35       	cpi	r22, 0x5B	; 91
    5e38:	71 05       	cpc	r23, r1
    5e3a:	09 f4       	brne	.+2      	; 0x5e3e <_Z16process_commandsv+0x7e>
    5e3c:	a8 c1       	rjmp	.+848    	; 0x618e <_Z16process_commandsv+0x3ce>
    5e3e:	6c 35       	cpi	r22, 0x5C	; 92
    5e40:	71 05       	cpc	r23, r1
    5e42:	11 f0       	breq	.+4      	; 0x5e48 <_Z16process_commandsv+0x88>
    5e44:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    5e48:	a7 c1       	rjmp	.+846    	; 0x6198 <_Z16process_commandsv+0x3d8>
    {
    case 0: // G0 -> G1
    case 1: // G1
      if(Stopped == false) {
    5e4a:	80 91 58 05 	lds	r24, 0x0558
    5e4e:	81 11       	cpse	r24, r1
    5e50:	16 c0       	rjmp	.+44     	; 0x5e7e <_Z16process_commandsv+0xbe>
        get_coordinates(); // For X Y Z E F
    5e52:	61 db       	rcall	.-2366   	; 0x5516 <_Z15get_coordinatesv>
        prepare_move();
    5e54:	af dc       	rcall	.-1698   	; 0x57b4 <_Z12prepare_movev>
        //ClearToSend();
        return;
    5e56:	0c 94 bd 41 	jmp	0x837a	; 0x837a <_Z16process_commandsv+0x25ba>
      }
      //break;
    case 2: // G2  - CW ARC
      if(Stopped == false) {
    5e5a:	80 91 58 05 	lds	r24, 0x0558
    5e5e:	81 11       	cpse	r24, r1
    5e60:	0e c0       	rjmp	.+28     	; 0x5e7e <_Z16process_commandsv+0xbe>
        get_arc_coordinates();
    5e62:	e8 db       	rcall	.-2096   	; 0x5634 <_Z19get_arc_coordinatesv>
        prepare_arc_move(true);
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	7b dd       	rcall	.-1290   	; 0x595e <_Z16prepare_arc_movec>
        return;
    5e68:	0c 94 bd 41 	jmp	0x837a	; 0x837a <_Z16process_commandsv+0x25ba>
      }
    case 3: // G3  - CCW ARC
      if(Stopped == false) {
    5e6c:	80 91 58 05 	lds	r24, 0x0558
    5e70:	81 11       	cpse	r24, r1
    5e72:	05 c0       	rjmp	.+10     	; 0x5e7e <_Z16process_commandsv+0xbe>
        get_arc_coordinates();
    5e74:	df db       	rcall	.-2114   	; 0x5634 <_Z19get_arc_coordinatesv>
        prepare_arc_move(false);
    5e76:	80 e0       	ldi	r24, 0x00	; 0
    5e78:	72 dd       	rcall	.-1308   	; 0x595e <_Z16prepare_arc_movec>
        return;
    5e7a:	0c 94 bd 41 	jmp	0x837a	; 0x837a <_Z16process_commandsv+0x25ba>
      }
    case 4: // G4 dwell
      LCD_MESSAGEPGM(MSG_DWELL);
    5e7e:	8c e3       	ldi	r24, 0x3C	; 60
    5e80:	95 e0       	ldi	r25, 0x05	; 5
    5e82:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
      codenum = 0;
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
    5e86:	80 e5       	ldi	r24, 0x50	; 80
    5e88:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    5e8c:	88 23       	and	r24, r24
    5e8e:	49 f0       	breq	.+18     	; 0x5ea2 <_Z16process_commandsv+0xe2>
    5e90:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    5e94:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    5e98:	c6 2e       	mov	r12, r22
    5e9a:	d7 2e       	mov	r13, r23
    5e9c:	e8 2e       	mov	r14, r24
    5e9e:	f9 2e       	mov	r15, r25
    5ea0:	03 c0       	rjmp	.+6      	; 0x5ea8 <_Z16process_commandsv+0xe8>
        prepare_arc_move(false);
        return;
      }
    case 4: // G4 dwell
      LCD_MESSAGEPGM(MSG_DWELL);
      codenum = 0;
    5ea2:	c1 2c       	mov	r12, r1
    5ea4:	d1 2c       	mov	r13, r1
    5ea6:	76 01       	movw	r14, r12
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait
    5ea8:	83 e5       	ldi	r24, 0x53	; 83
    5eaa:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    5eae:	88 23       	and	r24, r24
    5eb0:	71 f0       	breq	.+28     	; 0x5ece <_Z16process_commandsv+0x10e>
    5eb2:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    5eb6:	20 e0       	ldi	r18, 0x00	; 0
    5eb8:	30 e0       	ldi	r19, 0x00	; 0
    5eba:	4a e7       	ldi	r20, 0x7A	; 122
    5ebc:	54 e4       	ldi	r21, 0x44	; 68
    5ebe:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    5ec2:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    5ec6:	c6 2e       	mov	r12, r22
    5ec8:	d7 2e       	mov	r13, r23
    5eca:	e8 2e       	mov	r14, r24
    5ecc:	f9 2e       	mov	r15, r25

      st_synchronize();
    5ece:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
      codenum += millis();  // keep track of when we started waiting
    5ed2:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5ed6:	c6 0e       	add	r12, r22
    5ed8:	d7 1e       	adc	r13, r23
    5eda:	e8 1e       	adc	r14, r24
    5edc:	f9 1e       	adc	r15, r25
      previous_millis_cmd = millis();
    5ede:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5ee2:	60 93 25 09 	sts	0x0925, r22
    5ee6:	70 93 26 09 	sts	0x0926, r23
    5eea:	80 93 27 09 	sts	0x0927, r24
    5eee:	90 93 28 09 	sts	0x0928, r25
      while(millis()  < codenum ){
    5ef2:	05 c0       	rjmp	.+10     	; 0x5efe <_Z16process_commandsv+0x13e>
        manage_heater();
    5ef4:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
        manage_inactivity();
    5ef8:	21 de       	rcall	.-958    	; 0x5b3c <_Z17manage_inactivityv>
        lcd_update();
    5efa:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait

      st_synchronize();
      codenum += millis();  // keep track of when we started waiting
      previous_millis_cmd = millis();
      while(millis()  < codenum ){
    5efe:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5f02:	6c 15       	cp	r22, r12
    5f04:	7d 05       	cpc	r23, r13
    5f06:	8e 05       	cpc	r24, r14
    5f08:	9f 05       	cpc	r25, r15
    5f0a:	a0 f3       	brcs	.-24     	; 0x5ef4 <_Z16process_commandsv+0x134>
    5f0c:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        prepare_move();
      }
      break;
      #endif //FWRETRACT
    case 28: //G28 Home all Axis one at a time
      saved_feedrate = feedrate;
    5f10:	80 91 31 02 	lds	r24, 0x0231
    5f14:	90 91 32 02 	lds	r25, 0x0232
    5f18:	a0 91 33 02 	lds	r26, 0x0233
    5f1c:	b0 91 34 02 	lds	r27, 0x0234
    5f20:	80 93 29 09 	sts	0x0929, r24
    5f24:	90 93 2a 09 	sts	0x092A, r25
    5f28:	a0 93 2b 09 	sts	0x092B, r26
    5f2c:	b0 93 2c 09 	sts	0x092C, r27
      saved_feedmultiply = feedmultiply;
    5f30:	80 91 1f 02 	lds	r24, 0x021F
    5f34:	90 91 20 02 	lds	r25, 0x0220
    5f38:	90 93 8d 05 	sts	0x058D, r25
    5f3c:	80 93 8c 05 	sts	0x058C, r24
      feedmultiply = 100;
    5f40:	84 e6       	ldi	r24, 0x64	; 100
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	90 93 20 02 	sts	0x0220, r25
    5f48:	80 93 1f 02 	sts	0x021F, r24
      previous_millis_cmd = millis();
    5f4c:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    5f50:	60 93 25 09 	sts	0x0925, r22
    5f54:	70 93 26 09 	sts	0x0926, r23
    5f58:	80 93 27 09 	sts	0x0927, r24
    5f5c:	90 93 28 09 	sts	0x0928, r25

      enable_endstops(true);
    5f60:	81 e0       	ldi	r24, 0x01	; 1
    5f62:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <_Z15enable_endstopsb>

      for(int8_t i=0; i < NUM_AXIS; i++) {
        destination[i] = current_position[i];
    5f66:	80 91 7c 05 	lds	r24, 0x057C
    5f6a:	90 91 7d 05 	lds	r25, 0x057D
    5f6e:	a0 91 7e 05 	lds	r26, 0x057E
    5f72:	b0 91 7f 05 	lds	r27, 0x057F
    5f76:	80 93 2d 09 	sts	0x092D, r24
    5f7a:	90 93 2e 09 	sts	0x092E, r25
    5f7e:	a0 93 2f 09 	sts	0x092F, r26
    5f82:	b0 93 30 09 	sts	0x0930, r27
    5f86:	80 91 80 05 	lds	r24, 0x0580
    5f8a:	90 91 81 05 	lds	r25, 0x0581
    5f8e:	a0 91 82 05 	lds	r26, 0x0582
    5f92:	b0 91 83 05 	lds	r27, 0x0583
    5f96:	80 93 31 09 	sts	0x0931, r24
    5f9a:	90 93 32 09 	sts	0x0932, r25
    5f9e:	a0 93 33 09 	sts	0x0933, r26
    5fa2:	b0 93 34 09 	sts	0x0934, r27
    5fa6:	80 91 84 05 	lds	r24, 0x0584
    5faa:	90 91 85 05 	lds	r25, 0x0585
    5fae:	a0 91 86 05 	lds	r26, 0x0586
    5fb2:	b0 91 87 05 	lds	r27, 0x0587
    5fb6:	80 93 35 09 	sts	0x0935, r24
    5fba:	90 93 36 09 	sts	0x0936, r25
    5fbe:	a0 93 37 09 	sts	0x0937, r26
    5fc2:	b0 93 38 09 	sts	0x0938, r27
    5fc6:	80 91 88 05 	lds	r24, 0x0588
    5fca:	90 91 89 05 	lds	r25, 0x0589
    5fce:	a0 91 8a 05 	lds	r26, 0x058A
    5fd2:	b0 91 8b 05 	lds	r27, 0x058B
    5fd6:	80 93 39 09 	sts	0x0939, r24
    5fda:	90 93 3a 09 	sts	0x093A, r25
    5fde:	a0 93 3b 09 	sts	0x093B, r26
    5fe2:	b0 93 3c 09 	sts	0x093C, r27
      }
      feedrate = 0.0;
    5fe6:	10 92 31 02 	sts	0x0231, r1
    5fea:	10 92 32 02 	sts	0x0232, r1
    5fee:	10 92 33 02 	sts	0x0233, r1
    5ff2:	10 92 34 02 	sts	0x0234, r1
          calculate_delta(current_position);
          plan_set_position(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS]);

#else // NOT DELTA

      home_all_axis = !((code_seen(axis_codes[0])) || (code_seen(axis_codes[1])) || (code_seen(axis_codes[2])));
    5ff6:	88 e5       	ldi	r24, 0x58	; 88
    5ff8:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    5ffc:	81 11       	cpse	r24, r1
    5ffe:	0c 94 0b 41 	jmp	0x8216	; 0x8216 <_Z16process_commandsv+0x2456>
    6002:	89 e5       	ldi	r24, 0x59	; 89
    6004:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6008:	81 11       	cpse	r24, r1
    600a:	0c 94 0b 41 	jmp	0x8216	; 0x8216 <_Z16process_commandsv+0x2456>
    600e:	8a e5       	ldi	r24, 0x5A	; 90
    6010:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6014:	91 e0       	ldi	r25, 0x01	; 1
    6016:	89 27       	eor	r24, r25
    6018:	80 93 35 02 	sts	0x0235, r24
        current_position[Y_AXIS] = destination[Y_AXIS];
        current_position[Z_AXIS] = destination[Z_AXIS];
      }
      #endif

      if((home_all_axis) || (code_seen(axis_codes[X_AXIS])))
    601c:	81 11       	cpse	r24, r1
    601e:	05 c0       	rjmp	.+10     	; 0x602a <_Z16process_commandsv+0x26a>
    6020:	88 e5       	ldi	r24, 0x58	; 88
    6022:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6026:	88 23       	and	r24, r24
    6028:	21 f0       	breq	.+8      	; 0x6032 <_Z16process_commandsv+0x272>
        // reset state used by the different modes
        memcpy(raised_parked_position, current_position, sizeof(raised_parked_position));
        delayed_move_time = 0;
        active_extruder_parked = true; 
      #else      
        HOMEAXIS(X);
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	0e 94 1d 20 	call	0x403a	; 0x403a <_ZL8homeaxisi>
      #endif         
      }

      if((home_all_axis) || (code_seen(axis_codes[Y_AXIS]))) {
    6032:	80 91 35 02 	lds	r24, 0x0235
    6036:	81 11       	cpse	r24, r1
    6038:	05 c0       	rjmp	.+10     	; 0x6044 <_Z16process_commandsv+0x284>
    603a:	89 e5       	ldi	r24, 0x59	; 89
    603c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6040:	88 23       	and	r24, r24
    6042:	21 f0       	breq	.+8      	; 0x604c <_Z16process_commandsv+0x28c>
        HOMEAXIS(Y);
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	0e 94 1d 20 	call	0x403a	; 0x403a <_ZL8homeaxisi>
      }

      #if Z_HOME_DIR < 0                      // If homing towards BED do Z last
      if((home_all_axis) || (code_seen(axis_codes[Z_AXIS]))) {
    604c:	80 91 35 02 	lds	r24, 0x0235
    6050:	81 11       	cpse	r24, r1
    6052:	05 c0       	rjmp	.+10     	; 0x605e <_Z16process_commandsv+0x29e>
    6054:	8a e5       	ldi	r24, 0x5A	; 90
    6056:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    605a:	88 23       	and	r24, r24
    605c:	21 f0       	breq	.+8      	; 0x6066 <_Z16process_commandsv+0x2a6>
        HOMEAXIS(Z);
    605e:	82 e0       	ldi	r24, 0x02	; 2
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	0e 94 1d 20 	call	0x403a	; 0x403a <_ZL8homeaxisi>
      }
      #endif

      if(code_seen(axis_codes[X_AXIS]))
    6066:	88 e5       	ldi	r24, 0x58	; 88
    6068:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    606c:	88 23       	and	r24, r24
    606e:	d1 f0       	breq	.+52     	; 0x60a4 <_Z16process_commandsv+0x2e4>
      {
        if(code_value_long() != 0) {
    6070:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <_Z15code_value_longv>
    6074:	67 2b       	or	r22, r23
    6076:	68 2b       	or	r22, r24
    6078:	69 2b       	or	r22, r25
    607a:	a1 f0       	breq	.+40     	; 0x60a4 <_Z16process_commandsv+0x2e4>
          current_position[X_AXIS]=code_value()+add_homeing[0];
    607c:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6080:	20 91 70 05 	lds	r18, 0x0570
    6084:	30 91 71 05 	lds	r19, 0x0571
    6088:	40 91 72 05 	lds	r20, 0x0572
    608c:	50 91 73 05 	lds	r21, 0x0573
    6090:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    6094:	60 93 7c 05 	sts	0x057C, r22
    6098:	70 93 7d 05 	sts	0x057D, r23
    609c:	80 93 7e 05 	sts	0x057E, r24
    60a0:	90 93 7f 05 	sts	0x057F, r25
        }
      }

      if(code_seen(axis_codes[Y_AXIS])) {
    60a4:	89 e5       	ldi	r24, 0x59	; 89
    60a6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    60aa:	88 23       	and	r24, r24
    60ac:	d1 f0       	breq	.+52     	; 0x60e2 <_Z16process_commandsv+0x322>
        if(code_value_long() != 0) {
    60ae:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <_Z15code_value_longv>
    60b2:	67 2b       	or	r22, r23
    60b4:	68 2b       	or	r22, r24
    60b6:	69 2b       	or	r22, r25
    60b8:	a1 f0       	breq	.+40     	; 0x60e2 <_Z16process_commandsv+0x322>
          current_position[Y_AXIS]=code_value()+add_homeing[1];
    60ba:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    60be:	20 91 74 05 	lds	r18, 0x0574
    60c2:	30 91 75 05 	lds	r19, 0x0575
    60c6:	40 91 76 05 	lds	r20, 0x0576
    60ca:	50 91 77 05 	lds	r21, 0x0577
    60ce:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    60d2:	60 93 80 05 	sts	0x0580, r22
    60d6:	70 93 81 05 	sts	0x0581, r23
    60da:	80 93 82 05 	sts	0x0582, r24
    60de:	90 93 83 05 	sts	0x0583, r25
        }
      }

      if(code_seen(axis_codes[Z_AXIS])) {
    60e2:	8a e5       	ldi	r24, 0x5A	; 90
    60e4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    60e8:	88 23       	and	r24, r24
    60ea:	d1 f0       	breq	.+52     	; 0x6120 <_Z16process_commandsv+0x360>
        if(code_value_long() != 0) {
    60ec:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <_Z15code_value_longv>
    60f0:	67 2b       	or	r22, r23
    60f2:	68 2b       	or	r22, r24
    60f4:	69 2b       	or	r22, r25
    60f6:	a1 f0       	breq	.+40     	; 0x6120 <_Z16process_commandsv+0x360>
          current_position[Z_AXIS]=code_value()+add_homeing[2];
    60f8:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    60fc:	20 91 78 05 	lds	r18, 0x0578
    6100:	30 91 79 05 	lds	r19, 0x0579
    6104:	40 91 7a 05 	lds	r20, 0x057A
    6108:	50 91 7b 05 	lds	r21, 0x057B
    610c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    6110:	60 93 84 05 	sts	0x0584, r22
    6114:	70 93 85 05 	sts	0x0585, r23
    6118:	80 93 86 05 	sts	0x0586, r24
    611c:	90 93 87 05 	sts	0x0587, r25
        }
      }
      plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);
    6120:	28 e8       	ldi	r18, 0x88	; 136
    6122:	35 e0       	ldi	r19, 0x05	; 5
    6124:	44 e8       	ldi	r20, 0x84	; 132
    6126:	55 e0       	ldi	r21, 0x05	; 5
    6128:	60 e8       	ldi	r22, 0x80	; 128
    612a:	75 e0       	ldi	r23, 0x05	; 5
    612c:	8c e7       	ldi	r24, 0x7C	; 124
    612e:	95 e0       	ldi	r25, 0x05	; 5
    6130:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <_Z17plan_set_positionRKfS0_S0_S0_>
#endif // else DELTA

      #ifdef ENDSTOPS_ONLY_FOR_HOMING
        enable_endstops(false);
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <_Z15enable_endstopsb>
      #endif

      feedrate = saved_feedrate;
    613a:	80 91 29 09 	lds	r24, 0x0929
    613e:	90 91 2a 09 	lds	r25, 0x092A
    6142:	a0 91 2b 09 	lds	r26, 0x092B
    6146:	b0 91 2c 09 	lds	r27, 0x092C
    614a:	80 93 31 02 	sts	0x0231, r24
    614e:	90 93 32 02 	sts	0x0232, r25
    6152:	a0 93 33 02 	sts	0x0233, r26
    6156:	b0 93 34 02 	sts	0x0234, r27
      feedmultiply = saved_feedmultiply;
    615a:	80 91 8c 05 	lds	r24, 0x058C
    615e:	90 91 8d 05 	lds	r25, 0x058D
    6162:	90 93 20 02 	sts	0x0220, r25
    6166:	80 93 1f 02 	sts	0x021F, r24
      previous_millis_cmd = millis();
    616a:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    616e:	60 93 25 09 	sts	0x0925, r22
    6172:	70 93 26 09 	sts	0x0926, r23
    6176:	80 93 27 09 	sts	0x0927, r24
    617a:	90 93 28 09 	sts	0x0928, r25
      endstops_hit_on_purpose();
    617e:	0e 94 07 6a 	call	0xd40e	; 0xd40e <_Z23endstops_hit_on_purposev>
      break;
    6182:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 90: // G90
      relative_mode = false;
    6186:	10 92 3d 09 	sts	0x093D, r1
      break;
    618a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 91: // G91
      relative_mode = true;
    618e:	81 e0       	ldi	r24, 0x01	; 1
    6190:	80 93 3d 09 	sts	0x093D, r24
      break;
    6194:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 92: // G92
      if(!code_seen(axis_codes[E_AXIS]))
    6198:	85 e4       	ldi	r24, 0x45	; 69
    619a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    619e:	81 11       	cpse	r24, r1
    61a0:	0c 94 0f 41 	jmp	0x821e	; 0x821e <_Z16process_commandsv+0x245e>
        st_synchronize();
    61a4:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    61a8:	0c 94 0f 41 	jmp	0x821e	; 0x821e <_Z16process_commandsv+0x245e>
      for(int8_t i=0; i < NUM_AXIS; i++) {
        if(code_seen(axis_codes[i])) {
    61ac:	d6 01       	movw	r26, r12
    61ae:	8d 91       	ld	r24, X+
    61b0:	6d 01       	movw	r12, r26
    61b2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    61b6:	88 23       	and	r24, r24
    61b8:	b9 f1       	breq	.+110    	; 0x6228 <_Z16process_commandsv+0x468>
           if(i == E_AXIS) {
    61ba:	03 30       	cpi	r16, 0x03	; 3
    61bc:	99 f4       	brne	.+38     	; 0x61e4 <_Z16process_commandsv+0x424>
             current_position[i] = code_value();
    61be:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    61c2:	f8 01       	movw	r30, r16
    61c4:	ee 0f       	add	r30, r30
    61c6:	ff 1f       	adc	r31, r31
    61c8:	ee 0f       	add	r30, r30
    61ca:	ff 1f       	adc	r31, r31
    61cc:	e4 58       	subi	r30, 0x84	; 132
    61ce:	fa 4f       	sbci	r31, 0xFA	; 250
    61d0:	60 83       	st	Z, r22
    61d2:	71 83       	std	Z+1, r23	; 0x01
    61d4:	82 83       	std	Z+2, r24	; 0x02
    61d6:	93 83       	std	Z+3, r25	; 0x03
             plan_set_e_position(current_position[E_AXIS]);
    61d8:	88 e8       	ldi	r24, 0x88	; 136
    61da:	95 e0       	ldi	r25, 0x05	; 5
    61dc:	0e 94 80 57 	call	0xaf00	; 0xaf00 <_Z19plan_set_e_positionRKf>
    61e0:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
           }
           else {
             current_position[i] = code_value()+add_homeing[i];
    61e4:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    61e8:	0f 2e       	mov	r0, r31
    61ea:	fc e7       	ldi	r31, 0x7C	; 124
    61ec:	af 2e       	mov	r10, r31
    61ee:	f5 e0       	ldi	r31, 0x05	; 5
    61f0:	bf 2e       	mov	r11, r31
    61f2:	f0 2d       	mov	r31, r0
    61f4:	ae 0c       	add	r10, r14
    61f6:	bf 1c       	adc	r11, r15
    61f8:	f7 01       	movw	r30, r14
    61fa:	e0 59       	subi	r30, 0x90	; 144
    61fc:	fa 4f       	sbci	r31, 0xFA	; 250
           if(i == E_AXIS) {
             current_position[i] = code_value();
             plan_set_e_position(current_position[E_AXIS]);
           }
           else {
             current_position[i] = code_value()+add_homeing[i];
    61fe:	20 81       	ld	r18, Z
    6200:	31 81       	ldd	r19, Z+1	; 0x01
    6202:	42 81       	ldd	r20, Z+2	; 0x02
    6204:	53 81       	ldd	r21, Z+3	; 0x03
    6206:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    620a:	f5 01       	movw	r30, r10
    620c:	60 83       	st	Z, r22
    620e:	71 83       	std	Z+1, r23	; 0x01
    6210:	82 83       	std	Z+2, r24	; 0x02
    6212:	93 83       	std	Z+3, r25	; 0x03
             plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);
    6214:	28 e8       	ldi	r18, 0x88	; 136
    6216:	35 e0       	ldi	r19, 0x05	; 5
    6218:	44 e8       	ldi	r20, 0x84	; 132
    621a:	55 e0       	ldi	r21, 0x05	; 5
    621c:	60 e8       	ldi	r22, 0x80	; 128
    621e:	75 e0       	ldi	r23, 0x05	; 5
    6220:	8c e7       	ldi	r24, 0x7C	; 124
    6222:	95 e0       	ldi	r25, 0x05	; 5
    6224:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <_Z17plan_set_positionRKfS0_S0_S0_>
    6228:	0f 5f       	subi	r16, 0xFF	; 255
    622a:	1f 4f       	sbci	r17, 0xFF	; 255
    622c:	f4 e0       	ldi	r31, 0x04	; 4
    622e:	ef 0e       	add	r14, r31
    6230:	f1 1c       	adc	r15, r1
      relative_mode = true;
      break;
    case 92: // G92
      if(!code_seen(axis_codes[E_AXIS]))
        st_synchronize();
      for(int8_t i=0; i < NUM_AXIS; i++) {
    6232:	04 30       	cpi	r16, 0x04	; 4
    6234:	11 05       	cpc	r17, r1
    6236:	09 f0       	breq	.+2      	; 0x623a <_Z16process_commandsv+0x47a>
    6238:	b9 cf       	rjmp	.-142    	; 0x61ac <_Z16process_commandsv+0x3ec>
    623a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      }
      break;
    }
  }

  else if(code_seen('M'))
    623e:	8d e4       	ldi	r24, 0x4D	; 77
    6240:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6244:	88 23       	and	r24, r24
    6246:	11 f4       	brne	.+4      	; 0x624c <_Z16process_commandsv+0x48c>
    6248:	0c 94 f6 3f 	jmp	0x7fec	; 0x7fec <_Z16process_commandsv+0x222c>
  {
    switch( (int)code_value() )
    624c:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6250:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6254:	6a 36       	cpi	r22, 0x6A	; 106
    6256:	71 05       	cpc	r23, r1
    6258:	11 f4       	brne	.+4      	; 0x625e <_Z16process_commandsv+0x49e>
    625a:	0c 94 92 39 	jmp	0x7324	; 0x7324 <_Z16process_commandsv+0x1564>
    625e:	0c f0       	brlt	.+2      	; 0x6262 <_Z16process_commandsv+0x4a2>
    6260:	78 c0       	rjmp	.+240    	; 0x6352 <_Z16process_commandsv+0x592>
    6262:	6c 31       	cpi	r22, 0x1C	; 28
    6264:	71 05       	cpc	r23, r1
    6266:	09 f4       	brne	.+2      	; 0x626a <_Z16process_commandsv+0x4aa>
    6268:	17 c2       	rjmp	.+1070   	; 0x6698 <_Z16process_commandsv+0x8d8>
    626a:	8c f5       	brge	.+98     	; 0x62ce <_Z16process_commandsv+0x50e>
    626c:	65 31       	cpi	r22, 0x15	; 21
    626e:	71 05       	cpc	r23, r1
    6270:	09 f4       	brne	.+2      	; 0x6274 <_Z16process_commandsv+0x4b4>
    6272:	b3 c1       	rjmp	.+870    	; 0x65da <_Z16process_commandsv+0x81a>
    6274:	b4 f4       	brge	.+44     	; 0x62a2 <_Z16process_commandsv+0x4e2>
    6276:	61 31       	cpi	r22, 0x11	; 17
    6278:	71 05       	cpc	r23, r1
    627a:	09 f4       	brne	.+2      	; 0x627e <_Z16process_commandsv+0x4be>
    627c:	64 c1       	rjmp	.+712    	; 0x6546 <_Z16process_commandsv+0x786>
    627e:	34 f4       	brge	.+12     	; 0x628c <_Z16process_commandsv+0x4cc>
    6280:	62 30       	cpi	r22, 0x02	; 2
    6282:	71 05       	cpc	r23, r1
    6284:	10 f0       	brcs	.+4      	; 0x628a <_Z16process_commandsv+0x4ca>
    6286:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    628a:	fd c0       	rjmp	.+506    	; 0x6486 <_Z16process_commandsv+0x6c6>
    628c:	62 31       	cpi	r22, 0x12	; 18
    628e:	71 05       	cpc	r23, r1
    6290:	11 f4       	brne	.+4      	; 0x6296 <_Z16process_commandsv+0x4d6>
    6292:	0c 94 f6 39 	jmp	0x73ec	; 0x73ec <_Z16process_commandsv+0x162c>
    6296:	64 31       	cpi	r22, 0x14	; 20
    6298:	71 05       	cpc	r23, r1
    629a:	11 f0       	breq	.+4      	; 0x62a0 <_Z16process_commandsv+0x4e0>
    629c:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    62a0:	5c c1       	rjmp	.+696    	; 0x655a <_Z16process_commandsv+0x79a>
    62a2:	68 31       	cpi	r22, 0x18	; 24
    62a4:	71 05       	cpc	r23, r1
    62a6:	09 f4       	brne	.+2      	; 0x62aa <_Z16process_commandsv+0x4ea>
    62a8:	bc c1       	rjmp	.+888    	; 0x6622 <_Z16process_commandsv+0x862>
    62aa:	54 f4       	brge	.+20     	; 0x62c0 <_Z16process_commandsv+0x500>
    62ac:	66 31       	cpi	r22, 0x16	; 22
    62ae:	71 05       	cpc	r23, r1
    62b0:	09 f4       	brne	.+2      	; 0x62b4 <_Z16process_commandsv+0x4f4>
    62b2:	99 c1       	rjmp	.+818    	; 0x65e6 <_Z16process_commandsv+0x826>
    62b4:	67 31       	cpi	r22, 0x17	; 23
    62b6:	71 05       	cpc	r23, r1
    62b8:	11 f0       	breq	.+4      	; 0x62be <_Z16process_commandsv+0x4fe>
    62ba:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    62be:	99 c1       	rjmp	.+818    	; 0x65f2 <_Z16process_commandsv+0x832>
    62c0:	6a 31       	cpi	r22, 0x1A	; 26
    62c2:	71 05       	cpc	r23, r1
    62c4:	09 f4       	brne	.+2      	; 0x62c8 <_Z16process_commandsv+0x508>
    62c6:	c3 c1       	rjmp	.+902    	; 0x664e <_Z16process_commandsv+0x88e>
    62c8:	0c f0       	brlt	.+2      	; 0x62cc <_Z16process_commandsv+0x50c>
    62ca:	e0 c1       	rjmp	.+960    	; 0x668c <_Z16process_commandsv+0x8cc>
    62cc:	ba c1       	rjmp	.+884    	; 0x6642 <_Z16process_commandsv+0x882>
    62ce:	62 35       	cpi	r22, 0x52	; 82
    62d0:	71 05       	cpc	r23, r1
    62d2:	11 f4       	brne	.+4      	; 0x62d8 <_Z16process_commandsv+0x518>
    62d4:	0c 94 ef 39 	jmp	0x73de	; 0x73de <_Z16process_commandsv+0x161e>
    62d8:	ec f4       	brge	.+58     	; 0x6314 <_Z16process_commandsv+0x554>
    62da:	60 32       	cpi	r22, 0x20	; 32
    62dc:	71 05       	cpc	r23, r1
    62de:	09 f4       	brne	.+2      	; 0x62e2 <_Z16process_commandsv+0x522>
    62e0:	4e c2       	rjmp	.+1180   	; 0x677e <_Z16process_commandsv+0x9be>
    62e2:	54 f4       	brge	.+20     	; 0x62f8 <_Z16process_commandsv+0x538>
    62e4:	6e 31       	cpi	r22, 0x1E	; 30
    62e6:	71 05       	cpc	r23, r1
    62e8:	09 f4       	brne	.+2      	; 0x62ec <_Z16process_commandsv+0x52c>
    62ea:	0b c2       	rjmp	.+1046   	; 0x6702 <_Z16process_commandsv+0x942>
    62ec:	6f 31       	cpi	r22, 0x1F	; 31
    62ee:	71 05       	cpc	r23, r1
    62f0:	11 f0       	breq	.+4      	; 0x62f6 <_Z16process_commandsv+0x536>
    62f2:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    62f6:	a9 c2       	rjmp	.+1362   	; 0x684a <_Z16process_commandsv+0xa8a>
    62f8:	60 35       	cpi	r22, 0x50	; 80
    62fa:	71 05       	cpc	r23, r1
    62fc:	11 f4       	brne	.+4      	; 0x6302 <_Z16process_commandsv+0x542>
    62fe:	0c 94 c5 39 	jmp	0x738a	; 0x738a <_Z16process_commandsv+0x15ca>
    6302:	14 f0       	brlt	.+4      	; 0x6308 <_Z16process_commandsv+0x548>
    6304:	0c 94 d1 39 	jmp	0x73a2	; 0x73a2 <_Z16process_commandsv+0x15e2>
    6308:	6a 32       	cpi	r22, 0x2A	; 42
    630a:	71 05       	cpc	r23, r1
    630c:	11 f0       	breq	.+4      	; 0x6312 <_Z16process_commandsv+0x552>
    630e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6312:	36 c3       	rjmp	.+1644   	; 0x6980 <_Z16process_commandsv+0xbc0>
    6314:	65 35       	cpi	r22, 0x55	; 85
    6316:	71 05       	cpc	r23, r1
    6318:	11 f4       	brne	.+4      	; 0x631e <_Z16process_commandsv+0x55e>
    631a:	0c 94 41 3a 	jmp	0x7482	; 0x7482 <_Z16process_commandsv+0x16c2>
    631e:	64 f4       	brge	.+24     	; 0x6338 <_Z16process_commandsv+0x578>
    6320:	63 35       	cpi	r22, 0x53	; 83
    6322:	71 05       	cpc	r23, r1
    6324:	11 f4       	brne	.+4      	; 0x632a <_Z16process_commandsv+0x56a>
    6326:	0c 94 f2 39 	jmp	0x73e4	; 0x73e4 <_Z16process_commandsv+0x1624>
    632a:	64 35       	cpi	r22, 0x54	; 84
    632c:	71 05       	cpc	r23, r1
    632e:	11 f0       	breq	.+4      	; 0x6334 <_Z16process_commandsv+0x574>
    6330:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6334:	0c 94 f6 39 	jmp	0x73ec	; 0x73ec <_Z16process_commandsv+0x162c>
    6338:	68 36       	cpi	r22, 0x68	; 104
    633a:	71 05       	cpc	r23, r1
    633c:	09 f4       	brne	.+2      	; 0x6340 <_Z16process_commandsv+0x580>
    633e:	69 c3       	rjmp	.+1746   	; 0x6a12 <_Z16process_commandsv+0xc52>
    6340:	0c f0       	brlt	.+2      	; 0x6344 <_Z16process_commandsv+0x584>
    6342:	95 c3       	rjmp	.+1834   	; 0x6a6e <_Z16process_commandsv+0xcae>
    6344:	6c 35       	cpi	r22, 0x5C	; 92
    6346:	71 05       	cpc	r23, r1
    6348:	11 f0       	breq	.+4      	; 0x634e <_Z16process_commandsv+0x58e>
    634a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    634e:	0c 94 57 3a 	jmp	0x74ae	; 0x74ae <_Z16process_commandsv+0x16ee>
    6352:	6c 3c       	cpi	r22, 0xCC	; 204
    6354:	71 05       	cpc	r23, r1
    6356:	11 f4       	brne	.+4      	; 0x635c <_Z16process_commandsv+0x59c>
    6358:	0c 94 f4 3d 	jmp	0x7be8	; 0x7be8 <_Z16process_commandsv+0x1e28>
    635c:	0c f0       	brlt	.+2      	; 0x6360 <_Z16process_commandsv+0x5a0>
    635e:	44 c0       	rjmp	.+136    	; 0x63e8 <_Z16process_commandsv+0x628>
    6360:	67 37       	cpi	r22, 0x77	; 119
    6362:	71 05       	cpc	r23, r1
    6364:	11 f4       	brne	.+4      	; 0x636a <_Z16process_commandsv+0x5aa>
    6366:	0c 94 45 3c 	jmp	0x788a	; 0x788a <_Z16process_commandsv+0x1aca>
    636a:	ec f4       	brge	.+58     	; 0x63a6 <_Z16process_commandsv+0x5e6>
    636c:	62 37       	cpi	r22, 0x72	; 114
    636e:	71 05       	cpc	r23, r1
    6370:	11 f4       	brne	.+4      	; 0x6376 <_Z16process_commandsv+0x5b6>
    6372:	0c 94 24 3b 	jmp	0x7648	; 0x7648 <_Z16process_commandsv+0x1888>
    6376:	5c f4       	brge	.+22     	; 0x638e <_Z16process_commandsv+0x5ce>
    6378:	6b 36       	cpi	r22, 0x6B	; 107
    637a:	71 05       	cpc	r23, r1
    637c:	11 f4       	brne	.+4      	; 0x6382 <_Z16process_commandsv+0x5c2>
    637e:	0c 94 c0 39 	jmp	0x7380	; 0x7380 <_Z16process_commandsv+0x15c0>
    6382:	6d 36       	cpi	r22, 0x6D	; 109
    6384:	71 05       	cpc	r23, r1
    6386:	11 f0       	breq	.+4      	; 0x638c <_Z16process_commandsv+0x5cc>
    6388:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    638c:	c6 c4       	rjmp	.+2444   	; 0x6d1a <_Z16process_commandsv+0xf5a>
    638e:	63 37       	cpi	r22, 0x73	; 115
    6390:	71 05       	cpc	r23, r1
    6392:	11 f4       	brne	.+4      	; 0x6398 <_Z16process_commandsv+0x5d8>
    6394:	0c 94 f9 3a 	jmp	0x75f2	; 0x75f2 <_Z16process_commandsv+0x1832>
    6398:	65 37       	cpi	r22, 0x75	; 117
    639a:	71 05       	cpc	r23, r1
    639c:	11 f0       	breq	.+4      	; 0x63a2 <_Z16process_commandsv+0x5e2>
    639e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    63a2:	0c 94 10 3b 	jmp	0x7620	; 0x7620 <_Z16process_commandsv+0x1860>
    63a6:	6c 38       	cpi	r22, 0x8C	; 140
    63a8:	71 05       	cpc	r23, r1
    63aa:	09 f4       	brne	.+2      	; 0x63ae <_Z16process_commandsv+0x5ee>
    63ac:	4f c3       	rjmp	.+1694   	; 0x6a4c <_Z16process_commandsv+0xc8c>
    63ae:	64 f4       	brge	.+24     	; 0x63c8 <_Z16process_commandsv+0x608>
    63b0:	68 37       	cpi	r22, 0x78	; 120
    63b2:	71 05       	cpc	r23, r1
    63b4:	11 f4       	brne	.+4      	; 0x63ba <_Z16process_commandsv+0x5fa>
    63b6:	0c 94 3d 3c 	jmp	0x787a	; 0x787a <_Z16process_commandsv+0x1aba>
    63ba:	69 37       	cpi	r22, 0x79	; 121
    63bc:	71 05       	cpc	r23, r1
    63be:	11 f0       	breq	.+4      	; 0x63c4 <_Z16process_commandsv+0x604>
    63c0:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    63c4:	0c 94 41 3c 	jmp	0x7882	; 0x7882 <_Z16process_commandsv+0x1ac2>
    63c8:	69 3c       	cpi	r22, 0xC9	; 201
    63ca:	71 05       	cpc	r23, r1
    63cc:	11 f4       	brne	.+4      	; 0x63d2 <_Z16process_commandsv+0x612>
    63ce:	0c 94 aa 3d 	jmp	0x7b54	; 0x7b54 <_Z16process_commandsv+0x1d94>
    63d2:	6b 3c       	cpi	r22, 0xCB	; 203
    63d4:	71 05       	cpc	r23, r1
    63d6:	11 f4       	brne	.+4      	; 0x63dc <_Z16process_commandsv+0x61c>
    63d8:	0c 94 d1 3d 	jmp	0x7ba2	; 0x7ba2 <_Z16process_commandsv+0x1de2>
    63dc:	6e 3b       	cpi	r22, 0xBE	; 190
    63de:	71 05       	cpc	r23, r1
    63e0:	11 f0       	breq	.+4      	; 0x63e6 <_Z16process_commandsv+0x626>
    63e2:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    63e6:	82 c6       	rjmp	.+3332   	; 0x70ec <_Z16process_commandsv+0x132c>
    63e8:	6e 32       	cpi	r22, 0x2E	; 46
    63ea:	21 e0       	ldi	r18, 0x01	; 1
    63ec:	72 07       	cpc	r23, r18
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <_Z16process_commandsv+0x634>
    63f0:	0c 94 84 3f 	jmp	0x7f08	; 0x7f08 <_Z16process_commandsv+0x2148>
    63f4:	14 f5       	brge	.+68     	; 0x643a <_Z16process_commandsv+0x67a>
    63f6:	6c 3d       	cpi	r22, 0xDC	; 220
    63f8:	71 05       	cpc	r23, r1
    63fa:	11 f4       	brne	.+4      	; 0x6400 <_Z16process_commandsv+0x640>
    63fc:	0c 94 95 3e 	jmp	0x7d2a	; 0x7d2a <_Z16process_commandsv+0x1f6a>
    6400:	64 f4       	brge	.+24     	; 0x641a <_Z16process_commandsv+0x65a>
    6402:	6d 3c       	cpi	r22, 0xCD	; 205
    6404:	71 05       	cpc	r23, r1
    6406:	11 f4       	brne	.+4      	; 0x640c <_Z16process_commandsv+0x64c>
    6408:	0c 94 14 3e 	jmp	0x7c28	; 0x7c28 <_Z16process_commandsv+0x1e68>
    640c:	6e 3c       	cpi	r22, 0xCE	; 206
    640e:	71 05       	cpc	r23, r1
    6410:	11 f0       	breq	.+4      	; 0x6416 <_Z16process_commandsv+0x656>
    6412:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6416:	0c 94 72 3e 	jmp	0x7ce4	; 0x7ce4 <_Z16process_commandsv+0x1f24>
    641a:	6c 32       	cpi	r22, 0x2C	; 44
    641c:	91 e0       	ldi	r25, 0x01	; 1
    641e:	79 07       	cpc	r23, r25
    6420:	11 f4       	brne	.+4      	; 0x6426 <_Z16process_commandsv+0x666>
    6422:	0c 94 b3 3e 	jmp	0x7d66	; 0x7d66 <_Z16process_commandsv+0x1fa6>
    6426:	14 f0       	brlt	.+4      	; 0x642c <_Z16process_commandsv+0x66c>
    6428:	0c 94 ee 3e 	jmp	0x7ddc	; 0x7ddc <_Z16process_commandsv+0x201c>
    642c:	6d 3d       	cpi	r22, 0xDD	; 221
    642e:	71 05       	cpc	r23, r1
    6430:	11 f0       	breq	.+4      	; 0x6436 <_Z16process_commandsv+0x676>
    6432:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6436:	0c 94 a4 3e 	jmp	0x7d48	; 0x7d48 <_Z16process_commandsv+0x1f88>
    643a:	65 3f       	cpi	r22, 0xF5	; 245
    643c:	b1 e0       	ldi	r27, 0x01	; 1
    643e:	7b 07       	cpc	r23, r27
    6440:	11 f4       	brne	.+4      	; 0x6446 <_Z16process_commandsv+0x686>
    6442:	0c 94 d9 3f 	jmp	0x7fb2	; 0x7fb2 <_Z16process_commandsv+0x21f2>
    6446:	6c f4       	brge	.+26     	; 0x6462 <_Z16process_commandsv+0x6a2>
    6448:	6f 32       	cpi	r22, 0x2F	; 47
    644a:	f1 e0       	ldi	r31, 0x01	; 1
    644c:	7f 07       	cpc	r23, r31
    644e:	11 f4       	brne	.+4      	; 0x6454 <_Z16process_commandsv+0x694>
    6450:	0c 94 92 3f 	jmp	0x7f24	; 0x7f24 <_Z16process_commandsv+0x2164>
    6454:	60 39       	cpi	r22, 0x90	; 144
    6456:	71 40       	sbci	r23, 0x01	; 1
    6458:	11 f0       	breq	.+4      	; 0x645e <_Z16process_commandsv+0x69e>
    645a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    645e:	0c 94 d6 3f 	jmp	0x7fac	; 0x7fac <_Z16process_commandsv+0x21ec>
    6462:	60 3a       	cpi	r22, 0xA0	; 160
    6464:	83 e0       	ldi	r24, 0x03	; 3
    6466:	78 07       	cpc	r23, r24
    6468:	09 f4       	brne	.+2      	; 0x646c <_Z16process_commandsv+0x6ac>
    646a:	bb c1       	rjmp	.+886    	; 0x67e2 <_Z16process_commandsv+0xa22>
    646c:	67 3e       	cpi	r22, 0xE7	; 231
    646e:	93 e0       	ldi	r25, 0x03	; 3
    6470:	79 07       	cpc	r23, r25
    6472:	11 f4       	brne	.+4      	; 0x6478 <_Z16process_commandsv+0x6b8>
    6474:	0c 94 df 3f 	jmp	0x7fbe	; 0x7fbe <_Z16process_commandsv+0x21fe>
    6478:	66 3f       	cpi	r22, 0xF6	; 246
    647a:	71 40       	sbci	r23, 0x01	; 1
    647c:	11 f0       	breq	.+4      	; 0x6482 <_Z16process_commandsv+0x6c2>
    647e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6482:	0c 94 dc 3f 	jmp	0x7fb8	; 0x7fb8 <_Z16process_commandsv+0x21f8>
    {
#ifdef ULTIPANEL
    case 0: // M0 - Unconditional stop - Wait for user button press on LCD
    case 1: // M1 - Conditional stop - Wait for user button press on LCD
    {
      LCD_MESSAGEPGM(MSG_USERWAIT);
    6486:	85 e4       	ldi	r24, 0x45	; 69
    6488:	95 e0       	ldi	r25, 0x05	; 5
    648a:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
      codenum = 0;
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
    648e:	80 e5       	ldi	r24, 0x50	; 80
    6490:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6494:	88 23       	and	r24, r24
    6496:	49 f0       	breq	.+18     	; 0x64aa <_Z16process_commandsv+0x6ea>
    6498:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    649c:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    64a0:	c6 2e       	mov	r12, r22
    64a2:	d7 2e       	mov	r13, r23
    64a4:	e8 2e       	mov	r14, r24
    64a6:	f9 2e       	mov	r15, r25
    64a8:	03 c0       	rjmp	.+6      	; 0x64b0 <_Z16process_commandsv+0x6f0>
#ifdef ULTIPANEL
    case 0: // M0 - Unconditional stop - Wait for user button press on LCD
    case 1: // M1 - Conditional stop - Wait for user button press on LCD
    {
      LCD_MESSAGEPGM(MSG_USERWAIT);
      codenum = 0;
    64aa:	c1 2c       	mov	r12, r1
    64ac:	d1 2c       	mov	r13, r1
    64ae:	76 01       	movw	r14, r12
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait
    64b0:	83 e5       	ldi	r24, 0x53	; 83
    64b2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    64b6:	88 23       	and	r24, r24
    64b8:	71 f0       	breq	.+28     	; 0x64d6 <_Z16process_commandsv+0x716>
    64ba:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    64be:	20 e0       	ldi	r18, 0x00	; 0
    64c0:	30 e0       	ldi	r19, 0x00	; 0
    64c2:	4a e7       	ldi	r20, 0x7A	; 122
    64c4:	54 e4       	ldi	r21, 0x44	; 68
    64c6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    64ca:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    64ce:	c6 2e       	mov	r12, r22
    64d0:	d7 2e       	mov	r13, r23
    64d2:	e8 2e       	mov	r14, r24
    64d4:	f9 2e       	mov	r15, r25

      st_synchronize();
    64d6:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
      previous_millis_cmd = millis();
    64da:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    64de:	60 93 25 09 	sts	0x0925, r22
    64e2:	70 93 26 09 	sts	0x0926, r23
    64e6:	80 93 27 09 	sts	0x0927, r24
    64ea:	90 93 28 09 	sts	0x0928, r25
      if (codenum > 0){
    64ee:	c1 14       	cp	r12, r1
    64f0:	d1 04       	cpc	r13, r1
    64f2:	e1 04       	cpc	r14, r1
    64f4:	f1 04       	cpc	r15, r1
    64f6:	e9 f0       	breq	.+58     	; 0x6532 <_Z16process_commandsv+0x772>
        codenum += millis();  // keep track of when we started waiting
    64f8:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    64fc:	c6 0e       	add	r12, r22
    64fe:	d7 1e       	adc	r13, r23
    6500:	e8 1e       	adc	r14, r24
    6502:	f9 1e       	adc	r15, r25
        while(millis()  < codenum && !lcd_clicked()){
    6504:	05 c0       	rjmp	.+10     	; 0x6510 <_Z16process_commandsv+0x750>
          manage_heater();
    6506:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
          manage_inactivity();
    650a:	18 db       	rcall	.-2512   	; 0x5b3c <_Z17manage_inactivityv>
          lcd_update();
    650c:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>

      st_synchronize();
      previous_millis_cmd = millis();
      if (codenum > 0){
        codenum += millis();  // keep track of when we started waiting
        while(millis()  < codenum && !lcd_clicked()){
    6510:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    6514:	6c 15       	cp	r22, r12
    6516:	7d 05       	cpc	r23, r13
    6518:	8e 05       	cpc	r24, r14
    651a:	9f 05       	cpc	r25, r15
    651c:	70 f4       	brcc	.+28     	; 0x653a <_Z16process_commandsv+0x77a>
    651e:	0e 94 b7 95 	call	0x12b6e	; 0x12b6e <_Z11lcd_clickedv>
    6522:	88 23       	and	r24, r24
    6524:	81 f3       	breq	.-32     	; 0x6506 <_Z16process_commandsv+0x746>
    6526:	09 c0       	rjmp	.+18     	; 0x653a <_Z16process_commandsv+0x77a>
          manage_inactivity();
          lcd_update();
        }
      }else{
        while(!lcd_clicked()){
          manage_heater();
    6528:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
          manage_inactivity();
    652c:	07 db       	rcall	.-2546   	; 0x5b3c <_Z17manage_inactivityv>
          lcd_update();
    652e:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
          manage_heater();
          manage_inactivity();
          lcd_update();
        }
      }else{
        while(!lcd_clicked()){
    6532:	0e 94 b7 95 	call	0x12b6e	; 0x12b6e <_Z11lcd_clickedv>
    6536:	88 23       	and	r24, r24
    6538:	b9 f3       	breq	.-18     	; 0x6528 <_Z16process_commandsv+0x768>
          manage_heater();
          manage_inactivity();
          lcd_update();
        }
      }
      LCD_MESSAGEPGM(MSG_RESUMING);
    653a:	86 e5       	ldi	r24, 0x56	; 86
    653c:	95 e0       	ldi	r25, 0x05	; 5
    653e:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
    }
    break;
    6542:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
#endif
    case 17:
        LCD_MESSAGEPGM(MSG_NO_MOVE);
    6546:	85 e6       	ldi	r24, 0x65	; 101
    6548:	95 e0       	ldi	r25, 0x05	; 5
    654a:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
        enable_x();
    654e:	15 98       	cbi	0x02, 5	; 2
        enable_y();
    6550:	17 98       	cbi	0x02, 7	; 2
        enable_z();
    6552:	42 98       	cbi	0x08, 2	; 8
        enable_e0();
    6554:	a0 98       	cbi	0x14, 0	; 20
        enable_e1();
        enable_e2();
      break;
    6556:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    655a:	ee e6       	ldi	r30, 0x6E	; 110
    655c:	f5 e0       	ldi	r31, 0x05	; 5
    655e:	34 91       	lpm	r19, Z
  while(ch)
    6560:	33 23       	and	r19, r19
    6562:	81 f0       	breq	.+32     	; 0x6584 <_Z16process_commandsv+0x7c4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6564:	a0 ec       	ldi	r26, 0xC0	; 192
    6566:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6568:	86 ec       	ldi	r24, 0xC6	; 198
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    656e:	2c 91       	ld	r18, X
    6570:	25 ff       	sbrs	r18, 5
    6572:	fd cf       	rjmp	.-6      	; 0x656e <_Z16process_commandsv+0x7ae>
        ;

      M_UDRx = c;
    6574:	fc 01       	movw	r30, r24
    6576:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6578:	4f 5f       	subi	r20, 0xFF	; 255
    657a:	5f 4f       	sbci	r21, 0xFF	; 255
    657c:	fa 01       	movw	r30, r20
    657e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6580:	31 11       	cpse	r19, r1
    6582:	f5 cf       	rjmp	.-22     	; 0x656e <_Z16process_commandsv+0x7ae>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6584:	e0 ec       	ldi	r30, 0xC0	; 192
    6586:	f0 e0       	ldi	r31, 0x00	; 0
    6588:	80 81       	ld	r24, Z
    658a:	85 ff       	sbrs	r24, 5
    658c:	fd cf       	rjmp	.-6      	; 0x6588 <_Z16process_commandsv+0x7c8>
        ;

      M_UDRx = c;
    658e:	8a e0       	ldi	r24, 0x0A	; 10
    6590:	80 93 c6 00 	sts	0x00C6, r24

#ifdef SDSUPPORT
    case 20: // M20 - list SD card
      SERIAL_PROTOCOLLNPGM(MSG_BEGIN_FILE_LIST);
      card.ls();
    6594:	82 e9       	ldi	r24, 0x92	; 146
    6596:	95 e0       	ldi	r25, 0x05	; 5
    6598:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN10CardReader2lsEv>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    659c:	ee e7       	ldi	r30, 0x7E	; 126
    659e:	f5 e0       	ldi	r31, 0x05	; 5
    65a0:	34 91       	lpm	r19, Z
  while(ch)
    65a2:	33 23       	and	r19, r19
    65a4:	81 f0       	breq	.+32     	; 0x65c6 <_Z16process_commandsv+0x806>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    65a6:	a0 ec       	ldi	r26, 0xC0	; 192
    65a8:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    65aa:	86 ec       	ldi	r24, 0xC6	; 198
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    65b0:	2c 91       	ld	r18, X
    65b2:	25 ff       	sbrs	r18, 5
    65b4:	fd cf       	rjmp	.-6      	; 0x65b0 <_Z16process_commandsv+0x7f0>
        ;

      M_UDRx = c;
    65b6:	fc 01       	movw	r30, r24
    65b8:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    65ba:	4f 5f       	subi	r20, 0xFF	; 255
    65bc:	5f 4f       	sbci	r21, 0xFF	; 255
    65be:	fa 01       	movw	r30, r20
    65c0:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    65c2:	31 11       	cpse	r19, r1
    65c4:	f5 cf       	rjmp	.-22     	; 0x65b0 <_Z16process_commandsv+0x7f0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    65c6:	e0 ec       	ldi	r30, 0xC0	; 192
    65c8:	f0 e0       	ldi	r31, 0x00	; 0
    65ca:	80 81       	ld	r24, Z
    65cc:	85 ff       	sbrs	r24, 5
    65ce:	fd cf       	rjmp	.-6      	; 0x65ca <_Z16process_commandsv+0x80a>
        ;

      M_UDRx = c;
    65d0:	8a e0       	ldi	r24, 0x0A	; 10
    65d2:	80 93 c6 00 	sts	0x00C6, r24
    65d6:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      SERIAL_PROTOCOLLNPGM(MSG_END_FILE_LIST);
      break;
    case 21: // M21 - init SD card

      card.initsd();
    65da:	82 e9       	ldi	r24, 0x92	; 146
    65dc:	95 e0       	ldi	r25, 0x05	; 5
    65de:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN10CardReader6initsdEv>

      break;
    65e2:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 22: //M22 - release SD card
      card.release();
    65e6:	82 e9       	ldi	r24, 0x92	; 146
    65e8:	95 e0       	ldi	r25, 0x05	; 5
    65ea:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN10CardReader7releaseEv>

      break;
    65ee:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 23: //M23 - Select file
      starpos = (strchr(strchr_pointer + 4,'*'));
    65f2:	00 91 1b 09 	lds	r16, 0x091B
    65f6:	10 91 1c 09 	lds	r17, 0x091C
    65fa:	0c 5f       	subi	r16, 0xFC	; 252
    65fc:	1f 4f       	sbci	r17, 0xFF	; 255
    65fe:	6a e2       	ldi	r22, 0x2A	; 42
    6600:	70 e0       	ldi	r23, 0x00	; 0
    6602:	c8 01       	movw	r24, r16
    6604:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
      if(starpos!=NULL)
    6608:	00 97       	sbiw	r24, 0x00	; 0
    660a:	19 f0       	breq	.+6      	; 0x6612 <_Z16process_commandsv+0x852>
        *(starpos-1)='\0';
    660c:	fc 01       	movw	r30, r24
    660e:	31 97       	sbiw	r30, 0x01	; 1
    6610:	10 82       	st	Z, r1
      card.openFile(strchr_pointer + 4,true);
    6612:	41 e0       	ldi	r20, 0x01	; 1
    6614:	b8 01       	movw	r22, r16
    6616:	82 e9       	ldi	r24, 0x92	; 146
    6618:	95 e0       	ldi	r25, 0x05	; 5
    661a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN10CardReader8openFileEPcb>
      break;
    661e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 24: //M24 - Start SD print
      card.startFileprint();
    6622:	82 e9       	ldi	r24, 0x92	; 146
    6624:	95 e0       	ldi	r25, 0x05	; 5
    6626:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10CardReader14startFileprintEv>
      starttime=millis();
    662a:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    662e:	60 93 5d 05 	sts	0x055D, r22
    6632:	70 93 5e 05 	sts	0x055E, r23
    6636:	80 93 5f 05 	sts	0x055F, r24
    663a:	90 93 60 05 	sts	0x0560, r25
      break;
    663e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 25: //M25 - Pause SD print
      card.pauseSDPrint();
    6642:	82 e9       	ldi	r24, 0x92	; 146
    6644:	95 e0       	ldi	r25, 0x05	; 5
    6646:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN10CardReader12pauseSDPrintEv>
      break;
    664a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 26: //M26 - Set SD index
      if(card.cardOK && code_seen('S')) {
    664e:	80 91 95 05 	lds	r24, 0x0595
    6652:	88 23       	and	r24, r24
    6654:	11 f4       	brne	.+4      	; 0x665a <_Z16process_commandsv+0x89a>
    6656:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    665a:	83 e5       	ldi	r24, 0x53	; 83
    665c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6660:	88 23       	and	r24, r24
    6662:	11 f4       	brne	.+4      	; 0x6668 <_Z16process_commandsv+0x8a8>
    6664:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        card.setIndex(code_value_long());
    6668:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <_Z15code_value_longv>
    666c:	46 2f       	mov	r20, r22
    666e:	57 2f       	mov	r21, r23
  FORCE_INLINE void setIndex(long index) {sdpos = index;file.seekSet(index);};
    6670:	e3 e8       	ldi	r30, 0x83	; 131
    6672:	f7 e0       	ldi	r31, 0x07	; 7
    6674:	60 83       	st	Z, r22
    6676:	71 83       	std	Z+1, r23	; 0x01
    6678:	82 83       	std	Z+2, r24	; 0x02
    667a:	93 83       	std	Z+3, r25	; 0x03
    667c:	68 2f       	mov	r22, r24
    667e:	79 2f       	mov	r23, r25
    6680:	80 e6       	ldi	r24, 0x60	; 96
    6682:	97 e0       	ldi	r25, 0x07	; 7
    6684:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    6688:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      }
      break;
    case 27: //M27 - Get SD status
      card.getStatus();
    668c:	82 e9       	ldi	r24, 0x92	; 146
    668e:	95 e0       	ldi	r25, 0x05	; 5
    6690:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN10CardReader9getStatusEv>
      break;
    6694:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 28: //M28 - Start SD write
      starpos = (strchr(strchr_pointer + 4,'*'));
    6698:	80 91 1b 09 	lds	r24, 0x091B
    669c:	90 91 1c 09 	lds	r25, 0x091C
    66a0:	6a e2       	ldi	r22, 0x2A	; 42
    66a2:	70 e0       	ldi	r23, 0x00	; 0
    66a4:	04 96       	adiw	r24, 0x04	; 4
    66a6:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    66aa:	8c 01       	movw	r16, r24
      if(starpos != NULL){
    66ac:	00 97       	sbiw	r24, 0x00	; 0
    66ae:	e1 f0       	breq	.+56     	; 0x66e8 <_Z16process_commandsv+0x928>
        char* npos = strchr(cmdbuffer[bufindr], 'N');
    66b0:	20 91 15 09 	lds	r18, 0x0915
    66b4:	30 91 16 09 	lds	r19, 0x0916
    66b8:	40 e6       	ldi	r20, 0x60	; 96
    66ba:	42 9f       	mul	r20, r18
    66bc:	c0 01       	movw	r24, r0
    66be:	43 9f       	mul	r20, r19
    66c0:	90 0d       	add	r25, r0
    66c2:	11 24       	eor	r1, r1
    66c4:	6e e4       	ldi	r22, 0x4E	; 78
    66c6:	70 e0       	ldi	r23, 0x00	; 0
    66c8:	8f 56       	subi	r24, 0x6F	; 111
    66ca:	98 4f       	sbci	r25, 0xF8	; 248
    66cc:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
        strchr_pointer = strchr(npos,' ') + 1;
    66d0:	60 e2       	ldi	r22, 0x20	; 32
    66d2:	70 e0       	ldi	r23, 0x00	; 0
    66d4:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    66d8:	01 96       	adiw	r24, 0x01	; 1
    66da:	90 93 1c 09 	sts	0x091C, r25
    66de:	80 93 1b 09 	sts	0x091B, r24
        *(starpos-1) = '\0';
    66e2:	f8 01       	movw	r30, r16
    66e4:	31 97       	sbiw	r30, 0x01	; 1
    66e6:	10 82       	st	Z, r1
      }
      card.openFile(strchr_pointer+4,false);
    66e8:	60 91 1b 09 	lds	r22, 0x091B
    66ec:	70 91 1c 09 	lds	r23, 0x091C
    66f0:	6c 5f       	subi	r22, 0xFC	; 252
    66f2:	7f 4f       	sbci	r23, 0xFF	; 255
    66f4:	40 e0       	ldi	r20, 0x00	; 0
    66f6:	82 e9       	ldi	r24, 0x92	; 146
    66f8:	95 e0       	ldi	r25, 0x05	; 5
    66fa:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN10CardReader8openFileEPcb>
      break;
    66fe:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 29: //M29 - Stop SD write
      //processed in write to file routine above
      //card,saving = false;
      break;
    case 30: //M30 <filename> Delete File
      if (card.cardOK){
    6702:	80 91 95 05 	lds	r24, 0x0595
    6706:	88 23       	and	r24, r24
    6708:	11 f4       	brne	.+4      	; 0x670e <_Z16process_commandsv+0x94e>
    670a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        card.closefile();
    670e:	82 e9       	ldi	r24, 0x92	; 146
    6710:	95 e0       	ldi	r25, 0x05	; 5
    6712:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN10CardReader9closefileEv>
        starpos = (strchr(strchr_pointer + 4,'*'));
    6716:	80 91 1b 09 	lds	r24, 0x091B
    671a:	90 91 1c 09 	lds	r25, 0x091C
    671e:	6a e2       	ldi	r22, 0x2A	; 42
    6720:	70 e0       	ldi	r23, 0x00	; 0
    6722:	04 96       	adiw	r24, 0x04	; 4
    6724:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    6728:	8c 01       	movw	r16, r24
        if(starpos != NULL){
    672a:	00 97       	sbiw	r24, 0x00	; 0
    672c:	e1 f0       	breq	.+56     	; 0x6766 <_Z16process_commandsv+0x9a6>
          char* npos = strchr(cmdbuffer[bufindr], 'N');
    672e:	20 91 15 09 	lds	r18, 0x0915
    6732:	30 91 16 09 	lds	r19, 0x0916
    6736:	40 e6       	ldi	r20, 0x60	; 96
    6738:	42 9f       	mul	r20, r18
    673a:	c0 01       	movw	r24, r0
    673c:	43 9f       	mul	r20, r19
    673e:	90 0d       	add	r25, r0
    6740:	11 24       	eor	r1, r1
    6742:	6e e4       	ldi	r22, 0x4E	; 78
    6744:	70 e0       	ldi	r23, 0x00	; 0
    6746:	8f 56       	subi	r24, 0x6F	; 111
    6748:	98 4f       	sbci	r25, 0xF8	; 248
    674a:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
          strchr_pointer = strchr(npos,' ') + 1;
    674e:	60 e2       	ldi	r22, 0x20	; 32
    6750:	70 e0       	ldi	r23, 0x00	; 0
    6752:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    6756:	01 96       	adiw	r24, 0x01	; 1
    6758:	90 93 1c 09 	sts	0x091C, r25
    675c:	80 93 1b 09 	sts	0x091B, r24
          *(starpos-1) = '\0';
    6760:	f8 01       	movw	r30, r16
    6762:	31 97       	sbiw	r30, 0x01	; 1
    6764:	10 82       	st	Z, r1
        }
        card.removeFile(strchr_pointer + 4);
    6766:	60 91 1b 09 	lds	r22, 0x091B
    676a:	70 91 1c 09 	lds	r23, 0x091C
    676e:	6c 5f       	subi	r22, 0xFC	; 252
    6770:	7f 4f       	sbci	r23, 0xFF	; 255
    6772:	82 e9       	ldi	r24, 0x92	; 146
    6774:	95 e0       	ldi	r25, 0x05	; 5
    6776:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN10CardReader10removeFileEPc>
    677a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      }
      break;
    case 32: //M32 - Select file and start SD print
      if(card.sdprinting) {
    677e:	80 91 94 05 	lds	r24, 0x0594
    6782:	88 23       	and	r24, r24
    6784:	41 f0       	breq	.+16     	; 0x6796 <_Z16process_commandsv+0x9d6>
        st_synchronize();
    6786:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
        card.closefile();
    678a:	82 e9       	ldi	r24, 0x92	; 146
    678c:	95 e0       	ldi	r25, 0x05	; 5
    678e:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN10CardReader9closefileEv>
        card.sdprinting = false;
    6792:	10 92 94 05 	sts	0x0594, r1
      }
      starpos = (strchr(strchr_pointer + 4,'*'));
    6796:	00 91 1b 09 	lds	r16, 0x091B
    679a:	10 91 1c 09 	lds	r17, 0x091C
    679e:	0c 5f       	subi	r16, 0xFC	; 252
    67a0:	1f 4f       	sbci	r17, 0xFF	; 255
    67a2:	6a e2       	ldi	r22, 0x2A	; 42
    67a4:	70 e0       	ldi	r23, 0x00	; 0
    67a6:	c8 01       	movw	r24, r16
    67a8:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
      if(starpos!=NULL)
    67ac:	00 97       	sbiw	r24, 0x00	; 0
    67ae:	19 f0       	breq	.+6      	; 0x67b6 <_Z16process_commandsv+0x9f6>
        *(starpos-1)='\0';
    67b0:	fc 01       	movw	r30, r24
    67b2:	31 97       	sbiw	r30, 0x01	; 1
    67b4:	10 82       	st	Z, r1
      card.openFile(strchr_pointer + 4,true);
    67b6:	41 e0       	ldi	r20, 0x01	; 1
    67b8:	b8 01       	movw	r22, r16
    67ba:	82 e9       	ldi	r24, 0x92	; 146
    67bc:	95 e0       	ldi	r25, 0x05	; 5
    67be:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN10CardReader8openFileEPcb>
      card.startFileprint();
    67c2:	82 e9       	ldi	r24, 0x92	; 146
    67c4:	95 e0       	ldi	r25, 0x05	; 5
    67c6:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10CardReader14startFileprintEv>
      starttime=millis();
    67ca:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    67ce:	60 93 5d 05 	sts	0x055D, r22
    67d2:	70 93 5e 05 	sts	0x055E, r23
    67d6:	80 93 5f 05 	sts	0x055F, r24
    67da:	90 93 60 05 	sts	0x0560, r25
      break;
    67de:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 928: //M928 - Start SD write
      starpos = (strchr(strchr_pointer + 5,'*'));
    67e2:	80 91 1b 09 	lds	r24, 0x091B
    67e6:	90 91 1c 09 	lds	r25, 0x091C
    67ea:	6a e2       	ldi	r22, 0x2A	; 42
    67ec:	70 e0       	ldi	r23, 0x00	; 0
    67ee:	05 96       	adiw	r24, 0x05	; 5
    67f0:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    67f4:	8c 01       	movw	r16, r24
      if(starpos != NULL){
    67f6:	00 97       	sbiw	r24, 0x00	; 0
    67f8:	e1 f0       	breq	.+56     	; 0x6832 <_Z16process_commandsv+0xa72>
        char* npos = strchr(cmdbuffer[bufindr], 'N');
    67fa:	20 91 15 09 	lds	r18, 0x0915
    67fe:	30 91 16 09 	lds	r19, 0x0916
    6802:	40 e6       	ldi	r20, 0x60	; 96
    6804:	42 9f       	mul	r20, r18
    6806:	c0 01       	movw	r24, r0
    6808:	43 9f       	mul	r20, r19
    680a:	90 0d       	add	r25, r0
    680c:	11 24       	eor	r1, r1
    680e:	6e e4       	ldi	r22, 0x4E	; 78
    6810:	70 e0       	ldi	r23, 0x00	; 0
    6812:	8f 56       	subi	r24, 0x6F	; 111
    6814:	98 4f       	sbci	r25, 0xF8	; 248
    6816:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
        strchr_pointer = strchr(npos,' ') + 1;
    681a:	60 e2       	ldi	r22, 0x20	; 32
    681c:	70 e0       	ldi	r23, 0x00	; 0
    681e:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
    6822:	01 96       	adiw	r24, 0x01	; 1
    6824:	90 93 1c 09 	sts	0x091C, r25
    6828:	80 93 1b 09 	sts	0x091B, r24
        *(starpos-1) = '\0';
    682c:	f8 01       	movw	r30, r16
    682e:	31 97       	sbiw	r30, 0x01	; 1
    6830:	10 82       	st	Z, r1
      }
      card.openLogFile(strchr_pointer+5);
    6832:	60 91 1b 09 	lds	r22, 0x091B
    6836:	70 91 1c 09 	lds	r23, 0x091C
    683a:	6b 5f       	subi	r22, 0xFB	; 251
    683c:	7f 4f       	sbci	r23, 0xFF	; 255
    683e:	82 e9       	ldi	r24, 0x92	; 146
    6840:	95 e0       	ldi	r25, 0x05	; 5
    6842:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN10CardReader11openLogFileEPc>
      break;
    6846:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>

#endif //SDSUPPORT

    case 31: //M31 take time since the start of the SD print or an M109 command
      {
      stoptime=millis();
    684a:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    684e:	60 93 59 05 	sts	0x0559, r22
    6852:	70 93 5a 05 	sts	0x055A, r23
    6856:	80 93 5b 05 	sts	0x055B, r24
    685a:	90 93 5c 05 	sts	0x055C, r25
      char time[30];
      unsigned long t=(stoptime-starttime)/1000;
    685e:	00 91 5d 05 	lds	r16, 0x055D
    6862:	10 91 5e 05 	lds	r17, 0x055E
    6866:	20 91 5f 05 	lds	r18, 0x055F
    686a:	30 91 60 05 	lds	r19, 0x0560
    686e:	60 1b       	sub	r22, r16
    6870:	71 0b       	sbc	r23, r17
    6872:	82 0b       	sbc	r24, r18
    6874:	93 0b       	sbc	r25, r19
    6876:	28 ee       	ldi	r18, 0xE8	; 232
    6878:	33 e0       	ldi	r19, 0x03	; 3
    687a:	40 e0       	ldi	r20, 0x00	; 0
    687c:	50 e0       	ldi	r21, 0x00	; 0
    687e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
      int sec,min;
      min=t/60;
      sec=t%60;
    6882:	ca 01       	movw	r24, r20
    6884:	b9 01       	movw	r22, r18
    6886:	2c e3       	ldi	r18, 0x3C	; 60
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	40 e0       	ldi	r20, 0x00	; 0
    688c:	50 e0       	ldi	r21, 0x00	; 0
    688e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
      sprintf_P(time, PSTR("%i min, %i sec"), min, sec);
    6892:	7f 93       	push	r23
    6894:	6f 93       	push	r22
    6896:	3f 93       	push	r19
    6898:	2f 93       	push	r18
    689a:	8c e8       	ldi	r24, 0x8C	; 140
    689c:	95 e0       	ldi	r25, 0x05	; 5
    689e:	9f 93       	push	r25
    68a0:	8f 93       	push	r24
    68a2:	ce 01       	movw	r24, r28
    68a4:	01 96       	adiw	r24, 0x01	; 1
    68a6:	9f 93       	push	r25
    68a8:	8f 93       	push	r24
    68aa:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <sprintf_P>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    68ae:	e5 ec       	ldi	r30, 0xC5	; 197
    68b0:	f2 e0       	ldi	r31, 0x02	; 2
    68b2:	34 91       	lpm	r19, Z
  while(ch)
    68b4:	0f b6       	in	r0, 0x3f	; 63
    68b6:	f8 94       	cli
    68b8:	de bf       	out	0x3e, r29	; 62
    68ba:	0f be       	out	0x3f, r0	; 63
    68bc:	cd bf       	out	0x3d, r28	; 61
    68be:	33 23       	and	r19, r19
    68c0:	81 f0       	breq	.+32     	; 0x68e2 <_Z16process_commandsv+0xb22>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    68c2:	a0 ec       	ldi	r26, 0xC0	; 192
    68c4:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    68c6:	86 ec       	ldi	r24, 0xC6	; 198
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    68cc:	2c 91       	ld	r18, X
    68ce:	25 ff       	sbrs	r18, 5
    68d0:	fd cf       	rjmp	.-6      	; 0x68cc <_Z16process_commandsv+0xb0c>
        ;

      M_UDRx = c;
    68d2:	fc 01       	movw	r30, r24
    68d4:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    68d6:	4f 5f       	subi	r20, 0xFF	; 255
    68d8:	5f 4f       	sbci	r21, 0xFF	; 255
    68da:	fa 01       	movw	r30, r20
    68dc:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    68de:	31 11       	cpse	r19, r1
    68e0:	f5 cf       	rjmp	.-22     	; 0x68cc <_Z16process_commandsv+0xb0c>
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    68e2:	39 81       	ldd	r19, Y+1	; 0x01
    68e4:	33 23       	and	r19, r19
    68e6:	89 f0       	breq	.+34     	; 0x690a <_Z16process_commandsv+0xb4a>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    68e8:	de 01       	movw	r26, r28
    68ea:	12 96       	adiw	r26, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    68ec:	e0 ec       	ldi	r30, 0xC0	; 192
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    68f0:	86 ec       	ldi	r24, 0xC6	; 198
    68f2:	90 e0       	ldi	r25, 0x00	; 0
    68f4:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    68f6:	20 81       	ld	r18, Z
    68f8:	25 ff       	sbrs	r18, 5
    68fa:	fd cf       	rjmp	.-6      	; 0x68f6 <_Z16process_commandsv+0xb36>
        ;

      M_UDRx = c;
    68fc:	dc 01       	movw	r26, r24
    68fe:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    6900:	da 01       	movw	r26, r20
    6902:	3d 91       	ld	r19, X+
    6904:	ad 01       	movw	r20, r26
    6906:	31 11       	cpse	r19, r1
    6908:	f6 cf       	rjmp	.-20     	; 0x68f6 <_Z16process_commandsv+0xb36>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    690a:	e0 ec       	ldi	r30, 0xC0	; 192
    690c:	f0 e0       	ldi	r31, 0x00	; 0
    690e:	80 81       	ld	r24, Z
    6910:	85 ff       	sbrs	r24, 5
    6912:	fd cf       	rjmp	.-6      	; 0x690e <_Z16process_commandsv+0xb4e>
        ;

      M_UDRx = c;
    6914:	8a e0       	ldi	r24, 0x0A	; 10
    6916:	80 93 c6 00 	sts	0x00C6, r24
      min=t/60;
      sec=t%60;
      sprintf_P(time, PSTR("%i min, %i sec"), min, sec);
      SERIAL_ECHO_START;
      SERIAL_ECHOLN(time);
      lcd_setstatus(time);
    691a:	ce 01       	movw	r24, r28
    691c:	01 96       	adiw	r24, 0x01	; 1
    691e:	0e 94 28 94 	call	0x12850	; 0x12850 <_Z13lcd_setstatusPKc>
void setWatch();
void updatePID();

FORCE_INLINE void autotempShutdown(){
 #ifdef AUTOTEMP
 if(autotemp_enabled)
    6922:	80 91 29 0e 	lds	r24, 0x0E29
    6926:	88 23       	and	r24, r24
    6928:	11 f4       	brne	.+4      	; 0x692e <_Z16process_commandsv+0xb6e>
    692a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
 {
  autotemp_enabled=false;
    692e:	10 92 29 0e 	sts	0x0E29, r1
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    6932:	00 91 63 05 	lds	r16, 0x0563
    6936:	10 e0       	ldi	r17, 0x00	; 0
    6938:	f8 01       	movw	r30, r16
    693a:	ee 0f       	add	r30, r30
    693c:	ff 1f       	adc	r31, r31
    693e:	e7 5e       	subi	r30, 0xE7	; 231
    6940:	fe 4e       	sbci	r31, 0xEE	; 238
    6942:	60 81       	ld	r22, Z
    6944:	71 81       	ldd	r23, Z+1	; 0x01
    6946:	88 27       	eor	r24, r24
    6948:	77 fd       	sbrc	r23, 7
    694a:	80 95       	com	r24
    694c:	98 2f       	mov	r25, r24
    694e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
FORCE_INLINE void autotempShutdown(){
 #ifdef AUTOTEMP
 if(autotemp_enabled)
 {
  autotemp_enabled=false;
  if(degTargetHotend(active_extruder)>autotemp_min)
    6952:	20 91 42 02 	lds	r18, 0x0242
    6956:	30 91 43 02 	lds	r19, 0x0243
    695a:	40 91 44 02 	lds	r20, 0x0244
    695e:	50 91 45 02 	lds	r21, 0x0245
    6962:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    6966:	18 16       	cp	r1, r24
    6968:	14 f0       	brlt	.+4      	; 0x696e <_Z16process_commandsv+0xbae>
    696a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
FORCE_INLINE float degTargetBed() {   
  return target_temperature_bed;
};

FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  
  target_temperature[extruder] = celsius;
    696e:	f8 01       	movw	r30, r16
    6970:	ee 0f       	add	r30, r30
    6972:	ff 1f       	adc	r31, r31
    6974:	e7 5e       	subi	r30, 0xE7	; 231
    6976:	fe 4e       	sbci	r31, 0xEE	; 238
    6978:	11 82       	std	Z+1, r1	; 0x01
    697a:	10 82       	st	Z, r1
      autotempShutdown();
      }
      break;
    697c:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 42: //M42 -Change pin status via gcode
      if (code_seen('S'))
    6980:	83 e5       	ldi	r24, 0x53	; 83
    6982:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6986:	88 23       	and	r24, r24
    6988:	11 f4       	brne	.+4      	; 0x698e <_Z16process_commandsv+0xbce>
    698a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      {
        int pin_status = code_value();
    698e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6992:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6996:	8b 01       	movw	r16, r22
        int pin_number = LED_PIN;
        if (code_seen('P') && pin_status >= 0 && pin_status <= 255)
    6998:	80 e5       	ldi	r24, 0x50	; 80
    699a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    699e:	88 23       	and	r24, r24
    69a0:	11 f4       	brne	.+4      	; 0x69a6 <_Z16process_commandsv+0xbe6>
    69a2:	0c 94 84 41 	jmp	0x8308	; 0x8308 <_Z16process_commandsv+0x2548>
    69a6:	11 23       	and	r17, r17
    69a8:	14 f4       	brge	.+4      	; 0x69ae <_Z16process_commandsv+0xbee>
    69aa:	0c 94 8a 41 	jmp	0x8314	; 0x8314 <_Z16process_commandsv+0x2554>
    69ae:	0f 3f       	cpi	r16, 0xFF	; 255
    69b0:	11 05       	cpc	r17, r1
    69b2:	09 f0       	breq	.+2      	; 0x69b6 <_Z16process_commandsv+0xbf6>
    69b4:	14 f4       	brge	.+4      	; 0x69ba <_Z16process_commandsv+0xbfa>
    69b6:	0c 94 1b 41 	jmp	0x8236	; 0x8236 <_Z16process_commandsv+0x2476>
      break;
    case 42: //M42 -Change pin status via gcode
      if (code_seen('S'))
      {
        int pin_status = code_value();
        int pin_number = LED_PIN;
    69ba:	0f 2e       	mov	r0, r31
    69bc:	fd e0       	ldi	r31, 0x0D	; 13
    69be:	ef 2e       	mov	r14, r31
    69c0:	f1 2c       	mov	r15, r1
    69c2:	f0 2d       	mov	r31, r0
    69c4:	0c 94 8f 41 	jmp	0x831e	; 0x831e <_Z16process_commandsv+0x255e>
        if (code_seen('P') && pin_status >= 0 && pin_status <= 255)
          pin_number = code_value();
        for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++)
        {
          if (sensitive_pins[i] == pin_number)
    69c8:	21 91       	ld	r18, Z+
    69ca:	31 91       	ld	r19, Z+
    69cc:	2e 15       	cp	r18, r14
    69ce:	3f 05       	cpc	r19, r15
    69d0:	11 f4       	brne	.+4      	; 0x69d6 <_Z16process_commandsv+0xc16>
    69d2:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      {
        int pin_status = code_value();
        int pin_number = LED_PIN;
        if (code_seen('P') && pin_status >= 0 && pin_status <= 255)
          pin_number = code_value();
        for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++)
    69d6:	e8 17       	cp	r30, r24
    69d8:	f9 07       	cpc	r31, r25
    69da:	b1 f7       	brne	.-20     	; 0x69c8 <_Z16process_commandsv+0xc08>
            pin_number = -1;
            break;
          }
        }
      #if defined(FAN_PIN) && FAN_PIN > -1
        if (pin_number == FAN_PIN)
    69dc:	b7 e0       	ldi	r27, 0x07	; 7
    69de:	eb 16       	cp	r14, r27
    69e0:	f1 04       	cpc	r15, r1
    69e2:	29 f4       	brne	.+10     	; 0x69ee <_Z16process_commandsv+0xc2e>
          fanSpeed = pin_status;
    69e4:	10 93 62 05 	sts	0x0562, r17
    69e8:	00 93 61 05 	sts	0x0561, r16
    69ec:	04 c0       	rjmp	.+8      	; 0x69f6 <_Z16process_commandsv+0xc36>
      #endif
        if (pin_number > -1)
    69ee:	ff 20       	and	r15, r15
    69f0:	14 f4       	brge	.+4      	; 0x69f6 <_Z16process_commandsv+0xc36>
    69f2:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        {
          pinMode(pin_number, OUTPUT);
    69f6:	61 e0       	ldi	r22, 0x01	; 1
    69f8:	8e 2d       	mov	r24, r14
    69fa:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
          digitalWrite(pin_number, pin_status);
    69fe:	60 2f       	mov	r22, r16
    6a00:	8e 2d       	mov	r24, r14
    6a02:	0e 94 67 bc 	call	0x178ce	; 0x178ce <digitalWrite>
          analogWrite(pin_number, pin_status);
    6a06:	b8 01       	movw	r22, r16
    6a08:	8e 2d       	mov	r24, r14
    6a0a:	0e 94 d6 ba 	call	0x175ac	; 0x175ac <analogWrite>
    6a0e:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        }
      }
     break;
    case 104: // M104
      if(setTargetedHotend(104)){
    6a12:	88 e6       	ldi	r24, 0x68	; 104
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	45 d9       	rcall	.-3446   	; 0x5ca2 <_Z17setTargetedHotendi>
    6a18:	81 11       	cpse	r24, r1
    6a1a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        break;
      }
      if (code_seen('S')) setTargetHotend(code_value(), tmp_extruder);
    6a1e:	83 e5       	ldi	r24, 0x53	; 83
    6a20:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6a24:	88 23       	and	r24, r24
    6a26:	71 f0       	breq	.+28     	; 0x6a44 <_Z16process_commandsv+0xc84>
    6a28:	00 91 3e 09 	lds	r16, 0x093E
    6a2c:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6a30:	10 e0       	ldi	r17, 0x00	; 0
    6a32:	00 0f       	add	r16, r16
    6a34:	11 1f       	adc	r17, r17
    6a36:	07 5e       	subi	r16, 0xE7	; 231
    6a38:	1e 4e       	sbci	r17, 0xEE	; 238
    6a3a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6a3e:	f8 01       	movw	r30, r16
    6a40:	71 83       	std	Z+1, r23	; 0x01
    6a42:	60 83       	st	Z, r22
#ifdef DUAL_X_CARRIAGE
      if (dual_x_carriage_mode == DXC_DUPLICATION_MODE && tmp_extruder == 0)
        setTargetHotend1(code_value() == 0.0 ? 0.0 : code_value() + duplicate_extruder_temp_offset);
#endif          
      setWatch();
    6a44:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <_Z8setWatchv>
      break;
    6a48:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 140: // M140 set bed temp
      if (code_seen('S')) setTargetBed(code_value());
    6a4c:	83 e5       	ldi	r24, 0x53	; 83
    6a4e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6a52:	88 23       	and	r24, r24
    6a54:	11 f4       	brne	.+4      	; 0x6a5a <_Z16process_commandsv+0xc9a>
    6a56:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    6a5a:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
};

FORCE_INLINE void setTargetBed(const float &celsius) {  
  target_temperature_bed = celsius;
    6a5e:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6a62:	70 93 18 11 	sts	0x1118, r23
    6a66:	60 93 17 11 	sts	0x1117, r22
    6a6a:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
      break;
    case 105 : // M105
      if(setTargetedHotend(105)){
    6a6e:	89 e6       	ldi	r24, 0x69	; 105
    6a70:	90 e0       	ldi	r25, 0x00	; 0
    6a72:	17 d9       	rcall	.-3538   	; 0x5ca2 <_Z17setTargetedHotendi>
    6a74:	81 11       	cpse	r24, r1
    6a76:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6a7a:	eb e9       	ldi	r30, 0x9B	; 155
    6a7c:	f5 e0       	ldi	r31, 0x05	; 5
    6a7e:	34 91       	lpm	r19, Z
  while(ch)
    6a80:	33 23       	and	r19, r19
    6a82:	81 f0       	breq	.+32     	; 0x6aa4 <_Z16process_commandsv+0xce4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6a84:	a0 ec       	ldi	r26, 0xC0	; 192
    6a86:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6a88:	86 ec       	ldi	r24, 0xC6	; 198
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6a8e:	2c 91       	ld	r18, X
    6a90:	25 ff       	sbrs	r18, 5
    6a92:	fd cf       	rjmp	.-6      	; 0x6a8e <_Z16process_commandsv+0xcce>
        ;

      M_UDRx = c;
    6a94:	fc 01       	movw	r30, r24
    6a96:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6a98:	4f 5f       	subi	r20, 0xFF	; 255
    6a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a9c:	fa 01       	movw	r30, r20
    6a9e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6aa0:	31 11       	cpse	r19, r1
    6aa2:	f5 cf       	rjmp	.-22     	; 0x6a8e <_Z16process_commandsv+0xcce>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    6aa4:	e0 91 3e 09 	lds	r30, 0x093E
    6aa8:	f0 e0       	ldi	r31, 0x00	; 0
    6aaa:	ee 0f       	add	r30, r30
    6aac:	ff 1f       	adc	r31, r31
    6aae:	ee 0f       	add	r30, r30
    6ab0:	ff 1f       	adc	r31, r31
    6ab2:	ef 5e       	subi	r30, 0xEF	; 239
    6ab4:	fe 4e       	sbci	r31, 0xEE	; 238
        break;
        }
      #if defined(TEMP_0_PIN) && TEMP_0_PIN > -1
        SERIAL_PROTOCOLPGM("ok T:");
        SERIAL_PROTOCOL_F(degHotend(tmp_extruder),1);
    6ab6:	40 81       	ld	r20, Z
    6ab8:	51 81       	ldd	r21, Z+1	; 0x01
    6aba:	62 81       	ldd	r22, Z+2	; 0x02
    6abc:	73 81       	ldd	r23, Z+3	; 0x03
    6abe:	21 e0       	ldi	r18, 0x01	; 1
    6ac0:	30 e0       	ldi	r19, 0x00	; 0
    6ac2:	82 ed       	ldi	r24, 0xD2	; 210
    6ac4:	94 e0       	ldi	r25, 0x04	; 4
    6ac6:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6aca:	e1 ea       	ldi	r30, 0xA1	; 161
    6acc:	f5 e0       	ldi	r31, 0x05	; 5
    6ace:	34 91       	lpm	r19, Z
  while(ch)
    6ad0:	33 23       	and	r19, r19
    6ad2:	81 f0       	breq	.+32     	; 0x6af4 <_Z16process_commandsv+0xd34>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6ad4:	a0 ec       	ldi	r26, 0xC0	; 192
    6ad6:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6ad8:	86 ec       	ldi	r24, 0xC6	; 198
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6ade:	2c 91       	ld	r18, X
    6ae0:	25 ff       	sbrs	r18, 5
    6ae2:	fd cf       	rjmp	.-6      	; 0x6ade <_Z16process_commandsv+0xd1e>
        ;

      M_UDRx = c;
    6ae4:	fc 01       	movw	r30, r24
    6ae6:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6ae8:	4f 5f       	subi	r20, 0xFF	; 255
    6aea:	5f 4f       	sbci	r21, 0xFF	; 255
    6aec:	fa 01       	movw	r30, r20
    6aee:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6af0:	31 11       	cpse	r19, r1
    6af2:	f5 cf       	rjmp	.-22     	; 0x6ade <_Z16process_commandsv+0xd1e>
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    6af4:	e0 91 3e 09 	lds	r30, 0x093E
    6af8:	f0 e0       	ldi	r31, 0x00	; 0
    6afa:	ee 0f       	add	r30, r30
    6afc:	ff 1f       	adc	r31, r31
    6afe:	e7 5e       	subi	r30, 0xE7	; 231
    6b00:	fe 4e       	sbci	r31, 0xEE	; 238
    6b02:	60 81       	ld	r22, Z
    6b04:	71 81       	ldd	r23, Z+1	; 0x01
    6b06:	88 27       	eor	r24, r24
    6b08:	77 fd       	sbrc	r23, 7
    6b0a:	80 95       	com	r24
    6b0c:	98 2f       	mov	r25, r24
    6b0e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    6b12:	ab 01       	movw	r20, r22
    6b14:	bc 01       	movw	r22, r24
        SERIAL_PROTOCOLPGM(" /");
        SERIAL_PROTOCOL_F(degTargetHotend(tmp_extruder),1);
    6b16:	21 e0       	ldi	r18, 0x01	; 1
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	82 ed       	ldi	r24, 0xD2	; 210
    6b1c:	94 e0       	ldi	r25, 0x04	; 4
    6b1e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6b22:	e4 ea       	ldi	r30, 0xA4	; 164
    6b24:	f5 e0       	ldi	r31, 0x05	; 5
    6b26:	34 91       	lpm	r19, Z
  while(ch)
    6b28:	33 23       	and	r19, r19
    6b2a:	81 f0       	breq	.+32     	; 0x6b4c <_Z16process_commandsv+0xd8c>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6b2c:	a0 ec       	ldi	r26, 0xC0	; 192
    6b2e:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6b30:	86 ec       	ldi	r24, 0xC6	; 198
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6b36:	2c 91       	ld	r18, X
    6b38:	25 ff       	sbrs	r18, 5
    6b3a:	fd cf       	rjmp	.-6      	; 0x6b36 <_Z16process_commandsv+0xd76>
        ;

      M_UDRx = c;
    6b3c:	fc 01       	movw	r30, r24
    6b3e:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6b40:	4f 5f       	subi	r20, 0xFF	; 255
    6b42:	5f 4f       	sbci	r21, 0xFF	; 255
    6b44:	fa 01       	movw	r30, r20
    6b46:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6b48:	31 11       	cpse	r19, r1
    6b4a:	f5 cf       	rjmp	.-22     	; 0x6b36 <_Z16process_commandsv+0xd76>
        #if defined(TEMP_BED_PIN) && TEMP_BED_PIN > -1
          SERIAL_PROTOCOLPGM(" B:");
          SERIAL_PROTOCOL_F(degBed(),1);
    6b4c:	40 91 0b 11 	lds	r20, 0x110B
    6b50:	50 91 0c 11 	lds	r21, 0x110C
    6b54:	60 91 0d 11 	lds	r22, 0x110D
    6b58:	70 91 0e 11 	lds	r23, 0x110E
    6b5c:	21 e0       	ldi	r18, 0x01	; 1
    6b5e:	30 e0       	ldi	r19, 0x00	; 0
    6b60:	82 ed       	ldi	r24, 0xD2	; 210
    6b62:	94 e0       	ldi	r25, 0x04	; 4
    6b64:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6b68:	e8 ea       	ldi	r30, 0xA8	; 168
    6b6a:	f5 e0       	ldi	r31, 0x05	; 5
    6b6c:	34 91       	lpm	r19, Z
  while(ch)
    6b6e:	33 23       	and	r19, r19
    6b70:	81 f0       	breq	.+32     	; 0x6b92 <_Z16process_commandsv+0xdd2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6b72:	a0 ec       	ldi	r26, 0xC0	; 192
    6b74:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6b76:	86 ec       	ldi	r24, 0xC6	; 198
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6b7c:	2c 91       	ld	r18, X
    6b7e:	25 ff       	sbrs	r18, 5
    6b80:	fd cf       	rjmp	.-6      	; 0x6b7c <_Z16process_commandsv+0xdbc>
        ;

      M_UDRx = c;
    6b82:	fc 01       	movw	r30, r24
    6b84:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6b86:	4f 5f       	subi	r20, 0xFF	; 255
    6b88:	5f 4f       	sbci	r21, 0xFF	; 255
    6b8a:	fa 01       	movw	r30, r20
    6b8c:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6b8e:	31 11       	cpse	r19, r1
    6b90:	f5 cf       	rjmp	.-22     	; 0x6b7c <_Z16process_commandsv+0xdbc>
};

FORCE_INLINE float degTargetBed() {   
  return target_temperature_bed;
    6b92:	60 91 17 11 	lds	r22, 0x1117
    6b96:	70 91 18 11 	lds	r23, 0x1118
    6b9a:	88 27       	eor	r24, r24
    6b9c:	77 fd       	sbrc	r23, 7
    6b9e:	80 95       	com	r24
    6ba0:	98 2f       	mov	r25, r24
    6ba2:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    6ba6:	ab 01       	movw	r20, r22
    6ba8:	bc 01       	movw	r22, r24
          SERIAL_PROTOCOLPGM(" /");
          SERIAL_PROTOCOL_F(degTargetBed(),1);
    6baa:	21 e0       	ldi	r18, 0x01	; 1
    6bac:	30 e0       	ldi	r19, 0x00	; 0
    6bae:	82 ed       	ldi	r24, 0xD2	; 210
    6bb0:	94 e0       	ldi	r25, 0x04	; 4
    6bb2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6bb6:	eb ea       	ldi	r30, 0xAB	; 171
    6bb8:	f5 e0       	ldi	r31, 0x05	; 5
    6bba:	34 91       	lpm	r19, Z
  while(ch)
    6bbc:	33 23       	and	r19, r19
    6bbe:	81 f0       	breq	.+32     	; 0x6be0 <_Z16process_commandsv+0xe20>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6bc0:	a0 ec       	ldi	r26, 0xC0	; 192
    6bc2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6bc4:	86 ec       	ldi	r24, 0xC6	; 198
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6bca:	2c 91       	ld	r18, X
    6bcc:	25 ff       	sbrs	r18, 5
    6bce:	fd cf       	rjmp	.-6      	; 0x6bca <_Z16process_commandsv+0xe0a>
        ;

      M_UDRx = c;
    6bd0:	fc 01       	movw	r30, r24
    6bd2:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6bd4:	4f 5f       	subi	r20, 0xFF	; 255
    6bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    6bd8:	fa 01       	movw	r30, r20
    6bda:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6bdc:	31 11       	cpse	r19, r1
    6bde:	f5 cf       	rjmp	.-22     	; 0x6bca <_Z16process_commandsv+0xe0a>
        #endif //TEMP_BED_PIN
        for (int8_t cur_extruder = 0; cur_extruder < EXTRUDERS; ++cur_extruder) {
          SERIAL_PROTOCOLPGM(" T");
          SERIAL_PROTOCOL(cur_extruder);
    6be0:	4a e0       	ldi	r20, 0x0A	; 10
    6be2:	50 e0       	ldi	r21, 0x00	; 0
    6be4:	60 e0       	ldi	r22, 0x00	; 0
    6be6:	70 e0       	ldi	r23, 0x00	; 0
    6be8:	82 ed       	ldi	r24, 0xD2	; 210
    6bea:	94 e0       	ldi	r25, 0x04	; 4
    6bec:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6bf0:	ee ea       	ldi	r30, 0xAE	; 174
    6bf2:	f5 e0       	ldi	r31, 0x05	; 5
    6bf4:	34 91       	lpm	r19, Z
  while(ch)
    6bf6:	33 23       	and	r19, r19
    6bf8:	81 f0       	breq	.+32     	; 0x6c1a <_Z16process_commandsv+0xe5a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6bfa:	a0 ec       	ldi	r26, 0xC0	; 192
    6bfc:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6bfe:	86 ec       	ldi	r24, 0xC6	; 198
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6c04:	2c 91       	ld	r18, X
    6c06:	25 ff       	sbrs	r18, 5
    6c08:	fd cf       	rjmp	.-6      	; 0x6c04 <_Z16process_commandsv+0xe44>
        ;

      M_UDRx = c;
    6c0a:	fc 01       	movw	r30, r24
    6c0c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6c0e:	4f 5f       	subi	r20, 0xFF	; 255
    6c10:	5f 4f       	sbci	r21, 0xFF	; 255
    6c12:	fa 01       	movw	r30, r20
    6c14:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6c16:	31 11       	cpse	r19, r1
    6c18:	f5 cf       	rjmp	.-22     	; 0x6c04 <_Z16process_commandsv+0xe44>
          SERIAL_PROTOCOLPGM(":");
          SERIAL_PROTOCOL_F(degHotend(cur_extruder),1);
    6c1a:	40 91 11 11 	lds	r20, 0x1111
    6c1e:	50 91 12 11 	lds	r21, 0x1112
    6c22:	60 91 13 11 	lds	r22, 0x1113
    6c26:	70 91 14 11 	lds	r23, 0x1114
    6c2a:	21 e0       	ldi	r18, 0x01	; 1
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	82 ed       	ldi	r24, 0xD2	; 210
    6c30:	94 e0       	ldi	r25, 0x04	; 4
    6c32:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6c36:	e0 eb       	ldi	r30, 0xB0	; 176
    6c38:	f5 e0       	ldi	r31, 0x05	; 5
    6c3a:	34 91       	lpm	r19, Z
  while(ch)
    6c3c:	33 23       	and	r19, r19
    6c3e:	81 f0       	breq	.+32     	; 0x6c60 <_Z16process_commandsv+0xea0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6c40:	a0 ec       	ldi	r26, 0xC0	; 192
    6c42:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6c44:	86 ec       	ldi	r24, 0xC6	; 198
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6c4a:	2c 91       	ld	r18, X
    6c4c:	25 ff       	sbrs	r18, 5
    6c4e:	fd cf       	rjmp	.-6      	; 0x6c4a <_Z16process_commandsv+0xe8a>
        ;

      M_UDRx = c;
    6c50:	fc 01       	movw	r30, r24
    6c52:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6c54:	4f 5f       	subi	r20, 0xFF	; 255
    6c56:	5f 4f       	sbci	r21, 0xFF	; 255
    6c58:	fa 01       	movw	r30, r20
    6c5a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6c5c:	31 11       	cpse	r19, r1
    6c5e:	f5 cf       	rjmp	.-22     	; 0x6c4a <_Z16process_commandsv+0xe8a>
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    6c60:	60 91 19 11 	lds	r22, 0x1119
    6c64:	70 91 1a 11 	lds	r23, 0x111A
    6c68:	88 27       	eor	r24, r24
    6c6a:	77 fd       	sbrc	r23, 7
    6c6c:	80 95       	com	r24
    6c6e:	98 2f       	mov	r25, r24
    6c70:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    6c74:	ab 01       	movw	r20, r22
    6c76:	bc 01       	movw	r22, r24
          SERIAL_PROTOCOLPGM(" /");
          SERIAL_PROTOCOL_F(degTargetHotend(cur_extruder),1);
    6c78:	21 e0       	ldi	r18, 0x01	; 1
    6c7a:	30 e0       	ldi	r19, 0x00	; 0
    6c7c:	82 ed       	ldi	r24, 0xD2	; 210
    6c7e:	94 e0       	ldi	r25, 0x04	; 4
    6c80:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6c84:	e3 eb       	ldi	r30, 0xB3	; 179
    6c86:	f5 e0       	ldi	r31, 0x05	; 5
    6c88:	34 91       	lpm	r19, Z
  while(ch)
    6c8a:	33 23       	and	r19, r19
    6c8c:	81 f0       	breq	.+32     	; 0x6cae <_Z16process_commandsv+0xeee>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6c8e:	a0 ec       	ldi	r26, 0xC0	; 192
    6c90:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6c92:	86 ec       	ldi	r24, 0xC6	; 198
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6c98:	2c 91       	ld	r18, X
    6c9a:	25 ff       	sbrs	r18, 5
    6c9c:	fd cf       	rjmp	.-6      	; 0x6c98 <_Z16process_commandsv+0xed8>
        ;

      M_UDRx = c;
    6c9e:	fc 01       	movw	r30, r24
    6ca0:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6ca2:	4f 5f       	subi	r20, 0xFF	; 255
    6ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca6:	fa 01       	movw	r30, r20
    6ca8:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6caa:	31 11       	cpse	r19, r1
    6cac:	f5 cf       	rjmp	.-22     	; 0x6c98 <_Z16process_commandsv+0xed8>
        SERIAL_ERROR_START;
        SERIAL_ERRORLNPGM(MSG_ERR_NO_THERMISTORS);
      #endif

        SERIAL_PROTOCOLPGM(" @:");
        SERIAL_PROTOCOL(getHeaterPower(tmp_extruder));
    6cae:	80 91 3e 09 	lds	r24, 0x093E
    6cb2:	90 e0       	ldi	r25, 0x00	; 0
    6cb4:	0e 94 33 73 	call	0xe666	; 0xe666 <_Z14getHeaterPoweri>
    6cb8:	4a e0       	ldi	r20, 0x0A	; 10
    6cba:	50 e0       	ldi	r21, 0x00	; 0
    6cbc:	bc 01       	movw	r22, r24
    6cbe:	82 ed       	ldi	r24, 0xD2	; 210
    6cc0:	94 e0       	ldi	r25, 0x04	; 4
    6cc2:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6cc6:	e7 eb       	ldi	r30, 0xB7	; 183
    6cc8:	f5 e0       	ldi	r31, 0x05	; 5
    6cca:	34 91       	lpm	r19, Z
  while(ch)
    6ccc:	33 23       	and	r19, r19
    6cce:	81 f0       	breq	.+32     	; 0x6cf0 <_Z16process_commandsv+0xf30>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6cd0:	a0 ec       	ldi	r26, 0xC0	; 192
    6cd2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    6cd4:	86 ec       	ldi	r24, 0xC6	; 198
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6cda:	2c 91       	ld	r18, X
    6cdc:	25 ff       	sbrs	r18, 5
    6cde:	fd cf       	rjmp	.-6      	; 0x6cda <_Z16process_commandsv+0xf1a>
        ;

      M_UDRx = c;
    6ce0:	fc 01       	movw	r30, r24
    6ce2:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6ce4:	4f 5f       	subi	r20, 0xFF	; 255
    6ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ce8:	fa 01       	movw	r30, r20
    6cea:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6cec:	31 11       	cpse	r19, r1
    6cee:	f5 cf       	rjmp	.-22     	; 0x6cda <_Z16process_commandsv+0xf1a>

        SERIAL_PROTOCOLPGM(" B@:");
        SERIAL_PROTOCOL(getHeaterPower(-1));
    6cf0:	8f ef       	ldi	r24, 0xFF	; 255
    6cf2:	9f ef       	ldi	r25, 0xFF	; 255
    6cf4:	0e 94 33 73 	call	0xe666	; 0xe666 <_Z14getHeaterPoweri>
    6cf8:	4a e0       	ldi	r20, 0x0A	; 10
    6cfa:	50 e0       	ldi	r21, 0x00	; 0
    6cfc:	bc 01       	movw	r22, r24
    6cfe:	82 ed       	ldi	r24, 0xD2	; 210
    6d00:	94 e0       	ldi	r25, 0x04	; 4
    6d02:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6d06:	e0 ec       	ldi	r30, 0xC0	; 192
    6d08:	f0 e0       	ldi	r31, 0x00	; 0
    6d0a:	80 81       	ld	r24, Z
    6d0c:	85 ff       	sbrs	r24, 5
    6d0e:	fd cf       	rjmp	.-6      	; 0x6d0a <_Z16process_commandsv+0xf4a>
        ;

      M_UDRx = c;
    6d10:	8a e0       	ldi	r24, 0x0A	; 10
    6d12:	80 93 c6 00 	sts	0x00C6, r24
    6d16:	0c 94 bd 41 	jmp	0x837a	; 0x837a <_Z16process_commandsv+0x25ba>
        SERIAL_PROTOCOLLN("");
      return;
      break;
    case 109:
    {// M109 - Wait for extruder heater to reach target.
      if(setTargetedHotend(109)){
    6d1a:	8d e6       	ldi	r24, 0x6D	; 109
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <_Z17setTargetedHotendi>
    6d22:	81 11       	cpse	r24, r1
    6d24:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
        break;
      }
      LCD_MESSAGEPGM(MSG_HEATING);
    6d28:	8c eb       	ldi	r24, 0xBC	; 188
    6d2a:	95 e0       	ldi	r25, 0x05	; 5
    6d2c:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
      #ifdef AUTOTEMP
        autotemp_enabled=false;
    6d30:	10 92 29 0e 	sts	0x0E29, r1
      #endif
      if (code_seen('S')) {
    6d34:	83 e5       	ldi	r24, 0x53	; 83
    6d36:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6d3a:	88 23       	and	r24, r24
    6d3c:	91 f0       	breq	.+36     	; 0x6d62 <_Z16process_commandsv+0xfa2>
        setTargetHotend(code_value(), tmp_extruder);
    6d3e:	00 91 3e 09 	lds	r16, 0x093E
    6d42:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
FORCE_INLINE float degTargetBed() {   
  return target_temperature_bed;
};

FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  
  target_temperature[extruder] = celsius;
    6d46:	10 e0       	ldi	r17, 0x00	; 0
    6d48:	00 0f       	add	r16, r16
    6d4a:	11 1f       	adc	r17, r17
    6d4c:	07 5e       	subi	r16, 0xE7	; 231
    6d4e:	1e 4e       	sbci	r17, 0xEE	; 238
    6d50:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6d54:	d8 01       	movw	r26, r16
    6d56:	6d 93       	st	X+, r22
    6d58:	7c 93       	st	X, r23
#ifdef DUAL_X_CARRIAGE
        if (dual_x_carriage_mode == DXC_DUPLICATION_MODE && tmp_extruder == 0)
          setTargetHotend1(code_value() == 0.0 ? 0.0 : code_value() + duplicate_extruder_temp_offset);
#endif          
        CooldownNoWait = true;
    6d5a:	81 e0       	ldi	r24, 0x01	; 1
    6d5c:	80 93 0f 02 	sts	0x020F, r24
    6d60:	15 c0       	rjmp	.+42     	; 0x6d8c <_Z16process_commandsv+0xfcc>
      } else if (code_seen('R')) {
    6d62:	82 e5       	ldi	r24, 0x52	; 82
    6d64:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6d68:	88 23       	and	r24, r24
    6d6a:	81 f0       	breq	.+32     	; 0x6d8c <_Z16process_commandsv+0xfcc>
        setTargetHotend(code_value(), tmp_extruder);
    6d6c:	00 91 3e 09 	lds	r16, 0x093E
    6d70:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6d74:	10 e0       	ldi	r17, 0x00	; 0
    6d76:	00 0f       	add	r16, r16
    6d78:	11 1f       	adc	r17, r17
    6d7a:	07 5e       	subi	r16, 0xE7	; 231
    6d7c:	1e 4e       	sbci	r17, 0xEE	; 238
    6d7e:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    6d82:	f8 01       	movw	r30, r16
    6d84:	71 83       	std	Z+1, r23	; 0x01
    6d86:	60 83       	st	Z, r22
#ifdef DUAL_X_CARRIAGE
        if (dual_x_carriage_mode == DXC_DUPLICATION_MODE && tmp_extruder == 0)
          setTargetHotend1(code_value() == 0.0 ? 0.0 : code_value() + duplicate_extruder_temp_offset);
#endif          
        CooldownNoWait = false;
    6d88:	10 92 0f 02 	sts	0x020F, r1
      }
      #ifdef AUTOTEMP
        if (code_seen('S')) autotemp_min=code_value();
    6d8c:	83 e5       	ldi	r24, 0x53	; 83
    6d8e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6d92:	88 23       	and	r24, r24
    6d94:	51 f0       	breq	.+20     	; 0x6daa <_Z16process_commandsv+0xfea>
    6d96:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6d9a:	60 93 42 02 	sts	0x0242, r22
    6d9e:	70 93 43 02 	sts	0x0243, r23
    6da2:	80 93 44 02 	sts	0x0244, r24
    6da6:	90 93 45 02 	sts	0x0245, r25
        if (code_seen('B')) autotemp_max=code_value();
    6daa:	82 e4       	ldi	r24, 0x42	; 66
    6dac:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6db0:	88 23       	and	r24, r24
    6db2:	51 f0       	breq	.+20     	; 0x6dc8 <_Z16process_commandsv+0x1008>
    6db4:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6db8:	60 93 46 02 	sts	0x0246, r22
    6dbc:	70 93 47 02 	sts	0x0247, r23
    6dc0:	80 93 48 02 	sts	0x0248, r24
    6dc4:	90 93 49 02 	sts	0x0249, r25
        if (code_seen('F'))
    6dc8:	86 e4       	ldi	r24, 0x46	; 70
    6dca:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    6dce:	88 23       	and	r24, r24
    6dd0:	69 f0       	breq	.+26     	; 0x6dec <_Z16process_commandsv+0x102c>
        {
          autotemp_factor=code_value();
    6dd2:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    6dd6:	60 93 3e 02 	sts	0x023E, r22
    6dda:	70 93 3f 02 	sts	0x023F, r23
    6dde:	80 93 40 02 	sts	0x0240, r24
    6de2:	90 93 41 02 	sts	0x0241, r25
          autotemp_enabled=true;
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	80 93 29 0e 	sts	0x0E29, r24
        }
      #endif

      setWatch();
    6dec:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <_Z8setWatchv>
      codenum = millis();
    6df0:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    6df4:	2b 01       	movw	r4, r22
    6df6:	3c 01       	movw	r6, r24
FORCE_INLINE void setTargetBed(const float &celsius) {  
  target_temperature_bed = celsius;
};

FORCE_INLINE bool isHeatingHotend(uint8_t extruder){  
  return target_temperature[extruder] > current_temperature[extruder];
    6df8:	00 91 3e 09 	lds	r16, 0x093E
    6dfc:	10 e0       	ldi	r17, 0x00	; 0
    6dfe:	f8 01       	movw	r30, r16
    6e00:	ee 0f       	add	r30, r30
    6e02:	ff 1f       	adc	r31, r31
    6e04:	e7 5e       	subi	r30, 0xE7	; 231
    6e06:	fe 4e       	sbci	r31, 0xEE	; 238
    6e08:	60 81       	ld	r22, Z
    6e0a:	71 81       	ldd	r23, Z+1	; 0x01
    6e0c:	88 27       	eor	r24, r24
    6e0e:	77 fd       	sbrc	r23, 7
    6e10:	80 95       	com	r24
    6e12:	98 2f       	mov	r25, r24
    6e14:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    6e18:	f8 01       	movw	r30, r16
    6e1a:	ee 0f       	add	r30, r30
    6e1c:	ff 1f       	adc	r31, r31
    6e1e:	ee 0f       	add	r30, r30
    6e20:	ff 1f       	adc	r31, r31
    6e22:	ef 5e       	subi	r30, 0xEF	; 239
    6e24:	fe 4e       	sbci	r31, 0xEE	; 238
    6e26:	11 e0       	ldi	r17, 0x01	; 1
    6e28:	20 81       	ld	r18, Z
    6e2a:	31 81       	ldd	r19, Z+1	; 0x01
    6e2c:	42 81       	ldd	r20, Z+2	; 0x02
    6e2e:	53 81       	ldd	r21, Z+3	; 0x03
    6e30:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    6e34:	18 16       	cp	r1, r24
    6e36:	0c f0       	brlt	.+2      	; 0x6e3a <_Z16process_commandsv+0x107a>
    6e38:	10 e0       	ldi	r17, 0x00	; 0

      /* See if we are heating up or cooling down */
      target_direction = isHeatingHotend(tmp_extruder); // true if heating, false if cooling
    6e3a:	10 93 57 05 	sts	0x0557, r17

      #ifdef TEMP_RESIDENCY_TIME
        long residencyStart;
        residencyStart = -1;
    6e3e:	cc 24       	eor	r12, r12
    6e40:	ca 94       	dec	r12
    6e42:	dc 2c       	mov	r13, r12
    6e44:	76 01       	movw	r14, r12


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6e46:	e7 ec       	ldi	r30, 0xC7	; 199
    6e48:	f5 e0       	ldi	r31, 0x05	; 5
    6e4a:	f4 91       	lpm	r31, Z
    6e4c:	ff 8f       	std	Y+31, r31	; 0x1f
    6e4e:	ea ec       	ldi	r30, 0xCA	; 202
    6e50:	f5 e0       	ldi	r31, 0x05	; 5
    6e52:	f4 91       	lpm	r31, Z
    6e54:	f8 a3       	std	Y+32, r31	; 0x20
    6e56:	0f 2e       	mov	r0, r31
    6e58:	fe ec       	ldi	r31, 0xCE	; 206
    6e5a:	8f 2e       	mov	r8, r31
    6e5c:	f5 e0       	ldi	r31, 0x05	; 5
    6e5e:	9f 2e       	mov	r9, r31
    6e60:	f0 2d       	mov	r31, r0
    6e62:	f4 01       	movw	r30, r8
    6e64:	f4 91       	lpm	r31, Z
    6e66:	f9 a3       	std	Y+33, r31	; 0x21
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6e68:	0f 2e       	mov	r0, r31
    6e6a:	f0 ec       	ldi	r31, 0xC0	; 192
    6e6c:	2f 2e       	mov	r2, r31
    6e6e:	31 2c       	mov	r3, r1
    6e70:	f0 2d       	mov	r31, r0
        ;

      M_UDRx = c;
    6e72:	0f 2e       	mov	r0, r31
    6e74:	f6 ec       	ldi	r31, 0xC6	; 198
    6e76:	af 2e       	mov	r10, r31
    6e78:	b1 2c       	mov	r11, r1
    6e7a:	f0 2d       	mov	r31, r0
        while((residencyStart == -1) ||
              (residencyStart >= 0 && (((unsigned int) (millis() - residencyStart)) < (TEMP_RESIDENCY_TIME * 1000UL))) ) {
      #else
        while ( target_direction ? (isHeatingHotend(tmp_extruder)) : (isCoolingHotend(tmp_extruder)&&(CooldownNoWait==false)) ) {
      #endif //TEMP_RESIDENCY_TIME
          if( (millis() - codenum) > 1000UL )
    6e7c:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    6e80:	dc 01       	movw	r26, r24
    6e82:	cb 01       	movw	r24, r22
    6e84:	84 19       	sub	r24, r4
    6e86:	95 09       	sbc	r25, r5
    6e88:	a6 09       	sbc	r26, r6
    6e8a:	b7 09       	sbc	r27, r7
    6e8c:	89 3e       	cpi	r24, 0xE9	; 233
    6e8e:	93 40       	sbci	r25, 0x03	; 3
    6e90:	a1 05       	cpc	r26, r1
    6e92:	b1 05       	cpc	r27, r1
    6e94:	08 f4       	brcc	.+2      	; 0x6e98 <_Z16process_commandsv+0x10d8>
    6e96:	8d c0       	rjmp	.+282    	; 0x6fb2 <_Z16process_commandsv+0x11f2>
    6e98:	9f 8d       	ldd	r25, Y+31	; 0x1f
  while(ch)
    6e9a:	99 23       	and	r25, r25
    6e9c:	61 f0       	breq	.+24     	; 0x6eb6 <_Z16process_commandsv+0x10f6>
    6e9e:	e7 ec       	ldi	r30, 0xC7	; 199
    6ea0:	f5 e0       	ldi	r31, 0x05	; 5
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6ea2:	d1 01       	movw	r26, r2
    6ea4:	8c 91       	ld	r24, X
    6ea6:	85 ff       	sbrs	r24, 5
    6ea8:	fc cf       	rjmp	.-8      	; 0x6ea2 <_Z16process_commandsv+0x10e2>
        ;

      M_UDRx = c;
    6eaa:	d5 01       	movw	r26, r10
    6eac:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6eae:	31 96       	adiw	r30, 0x01	; 1
    6eb0:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6eb2:	91 11       	cpse	r25, r1
    6eb4:	f6 cf       	rjmp	.-20     	; 0x6ea2 <_Z16process_commandsv+0x10e2>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    6eb6:	e0 91 3e 09 	lds	r30, 0x093E
    6eba:	f0 e0       	ldi	r31, 0x00	; 0
    6ebc:	ee 0f       	add	r30, r30
    6ebe:	ff 1f       	adc	r31, r31
    6ec0:	ee 0f       	add	r30, r30
    6ec2:	ff 1f       	adc	r31, r31
    6ec4:	ef 5e       	subi	r30, 0xEF	; 239
    6ec6:	fe 4e       	sbci	r31, 0xEE	; 238
          { //Print Temp Reading and remaining time every 1 second while heating up/cooling down
            SERIAL_PROTOCOLPGM("T:");
            SERIAL_PROTOCOL_F(degHotend(tmp_extruder),1);
    6ec8:	40 81       	ld	r20, Z
    6eca:	51 81       	ldd	r21, Z+1	; 0x01
    6ecc:	62 81       	ldd	r22, Z+2	; 0x02
    6ece:	73 81       	ldd	r23, Z+3	; 0x03
    6ed0:	21 e0       	ldi	r18, 0x01	; 1
    6ed2:	30 e0       	ldi	r19, 0x00	; 0
    6ed4:	82 ed       	ldi	r24, 0xD2	; 210
    6ed6:	94 e0       	ldi	r25, 0x04	; 4
    6ed8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6edc:	98 a1       	ldd	r25, Y+32	; 0x20
  while(ch)
    6ede:	99 23       	and	r25, r25
    6ee0:	61 f0       	breq	.+24     	; 0x6efa <_Z16process_commandsv+0x113a>
    6ee2:	ea ec       	ldi	r30, 0xCA	; 202
    6ee4:	f5 e0       	ldi	r31, 0x05	; 5
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6ee6:	d1 01       	movw	r26, r2
    6ee8:	8c 91       	ld	r24, X
    6eea:	85 ff       	sbrs	r24, 5
    6eec:	fc cf       	rjmp	.-8      	; 0x6ee6 <_Z16process_commandsv+0x1126>
        ;

      M_UDRx = c;
    6eee:	d5 01       	movw	r26, r10
    6ef0:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6ef2:	31 96       	adiw	r30, 0x01	; 1
    6ef4:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6ef6:	91 11       	cpse	r25, r1
    6ef8:	f6 cf       	rjmp	.-20     	; 0x6ee6 <_Z16process_commandsv+0x1126>
            SERIAL_PROTOCOLPGM(" E:");
            SERIAL_PROTOCOL((int)tmp_extruder);
    6efa:	60 91 3e 09 	lds	r22, 0x093E
    6efe:	4a e0       	ldi	r20, 0x0A	; 10
    6f00:	50 e0       	ldi	r21, 0x00	; 0
    6f02:	70 e0       	ldi	r23, 0x00	; 0
    6f04:	82 ed       	ldi	r24, 0xD2	; 210
    6f06:	94 e0       	ldi	r25, 0x04	; 4
    6f08:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    6f0c:	99 a1       	ldd	r25, Y+33	; 0x21
  while(ch)
    6f0e:	99 23       	and	r25, r25
    6f10:	59 f0       	breq	.+22     	; 0x6f28 <_Z16process_commandsv+0x1168>
    6f12:	f4 01       	movw	r30, r8
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6f14:	d1 01       	movw	r26, r2
    6f16:	8c 91       	ld	r24, X
    6f18:	85 ff       	sbrs	r24, 5
    6f1a:	fc cf       	rjmp	.-8      	; 0x6f14 <_Z16process_commandsv+0x1154>
        ;

      M_UDRx = c;
    6f1c:	d5 01       	movw	r26, r10
    6f1e:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    6f20:	31 96       	adiw	r30, 0x01	; 1
    6f22:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    6f24:	91 11       	cpse	r25, r1
    6f26:	f6 cf       	rjmp	.-20     	; 0x6f14 <_Z16process_commandsv+0x1154>
            #ifdef TEMP_RESIDENCY_TIME
              SERIAL_PROTOCOLPGM(" W:");
              if(residencyStart > -1)
    6f28:	ff 20       	and	r15, r15
    6f2a:	5c f1       	brlt	.+86     	; 0x6f82 <_Z16process_commandsv+0x11c2>
              {
                 codenum = ((TEMP_RESIDENCY_TIME * 1000UL) - (millis() - residencyStart)) / 1000UL;
    6f2c:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    6f30:	97 01       	movw	r18, r14
    6f32:	86 01       	movw	r16, r12
    6f34:	00 5f       	subi	r16, 0xF0	; 240
    6f36:	18 4d       	sbci	r17, 0xD8	; 216
    6f38:	2f 4f       	sbci	r18, 0xFF	; 255
    6f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f3c:	28 01       	movw	r4, r16
    6f3e:	39 01       	movw	r6, r18
    6f40:	46 1a       	sub	r4, r22
    6f42:	57 0a       	sbc	r5, r23
    6f44:	68 0a       	sbc	r6, r24
    6f46:	79 0a       	sbc	r7, r25
    6f48:	c3 01       	movw	r24, r6
    6f4a:	b2 01       	movw	r22, r4
    6f4c:	28 ee       	ldi	r18, 0xE8	; 232
    6f4e:	33 e0       	ldi	r19, 0x03	; 3
    6f50:	40 e0       	ldi	r20, 0x00	; 0
    6f52:	50 e0       	ldi	r21, 0x00	; 0
    6f54:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
    6f58:	29 01       	movw	r4, r18
    6f5a:	3a 01       	movw	r6, r20
                 SERIAL_PROTOCOLLN( codenum );
    6f5c:	2a e0       	ldi	r18, 0x0A	; 10
    6f5e:	30 e0       	ldi	r19, 0x00	; 0
    6f60:	b3 01       	movw	r22, r6
    6f62:	a2 01       	movw	r20, r4
    6f64:	82 ed       	ldi	r24, 0xD2	; 210
    6f66:	94 e0       	ldi	r25, 0x04	; 4
    6f68:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN12MarlinSerial5printEmi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6f6c:	d1 01       	movw	r26, r2
    6f6e:	8c 91       	ld	r24, X
    6f70:	85 ff       	sbrs	r24, 5
    6f72:	fc cf       	rjmp	.-8      	; 0x6f6c <_Z16process_commandsv+0x11ac>
        ;

      M_UDRx = c;
    6f74:	0f 2e       	mov	r0, r31
    6f76:	fa e0       	ldi	r31, 0x0A	; 10
    6f78:	4f 2e       	mov	r4, r31
    6f7a:	f0 2d       	mov	r31, r0
    6f7c:	f5 01       	movw	r30, r10
    6f7e:	40 82       	st	Z, r4
    6f80:	14 c0       	rjmp	.+40     	; 0x6faa <_Z16process_commandsv+0x11ea>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6f82:	d1 01       	movw	r26, r2
    6f84:	8c 91       	ld	r24, X
    6f86:	85 ff       	sbrs	r24, 5
    6f88:	fc cf       	rjmp	.-8      	; 0x6f82 <_Z16process_commandsv+0x11c2>
        ;

      M_UDRx = c;
    6f8a:	0f 2e       	mov	r0, r31
    6f8c:	ff e3       	ldi	r31, 0x3F	; 63
    6f8e:	4f 2e       	mov	r4, r31
    6f90:	f0 2d       	mov	r31, r0
    6f92:	f5 01       	movw	r30, r10
    6f94:	40 82       	st	Z, r4
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    6f96:	d1 01       	movw	r26, r2
    6f98:	8c 91       	ld	r24, X
    6f9a:	85 ff       	sbrs	r24, 5
    6f9c:	fc cf       	rjmp	.-8      	; 0x6f96 <_Z16process_commandsv+0x11d6>
        ;

      M_UDRx = c;
    6f9e:	0f 2e       	mov	r0, r31
    6fa0:	fa e0       	ldi	r31, 0x0A	; 10
    6fa2:	4f 2e       	mov	r4, r31
    6fa4:	f0 2d       	mov	r31, r0
    6fa6:	f5 01       	movw	r30, r10
    6fa8:	40 82       	st	Z, r4
                 SERIAL_PROTOCOLLN( "?" );
              }
            #else
              SERIAL_PROTOCOLLN("");
            #endif
            codenum = millis();
    6faa:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    6fae:	2b 01       	movw	r4, r22
    6fb0:	3c 01       	movw	r6, r24
          }
          manage_heater();
    6fb2:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
          manage_inactivity();
    6fb6:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_Z17manage_inactivityv>
          lcd_update();
    6fba:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
        #ifdef TEMP_RESIDENCY_TIME
            /* start/restart the TEMP_RESIDENCY_TIME timer whenever we reach target temp for the first time
              or when current temp falls outside the hysteresis after target temp was reached */
          if ((residencyStart == -1 &&  target_direction && (degHotend(tmp_extruder) >= (degTargetHotend(tmp_extruder)-TEMP_WINDOW))) ||
    6fbe:	2f ef       	ldi	r18, 0xFF	; 255
    6fc0:	c2 16       	cp	r12, r18
    6fc2:	d2 06       	cpc	r13, r18
    6fc4:	e2 06       	cpc	r14, r18
    6fc6:	f2 06       	cpc	r15, r18
    6fc8:	71 f5       	brne	.+92     	; 0x7026 <_Z16process_commandsv+0x1266>
    6fca:	80 91 57 05 	lds	r24, 0x0557
    6fce:	88 23       	and	r24, r24
    6fd0:	11 f4       	brne	.+4      	; 0x6fd6 <_Z16process_commandsv+0x1216>
    6fd2:	0c 94 95 41 	jmp	0x832a	; 0x832a <_Z16process_commandsv+0x256a>
    6fd6:	00 91 3e 09 	lds	r16, 0x093E
    6fda:	10 e0       	ldi	r17, 0x00	; 0
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    6fdc:	f8 01       	movw	r30, r16
    6fde:	ee 0f       	add	r30, r30
    6fe0:	ff 1f       	adc	r31, r31
    6fe2:	e7 5e       	subi	r30, 0xE7	; 231
    6fe4:	fe 4e       	sbci	r31, 0xEE	; 238
    6fe6:	60 81       	ld	r22, Z
    6fe8:	71 81       	ldd	r23, Z+1	; 0x01
    6fea:	88 27       	eor	r24, r24
    6fec:	77 fd       	sbrc	r23, 7
    6fee:	80 95       	com	r24
    6ff0:	98 2f       	mov	r25, r24
    6ff2:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    6ff6:	20 e0       	ldi	r18, 0x00	; 0
    6ff8:	30 e0       	ldi	r19, 0x00	; 0
    6ffa:	40 e8       	ldi	r20, 0x80	; 128
    6ffc:	5f e3       	ldi	r21, 0x3F	; 63
    6ffe:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    7002:	f8 01       	movw	r30, r16
    7004:	ee 0f       	add	r30, r30
    7006:	ff 1f       	adc	r31, r31
    7008:	ee 0f       	add	r30, r30
    700a:	ff 1f       	adc	r31, r31
    700c:	ef 5e       	subi	r30, 0xEF	; 239
    700e:	fe 4e       	sbci	r31, 0xEE	; 238
    7010:	20 81       	ld	r18, Z
    7012:	31 81       	ldd	r19, Z+1	; 0x01
    7014:	42 81       	ldd	r20, Z+2	; 0x02
    7016:	53 81       	ldd	r21, Z+3	; 0x03
    7018:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    701c:	18 16       	cp	r1, r24
    701e:	14 f0       	brlt	.+4      	; 0x7024 <_Z16process_commandsv+0x1264>
    7020:	0c 94 24 41 	jmp	0x8248	; 0x8248 <_Z16process_commandsv+0x2488>
    7024:	38 c0       	rjmp	.+112    	; 0x7096 <_Z16process_commandsv+0x12d6>
    7026:	ff 20       	and	r15, r15
    7028:	b4 f1       	brlt	.+108    	; 0x7096 <_Z16process_commandsv+0x12d6>
    702a:	80 91 3e 09 	lds	r24, 0x093E
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	8c 01       	movw	r16, r24
    7032:	00 0f       	add	r16, r16
    7034:	11 1f       	adc	r17, r17
    7036:	00 0f       	add	r16, r16
    7038:	11 1f       	adc	r17, r17
    703a:	0f 5e       	subi	r16, 0xEF	; 239
    703c:	1e 4e       	sbci	r17, 0xEE	; 238
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    703e:	88 0f       	add	r24, r24
    7040:	99 1f       	adc	r25, r25
    7042:	fc 01       	movw	r30, r24
    7044:	e7 5e       	subi	r30, 0xE7	; 231
    7046:	fe 4e       	sbci	r31, 0xEE	; 238
    7048:	60 81       	ld	r22, Z
    704a:	71 81       	ldd	r23, Z+1	; 0x01
    704c:	88 27       	eor	r24, r24
    704e:	77 fd       	sbrc	r23, 7
    7050:	80 95       	com	r24
    7052:	98 2f       	mov	r25, r24
    7054:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    7058:	9b 01       	movw	r18, r22
    705a:	ac 01       	movw	r20, r24
              (residencyStart == -1 && !target_direction && (degHotend(tmp_extruder) <= (degTargetHotend(tmp_extruder)+TEMP_WINDOW))) ||
              (residencyStart > -1 && labs(degHotend(tmp_extruder) - degTargetHotend(tmp_extruder)) > TEMP_HYSTERESIS) )
    705c:	d8 01       	movw	r26, r16
    705e:	6d 91       	ld	r22, X+
    7060:	7d 91       	ld	r23, X+
    7062:	8d 91       	ld	r24, X+
    7064:	9c 91       	ld	r25, X
    7066:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    706a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    706e:	46 2f       	mov	r20, r22
    7070:	57 2f       	mov	r21, r23
    7072:	68 2f       	mov	r22, r24
    7074:	79 2f       	mov	r23, r25
    7076:	77 23       	and	r23, r23
    7078:	3c f4       	brge	.+14     	; 0x7088 <_Z16process_commandsv+0x12c8>
    707a:	70 95       	com	r23
    707c:	60 95       	com	r22
    707e:	50 95       	com	r21
    7080:	41 95       	neg	r20
    7082:	5f 4f       	sbci	r21, 0xFF	; 255
    7084:	6f 4f       	sbci	r22, 0xFF	; 255
    7086:	7f 4f       	sbci	r23, 0xFF	; 255
          manage_inactivity();
          lcd_update();
        #ifdef TEMP_RESIDENCY_TIME
            /* start/restart the TEMP_RESIDENCY_TIME timer whenever we reach target temp for the first time
              or when current temp falls outside the hysteresis after target temp was reached */
          if ((residencyStart == -1 &&  target_direction && (degHotend(tmp_extruder) >= (degTargetHotend(tmp_extruder)-TEMP_WINDOW))) ||
    7088:	44 30       	cpi	r20, 0x04	; 4
    708a:	51 05       	cpc	r21, r1
    708c:	61 05       	cpc	r22, r1
    708e:	71 05       	cpc	r23, r1
    7090:	14 f0       	brlt	.+4      	; 0x7096 <_Z16process_commandsv+0x12d6>
    7092:	0c 94 24 41 	jmp	0x8248	; 0x8248 <_Z16process_commandsv+0x2488>
      #ifdef TEMP_RESIDENCY_TIME
        long residencyStart;
        residencyStart = -1;
        /* continue to loop until we have reached the target temp
          _and_ until TEMP_RESIDENCY_TIME hasn't passed since we reached it */
        while((residencyStart == -1) ||
    7096:	bf ef       	ldi	r27, 0xFF	; 255
    7098:	cb 16       	cp	r12, r27
    709a:	db 06       	cpc	r13, r27
    709c:	eb 06       	cpc	r14, r27
    709e:	fb 06       	cpc	r15, r27
    70a0:	09 f4       	brne	.+2      	; 0x70a4 <_Z16process_commandsv+0x12e4>
    70a2:	ec ce       	rjmp	.-552    	; 0x6e7c <_Z16process_commandsv+0x10bc>
    70a4:	ff 20       	and	r15, r15
    70a6:	44 f0       	brlt	.+16     	; 0x70b8 <_Z16process_commandsv+0x12f8>
              (residencyStart >= 0 && (((unsigned int) (millis() - residencyStart)) < (TEMP_RESIDENCY_TIME * 1000UL))) ) {
    70a8:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
      #ifdef TEMP_RESIDENCY_TIME
        long residencyStart;
        residencyStart = -1;
        /* continue to loop until we have reached the target temp
          _and_ until TEMP_RESIDENCY_TIME hasn't passed since we reached it */
        while((residencyStart == -1) ||
    70ac:	6c 19       	sub	r22, r12
    70ae:	7d 09       	sbc	r23, r13
    70b0:	60 31       	cpi	r22, 0x10	; 16
    70b2:	77 42       	sbci	r23, 0x27	; 39
    70b4:	08 f4       	brcc	.+2      	; 0x70b8 <_Z16process_commandsv+0x12f8>
    70b6:	e2 ce       	rjmp	.-572    	; 0x6e7c <_Z16process_commandsv+0x10bc>
          {
            residencyStart = millis();
          }
        #endif //TEMP_RESIDENCY_TIME
        }
        LCD_MESSAGEPGM(MSG_HEATING_COMPLETE);
    70b8:	82 ed       	ldi	r24, 0xD2	; 210
    70ba:	95 e0       	ldi	r25, 0x05	; 5
    70bc:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
        starttime=millis();
    70c0:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    70c4:	60 93 5d 05 	sts	0x055D, r22
    70c8:	70 93 5e 05 	sts	0x055E, r23
    70cc:	80 93 5f 05 	sts	0x055F, r24
    70d0:	90 93 60 05 	sts	0x0560, r25
        previous_millis_cmd = millis();
    70d4:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    70d8:	60 93 25 09 	sts	0x0925, r22
    70dc:	70 93 26 09 	sts	0x0926, r23
    70e0:	80 93 27 09 	sts	0x0927, r24
    70e4:	90 93 28 09 	sts	0x0928, r25
      }
      break;
    70e8:	0c 94 08 41 	jmp	0x8210	; 0x8210 <_Z16process_commandsv+0x2450>
    case 190: // M190 - Wait for bed heater to reach target.
    #if defined(TEMP_BED_PIN) && TEMP_BED_PIN > -1
        LCD_MESSAGEPGM(MSG_BED_HEATING);
    70ec:	80 ee       	ldi	r24, 0xE0	; 224
    70ee:	95 e0       	ldi	r25, 0x05	; 5
    70f0:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
        if (code_seen('S')) {
    70f4:	83 e5       	ldi	r24, 0x53	; 83
    70f6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    70fa:	88 23       	and	r24, r24
    70fc:	61 f0       	breq	.+24     	; 0x7116 <_Z16process_commandsv+0x1356>
          setTargetBed(code_value());
    70fe:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  
  target_temperature[extruder] = celsius;
};

FORCE_INLINE void setTargetBed(const float &celsius) {  
  target_temperature_bed = celsius;
    7102:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7106:	70 93 18 11 	sts	0x1118, r23
    710a:	60 93 17 11 	sts	0x1117, r22
          CooldownNoWait = true;
    710e:	81 e0       	ldi	r24, 0x01	; 1
    7110:	80 93 0f 02 	sts	0x020F, r24
    7114:	0f c0       	rjmp	.+30     	; 0x7134 <_Z16process_commandsv+0x1374>
        } else if (code_seen('R')) {
    7116:	82 e5       	ldi	r24, 0x52	; 82
    7118:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    711c:	88 23       	and	r24, r24
    711e:	51 f0       	breq	.+20     	; 0x7134 <_Z16process_commandsv+0x1374>
          setTargetBed(code_value());
    7120:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7124:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7128:	70 93 18 11 	sts	0x1118, r23
    712c:	60 93 17 11 	sts	0x1117, r22
          CooldownNoWait = false;
    7130:	10 92 0f 02 	sts	0x020F, r1
        }
        codenum = millis();
    7134:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    7138:	2b 01       	movw	r4, r22
    713a:	3c 01       	movw	r6, r24
FORCE_INLINE bool isHeatingHotend(uint8_t extruder){  
  return target_temperature[extruder] > current_temperature[extruder];
};

FORCE_INLINE bool isHeatingBed() {
  return target_temperature_bed > current_temperature_bed;
    713c:	60 91 17 11 	lds	r22, 0x1117
    7140:	70 91 18 11 	lds	r23, 0x1118
    7144:	88 27       	eor	r24, r24
    7146:	77 fd       	sbrc	r23, 7
    7148:	80 95       	com	r24
    714a:	98 2f       	mov	r25, r24
    714c:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    7150:	11 e0       	ldi	r17, 0x01	; 1
    7152:	20 91 0b 11 	lds	r18, 0x110B
    7156:	30 91 0c 11 	lds	r19, 0x110C
    715a:	40 91 0d 11 	lds	r20, 0x110D
    715e:	50 91 0e 11 	lds	r21, 0x110E
    7162:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    7166:	18 16       	cp	r1, r24
    7168:	0c f0       	brlt	.+2      	; 0x716c <_Z16process_commandsv+0x13ac>
    716a:	10 e0       	ldi	r17, 0x00	; 0

        target_direction = isHeatingBed(); // true if heating, false if cooling
    716c:	10 93 57 05 	sts	0x0557, r17


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7170:	0f 2e       	mov	r0, r31
    7172:	fd ee       	ldi	r31, 0xED	; 237
    7174:	8f 2e       	mov	r8, r31
    7176:	f5 e0       	ldi	r31, 0x05	; 5
    7178:	9f 2e       	mov	r9, r31
    717a:	f0 2d       	mov	r31, r0
    717c:	f4 01       	movw	r30, r8
    717e:	24 90       	lpm	r2, Z
    7180:	0f 2e       	mov	r0, r31
    7182:	f0 ef       	ldi	r31, 0xF0	; 240
    7184:	af 2e       	mov	r10, r31
    7186:	f5 e0       	ldi	r31, 0x05	; 5
    7188:	bf 2e       	mov	r11, r31
    718a:	f0 2d       	mov	r31, r0
    718c:	f5 01       	movw	r30, r10
    718e:	34 90       	lpm	r3, Z
    7190:	0f 2e       	mov	r0, r31
    7192:	f4 ef       	ldi	r31, 0xF4	; 244
    7194:	cf 2e       	mov	r12, r31
    7196:	f5 e0       	ldi	r31, 0x05	; 5
    7198:	df 2e       	mov	r13, r31
    719a:	f0 2d       	mov	r31, r0
    719c:	f6 01       	movw	r30, r12
    719e:	f4 91       	lpm	r31, Z
    71a0:	ff 8f       	std	Y+31, r31	; 0x1f
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    71a2:	00 ec       	ldi	r16, 0xC0	; 192
    71a4:	10 e0       	ldi	r17, 0x00	; 0
        ;

      M_UDRx = c;
    71a6:	0f 2e       	mov	r0, r31
    71a8:	f6 ec       	ldi	r31, 0xC6	; 198
    71aa:	ef 2e       	mov	r14, r31
    71ac:	f1 2c       	mov	r15, r1
    71ae:	f0 2d       	mov	r31, r0

        while ( target_direction ? (isHeatingBed()) : (isCoolingBed()&&(CooldownNoWait==false)) )
    71b0:	73 c0       	rjmp	.+230    	; 0x7298 <_Z16process_commandsv+0x14d8>
        {
          if(( millis() - codenum) > 1000 ) //Print Temp Reading every 1 second while heating up.
    71b2:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    71b6:	dc 01       	movw	r26, r24
    71b8:	cb 01       	movw	r24, r22
    71ba:	84 19       	sub	r24, r4
    71bc:	95 09       	sbc	r25, r5
    71be:	a6 09       	sbc	r26, r6
    71c0:	b7 09       	sbc	r27, r7
    71c2:	89 3e       	cpi	r24, 0xE9	; 233
    71c4:	93 40       	sbci	r25, 0x03	; 3
    71c6:	a1 05       	cpc	r26, r1
    71c8:	b1 05       	cpc	r27, r1
    71ca:	08 f4       	brcc	.+2      	; 0x71ce <_Z16process_commandsv+0x140e>
    71cc:	5f c0       	rjmp	.+190    	; 0x728c <_Z16process_commandsv+0x14cc>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    71ce:	e0 91 63 05 	lds	r30, 0x0563
    71d2:	f0 e0       	ldi	r31, 0x00	; 0
    71d4:	ee 0f       	add	r30, r30
    71d6:	ff 1f       	adc	r31, r31
    71d8:	ee 0f       	add	r30, r30
    71da:	ff 1f       	adc	r31, r31
    71dc:	ef 5e       	subi	r30, 0xEF	; 239
    71de:	fe 4e       	sbci	r31, 0xEE	; 238
    71e0:	40 81       	ld	r20, Z
    71e2:	51 81       	ldd	r21, Z+1	; 0x01
    71e4:	62 81       	ldd	r22, Z+2	; 0x02
    71e6:	73 81       	ldd	r23, Z+3	; 0x03
    71e8:	92 2d       	mov	r25, r2
  while(ch)
    71ea:	22 20       	and	r2, r2
    71ec:	59 f0       	breq	.+22     	; 0x7204 <_Z16process_commandsv+0x1444>
    71ee:	f4 01       	movw	r30, r8
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    71f0:	d8 01       	movw	r26, r16
    71f2:	8c 91       	ld	r24, X
    71f4:	85 ff       	sbrs	r24, 5
    71f6:	fc cf       	rjmp	.-8      	; 0x71f0 <_Z16process_commandsv+0x1430>
        ;

      M_UDRx = c;
    71f8:	d7 01       	movw	r26, r14
    71fa:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    71fc:	31 96       	adiw	r30, 0x01	; 1
    71fe:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7200:	91 11       	cpse	r25, r1
    7202:	f6 cf       	rjmp	.-20     	; 0x71f0 <_Z16process_commandsv+0x1430>
          {
            float tt=degHotend(active_extruder);
            SERIAL_PROTOCOLPGM("T:");
            SERIAL_PROTOCOL(tt);
    7204:	22 e0       	ldi	r18, 0x02	; 2
    7206:	30 e0       	ldi	r19, 0x00	; 0
    7208:	82 ed       	ldi	r24, 0xD2	; 210
    720a:	94 e0       	ldi	r25, 0x04	; 4
    720c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7210:	93 2d       	mov	r25, r3
  while(ch)
    7212:	33 20       	and	r3, r3
    7214:	59 f0       	breq	.+22     	; 0x722c <_Z16process_commandsv+0x146c>
    7216:	f5 01       	movw	r30, r10
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7218:	d8 01       	movw	r26, r16
    721a:	8c 91       	ld	r24, X
    721c:	85 ff       	sbrs	r24, 5
    721e:	fc cf       	rjmp	.-8      	; 0x7218 <_Z16process_commandsv+0x1458>
        ;

      M_UDRx = c;
    7220:	d7 01       	movw	r26, r14
    7222:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7224:	31 96       	adiw	r30, 0x01	; 1
    7226:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7228:	91 11       	cpse	r25, r1
    722a:	f6 cf       	rjmp	.-20     	; 0x7218 <_Z16process_commandsv+0x1458>
            SERIAL_PROTOCOLPGM(" E:");
            SERIAL_PROTOCOL((int)active_extruder);
    722c:	60 91 63 05 	lds	r22, 0x0563
    7230:	4a e0       	ldi	r20, 0x0A	; 10
    7232:	50 e0       	ldi	r21, 0x00	; 0
    7234:	70 e0       	ldi	r23, 0x00	; 0
    7236:	82 ed       	ldi	r24, 0xD2	; 210
    7238:	94 e0       	ldi	r25, 0x04	; 4
    723a:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    723e:	9f 8d       	ldd	r25, Y+31	; 0x1f
  while(ch)
    7240:	99 23       	and	r25, r25
    7242:	59 f0       	breq	.+22     	; 0x725a <_Z16process_commandsv+0x149a>
    7244:	f6 01       	movw	r30, r12
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7246:	d8 01       	movw	r26, r16
    7248:	8c 91       	ld	r24, X
    724a:	85 ff       	sbrs	r24, 5
    724c:	fc cf       	rjmp	.-8      	; 0x7246 <_Z16process_commandsv+0x1486>
        ;

      M_UDRx = c;
    724e:	d7 01       	movw	r26, r14
    7250:	9c 93       	st	X, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7252:	31 96       	adiw	r30, 0x01	; 1
    7254:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7256:	91 11       	cpse	r25, r1
    7258:	f6 cf       	rjmp	.-20     	; 0x7246 <_Z16process_commandsv+0x1486>
            SERIAL_PROTOCOLPGM(" B:");
            SERIAL_PROTOCOL_F(degBed(),1);
    725a:	40 91 0b 11 	lds	r20, 0x110B
    725e:	50 91 0c 11 	lds	r21, 0x110C
    7262:	60 91 0d 11 	lds	r22, 0x110D
    7266:	70 91 0e 11 	lds	r23, 0x110E
    726a:	21 e0       	ldi	r18, 0x01	; 1
    726c:	30 e0       	ldi	r19, 0x00	; 0
    726e:	82 ed       	ldi	r24, 0xD2	; 210
    7270:	94 e0       	ldi	r25, 0x04	; 4
    7272:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7276:	f8 01       	movw	r30, r16
    7278:	80 81       	ld	r24, Z
    727a:	85 ff       	sbrs	r24, 5
    727c:	fc cf       	rjmp	.-8      	; 0x7276 <_Z16process_commandsv+0x14b6>
        ;

      M_UDRx = c;
    727e:	ea e0       	ldi	r30, 0x0A	; 10
    7280:	d7 01       	movw	r26, r14
    7282:	ec 93       	st	X, r30
            SERIAL_PROTOCOLLN("");
            codenum = millis();
    7284:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    7288:	2b 01       	movw	r4, r22
    728a:	3c 01       	movw	r6, r24
          }
          manage_heater();
    728c:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
          manage_inactivity();
    7290:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_Z17manage_inactivityv>
          lcd_update();
    7294:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
        }
        codenum = millis();

        target_direction = isHeatingBed(); // true if heating, false if cooling

        while ( target_direction ? (isHeatingBed()) : (isCoolingBed()&&(CooldownNoWait==false)) )
    7298:	80 91 57 05 	lds	r24, 0x0557
    729c:	88 23       	and	r24, r24
    729e:	c1 f0       	breq	.+48     	; 0x72d0 <_Z16process_commandsv+0x1510>
FORCE_INLINE bool isHeatingHotend(uint8_t extruder){  
  return target_temperature[extruder] > current_temperature[extruder];
};

FORCE_INLINE bool isHeatingBed() {
  return target_temperature_bed > current_temperature_bed;
    72a0:	60 91 17 11 	lds	r22, 0x1117
    72a4:	70 91 18 11 	lds	r23, 0x1118
    72a8:	88 27       	eor	r24, r24
    72aa:	77 fd       	sbrc	r23, 7
    72ac:	80 95       	com	r24
    72ae:	98 2f       	mov	r25, r24
    72b0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    72b4:	20 91 0b 11 	lds	r18, 0x110B
    72b8:	30 91 0c 11 	lds	r19, 0x110C
    72bc:	40 91 0d 11 	lds	r20, 0x110D
    72c0:	50 91 0e 11 	lds	r21, 0x110E
    72c4:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    72c8:	18 16       	cp	r1, r24
    72ca:	0c f4       	brge	.+2      	; 0x72ce <_Z16process_commandsv+0x150e>
    72cc:	72 cf       	rjmp	.-284    	; 0x71b2 <_Z16process_commandsv+0x13f2>
    72ce:	1b c0       	rjmp	.+54     	; 0x7306 <_Z16process_commandsv+0x1546>
FORCE_INLINE bool isCoolingHotend(uint8_t extruder) {  
  return target_temperature[extruder] < current_temperature[extruder];
};

FORCE_INLINE bool isCoolingBed() {
  return target_temperature_bed < current_temperature_bed;
    72d0:	60 91 17 11 	lds	r22, 0x1117
    72d4:	70 91 18 11 	lds	r23, 0x1118
    72d8:	88 27       	eor	r24, r24
    72da:	77 fd       	sbrc	r23, 7
    72dc:	80 95       	com	r24
    72de:	98 2f       	mov	r25, r24
    72e0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    72e4:	20 91 0b 11 	lds	r18, 0x110B
    72e8:	30 91 0c 11 	lds	r19, 0x110C
    72ec:	40 91 0d 11 	lds	r20, 0x110D
    72f0:	50 91 0e 11 	lds	r21, 0x110E
    72f4:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    72f8:	88 23       	and	r24, r24
    72fa:	2c f4       	brge	.+10     	; 0x7306 <_Z16process_commandsv+0x1546>
    72fc:	80 91 0f 02 	lds	r24, 0x020F
    7300:	88 23       	and	r24, r24
    7302:	09 f4       	brne	.+2      	; 0x7306 <_Z16process_commandsv+0x1546>
    7304:	56 cf       	rjmp	.-340    	; 0x71b2 <_Z16process_commandsv+0x13f2>
          }
          manage_heater();
          manage_inactivity();
          lcd_update();
        }
        LCD_MESSAGEPGM(MSG_BED_DONE);
    7306:	88 ef       	ldi	r24, 0xF8	; 248
    7308:	95 e0       	ldi	r25, 0x05	; 5
    730a:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
        previous_millis_cmd = millis();
    730e:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    7312:	60 93 25 09 	sts	0x0925, r22
    7316:	70 93 26 09 	sts	0x0926, r23
    731a:	80 93 27 09 	sts	0x0927, r24
    731e:	90 93 28 09 	sts	0x0928, r25
    #endif
        break;
    7322:	76 c7       	rjmp	.+3820   	; 0x8210 <_Z16process_commandsv+0x2450>

    #if defined(FAN_PIN) && FAN_PIN > -1
      case 106: //M106 Fan On
        if (code_seen('S')){
    7324:	83 e5       	ldi	r24, 0x53	; 83
    7326:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    732a:	88 23       	and	r24, r24
    732c:	11 f1       	breq	.+68     	; 0x7372 <_Z16process_commandsv+0x15b2>
           fanSpeed=constrain(code_value(),0,255);
    732e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7332:	20 e0       	ldi	r18, 0x00	; 0
    7334:	30 e0       	ldi	r19, 0x00	; 0
    7336:	a9 01       	movw	r20, r18
    7338:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    733c:	88 23       	and	r24, r24
    733e:	7c f0       	brlt	.+30     	; 0x735e <_Z16process_commandsv+0x159e>
    7340:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7344:	20 e0       	ldi	r18, 0x00	; 0
    7346:	30 e0       	ldi	r19, 0x00	; 0
    7348:	4f e7       	ldi	r20, 0x7F	; 127
    734a:	53 e4       	ldi	r21, 0x43	; 67
    734c:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    7350:	18 16       	cp	r1, r24
    7352:	44 f0       	brlt	.+16     	; 0x7364 <_Z16process_commandsv+0x15a4>
    7354:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7358:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    735c:	05 c0       	rjmp	.+10     	; 0x7368 <_Z16process_commandsv+0x15a8>
    735e:	60 e0       	ldi	r22, 0x00	; 0
    7360:	70 e0       	ldi	r23, 0x00	; 0
    7362:	02 c0       	rjmp	.+4      	; 0x7368 <_Z16process_commandsv+0x15a8>
    7364:	6f ef       	ldi	r22, 0xFF	; 255
    7366:	70 e0       	ldi	r23, 0x00	; 0
    7368:	70 93 62 05 	sts	0x0562, r23
    736c:	60 93 61 05 	sts	0x0561, r22
    7370:	4f c7       	rjmp	.+3742   	; 0x8210 <_Z16process_commandsv+0x2450>
        }
        else {
          fanSpeed=255;
    7372:	8f ef       	ldi	r24, 0xFF	; 255
    7374:	90 e0       	ldi	r25, 0x00	; 0
    7376:	90 93 62 05 	sts	0x0562, r25
    737a:	80 93 61 05 	sts	0x0561, r24
    737e:	48 c7       	rjmp	.+3728   	; 0x8210 <_Z16process_commandsv+0x2450>
        }
        break;
      case 107: //M107 Fan Off
        fanSpeed = 0;
    7380:	10 92 62 05 	sts	0x0562, r1
    7384:	10 92 61 05 	sts	0x0561, r1
        break;
    7388:	43 c7       	rjmp	.+3718   	; 0x8210 <_Z16process_commandsv+0x2450>
      #endif //HEATER_2_PIN
    #endif

    #if defined(PS_ON_PIN) && PS_ON_PIN > -1
      case 80: // M80 - Turn on Power Supply
        SET_OUTPUT(PS_ON_PIN); //GND
    738a:	26 9a       	sbi	0x04, 6	; 4
        WRITE(PS_ON_PIN, PS_ON_AWAKE);
    738c:	2e 98       	cbi	0x05, 6	; 5
        #ifdef ULTIPANEL
          powersupply = true;
    738e:	81 e0       	ldi	r24, 0x01	; 1
    7390:	80 93 10 02 	sts	0x0210, r24
          LCD_MESSAGEPGM(WELCOME_MSG);
    7394:	82 e0       	ldi	r24, 0x02	; 2
    7396:	96 e0       	ldi	r25, 0x06	; 6
    7398:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
          lcd_update();
    739c:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
        #endif
        break;
    73a0:	37 c7       	rjmp	.+3694   	; 0x8210 <_Z16process_commandsv+0x2450>
      #endif

      case 81: // M81 - Turn off Power Supply
        disable_heater();
    73a2:	0e 94 b5 75 	call	0xeb6a	; 0xeb6a <_Z14disable_heaterv>
        st_synchronize();
    73a6:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
        disable_e0();
    73aa:	a0 9a       	sbi	0x14, 0	; 20
        disable_e1();
        disable_e2();
        finishAndDisableSteppers();
    73ac:	0e 94 80 72 	call	0xe500	; 0xe500 <_Z24finishAndDisableSteppersv>
        fanSpeed = 0;
    73b0:	10 92 62 05 	sts	0x0562, r1
    73b4:	10 92 61 05 	sts	0x0561, r1
        delay(1000); // Wait a little before to switch off
    73b8:	68 ee       	ldi	r22, 0xE8	; 232
    73ba:	73 e0       	ldi	r23, 0x03	; 3
    73bc:	80 e0       	ldi	r24, 0x00	; 0
    73be:	90 e0       	ldi	r25, 0x00	; 0
    73c0:	0e 94 11 ba 	call	0x17422	; 0x17422 <delay>
      #if defined(SUICIDE_PIN) && SUICIDE_PIN > -1
        st_synchronize();
    73c4:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
        suicide();
    73c8:	0e 94 7f 23 	call	0x46fe	; 0x46fe <_Z7suicidev>
      #elif defined(PS_ON_PIN) && PS_ON_PIN > -1
        SET_OUTPUT(PS_ON_PIN);
        WRITE(PS_ON_PIN, PS_ON_ASLEEP);
      #endif
      #ifdef ULTIPANEL
        powersupply = false;
    73cc:	10 92 10 02 	sts	0x0210, r1
        LCD_MESSAGEPGM(MACHINE_NAME" "MSG_OFF".");
    73d0:	83 e1       	ldi	r24, 0x13	; 19
    73d2:	96 e0       	ldi	r25, 0x06	; 6
    73d4:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
        lcd_update();
    73d8:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
      #endif
	  break;
    73dc:	19 c7       	rjmp	.+3634   	; 0x8210 <_Z16process_commandsv+0x2450>

    case 82:
      axis_relative_modes[3] = false;
    73de:	10 92 91 05 	sts	0x0591, r1
      break;
    73e2:	16 c7       	rjmp	.+3628   	; 0x8210 <_Z16process_commandsv+0x2450>
    case 83:
      axis_relative_modes[3] = true;
    73e4:	81 e0       	ldi	r24, 0x01	; 1
    73e6:	80 93 91 05 	sts	0x0591, r24
      break;
    73ea:	12 c7       	rjmp	.+3620   	; 0x8210 <_Z16process_commandsv+0x2450>
    case 18: //compatibility
    case 84: // M84
      if(code_seen('S')){
    73ec:	83 e5       	ldi	r24, 0x53	; 83
    73ee:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    73f2:	88 23       	and	r24, r24
    73f4:	99 f0       	breq	.+38     	; 0x741c <_Z16process_commandsv+0x165c>
        stepper_inactive_time = code_value() * 1000;
    73f6:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	4a e7       	ldi	r20, 0x7A	; 122
    7400:	54 e4       	ldi	r21, 0x44	; 68
    7402:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    7406:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    740a:	60 93 36 02 	sts	0x0236, r22
    740e:	70 93 37 02 	sts	0x0237, r23
    7412:	80 93 38 02 	sts	0x0238, r24
    7416:	90 93 39 02 	sts	0x0239, r25
    741a:	fa c6       	rjmp	.+3572   	; 0x8210 <_Z16process_commandsv+0x2450>
      }
      else
      {
        bool all_axis = !((code_seen(axis_codes[0])) || (code_seen(axis_codes[1])) || (code_seen(axis_codes[2]))|| (code_seen(axis_codes[3])));
    741c:	88 e5       	ldi	r24, 0x58	; 88
    741e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7422:	81 11       	cpse	r24, r1
    7424:	15 c0       	rjmp	.+42     	; 0x7450 <_Z16process_commandsv+0x1690>
    7426:	89 e5       	ldi	r24, 0x59	; 89
    7428:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    742c:	81 11       	cpse	r24, r1
    742e:	10 c0       	rjmp	.+32     	; 0x7450 <_Z16process_commandsv+0x1690>
    7430:	8a e5       	ldi	r24, 0x5A	; 90
    7432:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7436:	81 11       	cpse	r24, r1
    7438:	0b c0       	rjmp	.+22     	; 0x7450 <_Z16process_commandsv+0x1690>
    743a:	85 e4       	ldi	r24, 0x45	; 69
    743c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
        if(all_axis)
    7440:	81 11       	cpse	r24, r1
    7442:	06 c0       	rjmp	.+12     	; 0x7450 <_Z16process_commandsv+0x1690>
        {
          st_synchronize();
    7444:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
          disable_e0();
    7448:	a0 9a       	sbi	0x14, 0	; 20
          disable_e1();
          disable_e2();
          finishAndDisableSteppers();
    744a:	0e 94 80 72 	call	0xe500	; 0xe500 <_Z24finishAndDisableSteppersv>
    744e:	e0 c6       	rjmp	.+3520   	; 0x8210 <_Z16process_commandsv+0x2450>
        }
        else
        {
          st_synchronize();
    7450:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
          if(code_seen('X')) disable_x();
    7454:	88 e5       	ldi	r24, 0x58	; 88
    7456:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    745a:	81 11       	cpse	r24, r1
    745c:	15 9a       	sbi	0x02, 5	; 2
          if(code_seen('Y')) disable_y();
    745e:	89 e5       	ldi	r24, 0x59	; 89
    7460:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7464:	81 11       	cpse	r24, r1
    7466:	17 9a       	sbi	0x02, 7	; 2
          if(code_seen('Z')) disable_z();
    7468:	8a e5       	ldi	r24, 0x5A	; 90
    746a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    746e:	81 11       	cpse	r24, r1
    7470:	42 9a       	sbi	0x08, 2	; 8
          #if ((E0_ENABLE_PIN != X_ENABLE_PIN) && (E1_ENABLE_PIN != Y_ENABLE_PIN)) // Only enable on boards that have seperate ENABLE_PINS
            if(code_seen('E')) {
    7472:	85 e4       	ldi	r24, 0x45	; 69
    7474:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7478:	88 23       	and	r24, r24
    747a:	09 f4       	brne	.+2      	; 0x747e <_Z16process_commandsv+0x16be>
    747c:	c9 c6       	rjmp	.+3474   	; 0x8210 <_Z16process_commandsv+0x2450>
              disable_e0();
    747e:	a0 9a       	sbi	0x14, 0	; 20
    7480:	c7 c6       	rjmp	.+3470   	; 0x8210 <_Z16process_commandsv+0x2450>
          #endif
        }
      }
      break;
    case 85: // M85
      code_seen('S');
    7482:	83 e5       	ldi	r24, 0x53	; 83
    7484:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
      max_inactive_time = code_value() * 1000;
    7488:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    748c:	20 e0       	ldi	r18, 0x00	; 0
    748e:	30 e0       	ldi	r19, 0x00	; 0
    7490:	4a e7       	ldi	r20, 0x7A	; 122
    7492:	54 e4       	ldi	r21, 0x44	; 68
    7494:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    7498:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    749c:	60 93 3f 09 	sts	0x093F, r22
    74a0:	70 93 40 09 	sts	0x0940, r23
    74a4:	80 93 41 09 	sts	0x0941, r24
    74a8:	90 93 42 09 	sts	0x0942, r25
      break;
    74ac:	b1 c6       	rjmp	.+3426   	; 0x8210 <_Z16process_commandsv+0x2450>
    74ae:	0f 2e       	mov	r0, r31
    74b0:	fa ee       	ldi	r31, 0xEA	; 234
    74b2:	af 2e       	mov	r10, r31
    74b4:	f3 e0       	ldi	r31, 0x03	; 3
    74b6:	bf 2e       	mov	r11, r31
    74b8:	f0 2d       	mov	r31, r0
    74ba:	0f 2e       	mov	r0, r31
    74bc:	f6 e7       	ldi	r31, 0x76	; 118
    74be:	cf 2e       	mov	r12, r31
    74c0:	fe e0       	ldi	r31, 0x0E	; 14
    74c2:	df 2e       	mov	r13, r31
    74c4:	f0 2d       	mov	r31, r0
    }
  }

  else if(code_seen('M'))
  {
    switch( (int)code_value() )
    74c6:	e1 2c       	mov	r14, r1
    74c8:	f1 2c       	mov	r15, r1
      max_inactive_time = code_value() * 1000;
      break;
    case 92: // M92
      for(int8_t i=0; i < NUM_AXIS; i++)
      {
        if(code_seen(axis_codes[i]))
    74ca:	87 01       	movw	r16, r14
    74cc:	d5 01       	movw	r26, r10
    74ce:	8d 91       	ld	r24, X+
    74d0:	5d 01       	movw	r10, r26
    74d2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    74d6:	88 23       	and	r24, r24
    74d8:	09 f4       	brne	.+2      	; 0x74dc <_Z16process_commandsv+0x171c>
    74da:	7f c0       	rjmp	.+254    	; 0x75da <_Z16process_commandsv+0x181a>
        {
          if(i == 3) { // E
    74dc:	b3 e0       	ldi	r27, 0x03	; 3
    74de:	eb 12       	cpse	r14, r27
    74e0:	74 c0       	rjmp	.+232    	; 0x75ca <_Z16process_commandsv+0x180a>
            float value = code_value();
    74e2:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    74e6:	4b 01       	movw	r8, r22
    74e8:	5c 01       	movw	r10, r24
            if(value < 20.0) {
    74ea:	20 e0       	ldi	r18, 0x00	; 0
    74ec:	30 e0       	ldi	r19, 0x00	; 0
    74ee:	40 ea       	ldi	r20, 0xA0	; 160
    74f0:	51 e4       	ldi	r21, 0x41	; 65
    74f2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    74f6:	88 23       	and	r24, r24
    74f8:	0c f0       	brlt	.+2      	; 0x74fc <_Z16process_commandsv+0x173c>
    74fa:	5b c0       	rjmp	.+182    	; 0x75b2 <_Z16process_commandsv+0x17f2>
              float factor = axis_steps_per_unit[i] / value; // increase e constants if M92 E14 is given for netfab.
    74fc:	ee 0c       	add	r14, r14
    74fe:	ff 1c       	adc	r15, r15
    7500:	ee 0c       	add	r14, r14
    7502:	ff 1c       	adc	r15, r15
    7504:	f7 01       	movw	r30, r14
    7506:	ea 58       	subi	r30, 0x8A	; 138
    7508:	f1 4f       	sbci	r31, 0xF1	; 241
    750a:	a5 01       	movw	r20, r10
    750c:	94 01       	movw	r18, r8
    750e:	60 81       	ld	r22, Z
    7510:	71 81       	ldd	r23, Z+1	; 0x01
    7512:	82 81       	ldd	r24, Z+2	; 0x02
    7514:	93 81       	ldd	r25, Z+3	; 0x03
    7516:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    751a:	46 2e       	mov	r4, r22
    751c:	57 2e       	mov	r5, r23
    751e:	68 2e       	mov	r6, r24
    7520:	79 2e       	mov	r7, r25
              max_e_jerk *= factor;
    7522:	76 2f       	mov	r23, r22
    7524:	27 2f       	mov	r18, r23
    7526:	35 2d       	mov	r19, r5
    7528:	46 2d       	mov	r20, r6
    752a:	57 2d       	mov	r21, r7
    752c:	60 91 4e 0e 	lds	r22, 0x0E4E
    7530:	70 91 4f 0e 	lds	r23, 0x0E4F
    7534:	80 91 50 0e 	lds	r24, 0x0E50
    7538:	90 91 51 0e 	lds	r25, 0x0E51
    753c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    7540:	60 93 4e 0e 	sts	0x0E4E, r22
    7544:	70 93 4f 0e 	sts	0x0E4F, r23
    7548:	80 93 50 0e 	sts	0x0E50, r24
    754c:	90 93 51 0e 	sts	0x0E51, r25
              max_feedrate[i] *= factor;
    7550:	0f 2e       	mov	r0, r31
    7552:	f6 e8       	ldi	r31, 0x86	; 134
    7554:	cf 2e       	mov	r12, r31
    7556:	fe e0       	ldi	r31, 0x0E	; 14
    7558:	df 2e       	mov	r13, r31
    755a:	f0 2d       	mov	r31, r0
    755c:	ce 0c       	add	r12, r14
    755e:	df 1c       	adc	r13, r15
    7560:	24 2d       	mov	r18, r4
    7562:	35 2d       	mov	r19, r5
    7564:	46 2d       	mov	r20, r6
    7566:	57 2d       	mov	r21, r7
    7568:	f6 01       	movw	r30, r12
    756a:	60 81       	ld	r22, Z
    756c:	71 81       	ldd	r23, Z+1	; 0x01
    756e:	82 81       	ldd	r24, Z+2	; 0x02
    7570:	93 81       	ldd	r25, Z+3	; 0x03
    7572:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    7576:	d6 01       	movw	r26, r12
    7578:	6d 93       	st	X+, r22
    757a:	7d 93       	st	X+, r23
    757c:	8d 93       	st	X+, r24
    757e:	9c 93       	st	X, r25
    7580:	13 97       	sbiw	r26, 0x03	; 3
              axis_steps_per_sqr_second[i] *= factor;
    7582:	ea e3       	ldi	r30, 0x3A	; 58
    7584:	fe e0       	ldi	r31, 0x0E	; 14
    7586:	ee 0e       	add	r14, r30
    7588:	ff 1e       	adc	r15, r31
    758a:	d7 01       	movw	r26, r14
    758c:	6d 91       	ld	r22, X+
    758e:	7d 91       	ld	r23, X+
    7590:	8d 91       	ld	r24, X+
    7592:	9c 91       	ld	r25, X
    7594:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    7598:	24 2d       	mov	r18, r4
    759a:	35 2d       	mov	r19, r5
    759c:	46 2d       	mov	r20, r6
    759e:	57 2d       	mov	r21, r7
    75a0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    75a4:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    75a8:	f7 01       	movw	r30, r14
    75aa:	60 83       	st	Z, r22
    75ac:	71 83       	std	Z+1, r23	; 0x01
    75ae:	82 83       	std	Z+2, r24	; 0x02
    75b0:	93 83       	std	Z+3, r25	; 0x03
            }
            axis_steps_per_unit[i] = value;
    75b2:	f8 01       	movw	r30, r16
    75b4:	ee 0f       	add	r30, r30
    75b6:	ff 1f       	adc	r31, r31
    75b8:	ee 0f       	add	r30, r30
    75ba:	ff 1f       	adc	r31, r31
    75bc:	ea 58       	subi	r30, 0x8A	; 138
    75be:	f1 4f       	sbci	r31, 0xF1	; 241
    75c0:	80 82       	st	Z, r8
    75c2:	91 82       	std	Z+1, r9	; 0x01
    75c4:	a2 82       	std	Z+2, r10	; 0x02
    75c6:	b3 82       	std	Z+3, r11	; 0x03
    75c8:	23 c6       	rjmp	.+3142   	; 0x8210 <_Z16process_commandsv+0x2450>
          }
          else {
            axis_steps_per_unit[i] = code_value();
    75ca:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    75ce:	d6 01       	movw	r26, r12
    75d0:	6d 93       	st	X+, r22
    75d2:	7d 93       	st	X+, r23
    75d4:	8d 93       	st	X+, r24
    75d6:	9c 93       	st	X, r25
    75d8:	13 97       	sbiw	r26, 0x03	; 3
    75da:	bf ef       	ldi	r27, 0xFF	; 255
    75dc:	eb 1a       	sub	r14, r27
    75de:	fb 0a       	sbc	r15, r27
    75e0:	e4 e0       	ldi	r30, 0x04	; 4
    75e2:	ce 0e       	add	r12, r30
    75e4:	d1 1c       	adc	r13, r1
    case 85: // M85
      code_seen('S');
      max_inactive_time = code_value() * 1000;
      break;
    case 92: // M92
      for(int8_t i=0; i < NUM_AXIS; i++)
    75e6:	f4 e0       	ldi	r31, 0x04	; 4
    75e8:	ef 16       	cp	r14, r31
    75ea:	f1 04       	cpc	r15, r1
    75ec:	09 f0       	breq	.+2      	; 0x75f0 <_Z16process_commandsv+0x1830>
    75ee:	6d cf       	rjmp	.-294    	; 0x74ca <_Z16process_commandsv+0x170a>
    75f0:	0f c6       	rjmp	.+3102   	; 0x8210 <_Z16process_commandsv+0x2450>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    75f2:	e2 e2       	ldi	r30, 0x22	; 34
    75f4:	f6 e0       	ldi	r31, 0x06	; 6
    75f6:	34 91       	lpm	r19, Z
  while(ch)
    75f8:	33 23       	and	r19, r19
    75fa:	09 f4       	brne	.+2      	; 0x75fe <_Z16process_commandsv+0x183e>
    75fc:	09 c6       	rjmp	.+3090   	; 0x8210 <_Z16process_commandsv+0x2450>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    75fe:	a0 ec       	ldi	r26, 0xC0	; 192
    7600:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7602:	86 ec       	ldi	r24, 0xC6	; 198
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7608:	2c 91       	ld	r18, X
    760a:	25 ff       	sbrs	r18, 5
    760c:	fd cf       	rjmp	.-6      	; 0x7608 <_Z16process_commandsv+0x1848>
        ;

      M_UDRx = c;
    760e:	fc 01       	movw	r30, r24
    7610:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7612:	4f 5f       	subi	r20, 0xFF	; 255
    7614:	5f 4f       	sbci	r21, 0xFF	; 255
    7616:	fa 01       	movw	r30, r20
    7618:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    761a:	31 11       	cpse	r19, r1
    761c:	f5 cf       	rjmp	.-22     	; 0x7608 <_Z16process_commandsv+0x1848>
    761e:	f8 c5       	rjmp	.+3056   	; 0x8210 <_Z16process_commandsv+0x2450>
      break;
    case 115: // M115
      SERIAL_PROTOCOLPGM(MSG_M115_REPORT);
      break;
    case 117: // M117 display message
      starpos = (strchr(strchr_pointer + 5,'*'));
    7620:	00 91 1b 09 	lds	r16, 0x091B
    7624:	10 91 1c 09 	lds	r17, 0x091C
    7628:	0b 5f       	subi	r16, 0xFB	; 251
    762a:	1f 4f       	sbci	r17, 0xFF	; 255
    762c:	6a e2       	ldi	r22, 0x2A	; 42
    762e:	70 e0       	ldi	r23, 0x00	; 0
    7630:	c8 01       	movw	r24, r16
    7632:	0e 94 21 c4 	call	0x18842	; 0x18842 <strchr>
      if(starpos!=NULL)
    7636:	00 97       	sbiw	r24, 0x00	; 0
    7638:	19 f0       	breq	.+6      	; 0x7640 <_Z16process_commandsv+0x1880>
        *(starpos-1)='\0';
    763a:	fc 01       	movw	r30, r24
    763c:	31 97       	sbiw	r30, 0x01	; 1
    763e:	10 82       	st	Z, r1
      lcd_setstatus(strchr_pointer + 5);
    7640:	c8 01       	movw	r24, r16
    7642:	0e 94 28 94 	call	0x12850	; 0x12850 <_Z13lcd_setstatusPKc>
      break;
    7646:	e4 c5       	rjmp	.+3016   	; 0x8210 <_Z16process_commandsv+0x2450>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7648:	e2 ec       	ldi	r30, 0xC2	; 194
    764a:	f6 e0       	ldi	r31, 0x06	; 6
    764c:	34 91       	lpm	r19, Z
  while(ch)
    764e:	33 23       	and	r19, r19
    7650:	81 f0       	breq	.+32     	; 0x7672 <_Z16process_commandsv+0x18b2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7652:	a0 ec       	ldi	r26, 0xC0	; 192
    7654:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7656:	86 ec       	ldi	r24, 0xC6	; 198
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    765c:	2c 91       	ld	r18, X
    765e:	25 ff       	sbrs	r18, 5
    7660:	fd cf       	rjmp	.-6      	; 0x765c <_Z16process_commandsv+0x189c>
        ;

      M_UDRx = c;
    7662:	fc 01       	movw	r30, r24
    7664:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7666:	4f 5f       	subi	r20, 0xFF	; 255
    7668:	5f 4f       	sbci	r21, 0xFF	; 255
    766a:	fa 01       	movw	r30, r20
    766c:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    766e:	31 11       	cpse	r19, r1
    7670:	f5 cf       	rjmp	.-22     	; 0x765c <_Z16process_commandsv+0x189c>
    case 114: // M114
      SERIAL_PROTOCOLPGM("X:");
      SERIAL_PROTOCOL(current_position[X_AXIS]);
    7672:	40 91 7c 05 	lds	r20, 0x057C
    7676:	50 91 7d 05 	lds	r21, 0x057D
    767a:	60 91 7e 05 	lds	r22, 0x057E
    767e:	70 91 7f 05 	lds	r23, 0x057F
    7682:	22 e0       	ldi	r18, 0x02	; 2
    7684:	30 e0       	ldi	r19, 0x00	; 0
    7686:	82 ed       	ldi	r24, 0xD2	; 210
    7688:	94 e0       	ldi	r25, 0x04	; 4
    768a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    768e:	e5 ec       	ldi	r30, 0xC5	; 197
    7690:	f6 e0       	ldi	r31, 0x06	; 6
    7692:	34 91       	lpm	r19, Z
  while(ch)
    7694:	33 23       	and	r19, r19
    7696:	81 f0       	breq	.+32     	; 0x76b8 <_Z16process_commandsv+0x18f8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7698:	a0 ec       	ldi	r26, 0xC0	; 192
    769a:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    769c:	86 ec       	ldi	r24, 0xC6	; 198
    769e:	90 e0       	ldi	r25, 0x00	; 0
    76a0:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    76a2:	2c 91       	ld	r18, X
    76a4:	25 ff       	sbrs	r18, 5
    76a6:	fd cf       	rjmp	.-6      	; 0x76a2 <_Z16process_commandsv+0x18e2>
        ;

      M_UDRx = c;
    76a8:	fc 01       	movw	r30, r24
    76aa:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    76ac:	4f 5f       	subi	r20, 0xFF	; 255
    76ae:	5f 4f       	sbci	r21, 0xFF	; 255
    76b0:	fa 01       	movw	r30, r20
    76b2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    76b4:	31 11       	cpse	r19, r1
    76b6:	f5 cf       	rjmp	.-22     	; 0x76a2 <_Z16process_commandsv+0x18e2>
      SERIAL_PROTOCOLPGM("Y:");
      SERIAL_PROTOCOL(current_position[Y_AXIS]);
    76b8:	40 91 80 05 	lds	r20, 0x0580
    76bc:	50 91 81 05 	lds	r21, 0x0581
    76c0:	60 91 82 05 	lds	r22, 0x0582
    76c4:	70 91 83 05 	lds	r23, 0x0583
    76c8:	22 e0       	ldi	r18, 0x02	; 2
    76ca:	30 e0       	ldi	r19, 0x00	; 0
    76cc:	82 ed       	ldi	r24, 0xD2	; 210
    76ce:	94 e0       	ldi	r25, 0x04	; 4
    76d0:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    76d4:	e8 ec       	ldi	r30, 0xC8	; 200
    76d6:	f6 e0       	ldi	r31, 0x06	; 6
    76d8:	34 91       	lpm	r19, Z
  while(ch)
    76da:	33 23       	and	r19, r19
    76dc:	81 f0       	breq	.+32     	; 0x76fe <_Z16process_commandsv+0x193e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    76de:	a0 ec       	ldi	r26, 0xC0	; 192
    76e0:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    76e2:	86 ec       	ldi	r24, 0xC6	; 198
    76e4:	90 e0       	ldi	r25, 0x00	; 0
    76e6:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    76e8:	2c 91       	ld	r18, X
    76ea:	25 ff       	sbrs	r18, 5
    76ec:	fd cf       	rjmp	.-6      	; 0x76e8 <_Z16process_commandsv+0x1928>
        ;

      M_UDRx = c;
    76ee:	fc 01       	movw	r30, r24
    76f0:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    76f2:	4f 5f       	subi	r20, 0xFF	; 255
    76f4:	5f 4f       	sbci	r21, 0xFF	; 255
    76f6:	fa 01       	movw	r30, r20
    76f8:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    76fa:	31 11       	cpse	r19, r1
    76fc:	f5 cf       	rjmp	.-22     	; 0x76e8 <_Z16process_commandsv+0x1928>
      SERIAL_PROTOCOLPGM("Z:");
      SERIAL_PROTOCOL(current_position[Z_AXIS]);
    76fe:	40 91 84 05 	lds	r20, 0x0584
    7702:	50 91 85 05 	lds	r21, 0x0585
    7706:	60 91 86 05 	lds	r22, 0x0586
    770a:	70 91 87 05 	lds	r23, 0x0587
    770e:	22 e0       	ldi	r18, 0x02	; 2
    7710:	30 e0       	ldi	r19, 0x00	; 0
    7712:	82 ed       	ldi	r24, 0xD2	; 210
    7714:	94 e0       	ldi	r25, 0x04	; 4
    7716:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    771a:	eb ec       	ldi	r30, 0xCB	; 203
    771c:	f6 e0       	ldi	r31, 0x06	; 6
    771e:	34 91       	lpm	r19, Z
  while(ch)
    7720:	33 23       	and	r19, r19
    7722:	81 f0       	breq	.+32     	; 0x7744 <_Z16process_commandsv+0x1984>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7724:	a0 ec       	ldi	r26, 0xC0	; 192
    7726:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7728:	86 ec       	ldi	r24, 0xC6	; 198
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    772e:	2c 91       	ld	r18, X
    7730:	25 ff       	sbrs	r18, 5
    7732:	fd cf       	rjmp	.-6      	; 0x772e <_Z16process_commandsv+0x196e>
        ;

      M_UDRx = c;
    7734:	fc 01       	movw	r30, r24
    7736:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7738:	4f 5f       	subi	r20, 0xFF	; 255
    773a:	5f 4f       	sbci	r21, 0xFF	; 255
    773c:	fa 01       	movw	r30, r20
    773e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7740:	31 11       	cpse	r19, r1
    7742:	f5 cf       	rjmp	.-22     	; 0x772e <_Z16process_commandsv+0x196e>
      SERIAL_PROTOCOLPGM("E:");
      SERIAL_PROTOCOL(current_position[E_AXIS]);
    7744:	40 91 88 05 	lds	r20, 0x0588
    7748:	50 91 89 05 	lds	r21, 0x0589
    774c:	60 91 8a 05 	lds	r22, 0x058A
    7750:	70 91 8b 05 	lds	r23, 0x058B
    7754:	22 e0       	ldi	r18, 0x02	; 2
    7756:	30 e0       	ldi	r19, 0x00	; 0
    7758:	82 ed       	ldi	r24, 0xD2	; 210
    775a:	94 e0       	ldi	r25, 0x04	; 4
    775c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7760:	ee ec       	ldi	r30, 0xCE	; 206
    7762:	f6 e0       	ldi	r31, 0x06	; 6
    7764:	34 91       	lpm	r19, Z
  while(ch)
    7766:	33 23       	and	r19, r19
    7768:	81 f0       	breq	.+32     	; 0x778a <_Z16process_commandsv+0x19ca>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    776a:	a0 ec       	ldi	r26, 0xC0	; 192
    776c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    776e:	86 ec       	ldi	r24, 0xC6	; 198
    7770:	90 e0       	ldi	r25, 0x00	; 0
    7772:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7774:	2c 91       	ld	r18, X
    7776:	25 ff       	sbrs	r18, 5
    7778:	fd cf       	rjmp	.-6      	; 0x7774 <_Z16process_commandsv+0x19b4>
        ;

      M_UDRx = c;
    777a:	fc 01       	movw	r30, r24
    777c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    777e:	4f 5f       	subi	r20, 0xFF	; 255
    7780:	5f 4f       	sbci	r21, 0xFF	; 255
    7782:	fa 01       	movw	r30, r20
    7784:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7786:	31 11       	cpse	r19, r1
    7788:	f5 cf       	rjmp	.-22     	; 0x7774 <_Z16process_commandsv+0x19b4>

      SERIAL_PROTOCOLPGM(MSG_COUNT_X);
      SERIAL_PROTOCOL(float(st_get_position(X_AXIS))/axis_steps_per_unit[X_AXIS]);
    778a:	80 e0       	ldi	r24, 0x00	; 0
    778c:	0e 94 68 72 	call	0xe4d0	; 0xe4d0 <_Z15st_get_positionh>
    7790:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    7794:	20 91 76 0e 	lds	r18, 0x0E76
    7798:	30 91 77 0e 	lds	r19, 0x0E77
    779c:	40 91 78 0e 	lds	r20, 0x0E78
    77a0:	50 91 79 0e 	lds	r21, 0x0E79
    77a4:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    77a8:	ab 01       	movw	r20, r22
    77aa:	bc 01       	movw	r22, r24
    77ac:	22 e0       	ldi	r18, 0x02	; 2
    77ae:	30 e0       	ldi	r19, 0x00	; 0
    77b0:	82 ed       	ldi	r24, 0xD2	; 210
    77b2:	94 e0       	ldi	r25, 0x04	; 4
    77b4:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    77b8:	e9 ed       	ldi	r30, 0xD9	; 217
    77ba:	f6 e0       	ldi	r31, 0x06	; 6
    77bc:	34 91       	lpm	r19, Z
  while(ch)
    77be:	33 23       	and	r19, r19
    77c0:	81 f0       	breq	.+32     	; 0x77e2 <_Z16process_commandsv+0x1a22>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    77c2:	a0 ec       	ldi	r26, 0xC0	; 192
    77c4:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    77c6:	86 ec       	ldi	r24, 0xC6	; 198
    77c8:	90 e0       	ldi	r25, 0x00	; 0
    77ca:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    77cc:	2c 91       	ld	r18, X
    77ce:	25 ff       	sbrs	r18, 5
    77d0:	fd cf       	rjmp	.-6      	; 0x77cc <_Z16process_commandsv+0x1a0c>
        ;

      M_UDRx = c;
    77d2:	fc 01       	movw	r30, r24
    77d4:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    77d6:	4f 5f       	subi	r20, 0xFF	; 255
    77d8:	5f 4f       	sbci	r21, 0xFF	; 255
    77da:	fa 01       	movw	r30, r20
    77dc:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    77de:	31 11       	cpse	r19, r1
    77e0:	f5 cf       	rjmp	.-22     	; 0x77cc <_Z16process_commandsv+0x1a0c>
      SERIAL_PROTOCOLPGM("Y:");
      SERIAL_PROTOCOL(float(st_get_position(Y_AXIS))/axis_steps_per_unit[Y_AXIS]);
    77e2:	81 e0       	ldi	r24, 0x01	; 1
    77e4:	0e 94 68 72 	call	0xe4d0	; 0xe4d0 <_Z15st_get_positionh>
    77e8:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    77ec:	20 91 7a 0e 	lds	r18, 0x0E7A
    77f0:	30 91 7b 0e 	lds	r19, 0x0E7B
    77f4:	40 91 7c 0e 	lds	r20, 0x0E7C
    77f8:	50 91 7d 0e 	lds	r21, 0x0E7D
    77fc:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    7800:	ab 01       	movw	r20, r22
    7802:	bc 01       	movw	r22, r24
    7804:	22 e0       	ldi	r18, 0x02	; 2
    7806:	30 e0       	ldi	r19, 0x00	; 0
    7808:	82 ed       	ldi	r24, 0xD2	; 210
    780a:	94 e0       	ldi	r25, 0x04	; 4
    780c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7810:	ec ed       	ldi	r30, 0xDC	; 220
    7812:	f6 e0       	ldi	r31, 0x06	; 6
    7814:	34 91       	lpm	r19, Z
  while(ch)
    7816:	33 23       	and	r19, r19
    7818:	81 f0       	breq	.+32     	; 0x783a <_Z16process_commandsv+0x1a7a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    781a:	a0 ec       	ldi	r26, 0xC0	; 192
    781c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    781e:	86 ec       	ldi	r24, 0xC6	; 198
    7820:	90 e0       	ldi	r25, 0x00	; 0
    7822:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7824:	2c 91       	ld	r18, X
    7826:	25 ff       	sbrs	r18, 5
    7828:	fd cf       	rjmp	.-6      	; 0x7824 <_Z16process_commandsv+0x1a64>
        ;

      M_UDRx = c;
    782a:	fc 01       	movw	r30, r24
    782c:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    782e:	4f 5f       	subi	r20, 0xFF	; 255
    7830:	5f 4f       	sbci	r21, 0xFF	; 255
    7832:	fa 01       	movw	r30, r20
    7834:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7836:	31 11       	cpse	r19, r1
    7838:	f5 cf       	rjmp	.-22     	; 0x7824 <_Z16process_commandsv+0x1a64>
      SERIAL_PROTOCOLPGM("Z:");
      SERIAL_PROTOCOL(float(st_get_position(Z_AXIS))/axis_steps_per_unit[Z_AXIS]);
    783a:	82 e0       	ldi	r24, 0x02	; 2
    783c:	0e 94 68 72 	call	0xe4d0	; 0xe4d0 <_Z15st_get_positionh>
    7840:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    7844:	20 91 7e 0e 	lds	r18, 0x0E7E
    7848:	30 91 7f 0e 	lds	r19, 0x0E7F
    784c:	40 91 80 0e 	lds	r20, 0x0E80
    7850:	50 91 81 0e 	lds	r21, 0x0E81
    7854:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    7858:	ab 01       	movw	r20, r22
    785a:	bc 01       	movw	r22, r24
    785c:	22 e0       	ldi	r18, 0x02	; 2
    785e:	30 e0       	ldi	r19, 0x00	; 0
    7860:	82 ed       	ldi	r24, 0xD2	; 210
    7862:	94 e0       	ldi	r25, 0x04	; 4
    7864:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7868:	e0 ec       	ldi	r30, 0xC0	; 192
    786a:	f0 e0       	ldi	r31, 0x00	; 0
    786c:	80 81       	ld	r24, Z
    786e:	85 ff       	sbrs	r24, 5
    7870:	fd cf       	rjmp	.-6      	; 0x786c <_Z16process_commandsv+0x1aac>
        ;

      M_UDRx = c;
    7872:	8a e0       	ldi	r24, 0x0A	; 10
    7874:	80 93 c6 00 	sts	0x00C6, r24
    7878:	cb c4       	rjmp	.+2454   	; 0x8210 <_Z16process_commandsv+0x2450>

      SERIAL_PROTOCOLLN("");
      break;
    case 120: // M120
      enable_endstops(false) ;
    787a:	80 e0       	ldi	r24, 0x00	; 0
    787c:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <_Z15enable_endstopsb>
      break;
    7880:	c7 c4       	rjmp	.+2446   	; 0x8210 <_Z16process_commandsv+0x2450>
    case 121: // M121
      enable_endstops(true) ;
    7882:	81 e0       	ldi	r24, 0x01	; 1
    7884:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <_Z15enable_endstopsb>
      break;
    7888:	c3 c4       	rjmp	.+2438   	; 0x8210 <_Z16process_commandsv+0x2450>
    788a:	ac e9       	ldi	r26, 0x9C	; 156
    788c:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    788e:	32 e5       	ldi	r19, 0x52	; 82
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7890:	e0 ec       	ldi	r30, 0xC0	; 192
    7892:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7894:	86 ec       	ldi	r24, 0xC6	; 198
    7896:	90 e0       	ldi	r25, 0x00	; 0
    7898:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    789a:	20 81       	ld	r18, Z
    789c:	25 ff       	sbrs	r18, 5
    789e:	fd cf       	rjmp	.-6      	; 0x789a <_Z16process_commandsv+0x1ada>
        ;

      M_UDRx = c;
    78a0:	dc 01       	movw	r26, r24
    78a2:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    78a4:	da 01       	movw	r26, r20
    78a6:	3d 91       	ld	r19, X+
    78a8:	ad 01       	movw	r20, r26
    78aa:	31 11       	cpse	r19, r1
    78ac:	f6 cf       	rjmp	.-20     	; 0x789a <_Z16process_commandsv+0x1ada>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    78ae:	e0 ec       	ldi	r30, 0xC0	; 192
    78b0:	f0 e0       	ldi	r31, 0x00	; 0
    78b2:	80 81       	ld	r24, Z
    78b4:	85 ff       	sbrs	r24, 5
    78b6:	fd cf       	rjmp	.-6      	; 0x78b2 <_Z16process_commandsv+0x1af2>
        ;

      M_UDRx = c;
    78b8:	8a e0       	ldi	r24, 0x0A	; 10
    78ba:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    78be:	ef ed       	ldi	r30, 0xDF	; 223
    78c0:	f6 e0       	ldi	r31, 0x06	; 6
    78c2:	34 91       	lpm	r19, Z
  while(ch)
    78c4:	33 23       	and	r19, r19
    78c6:	81 f0       	breq	.+32     	; 0x78e8 <_Z16process_commandsv+0x1b28>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    78c8:	a0 ec       	ldi	r26, 0xC0	; 192
    78ca:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    78cc:	86 ec       	ldi	r24, 0xC6	; 198
    78ce:	90 e0       	ldi	r25, 0x00	; 0
    78d0:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    78d2:	2c 91       	ld	r18, X
    78d4:	25 ff       	sbrs	r18, 5
    78d6:	fd cf       	rjmp	.-6      	; 0x78d2 <_Z16process_commandsv+0x1b12>
        ;

      M_UDRx = c;
    78d8:	fc 01       	movw	r30, r24
    78da:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    78dc:	4f 5f       	subi	r20, 0xFF	; 255
    78de:	5f 4f       	sbci	r21, 0xFF	; 255
    78e0:	fa 01       	movw	r30, r20
    78e2:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    78e4:	31 11       	cpse	r19, r1
    78e6:	f5 cf       	rjmp	.-22     	; 0x78d2 <_Z16process_commandsv+0x1b12>
    case 119: // M119
    SERIAL_PROTOCOLLN(MSG_M119_REPORT);
      #if defined(X_MIN_PIN) && X_MIN_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_X_MIN);
        SERIAL_PROTOCOLLN(((READ(X_MIN_PIN)^X_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    78e8:	00 99       	sbic	0x00, 0	; 0
    78ea:	03 c0       	rjmp	.+6      	; 0x78f2 <_Z16process_commandsv+0x1b32>
    78ec:	ac e8       	ldi	r26, 0x8C	; 140
    78ee:	b3 e0       	ldi	r27, 0x03	; 3
    78f0:	02 c0       	rjmp	.+4      	; 0x78f6 <_Z16process_commandsv+0x1b36>
    78f2:	a6 e9       	ldi	r26, 0x96	; 150
    78f4:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    78f6:	3c 91       	ld	r19, X
    78f8:	33 23       	and	r19, r19
    78fa:	81 f0       	breq	.+32     	; 0x791c <_Z16process_commandsv+0x1b5c>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    78fc:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    78fe:	e0 ec       	ldi	r30, 0xC0	; 192
    7900:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7902:	86 ec       	ldi	r24, 0xC6	; 198
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7908:	20 81       	ld	r18, Z
    790a:	25 ff       	sbrs	r18, 5
    790c:	fd cf       	rjmp	.-6      	; 0x7908 <_Z16process_commandsv+0x1b48>
        ;

      M_UDRx = c;
    790e:	dc 01       	movw	r26, r24
    7910:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7912:	da 01       	movw	r26, r20
    7914:	3d 91       	ld	r19, X+
    7916:	ad 01       	movw	r20, r26
    7918:	31 11       	cpse	r19, r1
    791a:	f6 cf       	rjmp	.-20     	; 0x7908 <_Z16process_commandsv+0x1b48>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    791c:	e0 ec       	ldi	r30, 0xC0	; 192
    791e:	f0 e0       	ldi	r31, 0x00	; 0
    7920:	80 81       	ld	r24, Z
    7922:	85 ff       	sbrs	r24, 5
    7924:	fd cf       	rjmp	.-6      	; 0x7920 <_Z16process_commandsv+0x1b60>
        ;

      M_UDRx = c;
    7926:	8a e0       	ldi	r24, 0x0A	; 10
    7928:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    792c:	e7 ee       	ldi	r30, 0xE7	; 231
    792e:	f6 e0       	ldi	r31, 0x06	; 6
    7930:	34 91       	lpm	r19, Z
  while(ch)
    7932:	33 23       	and	r19, r19
    7934:	81 f0       	breq	.+32     	; 0x7956 <_Z16process_commandsv+0x1b96>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7936:	a0 ec       	ldi	r26, 0xC0	; 192
    7938:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    793a:	86 ec       	ldi	r24, 0xC6	; 198
    793c:	90 e0       	ldi	r25, 0x00	; 0
    793e:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7940:	2c 91       	ld	r18, X
    7942:	25 ff       	sbrs	r18, 5
    7944:	fd cf       	rjmp	.-6      	; 0x7940 <_Z16process_commandsv+0x1b80>
        ;

      M_UDRx = c;
    7946:	fc 01       	movw	r30, r24
    7948:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    794a:	4f 5f       	subi	r20, 0xFF	; 255
    794c:	5f 4f       	sbci	r21, 0xFF	; 255
    794e:	fa 01       	movw	r30, r20
    7950:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7952:	31 11       	cpse	r19, r1
    7954:	f5 cf       	rjmp	.-22     	; 0x7940 <_Z16process_commandsv+0x1b80>
        SERIAL_PROTOCOLPGM(MSG_X_MIN);
        SERIAL_PROTOCOLLN(((READ(X_MIN_PIN)^X_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      #if defined(X_MAX_PIN) && X_MAX_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_X_MAX);
        SERIAL_PROTOCOLLN(((READ(X_MAX_PIN)^X_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    7956:	02 99       	sbic	0x00, 2	; 0
    7958:	03 c0       	rjmp	.+6      	; 0x7960 <_Z16process_commandsv+0x1ba0>
    795a:	ac e8       	ldi	r26, 0x8C	; 140
    795c:	b3 e0       	ldi	r27, 0x03	; 3
    795e:	02 c0       	rjmp	.+4      	; 0x7964 <_Z16process_commandsv+0x1ba4>
    7960:	a6 e9       	ldi	r26, 0x96	; 150
    7962:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7964:	3c 91       	ld	r19, X
    7966:	33 23       	and	r19, r19
    7968:	81 f0       	breq	.+32     	; 0x798a <_Z16process_commandsv+0x1bca>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    796a:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    796c:	e0 ec       	ldi	r30, 0xC0	; 192
    796e:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7970:	86 ec       	ldi	r24, 0xC6	; 198
    7972:	90 e0       	ldi	r25, 0x00	; 0
    7974:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7976:	20 81       	ld	r18, Z
    7978:	25 ff       	sbrs	r18, 5
    797a:	fd cf       	rjmp	.-6      	; 0x7976 <_Z16process_commandsv+0x1bb6>
        ;

      M_UDRx = c;
    797c:	dc 01       	movw	r26, r24
    797e:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7980:	da 01       	movw	r26, r20
    7982:	3d 91       	ld	r19, X+
    7984:	ad 01       	movw	r20, r26
    7986:	31 11       	cpse	r19, r1
    7988:	f6 cf       	rjmp	.-20     	; 0x7976 <_Z16process_commandsv+0x1bb6>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    798a:	e0 ec       	ldi	r30, 0xC0	; 192
    798c:	f0 e0       	ldi	r31, 0x00	; 0
    798e:	80 81       	ld	r24, Z
    7990:	85 ff       	sbrs	r24, 5
    7992:	fd cf       	rjmp	.-6      	; 0x798e <_Z16process_commandsv+0x1bce>
        ;

      M_UDRx = c;
    7994:	8a e0       	ldi	r24, 0x0A	; 10
    7996:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    799a:	ef ee       	ldi	r30, 0xEF	; 239
    799c:	f6 e0       	ldi	r31, 0x06	; 6
    799e:	34 91       	lpm	r19, Z
  while(ch)
    79a0:	33 23       	and	r19, r19
    79a2:	81 f0       	breq	.+32     	; 0x79c4 <_Z16process_commandsv+0x1c04>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    79a4:	a0 ec       	ldi	r26, 0xC0	; 192
    79a6:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    79a8:	86 ec       	ldi	r24, 0xC6	; 198
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    79ae:	2c 91       	ld	r18, X
    79b0:	25 ff       	sbrs	r18, 5
    79b2:	fd cf       	rjmp	.-6      	; 0x79ae <_Z16process_commandsv+0x1bee>
        ;

      M_UDRx = c;
    79b4:	fc 01       	movw	r30, r24
    79b6:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    79b8:	4f 5f       	subi	r20, 0xFF	; 255
    79ba:	5f 4f       	sbci	r21, 0xFF	; 255
    79bc:	fa 01       	movw	r30, r20
    79be:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    79c0:	31 11       	cpse	r19, r1
    79c2:	f5 cf       	rjmp	.-22     	; 0x79ae <_Z16process_commandsv+0x1bee>
        SERIAL_PROTOCOLPGM(MSG_X_MAX);
        SERIAL_PROTOCOLLN(((READ(X_MAX_PIN)^X_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      #if defined(Y_MIN_PIN) && Y_MIN_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_Y_MIN);
        SERIAL_PROTOCOLLN(((READ(Y_MIN_PIN)^Y_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    79c4:	04 99       	sbic	0x00, 4	; 0
    79c6:	03 c0       	rjmp	.+6      	; 0x79ce <_Z16process_commandsv+0x1c0e>
    79c8:	ac e8       	ldi	r26, 0x8C	; 140
    79ca:	b3 e0       	ldi	r27, 0x03	; 3
    79cc:	02 c0       	rjmp	.+4      	; 0x79d2 <_Z16process_commandsv+0x1c12>
    79ce:	a6 e9       	ldi	r26, 0x96	; 150
    79d0:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    79d2:	3c 91       	ld	r19, X
    79d4:	33 23       	and	r19, r19
    79d6:	81 f0       	breq	.+32     	; 0x79f8 <_Z16process_commandsv+0x1c38>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    79d8:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    79da:	e0 ec       	ldi	r30, 0xC0	; 192
    79dc:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    79de:	86 ec       	ldi	r24, 0xC6	; 198
    79e0:	90 e0       	ldi	r25, 0x00	; 0
    79e2:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    79e4:	20 81       	ld	r18, Z
    79e6:	25 ff       	sbrs	r18, 5
    79e8:	fd cf       	rjmp	.-6      	; 0x79e4 <_Z16process_commandsv+0x1c24>
        ;

      M_UDRx = c;
    79ea:	dc 01       	movw	r26, r24
    79ec:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    79ee:	da 01       	movw	r26, r20
    79f0:	3d 91       	ld	r19, X+
    79f2:	ad 01       	movw	r20, r26
    79f4:	31 11       	cpse	r19, r1
    79f6:	f6 cf       	rjmp	.-20     	; 0x79e4 <_Z16process_commandsv+0x1c24>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    79f8:	e0 ec       	ldi	r30, 0xC0	; 192
    79fa:	f0 e0       	ldi	r31, 0x00	; 0
    79fc:	80 81       	ld	r24, Z
    79fe:	85 ff       	sbrs	r24, 5
    7a00:	fd cf       	rjmp	.-6      	; 0x79fc <_Z16process_commandsv+0x1c3c>
        ;

      M_UDRx = c;
    7a02:	8a e0       	ldi	r24, 0x0A	; 10
    7a04:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7a08:	e7 ef       	ldi	r30, 0xF7	; 247
    7a0a:	f6 e0       	ldi	r31, 0x06	; 6
    7a0c:	34 91       	lpm	r19, Z
  while(ch)
    7a0e:	33 23       	and	r19, r19
    7a10:	81 f0       	breq	.+32     	; 0x7a32 <_Z16process_commandsv+0x1c72>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a12:	a0 ec       	ldi	r26, 0xC0	; 192
    7a14:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7a16:	86 ec       	ldi	r24, 0xC6	; 198
    7a18:	90 e0       	ldi	r25, 0x00	; 0
    7a1a:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a1c:	2c 91       	ld	r18, X
    7a1e:	25 ff       	sbrs	r18, 5
    7a20:	fd cf       	rjmp	.-6      	; 0x7a1c <_Z16process_commandsv+0x1c5c>
        ;

      M_UDRx = c;
    7a22:	fc 01       	movw	r30, r24
    7a24:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7a26:	4f 5f       	subi	r20, 0xFF	; 255
    7a28:	5f 4f       	sbci	r21, 0xFF	; 255
    7a2a:	fa 01       	movw	r30, r20
    7a2c:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7a2e:	31 11       	cpse	r19, r1
    7a30:	f5 cf       	rjmp	.-22     	; 0x7a1c <_Z16process_commandsv+0x1c5c>
        SERIAL_PROTOCOLPGM(MSG_Y_MIN);
        SERIAL_PROTOCOLLN(((READ(Y_MIN_PIN)^Y_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      #if defined(Y_MAX_PIN) && Y_MAX_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_Y_MAX);
        SERIAL_PROTOCOLLN(((READ(Y_MAX_PIN)^Y_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    7a32:	06 99       	sbic	0x00, 6	; 0
    7a34:	03 c0       	rjmp	.+6      	; 0x7a3c <_Z16process_commandsv+0x1c7c>
    7a36:	ac e8       	ldi	r26, 0x8C	; 140
    7a38:	b3 e0       	ldi	r27, 0x03	; 3
    7a3a:	02 c0       	rjmp	.+4      	; 0x7a40 <_Z16process_commandsv+0x1c80>
    7a3c:	a6 e9       	ldi	r26, 0x96	; 150
    7a3e:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7a40:	3c 91       	ld	r19, X
    7a42:	33 23       	and	r19, r19
    7a44:	81 f0       	breq	.+32     	; 0x7a66 <_Z16process_commandsv+0x1ca6>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    7a46:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a48:	e0 ec       	ldi	r30, 0xC0	; 192
    7a4a:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7a4c:	86 ec       	ldi	r24, 0xC6	; 198
    7a4e:	90 e0       	ldi	r25, 0x00	; 0
    7a50:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a52:	20 81       	ld	r18, Z
    7a54:	25 ff       	sbrs	r18, 5
    7a56:	fd cf       	rjmp	.-6      	; 0x7a52 <_Z16process_commandsv+0x1c92>
        ;

      M_UDRx = c;
    7a58:	dc 01       	movw	r26, r24
    7a5a:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7a5c:	da 01       	movw	r26, r20
    7a5e:	3d 91       	ld	r19, X+
    7a60:	ad 01       	movw	r20, r26
    7a62:	31 11       	cpse	r19, r1
    7a64:	f6 cf       	rjmp	.-20     	; 0x7a52 <_Z16process_commandsv+0x1c92>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a66:	e0 ec       	ldi	r30, 0xC0	; 192
    7a68:	f0 e0       	ldi	r31, 0x00	; 0
    7a6a:	80 81       	ld	r24, Z
    7a6c:	85 ff       	sbrs	r24, 5
    7a6e:	fd cf       	rjmp	.-6      	; 0x7a6a <_Z16process_commandsv+0x1caa>
        ;

      M_UDRx = c;
    7a70:	8a e0       	ldi	r24, 0x0A	; 10
    7a72:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7a76:	ef ef       	ldi	r30, 0xFF	; 255
    7a78:	f6 e0       	ldi	r31, 0x06	; 6
    7a7a:	34 91       	lpm	r19, Z
  while(ch)
    7a7c:	33 23       	and	r19, r19
    7a7e:	81 f0       	breq	.+32     	; 0x7aa0 <_Z16process_commandsv+0x1ce0>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a80:	a0 ec       	ldi	r26, 0xC0	; 192
    7a82:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7a84:	86 ec       	ldi	r24, 0xC6	; 198
    7a86:	90 e0       	ldi	r25, 0x00	; 0
    7a88:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7a8a:	2c 91       	ld	r18, X
    7a8c:	25 ff       	sbrs	r18, 5
    7a8e:	fd cf       	rjmp	.-6      	; 0x7a8a <_Z16process_commandsv+0x1cca>
        ;

      M_UDRx = c;
    7a90:	fc 01       	movw	r30, r24
    7a92:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7a94:	4f 5f       	subi	r20, 0xFF	; 255
    7a96:	5f 4f       	sbci	r21, 0xFF	; 255
    7a98:	fa 01       	movw	r30, r20
    7a9a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7a9c:	31 11       	cpse	r19, r1
    7a9e:	f5 cf       	rjmp	.-22     	; 0x7a8a <_Z16process_commandsv+0x1cca>
        SERIAL_PROTOCOLPGM(MSG_Y_MAX);
        SERIAL_PROTOCOLLN(((READ(Y_MAX_PIN)^Y_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      #if defined(Z_MIN_PIN) && Z_MIN_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_Z_MIN);
        SERIAL_PROTOCOLLN(((READ(Z_MIN_PIN)^Z_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    7aa0:	37 99       	sbic	0x06, 7	; 6
    7aa2:	03 c0       	rjmp	.+6      	; 0x7aaa <_Z16process_commandsv+0x1cea>
    7aa4:	ac e8       	ldi	r26, 0x8C	; 140
    7aa6:	b3 e0       	ldi	r27, 0x03	; 3
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <_Z16process_commandsv+0x1cee>
    7aaa:	a6 e9       	ldi	r26, 0x96	; 150
    7aac:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7aae:	3c 91       	ld	r19, X
    7ab0:	33 23       	and	r19, r19
    7ab2:	81 f0       	breq	.+32     	; 0x7ad4 <_Z16process_commandsv+0x1d14>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    7ab4:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7ab6:	e0 ec       	ldi	r30, 0xC0	; 192
    7ab8:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7aba:	86 ec       	ldi	r24, 0xC6	; 198
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7ac0:	20 81       	ld	r18, Z
    7ac2:	25 ff       	sbrs	r18, 5
    7ac4:	fd cf       	rjmp	.-6      	; 0x7ac0 <_Z16process_commandsv+0x1d00>
        ;

      M_UDRx = c;
    7ac6:	dc 01       	movw	r26, r24
    7ac8:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7aca:	da 01       	movw	r26, r20
    7acc:	3d 91       	ld	r19, X+
    7ace:	ad 01       	movw	r20, r26
    7ad0:	31 11       	cpse	r19, r1
    7ad2:	f6 cf       	rjmp	.-20     	; 0x7ac0 <_Z16process_commandsv+0x1d00>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7ad4:	e0 ec       	ldi	r30, 0xC0	; 192
    7ad6:	f0 e0       	ldi	r31, 0x00	; 0
    7ad8:	80 81       	ld	r24, Z
    7ada:	85 ff       	sbrs	r24, 5
    7adc:	fd cf       	rjmp	.-6      	; 0x7ad8 <_Z16process_commandsv+0x1d18>
        ;

      M_UDRx = c;
    7ade:	8a e0       	ldi	r24, 0x0A	; 10
    7ae0:	80 93 c6 00 	sts	0x00C6, r24


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    7ae4:	e7 e0       	ldi	r30, 0x07	; 7
    7ae6:	f7 e0       	ldi	r31, 0x07	; 7
    7ae8:	34 91       	lpm	r19, Z
  while(ch)
    7aea:	33 23       	and	r19, r19
    7aec:	81 f0       	breq	.+32     	; 0x7b0e <_Z16process_commandsv+0x1d4e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7aee:	a0 ec       	ldi	r26, 0xC0	; 192
    7af0:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    7af2:	86 ec       	ldi	r24, 0xC6	; 198
    7af4:	90 e0       	ldi	r25, 0x00	; 0
    7af6:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7af8:	2c 91       	ld	r18, X
    7afa:	25 ff       	sbrs	r18, 5
    7afc:	fd cf       	rjmp	.-6      	; 0x7af8 <_Z16process_commandsv+0x1d38>
        ;

      M_UDRx = c;
    7afe:	fc 01       	movw	r30, r24
    7b00:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    7b02:	4f 5f       	subi	r20, 0xFF	; 255
    7b04:	5f 4f       	sbci	r21, 0xFF	; 255
    7b06:	fa 01       	movw	r30, r20
    7b08:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    7b0a:	31 11       	cpse	r19, r1
    7b0c:	f5 cf       	rjmp	.-22     	; 0x7af8 <_Z16process_commandsv+0x1d38>
        SERIAL_PROTOCOLPGM(MSG_Z_MIN);
        SERIAL_PROTOCOLLN(((READ(Z_MIN_PIN)^Z_MIN_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      #if defined(Z_MAX_PIN) && Z_MAX_PIN > -1
        SERIAL_PROTOCOLPGM(MSG_Z_MAX);
        SERIAL_PROTOCOLLN(((READ(Z_MAX_PIN)^Z_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
    7b0e:	35 99       	sbic	0x06, 5	; 6
    7b10:	03 c0       	rjmp	.+6      	; 0x7b18 <_Z16process_commandsv+0x1d58>
    7b12:	ac e8       	ldi	r26, 0x8C	; 140
    7b14:	b3 e0       	ldi	r27, 0x03	; 3
    7b16:	02 c0       	rjmp	.+4      	; 0x7b1c <_Z16process_commandsv+0x1d5c>
    7b18:	a6 e9       	ldi	r26, 0x96	; 150
    7b1a:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7b1c:	3c 91       	ld	r19, X
    7b1e:	33 23       	and	r19, r19
    7b20:	81 f0       	breq	.+32     	; 0x7b42 <_Z16process_commandsv+0x1d82>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    7b22:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7b24:	e0 ec       	ldi	r30, 0xC0	; 192
    7b26:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7b28:	86 ec       	ldi	r24, 0xC6	; 198
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
    7b2c:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7b2e:	20 81       	ld	r18, Z
    7b30:	25 ff       	sbrs	r18, 5
    7b32:	fd cf       	rjmp	.-6      	; 0x7b2e <_Z16process_commandsv+0x1d6e>
        ;

      M_UDRx = c;
    7b34:	dc 01       	movw	r26, r24
    7b36:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7b38:	da 01       	movw	r26, r20
    7b3a:	3d 91       	ld	r19, X+
    7b3c:	ad 01       	movw	r20, r26
    7b3e:	31 11       	cpse	r19, r1
    7b40:	f6 cf       	rjmp	.-20     	; 0x7b2e <_Z16process_commandsv+0x1d6e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7b42:	e0 ec       	ldi	r30, 0xC0	; 192
    7b44:	f0 e0       	ldi	r31, 0x00	; 0
    7b46:	80 81       	ld	r24, Z
    7b48:	85 ff       	sbrs	r24, 5
    7b4a:	fd cf       	rjmp	.-6      	; 0x7b46 <_Z16process_commandsv+0x1d86>
        ;

      M_UDRx = c;
    7b4c:	8a e0       	ldi	r24, 0x0A	; 10
    7b4e:	80 93 c6 00 	sts	0x00C6, r24
    7b52:	5e c3       	rjmp	.+1724   	; 0x8210 <_Z16process_commandsv+0x2450>
    7b54:	0f 2e       	mov	r0, r31
    7b56:	fa ee       	ldi	r31, 0xEA	; 234
    7b58:	ef 2e       	mov	r14, r31
    7b5a:	f3 e0       	ldi	r31, 0x03	; 3
    7b5c:	ff 2e       	mov	r15, r31
    7b5e:	f0 2d       	mov	r31, r0
    7b60:	06 e6       	ldi	r16, 0x66	; 102
    7b62:	1e e0       	ldi	r17, 0x0E	; 14
    7b64:	0f 2e       	mov	r0, r31
    7b66:	fe ee       	ldi	r31, 0xEE	; 238
    7b68:	cf 2e       	mov	r12, r31
    7b6a:	f3 e0       	ldi	r31, 0x03	; 3
    7b6c:	df 2e       	mov	r13, r31
    7b6e:	f0 2d       	mov	r31, r0
      break;
      //TODO: update for all axis, use for loop
    case 201: // M201
      for(int8_t i=0; i < NUM_AXIS; i++)
      {
        if(code_seen(axis_codes[i]))
    7b70:	f7 01       	movw	r30, r14
    7b72:	81 91       	ld	r24, Z+
    7b74:	7f 01       	movw	r14, r30
    7b76:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7b7a:	88 23       	and	r24, r24
    7b7c:	51 f0       	breq	.+20     	; 0x7b92 <_Z16process_commandsv+0x1dd2>
        {
          max_acceleration_units_per_sq_second[i] = code_value();
    7b7e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7b82:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    7b86:	d8 01       	movw	r26, r16
    7b88:	6d 93       	st	X+, r22
    7b8a:	7d 93       	st	X+, r23
    7b8c:	8d 93       	st	X+, r24
    7b8e:	9c 93       	st	X, r25
    7b90:	13 97       	sbiw	r26, 0x03	; 3
    7b92:	0c 5f       	subi	r16, 0xFC	; 252
    7b94:	1f 4f       	sbci	r17, 0xFF	; 255
        SERIAL_PROTOCOLLN(((READ(Z_MAX_PIN)^Z_MAX_ENDSTOP_INVERTING)?MSG_ENDSTOP_HIT:MSG_ENDSTOP_OPEN));
      #endif
      break;
      //TODO: update for all axis, use for loop
    case 201: // M201
      for(int8_t i=0; i < NUM_AXIS; i++)
    7b96:	ec 14       	cp	r14, r12
    7b98:	fd 04       	cpc	r15, r13
    7b9a:	51 f7       	brne	.-44     	; 0x7b70 <_Z16process_commandsv+0x1db0>
        {
          max_acceleration_units_per_sq_second[i] = code_value();
        }
      }
      // steps per sq second need to be updated to agree with the units per sq second (as they are what is used in the planner)
      reset_acceleration_rates();
    7b9c:	0e 94 aa 57 	call	0xaf54	; 0xaf54 <_Z24reset_acceleration_ratesv>
      break;
    7ba0:	37 c3       	rjmp	.+1646   	; 0x8210 <_Z16process_commandsv+0x2450>
    7ba2:	0f 2e       	mov	r0, r31
    7ba4:	fa ee       	ldi	r31, 0xEA	; 234
    7ba6:	ef 2e       	mov	r14, r31
    7ba8:	f3 e0       	ldi	r31, 0x03	; 3
    7baa:	ff 2e       	mov	r15, r31
    7bac:	f0 2d       	mov	r31, r0
    7bae:	06 e8       	ldi	r16, 0x86	; 134
    7bb0:	1e e0       	ldi	r17, 0x0E	; 14
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    7bb2:	0f 2e       	mov	r0, r31
    7bb4:	fe ee       	ldi	r31, 0xEE	; 238
    7bb6:	cf 2e       	mov	r12, r31
    7bb8:	f3 e0       	ldi	r31, 0x03	; 3
    7bba:	df 2e       	mov	r13, r31
    7bbc:	f0 2d       	mov	r31, r0
      }
      break;
    #endif
    case 203: // M203 max feedrate mm/sec
      for(int8_t i=0; i < NUM_AXIS; i++) {
        if(code_seen(axis_codes[i])) max_feedrate[i] = code_value();
    7bbe:	f7 01       	movw	r30, r14
    7bc0:	81 91       	ld	r24, Z+
    7bc2:	7f 01       	movw	r14, r30
    7bc4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7bc8:	88 23       	and	r24, r24
    7bca:	41 f0       	breq	.+16     	; 0x7bdc <_Z16process_commandsv+0x1e1c>
    7bcc:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7bd0:	d8 01       	movw	r26, r16
    7bd2:	6d 93       	st	X+, r22
    7bd4:	7d 93       	st	X+, r23
    7bd6:	8d 93       	st	X+, r24
    7bd8:	9c 93       	st	X, r25
    7bda:	13 97       	sbiw	r26, 0x03	; 3
    7bdc:	0c 5f       	subi	r16, 0xFC	; 252
    7bde:	1f 4f       	sbci	r17, 0xFF	; 255
        if(code_seen(axis_codes[i])) axis_travel_steps_per_sqr_second[i] = code_value() * axis_steps_per_unit[i];
      }
      break;
    #endif
    case 203: // M203 max feedrate mm/sec
      for(int8_t i=0; i < NUM_AXIS; i++) {
    7be0:	ec 14       	cp	r14, r12
    7be2:	fd 04       	cpc	r15, r13
    7be4:	61 f7       	brne	.-40     	; 0x7bbe <_Z16process_commandsv+0x1dfe>
    7be6:	14 c3       	rjmp	.+1576   	; 0x8210 <_Z16process_commandsv+0x2450>
        if(code_seen(axis_codes[i])) max_feedrate[i] = code_value();
      }
      break;
    case 204: // M204 acclereration S normal moves T filmanent only moves
      {
        if(code_seen('S')) acceleration = code_value() ;
    7be8:	83 e5       	ldi	r24, 0x53	; 83
    7bea:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7bee:	88 23       	and	r24, r24
    7bf0:	51 f0       	breq	.+20     	; 0x7c06 <_Z16process_commandsv+0x1e46>
    7bf2:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7bf6:	60 93 5e 0e 	sts	0x0E5E, r22
    7bfa:	70 93 5f 0e 	sts	0x0E5F, r23
    7bfe:	80 93 60 0e 	sts	0x0E60, r24
    7c02:	90 93 61 0e 	sts	0x0E61, r25
        if(code_seen('T')) retract_acceleration = code_value() ;
    7c06:	84 e5       	ldi	r24, 0x54	; 84
    7c08:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7c0c:	88 23       	and	r24, r24
    7c0e:	09 f4       	brne	.+2      	; 0x7c12 <_Z16process_commandsv+0x1e52>
    7c10:	ff c2       	rjmp	.+1534   	; 0x8210 <_Z16process_commandsv+0x2450>
    7c12:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7c16:	60 93 5a 0e 	sts	0x0E5A, r22
    7c1a:	70 93 5b 0e 	sts	0x0E5B, r23
    7c1e:	80 93 5c 0e 	sts	0x0E5C, r24
    7c22:	90 93 5d 0e 	sts	0x0E5D, r25
    7c26:	f4 c2       	rjmp	.+1512   	; 0x8210 <_Z16process_commandsv+0x2450>
      }
      break;
    case 205: //M205 advanced settings:  minimum travel speed S=while printing T=travel only,  B=minimum segment time X= maximum xy jerk, Z=maximum Z jerk
    {
      if(code_seen('S')) minimumfeedrate = code_value();
    7c28:	83 e5       	ldi	r24, 0x53	; 83
    7c2a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7c2e:	88 23       	and	r24, r24
    7c30:	51 f0       	breq	.+20     	; 0x7c46 <_Z16process_commandsv+0x1e86>
    7c32:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7c36:	60 93 62 0e 	sts	0x0E62, r22
    7c3a:	70 93 63 0e 	sts	0x0E63, r23
    7c3e:	80 93 64 0e 	sts	0x0E64, r24
    7c42:	90 93 65 0e 	sts	0x0E65, r25
      if(code_seen('T')) mintravelfeedrate = code_value();
    7c46:	84 e5       	ldi	r24, 0x54	; 84
    7c48:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7c4c:	88 23       	and	r24, r24
    7c4e:	51 f0       	breq	.+20     	; 0x7c64 <_Z16process_commandsv+0x1ea4>
    7c50:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7c54:	60 93 4a 0e 	sts	0x0E4A, r22
    7c58:	70 93 4b 0e 	sts	0x0E4B, r23
    7c5c:	80 93 4c 0e 	sts	0x0E4C, r24
    7c60:	90 93 4d 0e 	sts	0x0E4D, r25
      if(code_seen('B')) minsegmenttime = code_value() ;
    7c64:	82 e4       	ldi	r24, 0x42	; 66
    7c66:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7c6a:	88 23       	and	r24, r24
    7c6c:	61 f0       	breq	.+24     	; 0x7c86 <_Z16process_commandsv+0x1ec6>
    7c6e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7c72:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    7c76:	60 93 96 0e 	sts	0x0E96, r22
    7c7a:	70 93 97 0e 	sts	0x0E97, r23
    7c7e:	80 93 98 0e 	sts	0x0E98, r24
    7c82:	90 93 99 0e 	sts	0x0E99, r25
      if(code_seen('X')) max_xy_jerk = code_value() ;
    7c86:	88 e5       	ldi	r24, 0x58	; 88
    7c88:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7c8c:	88 23       	and	r24, r24
    7c8e:	51 f0       	breq	.+20     	; 0x7ca4 <_Z16process_commandsv+0x1ee4>
    7c90:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7c94:	60 93 56 0e 	sts	0x0E56, r22
    7c98:	70 93 57 0e 	sts	0x0E57, r23
    7c9c:	80 93 58 0e 	sts	0x0E58, r24
    7ca0:	90 93 59 0e 	sts	0x0E59, r25
      if(code_seen('Z')) max_z_jerk = code_value() ;
    7ca4:	8a e5       	ldi	r24, 0x5A	; 90
    7ca6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7caa:	88 23       	and	r24, r24
    7cac:	51 f0       	breq	.+20     	; 0x7cc2 <_Z16process_commandsv+0x1f02>
    7cae:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7cb2:	60 93 52 0e 	sts	0x0E52, r22
    7cb6:	70 93 53 0e 	sts	0x0E53, r23
    7cba:	80 93 54 0e 	sts	0x0E54, r24
    7cbe:	90 93 55 0e 	sts	0x0E55, r25
      if(code_seen('E')) max_e_jerk = code_value() ;
    7cc2:	85 e4       	ldi	r24, 0x45	; 69
    7cc4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7cc8:	88 23       	and	r24, r24
    7cca:	09 f4       	brne	.+2      	; 0x7cce <_Z16process_commandsv+0x1f0e>
    7ccc:	a1 c2       	rjmp	.+1346   	; 0x8210 <_Z16process_commandsv+0x2450>
    7cce:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7cd2:	60 93 4e 0e 	sts	0x0E4E, r22
    7cd6:	70 93 4f 0e 	sts	0x0E4F, r23
    7cda:	80 93 50 0e 	sts	0x0E50, r24
    7cde:	90 93 51 0e 	sts	0x0E51, r25
    7ce2:	96 c2       	rjmp	.+1324   	; 0x8210 <_Z16process_commandsv+0x2450>
    7ce4:	0f 2e       	mov	r0, r31
    7ce6:	fa ee       	ldi	r31, 0xEA	; 234
    7ce8:	ef 2e       	mov	r14, r31
    7cea:	f3 e0       	ldi	r31, 0x03	; 3
    7cec:	ff 2e       	mov	r15, r31
    7cee:	f0 2d       	mov	r31, r0
    7cf0:	00 e7       	ldi	r16, 0x70	; 112
    7cf2:	15 e0       	ldi	r17, 0x05	; 5
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    7cf4:	0f 2e       	mov	r0, r31
    7cf6:	fd ee       	ldi	r31, 0xED	; 237
    7cf8:	cf 2e       	mov	r12, r31
    7cfa:	f3 e0       	ldi	r31, 0x03	; 3
    7cfc:	df 2e       	mov	r13, r31
    7cfe:	f0 2d       	mov	r31, r0
    }
    break;
    case 206: // M206 additional homeing offset
      for(int8_t i=0; i < 3; i++)
      {
        if(code_seen(axis_codes[i])) add_homeing[i] = code_value();
    7d00:	f7 01       	movw	r30, r14
    7d02:	81 91       	ld	r24, Z+
    7d04:	7f 01       	movw	r14, r30
    7d06:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7d0a:	88 23       	and	r24, r24
    7d0c:	41 f0       	breq	.+16     	; 0x7d1e <_Z16process_commandsv+0x1f5e>
    7d0e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7d12:	d8 01       	movw	r26, r16
    7d14:	6d 93       	st	X+, r22
    7d16:	7d 93       	st	X+, r23
    7d18:	8d 93       	st	X+, r24
    7d1a:	9c 93       	st	X, r25
    7d1c:	13 97       	sbiw	r26, 0x03	; 3
    7d1e:	0c 5f       	subi	r16, 0xFC	; 252
    7d20:	1f 4f       	sbci	r17, 0xFF	; 255
      if(code_seen('Z')) max_z_jerk = code_value() ;
      if(code_seen('E')) max_e_jerk = code_value() ;
    }
    break;
    case 206: // M206 additional homeing offset
      for(int8_t i=0; i < 3; i++)
    7d22:	ec 14       	cp	r14, r12
    7d24:	fd 04       	cpc	r15, r13
    7d26:	61 f7       	brne	.-40     	; 0x7d00 <_Z16process_commandsv+0x1f40>
    7d28:	73 c2       	rjmp	.+1254   	; 0x8210 <_Z16process_commandsv+0x2450>
      SERIAL_ECHOLN("");
    }break;
    #endif
    case 220: // M220 S<factor in percent>- set speed factor override percentage
    {
      if(code_seen('S'))
    7d2a:	83 e5       	ldi	r24, 0x53	; 83
    7d2c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7d30:	88 23       	and	r24, r24
    7d32:	09 f4       	brne	.+2      	; 0x7d36 <_Z16process_commandsv+0x1f76>
    7d34:	6d c2       	rjmp	.+1242   	; 0x8210 <_Z16process_commandsv+0x2450>
      {
        feedmultiply = code_value() ;
    7d36:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7d3a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7d3e:	70 93 20 02 	sts	0x0220, r23
    7d42:	60 93 1f 02 	sts	0x021F, r22
    7d46:	64 c2       	rjmp	.+1224   	; 0x8210 <_Z16process_commandsv+0x2450>
      }
    }
    break;
    case 221: // M221 S<factor in percent>- set extrude factor override percentage
    {
      if(code_seen('S'))
    7d48:	83 e5       	ldi	r24, 0x53	; 83
    7d4a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7d4e:	88 23       	and	r24, r24
    7d50:	09 f4       	brne	.+2      	; 0x7d54 <_Z16process_commandsv+0x1f94>
    7d52:	5e c2       	rjmp	.+1212   	; 0x8210 <_Z16process_commandsv+0x2450>
      {
        extrudemultiply = code_value() ;
    7d54:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7d58:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7d5c:	70 93 1e 02 	sts	0x021E, r23
    7d60:	60 93 1d 02 	sts	0x021D, r22
    7d64:	55 c2       	rjmp	.+1194   	; 0x8210 <_Z16process_commandsv+0x2450>
    #endif // NUM_SERVOS > 0

    #if LARGE_FLASH == true && ( BEEPER > 0 || defined(ULTRALCD) )
    case 300: // M300
    {
      int beepS = code_seen('S') ? code_value() : 110;
    7d66:	83 e5       	ldi	r24, 0x53	; 83
    7d68:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7d6c:	88 23       	and	r24, r24
    7d6e:	31 f0       	breq	.+12     	; 0x7d7c <_Z16process_commandsv+0x1fbc>
    7d70:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7d74:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7d78:	8b 01       	movw	r16, r22
    7d7a:	02 c0       	rjmp	.+4      	; 0x7d80 <_Z16process_commandsv+0x1fc0>
    7d7c:	0e e6       	ldi	r16, 0x6E	; 110
    7d7e:	10 e0       	ldi	r17, 0x00	; 0
      int beepP = code_seen('P') ? code_value() : 1000;
    7d80:	80 e5       	ldi	r24, 0x50	; 80
    7d82:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7d86:	88 23       	and	r24, r24
    7d88:	31 f0       	breq	.+12     	; 0x7d96 <_Z16process_commandsv+0x1fd6>
    7d8a:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7d8e:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7d92:	7b 01       	movw	r14, r22
    7d94:	06 c0       	rjmp	.+12     	; 0x7da2 <_Z16process_commandsv+0x1fe2>
    7d96:	0f 2e       	mov	r0, r31
    7d98:	f8 ee       	ldi	r31, 0xE8	; 232
    7d9a:	ef 2e       	mov	r14, r31
    7d9c:	f3 e0       	ldi	r31, 0x03	; 3
    7d9e:	ff 2e       	mov	r15, r31
    7da0:	f0 2d       	mov	r31, r0
      if (beepS > 0)
    7da2:	10 16       	cp	r1, r16
    7da4:	11 06       	cpc	r1, r17
    7da6:	94 f4       	brge	.+36     	; 0x7dcc <_Z16process_commandsv+0x200c>
      {
        #if BEEPER > 0
          tone(BEEPER, beepS);
    7da8:	20 e0       	ldi	r18, 0x00	; 0
    7daa:	30 e0       	ldi	r19, 0x00	; 0
    7dac:	a9 01       	movw	r20, r18
    7dae:	b8 01       	movw	r22, r16
    7db0:	82 e1       	ldi	r24, 0x12	; 18
    7db2:	0e 94 9f bd 	call	0x17b3e	; 0x17b3e <_Z4tonehjm>
          delay(beepP);
    7db6:	b7 01       	movw	r22, r14
    7db8:	88 27       	eor	r24, r24
    7dba:	77 fd       	sbrc	r23, 7
    7dbc:	80 95       	com	r24
    7dbe:	98 2f       	mov	r25, r24
    7dc0:	0e 94 11 ba 	call	0x17422	; 0x17422 <delay>
          noTone(BEEPER);
    7dc4:	82 e1       	ldi	r24, 0x12	; 18
    7dc6:	0e 94 2b bd 	call	0x17a56	; 0x17a56 <_Z6noToneh>
    7dca:	22 c2       	rjmp	.+1092   	; 0x8210 <_Z16process_commandsv+0x2450>
          lcd_buzz(beepS, beepP);
        #endif
      }
      else
      {
        delay(beepP);
    7dcc:	b7 01       	movw	r22, r14
    7dce:	88 27       	eor	r24, r24
    7dd0:	77 fd       	sbrc	r23, 7
    7dd2:	80 95       	com	r24
    7dd4:	98 2f       	mov	r25, r24
    7dd6:	0e 94 11 ba 	call	0x17422	; 0x17422 <delay>
    7dda:	1a c2       	rjmp	.+1076   	; 0x8210 <_Z16process_commandsv+0x2450>
    #endif // M300

    #ifdef PIDTEMP
    case 301: // M301
      {
        if(code_seen('P')) Kp = code_value();
    7ddc:	80 e5       	ldi	r24, 0x50	; 80
    7dde:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7de2:	88 23       	and	r24, r24
    7de4:	51 f0       	breq	.+20     	; 0x7dfa <_Z16process_commandsv+0x203a>
    7de6:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7dea:	60 93 5b 02 	sts	0x025B, r22
    7dee:	70 93 5c 02 	sts	0x025C, r23
    7df2:	80 93 5d 02 	sts	0x025D, r24
    7df6:	90 93 5e 02 	sts	0x025E, r25
        if(code_seen('I')) Ki = scalePID_i(code_value());
    7dfa:	89 e4       	ldi	r24, 0x49	; 73
    7dfc:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7e00:	88 23       	and	r24, r24
    7e02:	61 f0       	breq	.+24     	; 0x7e1c <_Z16process_commandsv+0x205c>
    7e04:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7e08:	0e 94 8a 7d 	call	0xfb14	; 0xfb14 <_Z10scalePID_if>
    7e0c:	60 93 57 02 	sts	0x0257, r22
    7e10:	70 93 58 02 	sts	0x0258, r23
    7e14:	80 93 59 02 	sts	0x0259, r24
    7e18:	90 93 5a 02 	sts	0x025A, r25
        if(code_seen('D')) Kd = scalePID_d(code_value());
    7e1c:	84 e4       	ldi	r24, 0x44	; 68
    7e1e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7e22:	88 23       	and	r24, r24
    7e24:	61 f0       	breq	.+24     	; 0x7e3e <_Z16process_commandsv+0x207e>
    7e26:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7e2a:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <_Z10scalePID_df>
    7e2e:	60 93 53 02 	sts	0x0253, r22
    7e32:	70 93 54 02 	sts	0x0254, r23
    7e36:	80 93 55 02 	sts	0x0255, r24
    7e3a:	90 93 56 02 	sts	0x0256, r25

        #ifdef PID_ADD_EXTRUSION_RATE
        if(code_seen('C')) Kc = code_value();
    7e3e:	83 e4       	ldi	r24, 0x43	; 67
    7e40:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7e44:	88 23       	and	r24, r24
    7e46:	09 f4       	brne	.+2      	; 0x7e4a <_Z16process_commandsv+0x208a>
    7e48:	07 c2       	rjmp	.+1038   	; 0x8258 <_Z16process_commandsv+0x2498>
    7e4a:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7e4e:	60 93 4f 02 	sts	0x024F, r22
    7e52:	70 93 50 02 	sts	0x0250, r23
    7e56:	80 93 51 02 	sts	0x0251, r24
    7e5a:	90 93 52 02 	sts	0x0252, r25
    7e5e:	fc c1       	rjmp	.+1016   	; 0x8258 <_Z16process_commandsv+0x2498>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7e60:	20 81       	ld	r18, Z
    7e62:	25 ff       	sbrs	r18, 5
    7e64:	fd cf       	rjmp	.-6      	; 0x7e60 <_Z16process_commandsv+0x20a0>
        ;

      M_UDRx = c;
    7e66:	dc 01       	movw	r26, r24
    7e68:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7e6a:	da 01       	movw	r26, r20
    7e6c:	3d 91       	ld	r19, X+
    7e6e:	ad 01       	movw	r20, r26
    7e70:	31 11       	cpse	r19, r1
    7e72:	f6 cf       	rjmp	.-20     	; 0x7e60 <_Z16process_commandsv+0x20a0>
    7e74:	a5 eb       	ldi	r26, 0xB5	; 181
    7e76:	b3 e0       	ldi	r27, 0x03	; 3
    7e78:	30 e2       	ldi	r19, 0x20	; 32
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7e7a:	e0 ec       	ldi	r30, 0xC0	; 192
    7e7c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    7e7e:	86 ec       	ldi	r24, 0xC6	; 198
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7e84:	20 81       	ld	r18, Z
    7e86:	25 ff       	sbrs	r18, 5
    7e88:	fd cf       	rjmp	.-6      	; 0x7e84 <_Z16process_commandsv+0x20c4>
        ;

      M_UDRx = c;
    7e8a:	dc 01       	movw	r26, r24
    7e8c:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7e8e:	da 01       	movw	r26, r20
    7e90:	3d 91       	ld	r19, X+
    7e92:	ad 01       	movw	r20, r26
    7e94:	31 11       	cpse	r19, r1
    7e96:	f6 cf       	rjmp	.-20     	; 0x7e84 <_Z16process_commandsv+0x20c4>
    7e98:	ea c1       	rjmp	.+980    	; 0x826e <_Z16process_commandsv+0x24ae>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7e9a:	20 81       	ld	r18, Z
    7e9c:	25 ff       	sbrs	r18, 5
    7e9e:	fd cf       	rjmp	.-6      	; 0x7e9a <_Z16process_commandsv+0x20da>
        ;

      M_UDRx = c;
    7ea0:	dc 01       	movw	r26, r24
    7ea2:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7ea4:	da 01       	movw	r26, r20
    7ea6:	3d 91       	ld	r19, X+
    7ea8:	ad 01       	movw	r20, r26
    7eaa:	31 11       	cpse	r19, r1
    7eac:	f6 cf       	rjmp	.-20     	; 0x7e9a <_Z16process_commandsv+0x20da>
    7eae:	f6 c1       	rjmp	.+1004   	; 0x829c <_Z16process_commandsv+0x24dc>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7eb0:	20 81       	ld	r18, Z
    7eb2:	25 ff       	sbrs	r18, 5
    7eb4:	fd cf       	rjmp	.-6      	; 0x7eb0 <_Z16process_commandsv+0x20f0>
        ;

      M_UDRx = c;
    7eb6:	dc 01       	movw	r26, r24
    7eb8:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7eba:	da 01       	movw	r26, r20
    7ebc:	3d 91       	ld	r19, X+
    7ebe:	ad 01       	movw	r20, r26
    7ec0:	31 11       	cpse	r19, r1
    7ec2:	f6 cf       	rjmp	.-20     	; 0x7eb0 <_Z16process_commandsv+0x20f0>
    7ec4:	06 c2       	rjmp	.+1036   	; 0x82d2 <_Z16process_commandsv+0x2512>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7ec6:	20 81       	ld	r18, Z
    7ec8:	25 ff       	sbrs	r18, 5
    7eca:	fd cf       	rjmp	.-6      	; 0x7ec6 <_Z16process_commandsv+0x2106>
        ;

      M_UDRx = c;
    7ecc:	dc 01       	movw	r26, r24
    7ece:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    7ed0:	da 01       	movw	r26, r20
    7ed2:	3d 91       	ld	r19, X+
    7ed4:	ad 01       	movw	r20, r26
    7ed6:	31 11       	cpse	r19, r1
    7ed8:	f6 cf       	rjmp	.-20     	; 0x7ec6 <_Z16process_commandsv+0x2106>
        SERIAL_PROTOCOL(" d:");
        SERIAL_PROTOCOL(unscalePID_d(Kd));
        #ifdef PID_ADD_EXTRUSION_RATE
        SERIAL_PROTOCOL(" c:");
        //Kc does not have scaling applied above, or in resetting defaults
        SERIAL_PROTOCOL(Kc);
    7eda:	40 91 4f 02 	lds	r20, 0x024F
    7ede:	50 91 50 02 	lds	r21, 0x0250
    7ee2:	60 91 51 02 	lds	r22, 0x0251
    7ee6:	70 91 52 02 	lds	r23, 0x0252
    7eea:	22 e0       	ldi	r18, 0x02	; 2
    7eec:	30 e0       	ldi	r19, 0x00	; 0
    7eee:	82 ed       	ldi	r24, 0xD2	; 210
    7ef0:	94 e0       	ldi	r25, 0x04	; 4
    7ef2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    7ef6:	e0 ec       	ldi	r30, 0xC0	; 192
    7ef8:	f0 e0       	ldi	r31, 0x00	; 0
    7efa:	80 81       	ld	r24, Z
    7efc:	85 ff       	sbrs	r24, 5
    7efe:	fd cf       	rjmp	.-6      	; 0x7efa <_Z16process_commandsv+0x213a>
        ;

      M_UDRx = c;
    7f00:	8a e0       	ldi	r24, 0x0A	; 10
    7f02:	80 93 c6 00 	sts	0x00C6, r24
    7f06:	84 c1       	rjmp	.+776    	; 0x8210 <_Z16process_commandsv+0x2450>
#endif
    #ifdef PREVENT_DANGEROUS_EXTRUDE
    case 302: // allow cold extrudes, or set the minimum extrude temperature
    {
	  float temp = .0;
	  if (code_seen('S')) temp=code_value();
    7f08:	83 e5       	ldi	r24, 0x53	; 83
    7f0a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7f0e:	88 23       	and	r24, r24
    7f10:	19 f0       	breq	.+6      	; 0x7f18 <_Z16process_commandsv+0x2158>
    7f12:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7f16:	03 c0       	rjmp	.+6      	; 0x7f1e <_Z16process_commandsv+0x215e>
    break;
#endif
    #ifdef PREVENT_DANGEROUS_EXTRUDE
    case 302: // allow cold extrudes, or set the minimum extrude temperature
    {
	  float temp = .0;
    7f18:	60 e0       	ldi	r22, 0x00	; 0
    7f1a:	70 e0       	ldi	r23, 0x00	; 0
    7f1c:	cb 01       	movw	r24, r22
	  if (code_seen('S')) temp=code_value();
      set_extrude_min_temp(temp);
    7f1e:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <_Z20set_extrude_min_tempf>
    }
    break;
    7f22:	76 c1       	rjmp	.+748    	; 0x8210 <_Z16process_commandsv+0x2450>
    case 303: // M303 PID autotune
    {
      float temp = 150.0;
      int e=0;
      int c=5;
      if (code_seen('E')) e=code_value();
    7f24:	85 e4       	ldi	r24, 0x45	; 69
    7f26:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7f2a:	88 23       	and	r24, r24
    7f2c:	81 f0       	breq	.+32     	; 0x7f4e <_Z16process_commandsv+0x218e>
    7f2e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7f32:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7f36:	8b 01       	movw	r16, r22
        if (e<0)
    7f38:	77 23       	and	r23, r23
    7f3a:	a4 f0       	brlt	.+40     	; 0x7f64 <_Z16process_commandsv+0x21a4>
    }
    break;
	#endif
    case 303: // M303 PID autotune
    {
      float temp = 150.0;
    7f3c:	0f 2e       	mov	r0, r31
    7f3e:	c1 2c       	mov	r12, r1
    7f40:	d1 2c       	mov	r13, r1
    7f42:	f6 e1       	ldi	r31, 0x16	; 22
    7f44:	ef 2e       	mov	r14, r31
    7f46:	f3 e4       	ldi	r31, 0x43	; 67
    7f48:	ff 2e       	mov	r15, r31
    7f4a:	f0 2d       	mov	r31, r0
    7f4c:	13 c0       	rjmp	.+38     	; 0x7f74 <_Z16process_commandsv+0x21b4>
      int e=0;
    7f4e:	00 e0       	ldi	r16, 0x00	; 0
    7f50:	10 e0       	ldi	r17, 0x00	; 0
    }
    break;
	#endif
    case 303: // M303 PID autotune
    {
      float temp = 150.0;
    7f52:	0f 2e       	mov	r0, r31
    7f54:	c1 2c       	mov	r12, r1
    7f56:	d1 2c       	mov	r13, r1
    7f58:	f6 e1       	ldi	r31, 0x16	; 22
    7f5a:	ef 2e       	mov	r14, r31
    7f5c:	f3 e4       	ldi	r31, 0x43	; 67
    7f5e:	ff 2e       	mov	r15, r31
    7f60:	f0 2d       	mov	r31, r0
    7f62:	08 c0       	rjmp	.+16     	; 0x7f74 <_Z16process_commandsv+0x21b4>
      int e=0;
      int c=5;
      if (code_seen('E')) e=code_value();
        if (e<0)
          temp=70;
    7f64:	0f 2e       	mov	r0, r31
    7f66:	c1 2c       	mov	r12, r1
    7f68:	d1 2c       	mov	r13, r1
    7f6a:	fc e8       	ldi	r31, 0x8C	; 140
    7f6c:	ef 2e       	mov	r14, r31
    7f6e:	f2 e4       	ldi	r31, 0x42	; 66
    7f70:	ff 2e       	mov	r15, r31
    7f72:	f0 2d       	mov	r31, r0
      if (code_seen('S')) temp=code_value();
    7f74:	83 e5       	ldi	r24, 0x53	; 83
    7f76:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7f7a:	88 23       	and	r24, r24
    7f7c:	21 f0       	breq	.+8      	; 0x7f86 <_Z16process_commandsv+0x21c6>
    7f7e:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7f82:	6b 01       	movw	r12, r22
    7f84:	7c 01       	movw	r14, r24
      if (code_seen('C')) c=code_value();
    7f86:	83 e4       	ldi	r24, 0x43	; 67
    7f88:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7f8c:	88 23       	and	r24, r24
    7f8e:	31 f0       	breq	.+12     	; 0x7f9c <_Z16process_commandsv+0x21dc>
    7f90:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7f94:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    7f98:	9b 01       	movw	r18, r22
    7f9a:	02 c0       	rjmp	.+4      	; 0x7fa0 <_Z16process_commandsv+0x21e0>
	#endif
    case 303: // M303 PID autotune
    {
      float temp = 150.0;
      int e=0;
      int c=5;
    7f9c:	25 e0       	ldi	r18, 0x05	; 5
    7f9e:	30 e0       	ldi	r19, 0x00	; 0
      if (code_seen('E')) e=code_value();
        if (e<0)
          temp=70;
      if (code_seen('S')) temp=code_value();
      if (code_seen('C')) c=code_value();
      PID_autotune(temp, e, c);
    7fa0:	a8 01       	movw	r20, r16
    7fa2:	c7 01       	movw	r24, r14
    7fa4:	b6 01       	movw	r22, r12
    7fa6:	0e 94 cb 75 	call	0xeb96	; 0xeb96 <_Z12PID_autotunefii>
    }
    break;
    7faa:	32 c1       	rjmp	.+612    	; 0x8210 <_Z16process_commandsv+0x2450>
    case 400: // M400 finish all moves
    {
      st_synchronize();
    7fac:	0e 94 09 72 	call	0xe412	; 0xe412 <_Z14st_synchronizev>
    }
    break;
    7fb0:	2f c1       	rjmp	.+606    	; 0x8210 <_Z16process_commandsv+0x2450>
    7fb2:	0e 94 84 1b 	call	0x3708	; 0x3708 <_Z19Config_ResetDefaultv>
    7fb6:	2c c1       	rjmp	.+600    	; 0x8210 <_Z16process_commandsv+0x2450>
        Config_RetrieveSettings();
    }
    break;
    case 502: // M502 Revert to default settings
    {
        Config_ResetDefault();
    7fb8:	0e 94 84 1b 	call	0x3708	; 0x3708 <_Z19Config_ResetDefaultv>
    }
    break;
    7fbc:	29 c1       	rjmp	.+594    	; 0x8210 <_Z16process_commandsv+0x2450>
      microstep_readings();
      #endif
    }
    break;
    case 999: // M999: Restart after being stopped
      Stopped = false;
    7fbe:	10 92 58 05 	sts	0x0558, r1
      lcd_reset_alert_level();
    7fc2:	0e 94 4c 94 	call	0x12898	; 0x12898 <_Z21lcd_reset_alert_levelv>
      gcode_LastN = Stopped_gcode_LastN;
    7fc6:	80 91 43 09 	lds	r24, 0x0943
    7fca:	90 91 44 09 	lds	r25, 0x0944
    7fce:	a0 91 45 09 	lds	r26, 0x0945
    7fd2:	b0 91 46 09 	lds	r27, 0x0946
    7fd6:	80 93 21 09 	sts	0x0921, r24
    7fda:	90 93 22 09 	sts	0x0922, r25
    7fde:	a0 93 23 09 	sts	0x0923, r26
    7fe2:	b0 93 24 09 	sts	0x0924, r27
      FlushSerialRequestResend();
    7fe6:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <_Z24FlushSerialRequestResendv>
    break;
    7fea:	12 c1       	rjmp	.+548    	; 0x8210 <_Z16process_commandsv+0x2450>
    }
  }

  else if(code_seen('T'))
    7fec:	84 e5       	ldi	r24, 0x54	; 84
    7fee:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    7ff2:	88 23       	and	r24, r24
    7ff4:	09 f4       	brne	.+2      	; 0x7ff8 <_Z16process_commandsv+0x2238>
    7ff6:	a6 c0       	rjmp	.+332    	; 0x8144 <_Z16process_commandsv+0x2384>
  {
    tmp_extruder = code_value();
    7ff8:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    7ffc:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    8000:	60 93 3e 09 	sts	0x093E, r22
    if(tmp_extruder >= EXTRUDERS) {
    8004:	66 23       	and	r22, r22
    8006:	09 f4       	brne	.+2      	; 0x800a <_Z16process_commandsv+0x224a>
    8008:	40 c0       	rjmp	.+128    	; 0x808a <_Z16process_commandsv+0x22ca>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    800a:	e5 ec       	ldi	r30, 0xC5	; 197
    800c:	f2 e0       	ldi	r31, 0x02	; 2
    800e:	34 91       	lpm	r19, Z
  while(ch)
    8010:	33 23       	and	r19, r19
    8012:	81 f0       	breq	.+32     	; 0x8034 <_Z16process_commandsv+0x2274>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8014:	a0 ec       	ldi	r26, 0xC0	; 192
    8016:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    8018:	86 ec       	ldi	r24, 0xC6	; 198
    801a:	90 e0       	ldi	r25, 0x00	; 0
    801c:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    801e:	2c 91       	ld	r18, X
    8020:	25 ff       	sbrs	r18, 5
    8022:	fd cf       	rjmp	.-6      	; 0x801e <_Z16process_commandsv+0x225e>
        ;

      M_UDRx = c;
    8024:	fc 01       	movw	r30, r24
    8026:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    8028:	4f 5f       	subi	r20, 0xFF	; 255
    802a:	5f 4f       	sbci	r21, 0xFF	; 255
    802c:	fa 01       	movw	r30, r20
    802e:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    8030:	31 11       	cpse	r19, r1
    8032:	f5 cf       	rjmp	.-22     	; 0x801e <_Z16process_commandsv+0x225e>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8034:	e0 ec       	ldi	r30, 0xC0	; 192
    8036:	f0 e0       	ldi	r31, 0x00	; 0
    8038:	80 81       	ld	r24, Z
    803a:	85 ff       	sbrs	r24, 5
    803c:	fd cf       	rjmp	.-6      	; 0x8038 <_Z16process_commandsv+0x2278>
        ;

      M_UDRx = c;
    803e:	84 e5       	ldi	r24, 0x54	; 84
    8040:	80 93 c6 00 	sts	0x00C6, r24
      SERIAL_ECHO_START;
      SERIAL_ECHO("T");
      SERIAL_ECHO(tmp_extruder);
    8044:	40 e0       	ldi	r20, 0x00	; 0
    8046:	50 e0       	ldi	r21, 0x00	; 0
    8048:	60 91 3e 09 	lds	r22, 0x093E
    804c:	82 ed       	ldi	r24, 0xD2	; 210
    804e:	94 e0       	ldi	r25, 0x04	; 4
    8050:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN12MarlinSerial5printEhi>
    8054:	a9 eb       	ldi	r26, 0xB9	; 185
    8056:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    8058:	39 e4       	ldi	r19, 0x49	; 73
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    805a:	e0 ec       	ldi	r30, 0xC0	; 192
    805c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    805e:	86 ec       	ldi	r24, 0xC6	; 198
    8060:	90 e0       	ldi	r25, 0x00	; 0
    8062:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8064:	20 81       	ld	r18, Z
    8066:	25 ff       	sbrs	r18, 5
    8068:	fd cf       	rjmp	.-6      	; 0x8064 <_Z16process_commandsv+0x22a4>
        ;

      M_UDRx = c;
    806a:	dc 01       	movw	r26, r24
    806c:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    806e:	da 01       	movw	r26, r20
    8070:	3d 91       	ld	r19, X+
    8072:	ad 01       	movw	r20, r26
    8074:	31 11       	cpse	r19, r1
    8076:	f6 cf       	rjmp	.-20     	; 0x8064 <_Z16process_commandsv+0x22a4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8078:	e0 ec       	ldi	r30, 0xC0	; 192
    807a:	f0 e0       	ldi	r31, 0x00	; 0
    807c:	80 81       	ld	r24, Z
    807e:	85 ff       	sbrs	r24, 5
    8080:	fd cf       	rjmp	.-6      	; 0x807c <_Z16process_commandsv+0x22bc>
        ;

      M_UDRx = c;
    8082:	8a e0       	ldi	r24, 0x0A	; 10
    8084:	80 93 c6 00 	sts	0x00C6, r24
    8088:	c3 c0       	rjmp	.+390    	; 0x8210 <_Z16process_commandsv+0x2450>
      SERIAL_ECHOLN(MSG_INVALID_EXTRUDER);
    }
    else {
      boolean make_move = false;
      if(code_seen('F')) {
    808a:	86 e4       	ldi	r24, 0x46	; 70
    808c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_Z9code_seenc>
    8090:	88 23       	and	r24, r24
    8092:	d9 f0       	breq	.+54     	; 0x80ca <_Z16process_commandsv+0x230a>
        make_move = true;
        next_feedrate = code_value();
    8094:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    8098:	6b 01       	movw	r12, r22
    809a:	7c 01       	movw	r14, r24
    809c:	60 93 47 09 	sts	0x0947, r22
    80a0:	70 93 48 09 	sts	0x0948, r23
    80a4:	80 93 49 09 	sts	0x0949, r24
    80a8:	90 93 4a 09 	sts	0x094A, r25
        if(next_feedrate > 0.0) {
    80ac:	20 e0       	ldi	r18, 0x00	; 0
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	a9 01       	movw	r20, r18
    80b2:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    80b6:	18 16       	cp	r1, r24
    80b8:	44 f4       	brge	.+16     	; 0x80ca <_Z16process_commandsv+0x230a>
          feedrate = next_feedrate;
    80ba:	c0 92 31 02 	sts	0x0231, r12
    80be:	d0 92 32 02 	sts	0x0232, r13
    80c2:	e0 92 33 02 	sts	0x0233, r14
    80c6:	f0 92 34 02 	sts	0x0234, r15


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    80ca:	e5 ec       	ldi	r30, 0xC5	; 197
    80cc:	f2 e0       	ldi	r31, 0x02	; 2
    80ce:	34 91       	lpm	r19, Z
  while(ch)
    80d0:	31 11       	cpse	r19, r1
    80d2:	09 c0       	rjmp	.+18     	; 0x80e6 <_Z16process_commandsv+0x2326>
    80d4:	aa ec       	ldi	r26, 0xCA	; 202
    80d6:	b3 e0       	ldi	r27, 0x03	; 3
    80d8:	31 e4       	ldi	r19, 0x41	; 65
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    80da:	e0 ec       	ldi	r30, 0xC0	; 192
    80dc:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    80de:	86 ec       	ldi	r24, 0xC6	; 198
    80e0:	90 e0       	ldi	r25, 0x00	; 0
    80e2:	ad 01       	movw	r20, r26
    80e4:	13 c0       	rjmp	.+38     	; 0x810c <_Z16process_commandsv+0x234c>
    80e6:	e5 ec       	ldi	r30, 0xC5	; 197
    80e8:	f2 e0       	ldi	r31, 0x02	; 2
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    80ea:	a0 ec       	ldi	r26, 0xC0	; 192
    80ec:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    80ee:	86 ec       	ldi	r24, 0xC6	; 198
    80f0:	90 e0       	ldi	r25, 0x00	; 0
    80f2:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    80f4:	2c 91       	ld	r18, X
    80f6:	25 ff       	sbrs	r18, 5
    80f8:	fd cf       	rjmp	.-6      	; 0x80f4 <_Z16process_commandsv+0x2334>
        ;

      M_UDRx = c;
    80fa:	fc 01       	movw	r30, r24
    80fc:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    80fe:	4f 5f       	subi	r20, 0xFF	; 255
    8100:	5f 4f       	sbci	r21, 0xFF	; 255
    8102:	fa 01       	movw	r30, r20
    8104:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    8106:	31 11       	cpse	r19, r1
    8108:	f5 cf       	rjmp	.-22     	; 0x80f4 <_Z16process_commandsv+0x2334>
    810a:	e4 cf       	rjmp	.-56     	; 0x80d4 <_Z16process_commandsv+0x2314>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    810c:	20 81       	ld	r18, Z
    810e:	25 ff       	sbrs	r18, 5
    8110:	fd cf       	rjmp	.-6      	; 0x810c <_Z16process_commandsv+0x234c>
        ;

      M_UDRx = c;
    8112:	dc 01       	movw	r26, r24
    8114:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    8116:	da 01       	movw	r26, r20
    8118:	3d 91       	ld	r19, X+
    811a:	ad 01       	movw	r20, r26
    811c:	31 11       	cpse	r19, r1
    811e:	f6 cf       	rjmp	.-20     	; 0x810c <_Z16process_commandsv+0x234c>
        }
      }
      #endif
      SERIAL_ECHO_START;
      SERIAL_ECHO(MSG_ACTIVE_EXTRUDER);
      SERIAL_PROTOCOLLN((int)active_extruder);
    8120:	60 91 63 05 	lds	r22, 0x0563
    8124:	4a e0       	ldi	r20, 0x0A	; 10
    8126:	50 e0       	ldi	r21, 0x00	; 0
    8128:	70 e0       	ldi	r23, 0x00	; 0
    812a:	82 ed       	ldi	r24, 0xD2	; 210
    812c:	94 e0       	ldi	r25, 0x04	; 4
    812e:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8132:	e0 ec       	ldi	r30, 0xC0	; 192
    8134:	f0 e0       	ldi	r31, 0x00	; 0
    8136:	80 81       	ld	r24, Z
    8138:	85 ff       	sbrs	r24, 5
    813a:	fd cf       	rjmp	.-6      	; 0x8136 <_Z16process_commandsv+0x2376>
        ;

      M_UDRx = c;
    813c:	8a e0       	ldi	r24, 0x0A	; 10
    813e:	80 93 c6 00 	sts	0x00C6, r24
    8142:	66 c0       	rjmp	.+204    	; 0x8210 <_Z16process_commandsv+0x2450>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    8144:	e5 ec       	ldi	r30, 0xC5	; 197
    8146:	f2 e0       	ldi	r31, 0x02	; 2
    8148:	34 91       	lpm	r19, Z
  while(ch)
    814a:	33 23       	and	r19, r19
    814c:	81 f0       	breq	.+32     	; 0x816e <_Z16process_commandsv+0x23ae>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    814e:	a0 ec       	ldi	r26, 0xC0	; 192
    8150:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    8152:	86 ec       	ldi	r24, 0xC6	; 198
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8158:	2c 91       	ld	r18, X
    815a:	25 ff       	sbrs	r18, 5
    815c:	fd cf       	rjmp	.-6      	; 0x8158 <_Z16process_commandsv+0x2398>
        ;

      M_UDRx = c;
    815e:	fc 01       	movw	r30, r24
    8160:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    8162:	4f 5f       	subi	r20, 0xFF	; 255
    8164:	5f 4f       	sbci	r21, 0xFF	; 255
    8166:	fa 01       	movw	r30, r20
    8168:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    816a:	31 11       	cpse	r19, r1
    816c:	f5 cf       	rjmp	.-22     	; 0x8158 <_Z16process_commandsv+0x2398>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    816e:	ef e0       	ldi	r30, 0x0F	; 15
    8170:	f7 e0       	ldi	r31, 0x07	; 7
    8172:	34 91       	lpm	r19, Z
  while(ch)
    8174:	33 23       	and	r19, r19
    8176:	81 f0       	breq	.+32     	; 0x8198 <_Z16process_commandsv+0x23d8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8178:	a0 ec       	ldi	r26, 0xC0	; 192
    817a:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    817c:	86 ec       	ldi	r24, 0xC6	; 198
    817e:	90 e0       	ldi	r25, 0x00	; 0
    8180:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8182:	2c 91       	ld	r18, X
    8184:	25 ff       	sbrs	r18, 5
    8186:	fd cf       	rjmp	.-6      	; 0x8182 <_Z16process_commandsv+0x23c2>
        ;

      M_UDRx = c;
    8188:	fc 01       	movw	r30, r24
    818a:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    818c:	4f 5f       	subi	r20, 0xFF	; 255
    818e:	5f 4f       	sbci	r21, 0xFF	; 255
    8190:	fa 01       	movw	r30, r20
    8192:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    8194:	31 11       	cpse	r19, r1
    8196:	f5 cf       	rjmp	.-22     	; 0x8182 <_Z16process_commandsv+0x23c2>

  else
  {
    SERIAL_ECHO_START;
    SERIAL_ECHOPGM(MSG_UNKNOWN_COMMAND);
    SERIAL_ECHO(cmdbuffer[bufindr]);
    8198:	80 91 15 09 	lds	r24, 0x0915
    819c:	90 91 16 09 	lds	r25, 0x0916
    81a0:	20 e6       	ldi	r18, 0x60	; 96
    81a2:	28 9f       	mul	r18, r24
    81a4:	d0 01       	movw	r26, r0
    81a6:	29 9f       	mul	r18, r25
    81a8:	b0 0d       	add	r27, r0
    81aa:	11 24       	eor	r1, r1
    81ac:	af 56       	subi	r26, 0x6F	; 111
    81ae:	b8 4f       	sbci	r27, 0xF8	; 248
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    81b0:	3c 91       	ld	r19, X
    81b2:	33 23       	and	r19, r19
    81b4:	81 f0       	breq	.+32     	; 0x81d6 <_Z16process_commandsv+0x2416>
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    81b6:	11 96       	adiw	r26, 0x01	; 1
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    81b8:	e0 ec       	ldi	r30, 0xC0	; 192
    81ba:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    81bc:	86 ec       	ldi	r24, 0xC6	; 198
    81be:	90 e0       	ldi	r25, 0x00	; 0
    81c0:	ad 01       	movw	r20, r26
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    81c2:	20 81       	ld	r18, Z
    81c4:	25 ff       	sbrs	r18, 5
    81c6:	fd cf       	rjmp	.-6      	; 0x81c2 <_Z16process_commandsv+0x2402>
        ;

      M_UDRx = c;
    81c8:	dc 01       	movw	r26, r24
    81ca:	3c 93       	st	X, r19
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    81cc:	da 01       	movw	r26, r20
    81ce:	3d 91       	ld	r19, X+
    81d0:	ad 01       	movw	r20, r26
    81d2:	31 11       	cpse	r19, r1
    81d4:	f6 cf       	rjmp	.-20     	; 0x81c2 <_Z16process_commandsv+0x2402>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    81d6:	e2 e2       	ldi	r30, 0x22	; 34
    81d8:	f7 e0       	ldi	r31, 0x07	; 7
    81da:	34 91       	lpm	r19, Z
  while(ch)
    81dc:	33 23       	and	r19, r19
    81de:	81 f0       	breq	.+32     	; 0x8200 <_Z16process_commandsv+0x2440>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    81e0:	a0 ec       	ldi	r26, 0xC0	; 192
    81e2:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    81e4:	86 ec       	ldi	r24, 0xC6	; 198
    81e6:	90 e0       	ldi	r25, 0x00	; 0
    81e8:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    81ea:	2c 91       	ld	r18, X
    81ec:	25 ff       	sbrs	r18, 5
    81ee:	fd cf       	rjmp	.-6      	; 0x81ea <_Z16process_commandsv+0x242a>
        ;

      M_UDRx = c;
    81f0:	fc 01       	movw	r30, r24
    81f2:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    81f4:	4f 5f       	subi	r20, 0xFF	; 255
    81f6:	5f 4f       	sbci	r21, 0xFF	; 255
    81f8:	fa 01       	movw	r30, r20
    81fa:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    81fc:	31 11       	cpse	r19, r1
    81fe:	f5 cf       	rjmp	.-22     	; 0x81ea <_Z16process_commandsv+0x242a>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8200:	e0 ec       	ldi	r30, 0xC0	; 192
    8202:	f0 e0       	ldi	r31, 0x00	; 0
    8204:	80 81       	ld	r24, Z
    8206:	85 ff       	sbrs	r24, 5
    8208:	fd cf       	rjmp	.-6      	; 0x8204 <_Z16process_commandsv+0x2444>
        ;

      M_UDRx = c;
    820a:	8a e0       	ldi	r24, 0x0A	; 10
    820c:	80 93 c6 00 	sts	0x00C6, r24
    SERIAL_ECHOPGM(MSG_UNKNOWN_COMMAND);
    SERIAL_ECHO(cmdbuffer[bufindr]);
    SERIAL_ECHOLNPGM("\"");
  }

  ClearToSend();
    8210:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <_Z11ClearToSendv>
    8214:	b2 c0       	rjmp	.+356    	; 0x837a <_Z16process_commandsv+0x25ba>
          calculate_delta(current_position);
          plan_set_position(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS]);

#else // NOT DELTA

      home_all_axis = !((code_seen(axis_codes[0])) || (code_seen(axis_codes[1])) || (code_seen(axis_codes[2])));
    8216:	10 92 35 02 	sts	0x0235, r1
    821a:	0c 94 10 30 	jmp	0x6020	; 0x6020 <_Z16process_commandsv+0x260>
    821e:	0f 2e       	mov	r0, r31
    8220:	fa ee       	ldi	r31, 0xEA	; 234
    8222:	cf 2e       	mov	r12, r31
    8224:	f3 e0       	ldi	r31, 0x03	; 3
    8226:	df 2e       	mov	r13, r31
    8228:	f0 2d       	mov	r31, r0
        prepare_arc_move(false);
        return;
      }
    case 4: // G4 dwell
      LCD_MESSAGEPGM(MSG_DWELL);
      codenum = 0;
    822a:	e1 2c       	mov	r14, r1
    822c:	f1 2c       	mov	r15, r1
    822e:	00 e0       	ldi	r16, 0x00	; 0
    8230:	10 e0       	ldi	r17, 0x00	; 0
    8232:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <_Z16process_commandsv+0x3ec>
      if (code_seen('S'))
      {
        int pin_status = code_value();
        int pin_number = LED_PIN;
        if (code_seen('P') && pin_status >= 0 && pin_status <= 255)
          pin_number = code_value();
    8236:	0e 94 57 25 	call	0x4aae	; 0x4aae <_Z10code_valuev>
    823a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    823e:	7b 01       	movw	r14, r22
        for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++)
        {
          if (sensitive_pins[i] == pin_number)
    8240:	61 15       	cp	r22, r1
    8242:	71 05       	cpc	r23, r1
    8244:	29 f3       	breq	.-54     	; 0x8210 <_Z16process_commandsv+0x2450>
    8246:	6b c0       	rjmp	.+214    	; 0x831e <_Z16process_commandsv+0x255e>
              or when current temp falls outside the hysteresis after target temp was reached */
          if ((residencyStart == -1 &&  target_direction && (degHotend(tmp_extruder) >= (degTargetHotend(tmp_extruder)-TEMP_WINDOW))) ||
              (residencyStart == -1 && !target_direction && (degHotend(tmp_extruder) <= (degTargetHotend(tmp_extruder)+TEMP_WINDOW))) ||
              (residencyStart > -1 && labs(degHotend(tmp_extruder) - degTargetHotend(tmp_extruder)) > TEMP_HYSTERESIS) )
          {
            residencyStart = millis();
    8248:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    824c:	c6 2e       	mov	r12, r22
    824e:	d7 2e       	mov	r13, r23
    8250:	e8 2e       	mov	r14, r24
    8252:	f9 2e       	mov	r15, r25
    8254:	0c 94 4b 38 	jmp	0x7096	; 0x7096 <_Z16process_commandsv+0x12d6>

        #ifdef PID_ADD_EXTRUSION_RATE
        if(code_seen('C')) Kc = code_value();
        #endif

        updatePID();
    8258:	0e 94 1c 73 	call	0xe638	; 0xe638 <_Z9updatePIDv>
    825c:	ac ed       	ldi	r26, 0xDC	; 220
    825e:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    8260:	3f e6       	ldi	r19, 0x6F	; 111
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8262:	e0 ec       	ldi	r30, 0xC0	; 192
    8264:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    8266:	86 ec       	ldi	r24, 0xC6	; 198
    8268:	90 e0       	ldi	r25, 0x00	; 0
    826a:	ad 01       	movw	r20, r26
    826c:	f9 cd       	rjmp	.-1038   	; 0x7e60 <_Z16process_commandsv+0x20a0>
        SERIAL_PROTOCOL(MSG_OK);
        SERIAL_PROTOCOL(" p:");
        SERIAL_PROTOCOL(Kp);
    826e:	40 91 5b 02 	lds	r20, 0x025B
    8272:	50 91 5c 02 	lds	r21, 0x025C
    8276:	60 91 5d 02 	lds	r22, 0x025D
    827a:	70 91 5e 02 	lds	r23, 0x025E
    827e:	22 e0       	ldi	r18, 0x02	; 2
    8280:	30 e0       	ldi	r19, 0x00	; 0
    8282:	82 ed       	ldi	r24, 0xD2	; 210
    8284:	94 e0       	ldi	r25, 0x04	; 4
    8286:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    828a:	af ed       	ldi	r26, 0xDF	; 223
    828c:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    828e:	30 e2       	ldi	r19, 0x20	; 32
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8290:	e0 ec       	ldi	r30, 0xC0	; 192
    8292:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    8294:	86 ec       	ldi	r24, 0xC6	; 198
    8296:	90 e0       	ldi	r25, 0x00	; 0
    8298:	ad 01       	movw	r20, r26
    829a:	ff cd       	rjmp	.-1026   	; 0x7e9a <_Z16process_commandsv+0x20da>
        SERIAL_PROTOCOL(" i:");
        SERIAL_PROTOCOL(unscalePID_i(Ki));
    829c:	60 91 57 02 	lds	r22, 0x0257
    82a0:	70 91 58 02 	lds	r23, 0x0258
    82a4:	80 91 59 02 	lds	r24, 0x0259
    82a8:	90 91 5a 02 	lds	r25, 0x025A
    82ac:	0e 94 90 7d 	call	0xfb20	; 0xfb20 <_Z12unscalePID_if>
    82b0:	ab 01       	movw	r20, r22
    82b2:	bc 01       	movw	r22, r24
    82b4:	22 e0       	ldi	r18, 0x02	; 2
    82b6:	30 e0       	ldi	r19, 0x00	; 0
    82b8:	82 ed       	ldi	r24, 0xD2	; 210
    82ba:	94 e0       	ldi	r25, 0x04	; 4
    82bc:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    82c0:	a3 ee       	ldi	r26, 0xE3	; 227
    82c2:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    82c4:	30 e2       	ldi	r19, 0x20	; 32
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    82c6:	e0 ec       	ldi	r30, 0xC0	; 192
    82c8:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    82ca:	86 ec       	ldi	r24, 0xC6	; 198
    82cc:	90 e0       	ldi	r25, 0x00	; 0
    82ce:	ad 01       	movw	r20, r26
    82d0:	ef cd       	rjmp	.-1058   	; 0x7eb0 <_Z16process_commandsv+0x20f0>
        SERIAL_PROTOCOL(" d:");
        SERIAL_PROTOCOL(unscalePID_d(Kd));
    82d2:	60 91 53 02 	lds	r22, 0x0253
    82d6:	70 91 54 02 	lds	r23, 0x0254
    82da:	80 91 55 02 	lds	r24, 0x0255
    82de:	90 91 56 02 	lds	r25, 0x0256
    82e2:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <_Z12unscalePID_df>
    82e6:	ab 01       	movw	r20, r22
    82e8:	bc 01       	movw	r22, r24
    82ea:	22 e0       	ldi	r18, 0x02	; 2
    82ec:	30 e0       	ldi	r19, 0x00	; 0
    82ee:	82 ed       	ldi	r24, 0xD2	; 210
    82f0:	94 e0       	ldi	r25, 0x04	; 4
    82f2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    82f6:	a7 ee       	ldi	r26, 0xE7	; 231
    82f8:	b3 e0       	ldi	r27, 0x03	; 3
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    82fa:	30 e2       	ldi	r19, 0x20	; 32
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    82fc:	e0 ec       	ldi	r30, 0xC0	; 192
    82fe:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    8300:	86 ec       	ldi	r24, 0xC6	; 198
    8302:	90 e0       	ldi	r25, 0x00	; 0
    8304:	ad 01       	movw	r20, r26
    8306:	df cd       	rjmp	.-1090   	; 0x7ec6 <_Z16process_commandsv+0x2106>
      break;
    case 42: //M42 -Change pin status via gcode
      if (code_seen('S'))
      {
        int pin_status = code_value();
        int pin_number = LED_PIN;
    8308:	0f 2e       	mov	r0, r31
    830a:	fd e0       	ldi	r31, 0x0D	; 13
    830c:	ef 2e       	mov	r14, r31
    830e:	f1 2c       	mov	r15, r1
    8310:	f0 2d       	mov	r31, r0
    8312:	05 c0       	rjmp	.+10     	; 0x831e <_Z16process_commandsv+0x255e>
    8314:	0f 2e       	mov	r0, r31
    8316:	fd e0       	ldi	r31, 0x0D	; 13
    8318:	ef 2e       	mov	r14, r31
    831a:	f1 2c       	mov	r15, r1
    831c:	f0 2d       	mov	r31, r0
    831e:	e0 ef       	ldi	r30, 0xF0	; 240
    8320:	f3 e0       	ldi	r31, 0x03	; 3
    #endif
  }
}
#define HOMEAXIS(LETTER) homeaxis(LETTER##_AXIS)

void process_commands()
    8322:	8e e5       	ldi	r24, 0x5E	; 94
    8324:	94 e0       	ldi	r25, 0x04	; 4
    8326:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <_Z16process_commandsv+0xc08>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    832a:	00 91 3e 09 	lds	r16, 0x093E
    832e:	10 e0       	ldi	r17, 0x00	; 0
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    8330:	f8 01       	movw	r30, r16
    8332:	ee 0f       	add	r30, r30
    8334:	ff 1f       	adc	r31, r31
    8336:	e7 5e       	subi	r30, 0xE7	; 231
    8338:	fe 4e       	sbci	r31, 0xEE	; 238
    833a:	60 81       	ld	r22, Z
    833c:	71 81       	ldd	r23, Z+1	; 0x01
    833e:	88 27       	eor	r24, r24
    8340:	77 fd       	sbrc	r23, 7
    8342:	80 95       	com	r24
    8344:	98 2f       	mov	r25, r24
    8346:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
          manage_inactivity();
          lcd_update();
        #ifdef TEMP_RESIDENCY_TIME
            /* start/restart the TEMP_RESIDENCY_TIME timer whenever we reach target temp for the first time
              or when current temp falls outside the hysteresis after target temp was reached */
          if ((residencyStart == -1 &&  target_direction && (degHotend(tmp_extruder) >= (degTargetHotend(tmp_extruder)-TEMP_WINDOW))) ||
    834a:	20 e0       	ldi	r18, 0x00	; 0
    834c:	30 e0       	ldi	r19, 0x00	; 0
    834e:	40 e8       	ldi	r20, 0x80	; 128
    8350:	5f e3       	ldi	r21, 0x3F	; 63
    8352:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    8356:	f8 01       	movw	r30, r16
    8358:	ee 0f       	add	r30, r30
    835a:	ff 1f       	adc	r31, r31
    835c:	ee 0f       	add	r30, r30
    835e:	ff 1f       	adc	r31, r31
    8360:	ef 5e       	subi	r30, 0xEF	; 239
    8362:	fe 4e       	sbci	r31, 0xEE	; 238
    8364:	20 81       	ld	r18, Z
    8366:	31 81       	ldd	r19, Z+1	; 0x01
    8368:	42 81       	ldd	r20, Z+2	; 0x02
    836a:	53 81       	ldd	r21, Z+3	; 0x03
    836c:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    8370:	88 23       	and	r24, r24
    8372:	0c f0       	brlt	.+2      	; 0x8376 <_Z16process_commandsv+0x25b6>
    8374:	69 cf       	rjmp	.-302    	; 0x8248 <_Z16process_commandsv+0x2488>
    8376:	0c 94 4b 38 	jmp	0x7096	; 0x7096 <_Z16process_commandsv+0x12d6>
    SERIAL_ECHO(cmdbuffer[bufindr]);
    SERIAL_ECHOLNPGM("\"");
  }

  ClearToSend();
}
    837a:	a1 96       	adiw	r28, 0x21	; 33
    837c:	0f b6       	in	r0, 0x3f	; 63
    837e:	f8 94       	cli
    8380:	de bf       	out	0x3e, r29	; 62
    8382:	0f be       	out	0x3f, r0	; 63
    8384:	cd bf       	out	0x3d, r28	; 61
    8386:	df 91       	pop	r29
    8388:	cf 91       	pop	r28
    838a:	1f 91       	pop	r17
    838c:	0f 91       	pop	r16
    838e:	ff 90       	pop	r15
    8390:	ef 90       	pop	r14
    8392:	df 90       	pop	r13
    8394:	cf 90       	pop	r12
    8396:	bf 90       	pop	r11
    8398:	af 90       	pop	r10
    839a:	9f 90       	pop	r9
    839c:	8f 90       	pop	r8
    839e:	7f 90       	pop	r7
    83a0:	6f 90       	pop	r6
    83a2:	5f 90       	pop	r5
    83a4:	4f 90       	pop	r4
    83a6:	3f 90       	pop	r3
    83a8:	2f 90       	pop	r2
    83aa:	08 95       	ret

000083ac <loop>:
  #endif
}


void loop()
{
    83ac:	cf 93       	push	r28
    83ae:	df 93       	push	r29
  if(buflen < (BUFSIZE-1))
    83b0:	80 91 8d 07 	lds	r24, 0x078D
    83b4:	90 91 8e 07 	lds	r25, 0x078E
    83b8:	03 97       	sbiw	r24, 0x03	; 3
    83ba:	14 f4       	brge	.+4      	; 0x83c0 <loop+0x14>
    get_command();
    83bc:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <_Z11get_commandv>
  #ifdef SDSUPPORT
  card.checkautostart(false);
    83c0:	60 e0       	ldi	r22, 0x00	; 0
    83c2:	82 e9       	ldi	r24, 0x92	; 146
    83c4:	95 e0       	ldi	r25, 0x05	; 5
    83c6:	0e 94 0b 18 	call	0x3016	; 0x3016 <_ZN10CardReader14checkautostartEb>
  #endif
  if(buflen)
    83ca:	80 91 8d 07 	lds	r24, 0x078D
    83ce:	90 91 8e 07 	lds	r25, 0x078E
    83d2:	89 2b       	or	r24, r25
    83d4:	09 f4       	brne	.+2      	; 0x83d8 <loop+0x2c>
    83d6:	78 c0       	rjmp	.+240    	; 0x84c8 <loop+0x11c>
  {
    #ifdef SDSUPPORT
      if(card.saving)
    83d8:	80 91 92 05 	lds	r24, 0x0592
    83dc:	88 23       	and	r24, r24
    83de:	09 f4       	brne	.+2      	; 0x83e2 <loop+0x36>
    83e0:	57 c0       	rjmp	.+174    	; 0x8490 <loop+0xe4>
      {
        if(strstr_P(cmdbuffer[bufindr], PSTR("M29")) == NULL)
    83e2:	80 91 15 09 	lds	r24, 0x0915
    83e6:	90 91 16 09 	lds	r25, 0x0916
    83ea:	20 e6       	ldi	r18, 0x60	; 96
    83ec:	28 9f       	mul	r18, r24
    83ee:	e0 01       	movw	r28, r0
    83f0:	29 9f       	mul	r18, r25
    83f2:	d0 0d       	add	r29, r0
    83f4:	11 24       	eor	r1, r1
    83f6:	cf 56       	subi	r28, 0x6F	; 111
    83f8:	d8 4f       	sbci	r29, 0xF8	; 248
    83fa:	67 ec       	ldi	r22, 0xC7	; 199
    83fc:	73 e0       	ldi	r23, 0x03	; 3
    83fe:	ce 01       	movw	r24, r28
    8400:	0e 94 e6 c3 	call	0x187cc	; 0x187cc <strstr_P>
    8404:	89 2b       	or	r24, r25
    8406:	31 f5       	brne	.+76     	; 0x8454 <loop+0xa8>
        {
          card.write_command(cmdbuffer[bufindr]);
    8408:	be 01       	movw	r22, r28
    840a:	82 e9       	ldi	r24, 0x92	; 146
    840c:	95 e0       	ldi	r25, 0x05	; 5
    840e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN10CardReader13write_commandEPc>
          if(card.logging)
    8412:	80 91 93 05 	lds	r24, 0x0593
    8416:	88 23       	and	r24, r24
    8418:	19 f0       	breq	.+6      	; 0x8420 <loop+0x74>
          {
            process_commands();
    841a:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_Z16process_commandsv>
    841e:	3a c0       	rjmp	.+116    	; 0x8494 <loop+0xe8>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    8420:	eb ec       	ldi	r30, 0xCB	; 203
    8422:	f3 e0       	ldi	r31, 0x03	; 3
    8424:	94 91       	lpm	r25, Z
  while(ch)
    8426:	99 23       	and	r25, r25
    8428:	61 f0       	breq	.+24     	; 0x8442 <loop+0x96>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    842a:	a0 ec       	ldi	r26, 0xC0	; 192
    842c:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    842e:	c6 ec       	ldi	r28, 0xC6	; 198
    8430:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8432:	8c 91       	ld	r24, X
    8434:	85 ff       	sbrs	r24, 5
    8436:	fd cf       	rjmp	.-6      	; 0x8432 <loop+0x86>
        ;

      M_UDRx = c;
    8438:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    843a:	31 96       	adiw	r30, 0x01	; 1
    843c:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    843e:	91 11       	cpse	r25, r1
    8440:	f8 cf       	rjmp	.-16     	; 0x8432 <loop+0x86>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8442:	e0 ec       	ldi	r30, 0xC0	; 192
    8444:	f0 e0       	ldi	r31, 0x00	; 0
    8446:	80 81       	ld	r24, Z
    8448:	85 ff       	sbrs	r24, 5
    844a:	fd cf       	rjmp	.-6      	; 0x8446 <loop+0x9a>
        ;

      M_UDRx = c;
    844c:	8a e0       	ldi	r24, 0x0A	; 10
    844e:	80 93 c6 00 	sts	0x00C6, r24
    8452:	20 c0       	rjmp	.+64     	; 0x8494 <loop+0xe8>
            SERIAL_PROTOCOLLNPGM(MSG_OK);
          }
        }
        else
        {
          card.closefile();
    8454:	82 e9       	ldi	r24, 0x92	; 146
    8456:	95 e0       	ldi	r25, 0x05	; 5
    8458:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN10CardReader9closefileEv>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    845c:	ee ec       	ldi	r30, 0xCE	; 206
    845e:	f3 e0       	ldi	r31, 0x03	; 3
    8460:	94 91       	lpm	r25, Z
  while(ch)
    8462:	99 23       	and	r25, r25
    8464:	61 f0       	breq	.+24     	; 0x847e <loop+0xd2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    8466:	a0 ec       	ldi	r26, 0xC0	; 192
    8468:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    846a:	c6 ec       	ldi	r28, 0xC6	; 198
    846c:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    846e:	8c 91       	ld	r24, X
    8470:	85 ff       	sbrs	r24, 5
    8472:	fd cf       	rjmp	.-6      	; 0x846e <loop+0xc2>
        ;

      M_UDRx = c;
    8474:	98 83       	st	Y, r25
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    8476:	31 96       	adiw	r30, 0x01	; 1
    8478:	94 91       	lpm	r25, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    847a:	91 11       	cpse	r25, r1
    847c:	f8 cf       	rjmp	.-16     	; 0x846e <loop+0xc2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    847e:	e0 ec       	ldi	r30, 0xC0	; 192
    8480:	f0 e0       	ldi	r31, 0x00	; 0
    8482:	80 81       	ld	r24, Z
    8484:	85 ff       	sbrs	r24, 5
    8486:	fd cf       	rjmp	.-6      	; 0x8482 <loop+0xd6>
        ;

      M_UDRx = c;
    8488:	8a e0       	ldi	r24, 0x0A	; 10
    848a:	80 93 c6 00 	sts	0x00C6, r24
    848e:	02 c0       	rjmp	.+4      	; 0x8494 <loop+0xe8>
          SERIAL_PROTOCOLLNPGM(MSG_FILE_SAVED);
        }
      }
      else
      {
        process_commands();
    8490:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_Z16process_commandsv>
      }
    #else
      process_commands();
    #endif //SDSUPPORT
    buflen = (buflen-1);
    8494:	80 91 8d 07 	lds	r24, 0x078D
    8498:	90 91 8e 07 	lds	r25, 0x078E
    849c:	01 97       	sbiw	r24, 0x01	; 1
    849e:	90 93 8e 07 	sts	0x078E, r25
    84a2:	80 93 8d 07 	sts	0x078D, r24
    bufindr = (bufindr + 1)%BUFSIZE;
    84a6:	80 91 15 09 	lds	r24, 0x0915
    84aa:	90 91 16 09 	lds	r25, 0x0916
    84ae:	01 96       	adiw	r24, 0x01	; 1
    84b0:	83 70       	andi	r24, 0x03	; 3
    84b2:	90 78       	andi	r25, 0x80	; 128
    84b4:	99 23       	and	r25, r25
    84b6:	24 f4       	brge	.+8      	; 0x84c0 <loop+0x114>
    84b8:	01 97       	sbiw	r24, 0x01	; 1
    84ba:	8c 6f       	ori	r24, 0xFC	; 252
    84bc:	9f 6f       	ori	r25, 0xFF	; 255
    84be:	01 96       	adiw	r24, 0x01	; 1
    84c0:	90 93 16 09 	sts	0x0916, r25
    84c4:	80 93 15 09 	sts	0x0915, r24
  }
  //check heater every n milliseconds
  manage_heater();
    84c8:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
  manage_inactivity();
    84cc:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_Z17manage_inactivityv>
  checkHitEndstops();
    84d0:	0e 94 5f 69 	call	0xd2be	; 0xd2be <_Z16checkHitEndstopsv>
  lcd_update();
    84d4:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
}
    84d8:	df 91       	pop	r29
    84da:	cf 91       	pop	r28
    84dc:	08 95       	ret

000084de <_GLOBAL__sub_I_card>:
      SERIAL_ECHOLN(tmp_extruder);
      return true;
    }
  }
  return false;
}
    84de:	6f ef       	ldi	r22, 0xFF	; 255
    84e0:	7f ef       	ldi	r23, 0xFF	; 255
    84e2:	81 e0       	ldi	r24, 0x01	; 1
    84e4:	90 e0       	ldi	r25, 0x00	; 0
    84e6:	0c 94 bd 21 	jmp	0x437a	; 0x437a <_Z41__static_initialization_and_destruction_0ii>

000084ea <_GLOBAL__sub_D_card>:
    84ea:	6f ef       	ldi	r22, 0xFF	; 255
    84ec:	7f ef       	ldi	r23, 0xFF	; 255
    84ee:	80 e0       	ldi	r24, 0x00	; 0
    84f0:	90 e0       	ldi	r25, 0x00	; 0
    84f2:	0c 94 bd 21 	jmp	0x437a	; 0x437a <_Z41__static_initialization_and_destruction_0ii>

000084f6 <_Z6mc_arcPfS_S_hhhffhh>:

// The arc is approximated by generating a huge number of tiny, linear segments. The length of each 
// segment is configured in settings.mm_per_arc_segment.  
void mc_arc(float *position, float *target, float *offset, uint8_t axis_0, uint8_t axis_1, 
  uint8_t axis_linear, float feed_rate, float radius, uint8_t isclockwise, uint8_t extruder)
{      
    84f6:	2f 92       	push	r2
    84f8:	3f 92       	push	r3
    84fa:	4f 92       	push	r4
    84fc:	5f 92       	push	r5
    84fe:	6f 92       	push	r6
    8500:	7f 92       	push	r7
    8502:	8f 92       	push	r8
    8504:	9f 92       	push	r9
    8506:	af 92       	push	r10
    8508:	bf 92       	push	r11
    850a:	cf 92       	push	r12
    850c:	df 92       	push	r13
    850e:	ef 92       	push	r14
    8510:	ff 92       	push	r15
    8512:	0f 93       	push	r16
    8514:	1f 93       	push	r17
    8516:	cf 93       	push	r28
    8518:	df 93       	push	r29
    851a:	cd b7       	in	r28, 0x3d	; 61
    851c:	de b7       	in	r29, 0x3e	; 62
    851e:	cf 54       	subi	r28, 0x4F	; 79
    8520:	d1 09       	sbc	r29, r1
    8522:	0f b6       	in	r0, 0x3f	; 63
    8524:	f8 94       	cli
    8526:	de bf       	out	0x3e, r29	; 62
    8528:	0f be       	out	0x3f, r0	; 63
    852a:	cd bf       	out	0x3d, r28	; 61
    852c:	1c 01       	movw	r2, r24
    852e:	7a a7       	std	Y+42, r23	; 0x2a
    8530:	69 a7       	std	Y+41, r22	; 0x29
    8532:	4a 01       	movw	r8, r20
    8534:	2f a3       	std	Y+39, r18	; 0x27
    8536:	2c 96       	adiw	r28, 0x0c	; 12
    8538:	0f af       	std	Y+63, r16	; 0x3f
    853a:	2c 97       	sbiw	r28, 0x0c	; 12
    853c:	eb 8e       	std	Y+27, r14	; 0x1b
    853e:	ad a6       	std	Y+45, r10	; 0x2d
    8540:	be a6       	std	Y+46, r11	; 0x2e
    8542:	cf a6       	std	Y+47, r12	; 0x2f
    8544:	d8 aa       	std	Y+48, r13	; 0x30
  //   int acceleration_manager_was_enabled = plan_is_acceleration_manager_enabled();
  //   plan_set_acceleration_manager_enabled(false); // disable acceleration management for the duration of the arc
  float center_axis0 = position[axis_0] + offset[axis_0];
    8546:	02 2f       	mov	r16, r18
    8548:	10 e0       	ldi	r17, 0x00	; 0
    854a:	00 0f       	add	r16, r16
    854c:	11 1f       	adc	r17, r17
    854e:	00 0f       	add	r16, r16
    8550:	11 1f       	adc	r17, r17
    8552:	9a 01       	movw	r18, r20
    8554:	20 0f       	add	r18, r16
    8556:	31 1f       	adc	r19, r17
    8558:	29 96       	adiw	r28, 0x09	; 9
    855a:	3f af       	std	Y+63, r19	; 0x3f
    855c:	2e af       	std	Y+62, r18	; 0x3e
    855e:	29 97       	sbiw	r28, 0x09	; 9
    8560:	d9 01       	movw	r26, r18
    8562:	4d 90       	ld	r4, X+
    8564:	5d 90       	ld	r5, X+
    8566:	6d 90       	ld	r6, X+
    8568:	7c 90       	ld	r7, X
    856a:	fc 01       	movw	r30, r24
    856c:	e0 0f       	add	r30, r16
    856e:	f1 1f       	adc	r31, r17
    8570:	20 81       	ld	r18, Z
    8572:	31 81       	ldd	r19, Z+1	; 0x01
    8574:	42 81       	ldd	r20, Z+2	; 0x02
    8576:	53 81       	ldd	r21, Z+3	; 0x03
    8578:	c3 01       	movw	r24, r6
    857a:	b2 01       	movw	r22, r4
    857c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8580:	69 8b       	std	Y+17, r22	; 0x11
    8582:	7d 8b       	std	Y+21, r23	; 0x15
    8584:	d8 2e       	mov	r13, r24
    8586:	c9 2e       	mov	r12, r25
    8588:	6d ab       	std	Y+53, r22	; 0x35
    858a:	7e ab       	std	Y+54, r23	; 0x36
    858c:	8f ab       	std	Y+55, r24	; 0x37
    858e:	98 af       	std	Y+56, r25	; 0x38
  float center_axis1 = position[axis_1] + offset[axis_1];
    8590:	2c 96       	adiw	r28, 0x0c	; 12
    8592:	bf ad       	ldd	r27, Y+63	; 0x3f
    8594:	2c 97       	sbiw	r28, 0x0c	; 12
    8596:	8b 2f       	mov	r24, r27
    8598:	90 e0       	ldi	r25, 0x00	; 0
    859a:	7c 01       	movw	r14, r24
    859c:	ee 0c       	add	r14, r14
    859e:	ff 1c       	adc	r15, r15
    85a0:	ee 0c       	add	r14, r14
    85a2:	ff 1c       	adc	r15, r15
    85a4:	f4 01       	movw	r30, r8
    85a6:	ee 0d       	add	r30, r14
    85a8:	ff 1d       	adc	r31, r15
    85aa:	2b 96       	adiw	r28, 0x0b	; 11
    85ac:	ff af       	std	Y+63, r31	; 0x3f
    85ae:	ee af       	std	Y+62, r30	; 0x3e
    85b0:	2b 97       	sbiw	r28, 0x0b	; 11
    85b2:	80 80       	ld	r8, Z
    85b4:	91 80       	ldd	r9, Z+1	; 0x01
    85b6:	a2 80       	ldd	r10, Z+2	; 0x02
    85b8:	b3 80       	ldd	r11, Z+3	; 0x03
    85ba:	f1 01       	movw	r30, r2
    85bc:	ee 0d       	add	r30, r14
    85be:	ff 1d       	adc	r31, r15
    85c0:	20 81       	ld	r18, Z
    85c2:	31 81       	ldd	r19, Z+1	; 0x01
    85c4:	42 81       	ldd	r20, Z+2	; 0x02
    85c6:	53 81       	ldd	r21, Z+3	; 0x03
    85c8:	c5 01       	movw	r24, r10
    85ca:	b4 01       	movw	r22, r8
    85cc:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    85d0:	6f 8b       	std	Y+23, r22	; 0x17
    85d2:	78 8f       	std	Y+24, r23	; 0x18
    85d4:	89 8f       	std	Y+25, r24	; 0x19
    85d6:	9a 8f       	std	Y+26, r25	; 0x1a
    85d8:	69 af       	std	Y+57, r22	; 0x39
    85da:	7a af       	std	Y+58, r23	; 0x3a
    85dc:	8b af       	std	Y+59, r24	; 0x3b
    85de:	9c af       	std	Y+60, r25	; 0x3c
  float linear_travel = target[axis_linear] - position[axis_linear];
    85e0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    85e2:	8f 2f       	mov	r24, r31
    85e4:	90 e0       	ldi	r25, 0x00	; 0
    85e6:	88 0f       	add	r24, r24
    85e8:	99 1f       	adc	r25, r25
    85ea:	88 0f       	add	r24, r24
    85ec:	99 1f       	adc	r25, r25
    85ee:	f1 01       	movw	r30, r2
    85f0:	e8 0f       	add	r30, r24
    85f2:	f9 1f       	adc	r31, r25
    85f4:	20 81       	ld	r18, Z
    85f6:	31 81       	ldd	r19, Z+1	; 0x01
    85f8:	42 81       	ldd	r20, Z+2	; 0x02
    85fa:	53 81       	ldd	r21, Z+3	; 0x03
    85fc:	2f 8f       	std	Y+31, r18	; 0x1f
    85fe:	38 a3       	std	Y+32, r19	; 0x20
    8600:	49 a3       	std	Y+33, r20	; 0x21
    8602:	5a a3       	std	Y+34, r21	; 0x22
    8604:	e9 a5       	ldd	r30, Y+41	; 0x29
    8606:	fa a5       	ldd	r31, Y+42	; 0x2a
    8608:	e8 0f       	add	r30, r24
    860a:	f9 1f       	adc	r31, r25
    860c:	60 81       	ld	r22, Z
    860e:	71 81       	ldd	r23, Z+1	; 0x01
    8610:	82 81       	ldd	r24, Z+2	; 0x02
    8612:	93 81       	ldd	r25, Z+3	; 0x03
    8614:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8618:	46 2f       	mov	r20, r22
    861a:	57 2f       	mov	r21, r23
    861c:	68 2f       	mov	r22, r24
    861e:	79 2f       	mov	r23, r25
    8620:	4b a3       	std	Y+35, r20	; 0x23
    8622:	5c a3       	std	Y+36, r21	; 0x24
    8624:	6d a3       	std	Y+37, r22	; 0x25
    8626:	7e a3       	std	Y+38, r23	; 0x26
  float extruder_travel = target[E_AXIS] - position[E_AXIS];
    8628:	a9 a5       	ldd	r26, Y+41	; 0x29
    862a:	ba a5       	ldd	r27, Y+42	; 0x2a
    862c:	1c 96       	adiw	r26, 0x0c	; 12
    862e:	8d 91       	ld	r24, X+
    8630:	9d 91       	ld	r25, X+
    8632:	0d 90       	ld	r0, X+
    8634:	bc 91       	ld	r27, X
    8636:	a0 2d       	mov	r26, r0
    8638:	89 ab       	std	Y+49, r24	; 0x31
    863a:	9a ab       	std	Y+50, r25	; 0x32
    863c:	ab ab       	std	Y+51, r26	; 0x33
    863e:	bc ab       	std	Y+52, r27	; 0x34
    8640:	d1 01       	movw	r26, r2
    8642:	1c 96       	adiw	r26, 0x0c	; 12
    8644:	2d 91       	ld	r18, X+
    8646:	3d 91       	ld	r19, X+
    8648:	4d 91       	ld	r20, X+
    864a:	5c 91       	ld	r21, X
    864c:	1f 97       	sbiw	r26, 0x0f	; 15
    864e:	60 96       	adiw	r28, 0x10	; 16
    8650:	2c af       	std	Y+60, r18	; 0x3c
    8652:	3d af       	std	Y+61, r19	; 0x3d
    8654:	4e af       	std	Y+62, r20	; 0x3e
    8656:	5f af       	std	Y+63, r21	; 0x3f
    8658:	60 97       	sbiw	r28, 0x10	; 16
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
    865a:	77 fa       	bst	r7, 7
    865c:	70 94       	com	r7
    865e:	77 f8       	bld	r7, 7
    8660:	70 94       	com	r7
  float r_axis1 = -offset[axis_1];
    8662:	b7 fa       	bst	r11, 7
    8664:	b0 94       	com	r11
    8666:	b7 f8       	bld	r11, 7
    8668:	b0 94       	com	r11
  float rt_axis0 = target[axis_0] - center_axis0;
    866a:	e9 a5       	ldd	r30, Y+41	; 0x29
    866c:	fa a5       	ldd	r31, Y+42	; 0x2a
    866e:	e0 0f       	add	r30, r16
    8670:	f1 1f       	adc	r31, r17
    8672:	79 89       	ldd	r23, Y+17	; 0x11
    8674:	6d 89       	ldd	r22, Y+21	; 0x15
    8676:	27 2f       	mov	r18, r23
    8678:	36 2f       	mov	r19, r22
    867a:	4d 2d       	mov	r20, r13
    867c:	5c 2d       	mov	r21, r12
    867e:	60 81       	ld	r22, Z
    8680:	71 81       	ldd	r23, Z+1	; 0x01
    8682:	82 81       	ldd	r24, Z+2	; 0x02
    8684:	93 81       	ldd	r25, Z+3	; 0x03
    8686:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    868a:	36 2e       	mov	r3, r22
    868c:	27 2e       	mov	r2, r23
    868e:	18 2f       	mov	r17, r24
    8690:	09 2f       	mov	r16, r25
  float rt_axis1 = target[axis_1] - center_axis1;
    8692:	e9 a5       	ldd	r30, Y+41	; 0x29
    8694:	fa a5       	ldd	r31, Y+42	; 0x2a
    8696:	ee 0d       	add	r30, r14
    8698:	ff 1d       	adc	r31, r15
    869a:	7f 89       	ldd	r23, Y+23	; 0x17
    869c:	68 8d       	ldd	r22, Y+24	; 0x18
    869e:	99 8d       	ldd	r25, Y+25	; 0x19
    86a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    86a2:	27 2f       	mov	r18, r23
    86a4:	36 2f       	mov	r19, r22
    86a6:	49 2f       	mov	r20, r25
    86a8:	58 2f       	mov	r21, r24
    86aa:	60 81       	ld	r22, Z
    86ac:	71 81       	ldd	r23, Z+1	; 0x01
    86ae:	82 81       	ldd	r24, Z+2	; 0x02
    86b0:	93 81       	ldd	r25, Z+3	; 0x03
    86b2:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    86b6:	69 8b       	std	Y+17, r22	; 0x11
    86b8:	7d 8b       	std	Y+21, r23	; 0x15
    86ba:	8f 8b       	std	Y+23, r24	; 0x17
    86bc:	98 8f       	std	Y+24, r25	; 0x18
  
  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
    86be:	23 2d       	mov	r18, r3
    86c0:	32 2d       	mov	r19, r2
    86c2:	41 2f       	mov	r20, r17
    86c4:	50 2f       	mov	r21, r16
    86c6:	c3 01       	movw	r24, r6
    86c8:	b2 01       	movw	r22, r4
    86ca:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    86ce:	6b 01       	movw	r12, r22
    86d0:	7c 01       	movw	r14, r24
    86d2:	79 89       	ldd	r23, Y+17	; 0x11
    86d4:	6d 89       	ldd	r22, Y+21	; 0x15
    86d6:	9f 89       	ldd	r25, Y+23	; 0x17
    86d8:	88 8d       	ldd	r24, Y+24	; 0x18
    86da:	27 2f       	mov	r18, r23
    86dc:	36 2f       	mov	r19, r22
    86de:	49 2f       	mov	r20, r25
    86e0:	58 2f       	mov	r21, r24
    86e2:	c5 01       	movw	r24, r10
    86e4:	b4 01       	movw	r22, r8
    86e6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    86ea:	9b 01       	movw	r18, r22
    86ec:	ac 01       	movw	r20, r24
    86ee:	c7 01       	movw	r24, r14
    86f0:	b6 01       	movw	r22, r12
    86f2:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    86f6:	6b 01       	movw	r12, r22
    86f8:	7c 01       	movw	r14, r24
    86fa:	79 89       	ldd	r23, Y+17	; 0x11
    86fc:	6d 89       	ldd	r22, Y+21	; 0x15
    86fe:	9f 89       	ldd	r25, Y+23	; 0x17
    8700:	88 8d       	ldd	r24, Y+24	; 0x18
    8702:	27 2f       	mov	r18, r23
    8704:	36 2f       	mov	r19, r22
    8706:	49 2f       	mov	r20, r25
    8708:	58 2f       	mov	r21, r24
    870a:	c3 01       	movw	r24, r6
    870c:	b2 01       	movw	r22, r4
    870e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8712:	69 8b       	std	Y+17, r22	; 0x11
    8714:	7a 8b       	std	Y+18, r23	; 0x12
    8716:	8b 8b       	std	Y+19, r24	; 0x13
    8718:	9c 8b       	std	Y+20, r25	; 0x14
    871a:	23 2d       	mov	r18, r3
    871c:	32 2d       	mov	r19, r2
    871e:	41 2f       	mov	r20, r17
    8720:	50 2f       	mov	r21, r16
    8722:	c5 01       	movw	r24, r10
    8724:	b4 01       	movw	r22, r8
    8726:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    872a:	9b 01       	movw	r18, r22
    872c:	ac 01       	movw	r20, r24
    872e:	69 89       	ldd	r22, Y+17	; 0x11
    8730:	7a 89       	ldd	r23, Y+18	; 0x12
    8732:	8b 89       	ldd	r24, Y+19	; 0x13
    8734:	9c 89       	ldd	r25, Y+20	; 0x14
    8736:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    873a:	a7 01       	movw	r20, r14
    873c:	96 01       	movw	r18, r12
    873e:	0e 94 ba b5 	call	0x16b74	; 0x16b74 <atan2>
    8742:	26 2e       	mov	r2, r22
    8744:	37 2e       	mov	r3, r23
    8746:	08 2f       	mov	r16, r24
    8748:	19 2f       	mov	r17, r25
  if (angular_travel < 0) { angular_travel += 2*M_PI; }
    874a:	20 e0       	ldi	r18, 0x00	; 0
    874c:	30 e0       	ldi	r19, 0x00	; 0
    874e:	a9 01       	movw	r20, r18
    8750:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    8754:	88 23       	and	r24, r24
    8756:	74 f4       	brge	.+28     	; 0x8774 <_Z6mc_arcPfS_S_hhhffhh+0x27e>
    8758:	2b ed       	ldi	r18, 0xDB	; 219
    875a:	3f e0       	ldi	r19, 0x0F	; 15
    875c:	49 ec       	ldi	r20, 0xC9	; 201
    875e:	50 e4       	ldi	r21, 0x40	; 64
    8760:	62 2d       	mov	r22, r2
    8762:	73 2d       	mov	r23, r3
    8764:	80 2f       	mov	r24, r16
    8766:	91 2f       	mov	r25, r17
    8768:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    876c:	26 2e       	mov	r2, r22
    876e:	37 2e       	mov	r3, r23
    8770:	08 2f       	mov	r16, r24
    8772:	19 2f       	mov	r17, r25
  if (isclockwise) { angular_travel -= 2*M_PI; }
    8774:	aa 96       	adiw	r28, 0x2a	; 42
    8776:	8f ad       	ldd	r24, Y+63	; 0x3f
    8778:	aa 97       	sbiw	r28, 0x2a	; 42
    877a:	88 23       	and	r24, r24
    877c:	71 f0       	breq	.+28     	; 0x879a <_Z6mc_arcPfS_S_hhhffhh+0x2a4>
    877e:	2b ed       	ldi	r18, 0xDB	; 219
    8780:	3f e0       	ldi	r19, 0x0F	; 15
    8782:	49 ec       	ldi	r20, 0xC9	; 201
    8784:	50 e4       	ldi	r21, 0x40	; 64
    8786:	62 2d       	mov	r22, r2
    8788:	73 2d       	mov	r23, r3
    878a:	80 2f       	mov	r24, r16
    878c:	91 2f       	mov	r25, r17
    878e:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8792:	26 2e       	mov	r2, r22
    8794:	37 2e       	mov	r3, r23
    8796:	08 2f       	mov	r16, r24
    8798:	19 2f       	mov	r17, r25
  
  float millimeters_of_travel = hypot(angular_travel*radius, fabs(linear_travel));
    879a:	cb a0       	ldd	r12, Y+35	; 0x23
    879c:	dc a0       	ldd	r13, Y+36	; 0x24
    879e:	ed a0       	ldd	r14, Y+37	; 0x25
    87a0:	fe a0       	ldd	r15, Y+38	; 0x26
    87a2:	e8 94       	clt
    87a4:	f7 f8       	bld	r15, 7
    87a6:	a9 96       	adiw	r28, 0x29	; 41
    87a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    87aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    87ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    87ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b0:	a9 97       	sbiw	r28, 0x29	; 41
    87b2:	62 2d       	mov	r22, r2
    87b4:	73 2d       	mov	r23, r3
    87b6:	80 2f       	mov	r24, r16
    87b8:	91 2f       	mov	r25, r17
    87ba:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    87be:	a7 01       	movw	r20, r14
    87c0:	96 01       	movw	r18, r12
    87c2:	0e 94 30 b8 	call	0x17060	; 0x17060 <hypot>
    87c6:	6b 01       	movw	r12, r22
    87c8:	7c 01       	movw	r14, r24
  if (millimeters_of_travel < 0.001) { return; }
    87ca:	2f e6       	ldi	r18, 0x6F	; 111
    87cc:	32 e1       	ldi	r19, 0x12	; 18
    87ce:	43 e8       	ldi	r20, 0x83	; 131
    87d0:	5a e3       	ldi	r21, 0x3A	; 58
    87d2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    87d6:	88 23       	and	r24, r24
    87d8:	0c f4       	brge	.+2      	; 0x87dc <_Z6mc_arcPfS_S_hhhffhh+0x2e6>
    87da:	43 c2       	rjmp	.+1158   	; 0x8c62 <_Z6mc_arcPfS_S_hhhffhh+0x76c>
  uint16_t segments = floor(millimeters_of_travel/MM_PER_ARC_SEGMENT);
    87dc:	c7 01       	movw	r24, r14
    87de:	b6 01       	movw	r22, r12
    87e0:	0e 94 fd b6 	call	0x16dfa	; 0x16dfa <floor>
    87e4:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    87e8:	7c a7       	std	Y+44, r23	; 0x2c
    87ea:	6b a7       	std	Y+43, r22	; 0x2b
  if(segments == 0) segments = 1;
    87ec:	fb 01       	movw	r30, r22
    87ee:	30 97       	sbiw	r30, 0x00	; 0
    87f0:	09 f4       	brne	.+2      	; 0x87f4 <_Z6mc_arcPfS_S_hhhffhh+0x2fe>
    87f2:	1d c2       	rjmp	.+1082   	; 0x8c2e <_Z6mc_arcPfS_S_hhhffhh+0x738>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of 
    // all segments.
    if (invert_feed_rate) { feed_rate *= segments; }
  */
  float theta_per_segment = angular_travel/segments;
    87f4:	80 e0       	ldi	r24, 0x00	; 0
    87f6:	90 e0       	ldi	r25, 0x00	; 0
    87f8:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    87fc:	6b 01       	movw	r12, r22
    87fe:	7c 01       	movw	r14, r24
    8800:	9b 01       	movw	r18, r22
    8802:	ac 01       	movw	r20, r24
    8804:	62 2d       	mov	r22, r2
    8806:	73 2d       	mov	r23, r3
    8808:	80 2f       	mov	r24, r16
    880a:	91 2f       	mov	r25, r17
    880c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8810:	16 2f       	mov	r17, r22
    8812:	07 2f       	mov	r16, r23
    8814:	28 2e       	mov	r2, r24
    8816:	39 2e       	mov	r3, r25
    8818:	6f 8b       	std	Y+23, r22	; 0x17
    881a:	78 8f       	std	Y+24, r23	; 0x18
    881c:	89 8f       	std	Y+25, r24	; 0x19
    881e:	9a 8f       	std	Y+26, r25	; 0x1a
  float linear_per_segment = linear_travel/segments;
    8820:	a7 01       	movw	r20, r14
    8822:	96 01       	movw	r18, r12
    8824:	6b a1       	ldd	r22, Y+35	; 0x23
    8826:	7c a1       	ldd	r23, Y+36	; 0x24
    8828:	8d a1       	ldd	r24, Y+37	; 0x25
    882a:	9e a1       	ldd	r25, Y+38	; 0x26
    882c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8830:	6b a3       	std	Y+35, r22	; 0x23
    8832:	7d af       	std	Y+61, r23	; 0x3d
    8834:	8e af       	std	Y+62, r24	; 0x3e
    8836:	9f af       	std	Y+63, r25	; 0x3f
  //   int acceleration_manager_was_enabled = plan_is_acceleration_manager_enabled();
  //   plan_set_acceleration_manager_enabled(false); // disable acceleration management for the duration of the arc
  float center_axis0 = position[axis_0] + offset[axis_0];
  float center_axis1 = position[axis_1] + offset[axis_1];
  float linear_travel = target[axis_linear] - position[axis_linear];
  float extruder_travel = target[E_AXIS] - position[E_AXIS];
    8838:	60 96       	adiw	r28, 0x10	; 16
    883a:	2c ad       	ldd	r18, Y+60	; 0x3c
    883c:	3d ad       	ldd	r19, Y+61	; 0x3d
    883e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8840:	5f ad       	ldd	r21, Y+63	; 0x3f
    8842:	60 97       	sbiw	r28, 0x10	; 16
    8844:	69 a9       	ldd	r22, Y+49	; 0x31
    8846:	7a a9       	ldd	r23, Y+50	; 0x32
    8848:	8b a9       	ldd	r24, Y+51	; 0x33
    884a:	9c a9       	ldd	r25, Y+52	; 0x34
    884c:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    // all segments.
    if (invert_feed_rate) { feed_rate *= segments; }
  */
  float theta_per_segment = angular_travel/segments;
  float linear_per_segment = linear_travel/segments;
  float extruder_per_segment = extruder_travel/segments;
    8850:	a7 01       	movw	r20, r14
    8852:	96 01       	movw	r18, r12
    8854:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8858:	69 ab       	std	Y+49, r22	; 0x31
    885a:	21 96       	adiw	r28, 0x01	; 1
    885c:	7f af       	std	Y+63, r23	; 0x3f
    885e:	21 97       	sbiw	r28, 0x01	; 1
    8860:	22 96       	adiw	r28, 0x02	; 2
    8862:	8f af       	std	Y+63, r24	; 0x3f
    8864:	22 97       	sbiw	r28, 0x02	; 2
    8866:	23 96       	adiw	r28, 0x03	; 3
    8868:	9f af       	std	Y+63, r25	; 0x3f
    886a:	23 97       	sbiw	r28, 0x03	; 3
     without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
     a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead. 
     This is important when there are successive arc motions. 
  */
  // Vector rotation matrix values
  float cos_T = 1-0.5*theta_per_segment*theta_per_segment; // Small angle approximation
    886c:	20 e0       	ldi	r18, 0x00	; 0
    886e:	30 e0       	ldi	r19, 0x00	; 0
    8870:	40 e0       	ldi	r20, 0x00	; 0
    8872:	5f e3       	ldi	r21, 0x3F	; 63
    8874:	61 2f       	mov	r22, r17
    8876:	70 2f       	mov	r23, r16
    8878:	82 2d       	mov	r24, r2
    887a:	93 2d       	mov	r25, r3
    887c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8880:	21 2f       	mov	r18, r17
    8882:	30 2f       	mov	r19, r16
    8884:	42 2d       	mov	r20, r2
    8886:	53 2d       	mov	r21, r3
    8888:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    888c:	9b 01       	movw	r18, r22
    888e:	ac 01       	movw	r20, r24
    8890:	60 e0       	ldi	r22, 0x00	; 0
    8892:	70 e0       	ldi	r23, 0x00	; 0
    8894:	80 e8       	ldi	r24, 0x80	; 128
    8896:	9f e3       	ldi	r25, 0x3F	; 63
    8898:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    889c:	24 96       	adiw	r28, 0x04	; 4
    889e:	6f af       	std	Y+63, r22	; 0x3f
    88a0:	24 97       	sbiw	r28, 0x04	; 4
    88a2:	25 96       	adiw	r28, 0x05	; 5
    88a4:	7f af       	std	Y+63, r23	; 0x3f
    88a6:	25 97       	sbiw	r28, 0x05	; 5
    88a8:	26 96       	adiw	r28, 0x06	; 6
    88aa:	8f af       	std	Y+63, r24	; 0x3f
    88ac:	26 97       	sbiw	r28, 0x06	; 6
    88ae:	27 96       	adiw	r28, 0x07	; 7
    88b0:	9f af       	std	Y+63, r25	; 0x3f
    88b2:	27 97       	sbiw	r28, 0x07	; 7
  float r_axisi;
  uint16_t i;
  int8_t count = 0;

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];
    88b4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    88b6:	8f 2f       	mov	r24, r31
    88b8:	90 e0       	ldi	r25, 0x00	; 0
    88ba:	fe 01       	movw	r30, r28
    88bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    88be:	24 e0       	ldi	r18, 0x04	; 4
    88c0:	32 9f       	mul	r19, r18
    88c2:	e0 0d       	add	r30, r0
    88c4:	f1 1d       	adc	r31, r1
    88c6:	11 24       	eor	r1, r1
    88c8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    88ca:	38 a1       	ldd	r19, Y+32	; 0x20
    88cc:	49 a1       	ldd	r20, Y+33	; 0x21
    88ce:	5a a1       	ldd	r21, Y+34	; 0x22
    88d0:	21 83       	std	Z+1, r18	; 0x01
    88d2:	32 83       	std	Z+2, r19	; 0x02
    88d4:	43 83       	std	Z+3, r20	; 0x03
    88d6:	54 83       	std	Z+4, r21	; 0x04
  
  // Initialize the extruder axis
  arc_target[E_AXIS] = position[E_AXIS];
    88d8:	60 96       	adiw	r28, 0x10	; 16
    88da:	2c ad       	ldd	r18, Y+60	; 0x3c
    88dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    88de:	4e ad       	ldd	r20, Y+62	; 0x3e
    88e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    88e2:	60 97       	sbiw	r28, 0x10	; 16
    88e4:	2d 87       	std	Y+13, r18	; 0x0d
    88e6:	3e 87       	std	Y+14, r19	; 0x0e
    88e8:	4f 87       	std	Y+15, r20	; 0x0f
    88ea:	58 8b       	std	Y+16, r21	; 0x10

  for (i = 1; i<segments; i++) { // Increment (segments-1)
    88ec:	4b a5       	ldd	r20, Y+43	; 0x2b
    88ee:	5c a5       	ldd	r21, Y+44	; 0x2c
    88f0:	42 30       	cpi	r20, 0x02	; 2
    88f2:	51 05       	cpc	r21, r1
    88f4:	08 f4       	brcc	.+2      	; 0x88f8 <_Z6mc_arcPfS_S_hhhffhh+0x402>
    88f6:	80 c1       	rjmp	.+768    	; 0x8bf8 <_Z6mc_arcPfS_S_hhhffhh+0x702>
  float arc_target[4];
  float sin_Ti;
  float cos_Ti;
  float r_axisi;
  uint16_t i;
  int8_t count = 0;
    88f8:	19 8a       	std	Y+17, r1	; 0x11
  arc_target[axis_linear] = position[axis_linear];
  
  // Initialize the extruder axis
  arc_target[E_AXIS] = position[E_AXIS];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
    88fa:	22 24       	eor	r2, r2
    88fc:	23 94       	inc	r2
    88fe:	31 2c       	mov	r3, r1
      r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
      count = 0;
    }

    // Update arc_target location
    arc_target[axis_0] = center_axis0 + r_axis0;
    8900:	a1 e0       	ldi	r26, 0x01	; 1
    8902:	b0 e0       	ldi	r27, 0x00	; 0
    8904:	ac 0f       	add	r26, r28
    8906:	bd 1f       	adc	r27, r29
    8908:	ff a1       	ldd	r31, Y+39	; 0x27
    890a:	e4 e0       	ldi	r30, 0x04	; 4
    890c:	fe 9f       	mul	r31, r30
    890e:	a0 0d       	add	r26, r0
    8910:	b1 1d       	adc	r27, r1
    8912:	11 24       	eor	r1, r1
    8914:	b8 a3       	std	Y+32, r27	; 0x20
    8916:	af 8f       	std	Y+31, r26	; 0x1f
    arc_target[axis_1] = center_axis1 + r_axis1;
    8918:	21 e0       	ldi	r18, 0x01	; 1
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	2c 0f       	add	r18, r28
    891e:	3d 1f       	adc	r19, r29
    8920:	2c 96       	adiw	r28, 0x0c	; 12
    8922:	5f ad       	ldd	r21, Y+63	; 0x3f
    8924:	2c 97       	sbiw	r28, 0x0c	; 12
    8926:	44 e0       	ldi	r20, 0x04	; 4
    8928:	54 9f       	mul	r21, r20
    892a:	20 0d       	add	r18, r0
    892c:	31 1d       	adc	r19, r1
    892e:	11 24       	eor	r1, r1
    8930:	38 a7       	std	Y+40, r19	; 0x28
    8932:	2f a3       	std	Y+39, r18	; 0x27
    arc_target[axis_linear] += linear_per_segment;
    8934:	88 0f       	add	r24, r24
    8936:	99 1f       	adc	r25, r25
    8938:	88 0f       	add	r24, r24
    893a:	99 1f       	adc	r25, r25
    893c:	a1 e0       	ldi	r26, 0x01	; 1
    893e:	b0 e0       	ldi	r27, 0x00	; 0
    8940:	ac 0f       	add	r26, r28
    8942:	bd 1f       	adc	r27, r29
    8944:	a8 0f       	add	r26, r24
    8946:	b9 1f       	adc	r27, r25
    8948:	be 8b       	std	Y+22, r27	; 0x16
    894a:	ad 8b       	std	Y+21, r26	; 0x15
  // Initialize the extruder axis
  arc_target[E_AXIS] = position[E_AXIS];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
    
    if (count < N_ARC_CORRECTION) {
    894c:	b9 89       	ldd	r27, Y+17	; 0x11
    894e:	b9 31       	cpi	r27, 0x19	; 25
    8950:	0c f0       	brlt	.+2      	; 0x8954 <_Z6mc_arcPfS_S_hhhffhh+0x45e>
    8952:	64 c0       	rjmp	.+200    	; 0x8a1c <_Z6mc_arcPfS_S_hhhffhh+0x526>
      // Apply vector rotation matrix 
      r_axisi = r_axis0*sin_T + r_axis1*cos_T;
    8954:	7f 89       	ldd	r23, Y+23	; 0x17
    8956:	68 8d       	ldd	r22, Y+24	; 0x18
    8958:	99 8d       	ldd	r25, Y+25	; 0x19
    895a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    895c:	27 2f       	mov	r18, r23
    895e:	36 2f       	mov	r19, r22
    8960:	49 2f       	mov	r20, r25
    8962:	58 2f       	mov	r21, r24
    8964:	c3 01       	movw	r24, r6
    8966:	b2 01       	movw	r22, r4
    8968:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    896c:	6b 01       	movw	r12, r22
    896e:	7c 01       	movw	r14, r24
    8970:	24 96       	adiw	r28, 0x04	; 4
    8972:	7f ad       	ldd	r23, Y+63	; 0x3f
    8974:	24 97       	sbiw	r28, 0x04	; 4
    8976:	25 96       	adiw	r28, 0x05	; 5
    8978:	6f ad       	ldd	r22, Y+63	; 0x3f
    897a:	25 97       	sbiw	r28, 0x05	; 5
    897c:	26 96       	adiw	r28, 0x06	; 6
    897e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8980:	26 97       	sbiw	r28, 0x06	; 6
    8982:	27 96       	adiw	r28, 0x07	; 7
    8984:	8f ad       	ldd	r24, Y+63	; 0x3f
    8986:	27 97       	sbiw	r28, 0x07	; 7
    8988:	27 2f       	mov	r18, r23
    898a:	36 2f       	mov	r19, r22
    898c:	49 2f       	mov	r20, r25
    898e:	58 2f       	mov	r21, r24
    8990:	c5 01       	movw	r24, r10
    8992:	b4 01       	movw	r22, r8
    8994:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8998:	9b 01       	movw	r18, r22
    899a:	ac 01       	movw	r20, r24
    899c:	c7 01       	movw	r24, r14
    899e:	b6 01       	movw	r22, r12
    89a0:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    89a4:	e6 2e       	mov	r14, r22
    89a6:	f7 2e       	mov	r15, r23
    89a8:	08 2f       	mov	r16, r24
    89aa:	19 2f       	mov	r17, r25
      r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
    89ac:	24 96       	adiw	r28, 0x04	; 4
    89ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    89b0:	24 97       	sbiw	r28, 0x04	; 4
    89b2:	25 96       	adiw	r28, 0x05	; 5
    89b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    89b6:	25 97       	sbiw	r28, 0x05	; 5
    89b8:	26 96       	adiw	r28, 0x06	; 6
    89ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    89bc:	26 97       	sbiw	r28, 0x06	; 6
    89be:	27 96       	adiw	r28, 0x07	; 7
    89c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89c2:	27 97       	sbiw	r28, 0x07	; 7
    89c4:	27 2f       	mov	r18, r23
    89c6:	36 2f       	mov	r19, r22
    89c8:	49 2f       	mov	r20, r25
    89ca:	58 2f       	mov	r21, r24
    89cc:	c3 01       	movw	r24, r6
    89ce:	b2 01       	movw	r22, r4
    89d0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    89d4:	66 2e       	mov	r6, r22
    89d6:	77 2e       	mov	r7, r23
    89d8:	c8 2e       	mov	r12, r24
    89da:	d9 2e       	mov	r13, r25
    89dc:	7f 89       	ldd	r23, Y+23	; 0x17
    89de:	68 8d       	ldd	r22, Y+24	; 0x18
    89e0:	99 8d       	ldd	r25, Y+25	; 0x19
    89e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    89e4:	27 2f       	mov	r18, r23
    89e6:	36 2f       	mov	r19, r22
    89e8:	49 2f       	mov	r20, r25
    89ea:	58 2f       	mov	r21, r24
    89ec:	c5 01       	movw	r24, r10
    89ee:	b4 01       	movw	r22, r8
    89f0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    89f4:	9b 01       	movw	r18, r22
    89f6:	ac 01       	movw	r20, r24
    89f8:	66 2d       	mov	r22, r6
    89fa:	77 2d       	mov	r23, r7
    89fc:	8c 2d       	mov	r24, r12
    89fe:	9d 2d       	mov	r25, r13
    8a00:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8a04:	46 2e       	mov	r4, r22
    8a06:	57 2e       	mov	r5, r23
    8a08:	68 2e       	mov	r6, r24
    8a0a:	79 2e       	mov	r7, r25
      r_axis1 = r_axisi;
      count++;
    8a0c:	e9 89       	ldd	r30, Y+17	; 0x11
    8a0e:	ef 5f       	subi	r30, 0xFF	; 255
    8a10:	e9 8b       	std	Y+17, r30	; 0x11
    
    if (count < N_ARC_CORRECTION) {
      // Apply vector rotation matrix 
      r_axisi = r_axis0*sin_T + r_axis1*cos_T;
      r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
      r_axis1 = r_axisi;
    8a12:	8e 2c       	mov	r8, r14
    8a14:	9f 2c       	mov	r9, r15
    8a16:	a0 2e       	mov	r10, r16
    8a18:	b1 2e       	mov	r11, r17
    8a1a:	76 c0       	rjmp	.+236    	; 0x8b08 <_Z6mc_arcPfS_S_hhhffhh+0x612>
      count++;
    } else {
      // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments.
      // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
      cos_Ti = cos(i*theta_per_segment);
    8a1c:	b1 01       	movw	r22, r2
    8a1e:	80 e0       	ldi	r24, 0x00	; 0
    8a20:	90 e0       	ldi	r25, 0x00	; 0
    8a22:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    8a26:	bf 89       	ldd	r27, Y+23	; 0x17
    8a28:	a8 8d       	ldd	r26, Y+24	; 0x18
    8a2a:	f9 8d       	ldd	r31, Y+25	; 0x19
    8a2c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    8a2e:	2b 2f       	mov	r18, r27
    8a30:	3a 2f       	mov	r19, r26
    8a32:	4f 2f       	mov	r20, r31
    8a34:	5e 2f       	mov	r21, r30
    8a36:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8a3a:	a6 2e       	mov	r10, r22
    8a3c:	b7 2e       	mov	r11, r23
    8a3e:	08 2f       	mov	r16, r24
    8a40:	19 2f       	mov	r17, r25
    8a42:	80 2f       	mov	r24, r16
    8a44:	91 2f       	mov	r25, r17
    8a46:	0e 94 24 b6 	call	0x16c48	; 0x16c48 <cos>
    8a4a:	6b 01       	movw	r12, r22
    8a4c:	7c 01       	movw	r14, r24
      sin_Ti = sin(i*theta_per_segment);
    8a4e:	6a 2d       	mov	r22, r10
    8a50:	7b 2d       	mov	r23, r11
    8a52:	80 2f       	mov	r24, r16
    8a54:	91 2f       	mov	r25, r17
    8a56:	0e 94 58 b9 	call	0x172b0	; 0x172b0 <sin>
    8a5a:	4b 01       	movw	r8, r22
    8a5c:	5c 01       	movw	r10, r24
      r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
    8a5e:	29 96       	adiw	r28, 0x09	; 9
    8a60:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a62:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a64:	29 97       	sbiw	r28, 0x09	; 9
    8a66:	80 81       	ld	r24, Z
    8a68:	91 81       	ldd	r25, Z+1	; 0x01
    8a6a:	a2 81       	ldd	r26, Z+2	; 0x02
    8a6c:	b3 81       	ldd	r27, Z+3	; 0x03
    8a6e:	9c 01       	movw	r18, r24
    8a70:	ad 01       	movw	r20, r26
    8a72:	50 58       	subi	r21, 0x80	; 128
    8a74:	29 8b       	std	Y+17, r18	; 0x11
    8a76:	3a 8b       	std	Y+18, r19	; 0x12
    8a78:	4b 8b       	std	Y+19, r20	; 0x13
    8a7a:	5c 8b       	std	Y+20, r21	; 0x14
    8a7c:	2b 96       	adiw	r28, 0x0b	; 11
    8a7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a80:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a82:	2b 97       	sbiw	r28, 0x0b	; 11
    8a84:	8d 91       	ld	r24, X+
    8a86:	9d 91       	ld	r25, X+
    8a88:	0d 90       	ld	r0, X+
    8a8a:	bc 91       	ld	r27, X
    8a8c:	a0 2d       	mov	r26, r0
    8a8e:	8b 8f       	std	Y+27, r24	; 0x1b
    8a90:	9c 8f       	std	Y+28, r25	; 0x1c
    8a92:	ad 8f       	std	Y+29, r26	; 0x1d
    8a94:	be 8f       	std	Y+30, r27	; 0x1e
    8a96:	a7 01       	movw	r20, r14
    8a98:	96 01       	movw	r18, r12
    8a9a:	69 89       	ldd	r22, Y+17	; 0x11
    8a9c:	7a 89       	ldd	r23, Y+18	; 0x12
    8a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    8aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    8aa2:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8aa6:	2b 01       	movw	r4, r22
    8aa8:	3c 01       	movw	r6, r24
    8aaa:	a5 01       	movw	r20, r10
    8aac:	94 01       	movw	r18, r8
    8aae:	6b 8d       	ldd	r22, Y+27	; 0x1b
    8ab0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    8ab2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8ab4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8ab6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8aba:	9b 01       	movw	r18, r22
    8abc:	ac 01       	movw	r20, r24
    8abe:	c3 01       	movw	r24, r6
    8ac0:	b2 01       	movw	r22, r4
    8ac2:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8ac6:	46 2e       	mov	r4, r22
    8ac8:	57 2e       	mov	r5, r23
    8aca:	68 2e       	mov	r6, r24
    8acc:	79 2e       	mov	r7, r25
      r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
    8ace:	29 89       	ldd	r18, Y+17	; 0x11
    8ad0:	3a 89       	ldd	r19, Y+18	; 0x12
    8ad2:	4b 89       	ldd	r20, Y+19	; 0x13
    8ad4:	5c 89       	ldd	r21, Y+20	; 0x14
    8ad6:	c5 01       	movw	r24, r10
    8ad8:	b4 01       	movw	r22, r8
    8ada:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8ade:	4b 01       	movw	r8, r22
    8ae0:	5c 01       	movw	r10, r24
    8ae2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    8ae4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    8ae6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    8ae8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    8aea:	c7 01       	movw	r24, r14
    8aec:	b6 01       	movw	r22, r12
    8aee:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8af2:	9b 01       	movw	r18, r22
    8af4:	ac 01       	movw	r20, r24
    8af6:	c5 01       	movw	r24, r10
    8af8:	b4 01       	movw	r22, r8
    8afa:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8afe:	86 2e       	mov	r8, r22
    8b00:	97 2e       	mov	r9, r23
    8b02:	a8 2e       	mov	r10, r24
    8b04:	b9 2e       	mov	r11, r25
      count = 0;
    8b06:	19 8a       	std	Y+17, r1	; 0x11
    }

    // Update arc_target location
    arc_target[axis_0] = center_axis0 + r_axis0;
    8b08:	a3 01       	movw	r20, r6
    8b0a:	92 01       	movw	r18, r4
    8b0c:	bd a9       	ldd	r27, Y+53	; 0x35
    8b0e:	ae a9       	ldd	r26, Y+54	; 0x36
    8b10:	ff a9       	ldd	r31, Y+55	; 0x37
    8b12:	e8 ad       	ldd	r30, Y+56	; 0x38
    8b14:	6b 2f       	mov	r22, r27
    8b16:	7a 2f       	mov	r23, r26
    8b18:	8f 2f       	mov	r24, r31
    8b1a:	9e 2f       	mov	r25, r30
    8b1c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8b20:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8b22:	f8 a1       	ldd	r31, Y+32	; 0x20
    8b24:	60 83       	st	Z, r22
    8b26:	71 83       	std	Z+1, r23	; 0x01
    8b28:	82 83       	std	Z+2, r24	; 0x02
    8b2a:	93 83       	std	Z+3, r25	; 0x03
    arc_target[axis_1] = center_axis1 + r_axis1;
    8b2c:	a5 01       	movw	r20, r10
    8b2e:	94 01       	movw	r18, r8
    8b30:	b9 ad       	ldd	r27, Y+57	; 0x39
    8b32:	aa ad       	ldd	r26, Y+58	; 0x3a
    8b34:	fb ad       	ldd	r31, Y+59	; 0x3b
    8b36:	ec ad       	ldd	r30, Y+60	; 0x3c
    8b38:	6b 2f       	mov	r22, r27
    8b3a:	7a 2f       	mov	r23, r26
    8b3c:	8f 2f       	mov	r24, r31
    8b3e:	9e 2f       	mov	r25, r30
    8b40:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8b44:	af a1       	ldd	r26, Y+39	; 0x27
    8b46:	b8 a5       	ldd	r27, Y+40	; 0x28
    8b48:	6d 93       	st	X+, r22
    8b4a:	7d 93       	st	X+, r23
    8b4c:	8d 93       	st	X+, r24
    8b4e:	9c 93       	st	X, r25
    8b50:	13 97       	sbiw	r26, 0x03	; 3
    arc_target[axis_linear] += linear_per_segment;
    8b52:	7b a1       	ldd	r23, Y+35	; 0x23
    8b54:	6d ad       	ldd	r22, Y+61	; 0x3d
    8b56:	9e ad       	ldd	r25, Y+62	; 0x3e
    8b58:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b5a:	27 2f       	mov	r18, r23
    8b5c:	36 2f       	mov	r19, r22
    8b5e:	49 2f       	mov	r20, r25
    8b60:	58 2f       	mov	r21, r24
    8b62:	ed 89       	ldd	r30, Y+21	; 0x15
    8b64:	fe 89       	ldd	r31, Y+22	; 0x16
    8b66:	60 81       	ld	r22, Z
    8b68:	71 81       	ldd	r23, Z+1	; 0x01
    8b6a:	82 81       	ldd	r24, Z+2	; 0x02
    8b6c:	93 81       	ldd	r25, Z+3	; 0x03
    8b6e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8b72:	ad 89       	ldd	r26, Y+21	; 0x15
    8b74:	be 89       	ldd	r27, Y+22	; 0x16
    8b76:	6d 93       	st	X+, r22
    8b78:	7d 93       	st	X+, r23
    8b7a:	8d 93       	st	X+, r24
    8b7c:	9c 93       	st	X, r25
    8b7e:	13 97       	sbiw	r26, 0x03	; 3
    arc_target[E_AXIS] += extruder_per_segment;
    8b80:	79 a9       	ldd	r23, Y+49	; 0x31
    8b82:	21 96       	adiw	r28, 0x01	; 1
    8b84:	6f ad       	ldd	r22, Y+63	; 0x3f
    8b86:	21 97       	sbiw	r28, 0x01	; 1
    8b88:	22 96       	adiw	r28, 0x02	; 2
    8b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b8c:	22 97       	sbiw	r28, 0x02	; 2
    8b8e:	23 96       	adiw	r28, 0x03	; 3
    8b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b92:	23 97       	sbiw	r28, 0x03	; 3
    8b94:	27 2f       	mov	r18, r23
    8b96:	36 2f       	mov	r19, r22
    8b98:	49 2f       	mov	r20, r25
    8b9a:	58 2f       	mov	r21, r24
    8b9c:	6d 85       	ldd	r22, Y+13	; 0x0d
    8b9e:	7e 85       	ldd	r23, Y+14	; 0x0e
    8ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    8ba2:	98 89       	ldd	r25, Y+16	; 0x10
    8ba4:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8ba8:	6d 87       	std	Y+13, r22	; 0x0d
    8baa:	7e 87       	std	Y+14, r23	; 0x0e
    8bac:	8f 87       	std	Y+15, r24	; 0x0f
    8bae:	98 8b       	std	Y+16, r25	; 0x10

    clamp_to_software_endstops(arc_target);
    8bb0:	ce 01       	movw	r24, r28
    8bb2:	01 96       	adiw	r24, 0x01	; 1
    8bb4:	0e 94 48 2b 	call	0x5690	; 0x5690 <_Z26clamp_to_software_endstopsPf>
    plan_buffer_line(arc_target[X_AXIS], arc_target[Y_AXIS], arc_target[Z_AXIS], arc_target[E_AXIS], feed_rate, extruder);
    8bb8:	0f 2e       	mov	r0, r31
    8bba:	fa e6       	ldi	r31, 0x6A	; 106
    8bbc:	cf 2e       	mov	r12, r31
    8bbe:	d1 2c       	mov	r13, r1
    8bc0:	f0 2d       	mov	r31, r0
    8bc2:	cc 0e       	add	r12, r28
    8bc4:	dd 1e       	adc	r13, r29
    8bc6:	ed a4       	ldd	r14, Y+45	; 0x2d
    8bc8:	fe a4       	ldd	r15, Y+46	; 0x2e
    8bca:	0f a5       	ldd	r16, Y+47	; 0x2f
    8bcc:	18 a9       	ldd	r17, Y+48	; 0x30
    8bce:	9e 01       	movw	r18, r28
    8bd0:	23 5f       	subi	r18, 0xF3	; 243
    8bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    8bd4:	ae 01       	movw	r20, r28
    8bd6:	47 5f       	subi	r20, 0xF7	; 247
    8bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    8bda:	be 01       	movw	r22, r28
    8bdc:	6b 5f       	subi	r22, 0xFB	; 251
    8bde:	7f 4f       	sbci	r23, 0xFF	; 255
    8be0:	ce 01       	movw	r24, r28
    8be2:	01 96       	adiw	r24, 0x01	; 1
    8be4:	19 d6       	rcall	.+3122   	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
  arc_target[axis_linear] = position[axis_linear];
  
  // Initialize the extruder axis
  arc_target[E_AXIS] = position[E_AXIS];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
    8be6:	bf ef       	ldi	r27, 0xFF	; 255
    8be8:	2b 1a       	sub	r2, r27
    8bea:	3b 0a       	sbc	r3, r27
    8bec:	eb a5       	ldd	r30, Y+43	; 0x2b
    8bee:	fc a5       	ldd	r31, Y+44	; 0x2c
    8bf0:	2e 16       	cp	r2, r30
    8bf2:	3f 06       	cpc	r3, r31
    8bf4:	09 f0       	breq	.+2      	; 0x8bf8 <_Z6mc_arcPfS_S_hhhffhh+0x702>
    8bf6:	aa ce       	rjmp	.-684    	; 0x894c <_Z6mc_arcPfS_S_hhhffhh+0x456>
    clamp_to_software_endstops(arc_target);
    plan_buffer_line(arc_target[X_AXIS], arc_target[Y_AXIS], arc_target[Z_AXIS], arc_target[E_AXIS], feed_rate, extruder);
    
  }
  // Ensure last segment arrives at target location.
  plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], feed_rate, extruder);
    8bf8:	29 a5       	ldd	r18, Y+41	; 0x29
    8bfa:	3a a5       	ldd	r19, Y+42	; 0x2a
    8bfc:	24 5f       	subi	r18, 0xF4	; 244
    8bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    8c00:	49 a5       	ldd	r20, Y+41	; 0x29
    8c02:	5a a5       	ldd	r21, Y+42	; 0x2a
    8c04:	48 5f       	subi	r20, 0xF8	; 248
    8c06:	5f 4f       	sbci	r21, 0xFF	; 255
    8c08:	69 a5       	ldd	r22, Y+41	; 0x29
    8c0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    8c0c:	6c 5f       	subi	r22, 0xFC	; 252
    8c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c10:	0f 2e       	mov	r0, r31
    8c12:	fa e6       	ldi	r31, 0x6A	; 106
    8c14:	cf 2e       	mov	r12, r31
    8c16:	d1 2c       	mov	r13, r1
    8c18:	f0 2d       	mov	r31, r0
    8c1a:	cc 0e       	add	r12, r28
    8c1c:	dd 1e       	adc	r13, r29
    8c1e:	ed a4       	ldd	r14, Y+45	; 0x2d
    8c20:	fe a4       	ldd	r15, Y+46	; 0x2e
    8c22:	0f a5       	ldd	r16, Y+47	; 0x2f
    8c24:	18 a9       	ldd	r17, Y+48	; 0x30
    8c26:	89 a5       	ldd	r24, Y+41	; 0x29
    8c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    8c2a:	f6 d5       	rcall	.+3052   	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
    8c2c:	1a c0       	rjmp	.+52     	; 0x8c62 <_Z6mc_arcPfS_S_hhhffhh+0x76c>
  float r_axisi;
  uint16_t i;
  int8_t count = 0;

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];
    8c2e:	fe 01       	movw	r30, r28
    8c30:	3b 8d       	ldd	r19, Y+27	; 0x1b
    8c32:	24 e0       	ldi	r18, 0x04	; 4
    8c34:	32 9f       	mul	r19, r18
    8c36:	e0 0d       	add	r30, r0
    8c38:	f1 1d       	adc	r31, r1
    8c3a:	11 24       	eor	r1, r1
    8c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    8c40:	a9 a1       	ldd	r26, Y+33	; 0x21
    8c42:	ba a1       	ldd	r27, Y+34	; 0x22
    8c44:	81 83       	std	Z+1, r24	; 0x01
    8c46:	92 83       	std	Z+2, r25	; 0x02
    8c48:	a3 83       	std	Z+3, r26	; 0x03
    8c4a:	b4 83       	std	Z+4, r27	; 0x04
  
  // Initialize the extruder axis
  arc_target[E_AXIS] = position[E_AXIS];
    8c4c:	60 96       	adiw	r28, 0x10	; 16
    8c4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    8c50:	3d ad       	ldd	r19, Y+61	; 0x3d
    8c52:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c54:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c56:	60 97       	sbiw	r28, 0x10	; 16
    8c58:	2d 87       	std	Y+13, r18	; 0x0d
    8c5a:	3e 87       	std	Y+14, r19	; 0x0e
    8c5c:	4f 87       	std	Y+15, r20	; 0x0f
    8c5e:	58 8b       	std	Y+16, r21	; 0x10
    8c60:	cb cf       	rjmp	.-106    	; 0x8bf8 <_Z6mc_arcPfS_S_hhhffhh+0x702>
  }
  // Ensure last segment arrives at target location.
  plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], feed_rate, extruder);

  //   plan_set_acceleration_manager_enabled(acceleration_manager_was_enabled);
}
    8c62:	c1 5b       	subi	r28, 0xB1	; 177
    8c64:	df 4f       	sbci	r29, 0xFF	; 255
    8c66:	0f b6       	in	r0, 0x3f	; 63
    8c68:	f8 94       	cli
    8c6a:	de bf       	out	0x3e, r29	; 62
    8c6c:	0f be       	out	0x3f, r0	; 63
    8c6e:	cd bf       	out	0x3d, r28	; 61
    8c70:	df 91       	pop	r29
    8c72:	cf 91       	pop	r28
    8c74:	1f 91       	pop	r17
    8c76:	0f 91       	pop	r16
    8c78:	ff 90       	pop	r15
    8c7a:	ef 90       	pop	r14
    8c7c:	df 90       	pop	r13
    8c7e:	cf 90       	pop	r12
    8c80:	bf 90       	pop	r11
    8c82:	af 90       	pop	r10
    8c84:	9f 90       	pop	r9
    8c86:	8f 90       	pop	r8
    8c88:	7f 90       	pop	r7
    8c8a:	6f 90       	pop	r6
    8c8c:	5f 90       	pop	r5
    8c8e:	4f 90       	pop	r4
    8c90:	3f 90       	pop	r3
    8c92:	2f 90       	pop	r2
    8c94:	08 95       	ret

00008c96 <_ZL16next_block_indexa>:
#endif

// Returns the index of the next block in the ring buffer
// NOTE: Removed modulo (%) operator, which uses an expensive divide and multiplication.
static int8_t next_block_index(int8_t block_index) {
  block_index++;
    8c96:	8f 5f       	subi	r24, 0xFF	; 255
  if (block_index == BLOCK_BUFFER_SIZE) { 
    8c98:	80 31       	cpi	r24, 0x10	; 16
    8c9a:	09 f4       	brne	.+2      	; 0x8c9e <_ZL16next_block_indexa+0x8>
    block_index = 0; 
    8c9c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return(block_index);
}
    8c9e:	08 95       	ret

00008ca0 <_Z29calculate_trapezoid_for_blockP7block_tff>:
  }
}

// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.

void calculate_trapezoid_for_block(block_t *block, float entry_factor, float exit_factor) {
    8ca0:	2f 92       	push	r2
    8ca2:	3f 92       	push	r3
    8ca4:	4f 92       	push	r4
    8ca6:	5f 92       	push	r5
    8ca8:	6f 92       	push	r6
    8caa:	7f 92       	push	r7
    8cac:	8f 92       	push	r8
    8cae:	9f 92       	push	r9
    8cb0:	af 92       	push	r10
    8cb2:	bf 92       	push	r11
    8cb4:	cf 92       	push	r12
    8cb6:	df 92       	push	r13
    8cb8:	ef 92       	push	r14
    8cba:	ff 92       	push	r15
    8cbc:	0f 93       	push	r16
    8cbe:	1f 93       	push	r17
    8cc0:	cf 93       	push	r28
    8cc2:	df 93       	push	r29
    8cc4:	cd b7       	in	r28, 0x3d	; 61
    8cc6:	de b7       	in	r29, 0x3e	; 62
    8cc8:	68 97       	sbiw	r28, 0x18	; 24
    8cca:	0f b6       	in	r0, 0x3f	; 63
    8ccc:	f8 94       	cli
    8cce:	de bf       	out	0x3e, r29	; 62
    8cd0:	0f be       	out	0x3f, r0	; 63
    8cd2:	cd bf       	out	0x3d, r28	; 61
    8cd4:	1c 01       	movw	r2, r24
    8cd6:	2a 01       	movw	r4, r20
    8cd8:	3b 01       	movw	r6, r22
    8cda:	48 01       	movw	r8, r16
    8cdc:	59 01       	movw	r10, r18
  unsigned long initial_rate = ceil(block->nominal_rate*entry_factor); // (step/min)
    8cde:	dc 01       	movw	r26, r24
    8ce0:	d8 96       	adiw	r26, 0x38	; 56
    8ce2:	6d 91       	ld	r22, X+
    8ce4:	7d 91       	ld	r23, X+
    8ce6:	8d 91       	ld	r24, X+
    8ce8:	9c 91       	ld	r25, X
    8cea:	db 97       	sbiw	r26, 0x3b	; 59
    8cec:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    8cf0:	6b 01       	movw	r12, r22
    8cf2:	7c 01       	movw	r14, r24
    8cf4:	a3 01       	movw	r20, r6
    8cf6:	92 01       	movw	r18, r4
    8cf8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8cfc:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    8d00:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    8d04:	6d 83       	std	Y+5, r22	; 0x05
    8d06:	7e 83       	std	Y+6, r23	; 0x06
    8d08:	8f 83       	std	Y+7, r24	; 0x07
    8d0a:	98 87       	std	Y+8, r25	; 0x08
  unsigned long final_rate = ceil(block->nominal_rate*exit_factor); // (step/min)
    8d0c:	a5 01       	movw	r20, r10
    8d0e:	94 01       	movw	r18, r8
    8d10:	c7 01       	movw	r24, r14
    8d12:	b6 01       	movw	r22, r12
    8d14:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8d18:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    8d1c:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    8d20:	69 87       	std	Y+9, r22	; 0x09
    8d22:	7a 87       	std	Y+10, r23	; 0x0a
    8d24:	8b 87       	std	Y+11, r24	; 0x0b
    8d26:	9c 87       	std	Y+12, r25	; 0x0c

  // Limit minimal step rate (Otherwise the timer will overflow.)
  if(initial_rate <120) {
    8d28:	2d 81       	ldd	r18, Y+5	; 0x05
    8d2a:	3e 81       	ldd	r19, Y+6	; 0x06
    8d2c:	4f 81       	ldd	r20, Y+7	; 0x07
    8d2e:	58 85       	ldd	r21, Y+8	; 0x08
    8d30:	28 37       	cpi	r18, 0x78	; 120
    8d32:	31 05       	cpc	r19, r1
    8d34:	41 05       	cpc	r20, r1
    8d36:	51 05       	cpc	r21, r1
    8d38:	40 f4       	brcc	.+16     	; 0x8d4a <_Z29calculate_trapezoid_for_blockP7block_tff+0xaa>
    initial_rate=120; 
    8d3a:	88 e7       	ldi	r24, 0x78	; 120
    8d3c:	90 e0       	ldi	r25, 0x00	; 0
    8d3e:	a0 e0       	ldi	r26, 0x00	; 0
    8d40:	b0 e0       	ldi	r27, 0x00	; 0
    8d42:	8d 83       	std	Y+5, r24	; 0x05
    8d44:	9e 83       	std	Y+6, r25	; 0x06
    8d46:	af 83       	std	Y+7, r26	; 0x07
    8d48:	b8 87       	std	Y+8, r27	; 0x08
  }
  if(final_rate < 120) {
    8d4a:	29 85       	ldd	r18, Y+9	; 0x09
    8d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d50:	5c 85       	ldd	r21, Y+12	; 0x0c
    8d52:	28 37       	cpi	r18, 0x78	; 120
    8d54:	31 05       	cpc	r19, r1
    8d56:	41 05       	cpc	r20, r1
    8d58:	51 05       	cpc	r21, r1
    8d5a:	40 f4       	brcc	.+16     	; 0x8d6c <_Z29calculate_trapezoid_for_blockP7block_tff+0xcc>
    final_rate=120;  
    8d5c:	88 e7       	ldi	r24, 0x78	; 120
    8d5e:	90 e0       	ldi	r25, 0x00	; 0
    8d60:	a0 e0       	ldi	r26, 0x00	; 0
    8d62:	b0 e0       	ldi	r27, 0x00	; 0
    8d64:	89 87       	std	Y+9, r24	; 0x09
    8d66:	9a 87       	std	Y+10, r25	; 0x0a
    8d68:	ab 87       	std	Y+11, r26	; 0x0b
    8d6a:	bc 87       	std	Y+12, r27	; 0x0c
  }

  long acceleration = block->acceleration_st;
    8d6c:	f1 01       	movw	r30, r2
    8d6e:	ec 5b       	subi	r30, 0xBC	; 188
    8d70:	ff 4f       	sbci	r31, 0xFF	; 255
    8d72:	40 80       	ld	r4, Z
    8d74:	51 80       	ldd	r5, Z+1	; 0x01
    8d76:	62 80       	ldd	r6, Z+2	; 0x02
    8d78:	73 80       	ldd	r7, Z+3	; 0x03
  int32_t accelerate_steps =
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration));
    8d7a:	c3 01       	movw	r24, r6
    8d7c:	b2 01       	movw	r22, r4
    8d7e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    8d82:	6d 87       	std	Y+13, r22	; 0x0d
    8d84:	7e 87       	std	Y+14, r23	; 0x0e
    8d86:	8f 87       	std	Y+15, r24	; 0x0f
    8d88:	98 8b       	std	Y+16, r25	; 0x10
    8d8a:	d1 01       	movw	r26, r2
    8d8c:	dc 96       	adiw	r26, 0x3c	; 60
    8d8e:	6d 91       	ld	r22, X+
    8d90:	7d 91       	ld	r23, X+
    8d92:	8d 91       	ld	r24, X+
    8d94:	9c 91       	ld	r25, X
    8d96:	df 97       	sbiw	r26, 0x3f	; 63
    8d98:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    8d9c:	69 8b       	std	Y+17, r22	; 0x11
    8d9e:	7a 8b       	std	Y+18, r23	; 0x12
    8da0:	8b 8b       	std	Y+19, r24	; 0x13
    8da2:	9c 8b       	std	Y+20, r25	; 0x14

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
FORCE_INLINE float estimate_acceleration_distance(float initial_rate, float target_rate, float acceleration)
{
  if (acceleration!=0) {
    8da4:	20 e0       	ldi	r18, 0x00	; 0
    8da6:	30 e0       	ldi	r19, 0x00	; 0
    8da8:	a9 01       	movw	r20, r18
    8daa:	6d 85       	ldd	r22, Y+13	; 0x0d
    8dac:	7e 85       	ldd	r23, Y+14	; 0x0e
    8dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    8db0:	98 89       	ldd	r25, Y+16	; 0x10
    8db2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    8db6:	88 23       	and	r24, r24
    8db8:	39 f1       	breq	.+78     	; 0x8e08 <_Z29calculate_trapezoid_for_blockP7block_tff+0x168>
    return((target_rate*target_rate-initial_rate*initial_rate)/
      (2.0*acceleration));
    8dba:	a7 01       	movw	r20, r14
    8dbc:	96 01       	movw	r18, r12
    8dbe:	c7 01       	movw	r24, r14
    8dc0:	b6 01       	movw	r22, r12
    8dc2:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8dc6:	4b 01       	movw	r8, r22
    8dc8:	5c 01       	movw	r10, r24
    8dca:	29 89       	ldd	r18, Y+17	; 0x11
    8dcc:	3a 89       	ldd	r19, Y+18	; 0x12
    8dce:	4b 89       	ldd	r20, Y+19	; 0x13
    8dd0:	5c 89       	ldd	r21, Y+20	; 0x14
    8dd2:	ca 01       	movw	r24, r20
    8dd4:	b9 01       	movw	r22, r18
    8dd6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8dda:	9b 01       	movw	r18, r22
    8ddc:	ac 01       	movw	r20, r24
    8dde:	c5 01       	movw	r24, r10
    8de0:	b4 01       	movw	r22, r8
    8de2:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8de6:	4b 01       	movw	r8, r22
    8de8:	5c 01       	movw	r10, r24
    8dea:	2d 85       	ldd	r18, Y+13	; 0x0d
    8dec:	3e 85       	ldd	r19, Y+14	; 0x0e
    8dee:	4f 85       	ldd	r20, Y+15	; 0x0f
    8df0:	58 89       	ldd	r21, Y+16	; 0x10
    8df2:	ca 01       	movw	r24, r20
    8df4:	b9 01       	movw	r22, r18
    8df6:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8dfa:	9b 01       	movw	r18, r22
    8dfc:	ac 01       	movw	r20, r24
    8dfe:	c5 01       	movw	r24, r10
    8e00:	b4 01       	movw	r22, r8
    8e02:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8e06:	04 c0       	rjmp	.+8      	; 0x8e10 <_Z29calculate_trapezoid_for_blockP7block_tff+0x170>
  }
  else {
    return 0.0;  // acceleration was 0, set acceleration distance to 0
    8e08:	60 e0       	ldi	r22, 0x00	; 0
    8e0a:	70 e0       	ldi	r23, 0x00	; 0
    8e0c:	80 e0       	ldi	r24, 0x00	; 0
    8e0e:	90 e0       	ldi	r25, 0x00	; 0
    final_rate=120;  
  }

  long acceleration = block->acceleration_st;
  int32_t accelerate_steps =
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration));
    8e10:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    8e14:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    8e18:	69 83       	std	Y+1, r22	; 0x01
    8e1a:	7a 83       	std	Y+2, r23	; 0x02
    8e1c:	8b 83       	std	Y+3, r24	; 0x03
    8e1e:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps =
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration));
    8e20:	66 27       	eor	r22, r22
    8e22:	77 27       	eor	r23, r23
    8e24:	cb 01       	movw	r24, r22
    8e26:	64 19       	sub	r22, r4
    8e28:	75 09       	sbc	r23, r5
    8e2a:	86 09       	sbc	r24, r6
    8e2c:	97 09       	sbc	r25, r7
    8e2e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    8e32:	4b 01       	movw	r8, r22
    8e34:	5c 01       	movw	r10, r24
    8e36:	f1 01       	movw	r30, r2
    8e38:	e0 5c       	subi	r30, 0xC0	; 192
    8e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    8e3c:	60 81       	ld	r22, Z
    8e3e:	71 81       	ldd	r23, Z+1	; 0x01
    8e40:	82 81       	ldd	r24, Z+2	; 0x02
    8e42:	93 81       	ldd	r25, Z+3	; 0x03
    8e44:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    8e48:	2b 01       	movw	r4, r22
    8e4a:	3c 01       	movw	r6, r24

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
FORCE_INLINE float estimate_acceleration_distance(float initial_rate, float target_rate, float acceleration)
{
  if (acceleration!=0) {
    8e4c:	20 e0       	ldi	r18, 0x00	; 0
    8e4e:	30 e0       	ldi	r19, 0x00	; 0
    8e50:	a9 01       	movw	r20, r18
    8e52:	c5 01       	movw	r24, r10
    8e54:	b4 01       	movw	r22, r8
    8e56:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    8e5a:	88 23       	and	r24, r24
    8e5c:	39 f1       	breq	.+78     	; 0x8eac <_Z29calculate_trapezoid_for_blockP7block_tff+0x20c>
    return((target_rate*target_rate-initial_rate*initial_rate)/
      (2.0*acceleration));
    8e5e:	a3 01       	movw	r20, r6
    8e60:	92 01       	movw	r18, r4
    8e62:	c3 01       	movw	r24, r6
    8e64:	b2 01       	movw	r22, r4
    8e66:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8e6a:	6d 8b       	std	Y+21, r22	; 0x15
    8e6c:	7e 8b       	std	Y+22, r23	; 0x16
    8e6e:	8f 8b       	std	Y+23, r24	; 0x17
    8e70:	98 8f       	std	Y+24, r25	; 0x18
    8e72:	a7 01       	movw	r20, r14
    8e74:	96 01       	movw	r18, r12
    8e76:	c7 01       	movw	r24, r14
    8e78:	b6 01       	movw	r22, r12
    8e7a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8e7e:	9b 01       	movw	r18, r22
    8e80:	ac 01       	movw	r20, r24
    8e82:	6d 89       	ldd	r22, Y+21	; 0x15
    8e84:	7e 89       	ldd	r23, Y+22	; 0x16
    8e86:	8f 89       	ldd	r24, Y+23	; 0x17
    8e88:	98 8d       	ldd	r25, Y+24	; 0x18
    8e8a:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8e8e:	6b 01       	movw	r12, r22
    8e90:	7c 01       	movw	r14, r24
    8e92:	a5 01       	movw	r20, r10
    8e94:	94 01       	movw	r18, r8
    8e96:	c5 01       	movw	r24, r10
    8e98:	b4 01       	movw	r22, r8
    8e9a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8e9e:	9b 01       	movw	r18, r22
    8ea0:	ac 01       	movw	r20, r24
    8ea2:	c7 01       	movw	r24, r14
    8ea4:	b6 01       	movw	r22, r12
    8ea6:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8eaa:	04 c0       	rjmp	.+8      	; 0x8eb4 <_Z29calculate_trapezoid_for_blockP7block_tff+0x214>
  }
  else {
    return 0.0;  // acceleration was 0, set acceleration distance to 0
    8eac:	60 e0       	ldi	r22, 0x00	; 0
    8eae:	70 e0       	ldi	r23, 0x00	; 0
    8eb0:	80 e0       	ldi	r24, 0x00	; 0
    8eb2:	90 e0       	ldi	r25, 0x00	; 0

  long acceleration = block->acceleration_st;
  int32_t accelerate_steps =
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration));
  int32_t decelerate_steps =
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration));
    8eb4:	0e 94 fd b6 	call	0x16dfa	; 0x16dfa <floor>

  // Calculate the size of Plateau of Nominal Rate.
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    8eb8:	f1 01       	movw	r30, r2
    8eba:	80 88       	ldd	r8, Z+16	; 0x10
    8ebc:	91 88       	ldd	r9, Z+17	; 0x11
    8ebe:	a2 88       	ldd	r10, Z+18	; 0x12
    8ec0:	b3 88       	ldd	r11, Z+19	; 0x13
    8ec2:	75 01       	movw	r14, r10
    8ec4:	64 01       	movw	r12, r8
    8ec6:	29 81       	ldd	r18, Y+1	; 0x01
    8ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    8eca:	4b 81       	ldd	r20, Y+3	; 0x03
    8ecc:	5c 81       	ldd	r21, Y+4	; 0x04
    8ece:	c2 1a       	sub	r12, r18
    8ed0:	d3 0a       	sbc	r13, r19
    8ed2:	e4 0a       	sbc	r14, r20
    8ed4:	f5 0a       	sbc	r15, r21

  long acceleration = block->acceleration_st;
  int32_t accelerate_steps =
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration));
  int32_t decelerate_steps =
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration));
    8ed6:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>

  // Calculate the size of Plateau of Nominal Rate.
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    8eda:	c6 1a       	sub	r12, r22
    8edc:	d7 0a       	sbc	r13, r23
    8ede:	e8 0a       	sbc	r14, r24
    8ee0:	f9 0a       	sbc	r15, r25

  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {
    8ee2:	0a f0       	brmi	.+2      	; 0x8ee6 <_Z29calculate_trapezoid_for_blockP7block_tff+0x246>
    8ee4:	7b c0       	rjmp	.+246    	; 0x8fdc <_Z29calculate_trapezoid_for_blockP7block_tff+0x33c>
// a total travel of distance. This can be used to compute the intersection point between acceleration and
// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)

FORCE_INLINE float intersection_distance(float initial_rate, float final_rate, float acceleration, float distance) 
{
  if (acceleration!=0) {
    8ee6:	20 e0       	ldi	r18, 0x00	; 0
    8ee8:	30 e0       	ldi	r19, 0x00	; 0
    8eea:	a9 01       	movw	r20, r18
    8eec:	6d 85       	ldd	r22, Y+13	; 0x0d
    8eee:	7e 85       	ldd	r23, Y+14	; 0x0e
    8ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    8ef2:	98 89       	ldd	r25, Y+16	; 0x10
    8ef4:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    8ef8:	88 23       	and	r24, r24
    8efa:	09 f4       	brne	.+2      	; 0x8efe <_Z29calculate_trapezoid_for_blockP7block_tff+0x25e>
    8efc:	45 c0       	rjmp	.+138    	; 0x8f88 <_Z29calculate_trapezoid_for_blockP7block_tff+0x2e8>

  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {
    accelerate_steps = ceil(intersection_distance(block->initial_rate, block->final_rate, acceleration, block->step_event_count));
    8efe:	c5 01       	movw	r24, r10
    8f00:	b4 01       	movw	r22, r8
    8f02:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    8f06:	6b 01       	movw	r12, r22
    8f08:	7c 01       	movw	r14, r24

FORCE_INLINE float intersection_distance(float initial_rate, float final_rate, float acceleration, float distance) 
{
  if (acceleration!=0) {
    return((2.0*acceleration*distance-initial_rate*initial_rate+final_rate*final_rate)/
      (4.0*acceleration) );
    8f0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    8f0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    8f0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    8f10:	58 89       	ldd	r21, Y+16	; 0x10
    8f12:	ca 01       	movw	r24, r20
    8f14:	b9 01       	movw	r22, r18
    8f16:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8f1a:	9b 01       	movw	r18, r22
    8f1c:	ac 01       	movw	r20, r24
    8f1e:	c7 01       	movw	r24, r14
    8f20:	b6 01       	movw	r22, r12
    8f22:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8f26:	6b 01       	movw	r12, r22
    8f28:	7c 01       	movw	r14, r24
    8f2a:	29 89       	ldd	r18, Y+17	; 0x11
    8f2c:	3a 89       	ldd	r19, Y+18	; 0x12
    8f2e:	4b 89       	ldd	r20, Y+19	; 0x13
    8f30:	5c 89       	ldd	r21, Y+20	; 0x14
    8f32:	ca 01       	movw	r24, r20
    8f34:	b9 01       	movw	r22, r18
    8f36:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8f3a:	9b 01       	movw	r18, r22
    8f3c:	ac 01       	movw	r20, r24
    8f3e:	c7 01       	movw	r24, r14
    8f40:	b6 01       	movw	r22, r12
    8f42:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    8f46:	6b 01       	movw	r12, r22
    8f48:	7c 01       	movw	r14, r24
    8f4a:	a3 01       	movw	r20, r6
    8f4c:	92 01       	movw	r18, r4
    8f4e:	c3 01       	movw	r24, r6
    8f50:	b2 01       	movw	r22, r4
    8f52:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8f56:	9b 01       	movw	r18, r22
    8f58:	ac 01       	movw	r20, r24
    8f5a:	c7 01       	movw	r24, r14
    8f5c:	b6 01       	movw	r22, r12
    8f5e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    8f62:	6b 01       	movw	r12, r22
    8f64:	7c 01       	movw	r14, r24
    8f66:	20 e0       	ldi	r18, 0x00	; 0
    8f68:	30 e0       	ldi	r19, 0x00	; 0
    8f6a:	40 e8       	ldi	r20, 0x80	; 128
    8f6c:	50 e4       	ldi	r21, 0x40	; 64
    8f6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    8f70:	7e 85       	ldd	r23, Y+14	; 0x0e
    8f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f74:	98 89       	ldd	r25, Y+16	; 0x10
    8f76:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    8f7a:	9b 01       	movw	r18, r22
    8f7c:	ac 01       	movw	r20, r24
    8f7e:	c7 01       	movw	r24, r14
    8f80:	b6 01       	movw	r22, r12
    8f82:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    8f86:	04 c0       	rjmp	.+8      	; 0x8f90 <_Z29calculate_trapezoid_for_blockP7block_tff+0x2f0>
  }
  else {
    return 0.0;  // acceleration was 0, set intersection distance to 0
    8f88:	60 e0       	ldi	r22, 0x00	; 0
    8f8a:	70 e0       	ldi	r23, 0x00	; 0
    8f8c:	80 e0       	ldi	r24, 0x00	; 0
    8f8e:	90 e0       	ldi	r25, 0x00	; 0

  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {
    accelerate_steps = ceil(intersection_distance(block->initial_rate, block->final_rate, acceleration, block->step_event_count));
    8f90:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    8f94:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    accelerate_steps = max(accelerate_steps,0); // Check limits due to numerical round-off
    8f98:	69 83       	std	Y+1, r22	; 0x01
    8f9a:	7a 83       	std	Y+2, r23	; 0x02
    8f9c:	8b 83       	std	Y+3, r24	; 0x03
    8f9e:	9c 83       	std	Y+4, r25	; 0x04
    8fa0:	89 81       	ldd	r24, Y+1	; 0x01
    8fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    8fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    8fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    8fa8:	bb 23       	and	r27, r27
    8faa:	24 f4       	brge	.+8      	; 0x8fb4 <_Z29calculate_trapezoid_for_blockP7block_tff+0x314>
    8fac:	19 82       	std	Y+1, r1	; 0x01
    8fae:	1a 82       	std	Y+2, r1	; 0x02
    8fb0:	1b 82       	std	Y+3, r1	; 0x03
    8fb2:	1c 82       	std	Y+4, r1	; 0x04
    accelerate_steps = min((uint32_t)accelerate_steps,block->step_event_count);//(We can cast here to unsigned, because the above line ensures that we are above zero)
    8fb4:	29 81       	ldd	r18, Y+1	; 0x01
    8fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    8fb8:	4b 81       	ldd	r20, Y+3	; 0x03
    8fba:	5c 81       	ldd	r21, Y+4	; 0x04
    8fbc:	28 15       	cp	r18, r8
    8fbe:	39 05       	cpc	r19, r9
    8fc0:	4a 05       	cpc	r20, r10
    8fc2:	5b 05       	cpc	r21, r11
    8fc4:	40 f0       	brcs	.+16     	; 0x8fd6 <_Z29calculate_trapezoid_for_blockP7block_tff+0x336>
    8fc6:	89 82       	std	Y+1, r8	; 0x01
    8fc8:	9a 82       	std	Y+2, r9	; 0x02
    8fca:	ab 82       	std	Y+3, r10	; 0x03
    8fcc:	bc 82       	std	Y+4, r11	; 0x04
    plateau_steps = 0;
    8fce:	c1 2c       	mov	r12, r1
    8fd0:	d1 2c       	mov	r13, r1
    8fd2:	76 01       	movw	r14, r12
    8fd4:	03 c0       	rjmp	.+6      	; 0x8fdc <_Z29calculate_trapezoid_for_blockP7block_tff+0x33c>
    8fd6:	c1 2c       	mov	r12, r1
    8fd8:	d1 2c       	mov	r13, r1
    8fda:	76 01       	movw	r14, r12
  volatile long final_advance = block->advance*exit_factor*exit_factor;
#endif // ADVANCE

  // block->accelerate_until = accelerate_steps;
  // block->decelerate_after = accelerate_steps+plateau_steps;
  CRITICAL_SECTION_START;  // Fill variables used by the stepper in a critical section
    8fdc:	8f b7       	in	r24, 0x3f	; 63
    8fde:	f8 94       	cli
  if(block->busy == false) { // Don't update variables if block is busy.
    8fe0:	f1 01       	movw	r30, r2
    8fe2:	e4 5b       	subi	r30, 0xB4	; 180
    8fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    8fe6:	90 81       	ld	r25, Z
    8fe8:	91 11       	cpse	r25, r1
    8fea:	29 c0       	rjmp	.+82     	; 0x903e <_Z29calculate_trapezoid_for_blockP7block_tff+0x39e>
    block->accelerate_until = accelerate_steps;
    8fec:	29 81       	ldd	r18, Y+1	; 0x01
    8fee:	3a 81       	ldd	r19, Y+2	; 0x02
    8ff0:	4b 81       	ldd	r20, Y+3	; 0x03
    8ff2:	5c 81       	ldd	r21, Y+4	; 0x04
    8ff4:	d1 01       	movw	r26, r2
    8ff6:	54 96       	adiw	r26, 0x14	; 20
    8ff8:	2d 93       	st	X+, r18
    8ffa:	3d 93       	st	X+, r19
    8ffc:	4d 93       	st	X+, r20
    8ffe:	5c 93       	st	X, r21
    9000:	57 97       	sbiw	r26, 0x17	; 23
    block->decelerate_after = accelerate_steps+plateau_steps;
    9002:	c2 0e       	add	r12, r18
    9004:	d3 1e       	adc	r13, r19
    9006:	e4 1e       	adc	r14, r20
    9008:	f5 1e       	adc	r15, r21
    900a:	f1 01       	movw	r30, r2
    900c:	c0 8e       	std	Z+24, r12	; 0x18
    900e:	d1 8e       	std	Z+25, r13	; 0x19
    9010:	e2 8e       	std	Z+26, r14	; 0x1a
    9012:	f3 8e       	std	Z+27, r15	; 0x1b
    block->initial_rate = initial_rate;
    9014:	2d 81       	ldd	r18, Y+5	; 0x05
    9016:	3e 81       	ldd	r19, Y+6	; 0x06
    9018:	4f 81       	ldd	r20, Y+7	; 0x07
    901a:	58 85       	ldd	r21, Y+8	; 0x08
    901c:	dc 96       	adiw	r26, 0x3c	; 60
    901e:	2d 93       	st	X+, r18
    9020:	3d 93       	st	X+, r19
    9022:	4d 93       	st	X+, r20
    9024:	5c 93       	st	X, r21
    9026:	df 97       	sbiw	r26, 0x3f	; 63
    block->final_rate = final_rate;
    9028:	a0 5c       	subi	r26, 0xC0	; 192
    902a:	bf 4f       	sbci	r27, 0xFF	; 255
    902c:	29 85       	ldd	r18, Y+9	; 0x09
    902e:	3a 85       	ldd	r19, Y+10	; 0x0a
    9030:	4b 85       	ldd	r20, Y+11	; 0x0b
    9032:	5c 85       	ldd	r21, Y+12	; 0x0c
    9034:	2d 93       	st	X+, r18
    9036:	3d 93       	st	X+, r19
    9038:	4d 93       	st	X+, r20
    903a:	5c 93       	st	X, r21
    903c:	13 97       	sbiw	r26, 0x03	; 3
#ifdef ADVANCE
    block->initial_advance = initial_advance;
    block->final_advance = final_advance;
#endif //ADVANCE
  }
  CRITICAL_SECTION_END;
    903e:	8f bf       	out	0x3f, r24	; 63
}                    
    9040:	68 96       	adiw	r28, 0x18	; 24
    9042:	0f b6       	in	r0, 0x3f	; 63
    9044:	f8 94       	cli
    9046:	de bf       	out	0x3e, r29	; 62
    9048:	0f be       	out	0x3f, r0	; 63
    904a:	cd bf       	out	0x3d, r28	; 61
    904c:	df 91       	pop	r29
    904e:	cf 91       	pop	r28
    9050:	1f 91       	pop	r17
    9052:	0f 91       	pop	r16
    9054:	ff 90       	pop	r15
    9056:	ef 90       	pop	r14
    9058:	df 90       	pop	r13
    905a:	cf 90       	pop	r12
    905c:	bf 90       	pop	r11
    905e:	af 90       	pop	r10
    9060:	9f 90       	pop	r9
    9062:	8f 90       	pop	r8
    9064:	7f 90       	pop	r7
    9066:	6f 90       	pop	r6
    9068:	5f 90       	pop	r5
    906a:	4f 90       	pop	r4
    906c:	3f 90       	pop	r3
    906e:	2f 90       	pop	r2
    9070:	08 95       	ret

00009072 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_>:
//    pow((before->speed_x-after->speed_x), 2)+pow((before->speed_y-after->speed_y), 2));
//}


// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    9072:	8f 92       	push	r8
    9074:	9f 92       	push	r9
    9076:	af 92       	push	r10
    9078:	bf 92       	push	r11
    907a:	cf 92       	push	r12
    907c:	df 92       	push	r13
    907e:	ef 92       	push	r14
    9080:	ff 92       	push	r15
    9082:	0f 93       	push	r16
    9084:	1f 93       	push	r17
    9086:	cf 93       	push	r28
    9088:	df 93       	push	r29
    908a:	eb 01       	movw	r28, r22
    908c:	8a 01       	movw	r16, r20
  if(!current) { 
    908e:	20 97       	sbiw	r28, 0x00	; 0
    9090:	09 f4       	brne	.+2      	; 0x9094 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x22>
    9092:	71 c0       	rjmp	.+226    	; 0x9176 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x104>
    return; 
  }

  if (next) {
    9094:	41 15       	cp	r20, r1
    9096:	51 05       	cpc	r21, r1
    9098:	09 f4       	brne	.+2      	; 0x909c <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x2a>
    909a:	6d c0       	rjmp	.+218    	; 0x9176 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x104>
    // If entry speed is already at the maximum entry speed, no need to recheck. Block is cruising.
    // If not, block in state of acceleration or deceleration. Reset entry speed to maximum and
    // check for maximum allowable speed reductions to ensure maximum possible planned speed.
    if (current->entry_speed != current->max_entry_speed) {
    909c:	ca a4       	ldd	r12, Y+42	; 0x2a
    909e:	db a4       	ldd	r13, Y+43	; 0x2b
    90a0:	ec a4       	ldd	r14, Y+44	; 0x2c
    90a2:	fd a4       	ldd	r15, Y+45	; 0x2d
    90a4:	2c 2d       	mov	r18, r12
    90a6:	3d 2d       	mov	r19, r13
    90a8:	4e 2d       	mov	r20, r14
    90aa:	5f 2d       	mov	r21, r15
    90ac:	6e a1       	ldd	r22, Y+38	; 0x26
    90ae:	7f a1       	ldd	r23, Y+39	; 0x27
    90b0:	88 a5       	ldd	r24, Y+40	; 0x28
    90b2:	99 a5       	ldd	r25, Y+41	; 0x29
    90b4:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    90b8:	88 23       	and	r24, r24
    90ba:	09 f4       	brne	.+2      	; 0x90be <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x4c>
    90bc:	5c c0       	rjmp	.+184    	; 0x9176 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x104>

      // If nominal length true, max junction speed is guaranteed to be reached. Only compute
      // for max allowable speed if block is decelerating and nominal length is false.
      if ((!current->nominal_length_flag) && (current->max_entry_speed > next->entry_speed)) {
    90be:	8f a9       	ldd	r24, Y+55	; 0x37
    90c0:	81 11       	cpse	r24, r1
    90c2:	4f c0       	rjmp	.+158    	; 0x9162 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0xf0>
    90c4:	f8 01       	movw	r30, r16
    90c6:	86 a0       	ldd	r8, Z+38	; 0x26
    90c8:	97 a0       	ldd	r9, Z+39	; 0x27
    90ca:	a0 a4       	ldd	r10, Z+40	; 0x28
    90cc:	b1 a4       	ldd	r11, Z+41	; 0x29
    90ce:	a5 01       	movw	r20, r10
    90d0:	94 01       	movw	r18, r8
    90d2:	6c 2d       	mov	r22, r12
    90d4:	7d 2d       	mov	r23, r13
    90d6:	8e 2d       	mov	r24, r14
    90d8:	9f 2d       	mov	r25, r15
    90da:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    90de:	18 16       	cp	r1, r24
    90e0:	0c f0       	brlt	.+2      	; 0x90e4 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x72>
    90e2:	3f c0       	rjmp	.+126    	; 0x9162 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0xf0>
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {
  return  sqrt(target_velocity*target_velocity-2*acceleration*distance);
    90e4:	a5 01       	movw	r20, r10
    90e6:	94 01       	movw	r18, r8
    90e8:	c5 01       	movw	r24, r10
    90ea:	b4 01       	movw	r22, r8
    90ec:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    90f0:	4b 01       	movw	r8, r22
    90f2:	5c 01       	movw	r10, r24
    if (current->entry_speed != current->max_entry_speed) {

      // If nominal length true, max junction speed is guaranteed to be reached. Only compute
      // for max allowable speed if block is decelerating and nominal length is false.
      if ((!current->nominal_length_flag) && (current->max_entry_speed > next->entry_speed)) {
        current->entry_speed = min( current->max_entry_speed,
    90f4:	8a a9       	ldd	r24, Y+50	; 0x32
    90f6:	9b a9       	ldd	r25, Y+51	; 0x33
    90f8:	ac a9       	ldd	r26, Y+52	; 0x34
    90fa:	bd a9       	ldd	r27, Y+53	; 0x35
    90fc:	bc 01       	movw	r22, r24
    90fe:	cd 01       	movw	r24, r26
    9100:	90 58       	subi	r25, 0x80	; 128
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {
  return  sqrt(target_velocity*target_velocity-2*acceleration*distance);
    9102:	9b 01       	movw	r18, r22
    9104:	ac 01       	movw	r20, r24
    9106:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    910a:	2e a5       	ldd	r18, Y+46	; 0x2e
    910c:	3f a5       	ldd	r19, Y+47	; 0x2f
    910e:	48 a9       	ldd	r20, Y+48	; 0x30
    9110:	59 a9       	ldd	r21, Y+49	; 0x31
    9112:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9116:	9b 01       	movw	r18, r22
    9118:	ac 01       	movw	r20, r24
    911a:	c5 01       	movw	r24, r10
    911c:	b4 01       	movw	r22, r8
    911e:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    9122:	0e 94 62 b9 	call	0x172c4	; 0x172c4 <sqrt>
    9126:	a6 2e       	mov	r10, r22
    9128:	b7 2e       	mov	r11, r23
    912a:	08 2f       	mov	r16, r24
    912c:	19 2f       	mov	r17, r25

      // If nominal length true, max junction speed is guaranteed to be reached. Only compute
      // for max allowable speed if block is decelerating and nominal length is false.
      if ((!current->nominal_length_flag) && (current->max_entry_speed > next->entry_speed)) {
        current->entry_speed = min( current->max_entry_speed,
        max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
    912e:	76 2f       	mov	r23, r22
    9130:	27 2f       	mov	r18, r23
    9132:	3b 2d       	mov	r19, r11
    9134:	40 2f       	mov	r20, r16
    9136:	51 2f       	mov	r21, r17
    9138:	6c 2d       	mov	r22, r12
    913a:	7d 2d       	mov	r23, r13
    913c:	8e 2d       	mov	r24, r14
    913e:	9f 2d       	mov	r25, r15
    9140:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    9144:	88 23       	and	r24, r24
    9146:	24 f4       	brge	.+8      	; 0x9150 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0xde>
    9148:	ac 2c       	mov	r10, r12
    914a:	bd 2c       	mov	r11, r13
    914c:	0e 2d       	mov	r16, r14
    914e:	1f 2d       	mov	r17, r15
    9150:	8a 2d       	mov	r24, r10
    9152:	9b 2d       	mov	r25, r11
    9154:	a0 2f       	mov	r26, r16
    9156:	b1 2f       	mov	r27, r17
    9158:	8e a3       	std	Y+38, r24	; 0x26
    915a:	9f a3       	std	Y+39, r25	; 0x27
    915c:	a8 a7       	std	Y+40, r26	; 0x28
    915e:	b9 a7       	std	Y+41, r27	; 0x29
    9160:	08 c0       	rjmp	.+16     	; 0x9172 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_+0x100>
      } 
      else {
        current->entry_speed = current->max_entry_speed;
    9162:	8c 2d       	mov	r24, r12
    9164:	9d 2d       	mov	r25, r13
    9166:	ae 2d       	mov	r26, r14
    9168:	bf 2d       	mov	r27, r15
    916a:	8e a3       	std	Y+38, r24	; 0x26
    916c:	9f a3       	std	Y+39, r25	; 0x27
    916e:	a8 a7       	std	Y+40, r26	; 0x28
    9170:	b9 a7       	std	Y+41, r27	; 0x29
      }
      current->recalculate_flag = true;
    9172:	81 e0       	ldi	r24, 0x01	; 1
    9174:	8e ab       	std	Y+54, r24	; 0x36

    }
  } // Skip last block. Already initialized and set for recalculation.
}
    9176:	df 91       	pop	r29
    9178:	cf 91       	pop	r28
    917a:	1f 91       	pop	r17
    917c:	0f 91       	pop	r16
    917e:	ff 90       	pop	r15
    9180:	ef 90       	pop	r14
    9182:	df 90       	pop	r13
    9184:	cf 90       	pop	r12
    9186:	bf 90       	pop	r11
    9188:	af 90       	pop	r10
    918a:	9f 90       	pop	r9
    918c:	8f 90       	pop	r8
    918e:	08 95       	ret

00009190 <_Z20planner_reverse_passv>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    9190:	cf 92       	push	r12
    9192:	df 92       	push	r13
    9194:	ef 92       	push	r14
    9196:	ff 92       	push	r15
    9198:	0f 93       	push	r16
    919a:	1f 93       	push	r17
    919c:	cf 93       	push	r28
    919e:	df 93       	push	r29
  uint8_t block_index = block_buffer_head;
    91a0:	80 91 58 09 	lds	r24, 0x0958
  
  //Make a local copy of block_buffer_tail, because the interrupt can alter it
  CRITICAL_SECTION_START;
    91a4:	8f b7       	in	r24, 0x3f	; 63
    91a6:	f8 94       	cli
  unsigned char tail = block_buffer_tail;
    91a8:	e0 90 57 09 	lds	r14, 0x0957
  CRITICAL_SECTION_END
    91ac:	8f bf       	out	0x3f, r24	; 63
  
  if(((block_buffer_head-tail + BLOCK_BUFFER_SIZE) & (BLOCK_BUFFER_SIZE - 1)) > 3) {
    91ae:	80 91 58 09 	lds	r24, 0x0958
    91b2:	90 e0       	ldi	r25, 0x00	; 0
    91b4:	8e 19       	sub	r24, r14
    91b6:	91 09       	sbc	r25, r1
    91b8:	8f 70       	andi	r24, 0x0F	; 15
    91ba:	99 27       	eor	r25, r25
    91bc:	04 97       	sbiw	r24, 0x04	; 4
    91be:	34 f1       	brlt	.+76     	; 0x920c <_Z20planner_reverse_passv+0x7c>
    block_index = (block_buffer_head - 3) & (BLOCK_BUFFER_SIZE - 1);
    91c0:	80 91 58 09 	lds	r24, 0x0958
    91c4:	83 50       	subi	r24, 0x03	; 3
    91c6:	0f 2e       	mov	r0, r31
    91c8:	ff e0       	ldi	r31, 0x0F	; 15
    91ca:	ff 2e       	mov	r15, r31
    91cc:	f0 2d       	mov	r31, r0
    91ce:	f8 22       	and	r15, r24
    block_t *block[3] = { 
      NULL, NULL, NULL         };
    while(block_index != tail) { 
    91d0:	ef 14       	cp	r14, r15
    91d2:	e1 f0       	breq	.+56     	; 0x920c <_Z20planner_reverse_passv+0x7c>
  CRITICAL_SECTION_END
  
  if(((block_buffer_head-tail + BLOCK_BUFFER_SIZE) & (BLOCK_BUFFER_SIZE - 1)) > 3) {
    block_index = (block_buffer_head - 3) & (BLOCK_BUFFER_SIZE - 1);
    block_t *block[3] = { 
      NULL, NULL, NULL         };
    91d4:	c0 e0       	ldi	r28, 0x00	; 0
    91d6:	d0 e0       	ldi	r29, 0x00	; 0
    91d8:	40 e0       	ldi	r20, 0x00	; 0
    91da:	50 e0       	ldi	r21, 0x00	; 0


// Returns the index of the previous block in the ring buffer
static int8_t prev_block_index(int8_t block_index) {
  if (block_index == 0) { 
    block_index = BLOCK_BUFFER_SIZE; 
    91dc:	68 94       	set
    91de:	cc 24       	eor	r12, r12
    91e0:	c4 f8       	bld	r12, 4
      NULL, NULL, NULL         };
    while(block_index != tail) { 
      block_index = prev_block_index(block_index); 
      block[2]= block[1];
      block[1]= block[0];
      block[0] = &block_buffer[block_index];
    91e2:	0f 2e       	mov	r0, r31
    91e4:	fd e4       	ldi	r31, 0x4D	; 77
    91e6:	df 2e       	mov	r13, r31
    91e8:	f0 2d       	mov	r31, r0
    91ea:	01 c0       	rjmp	.+2      	; 0x91ee <_Z20planner_reverse_passv+0x5e>
    91ec:	e8 01       	movw	r28, r16
}


// Returns the index of the previous block in the ring buffer
static int8_t prev_block_index(int8_t block_index) {
  if (block_index == 0) { 
    91ee:	f1 10       	cpse	r15, r1
    91f0:	01 c0       	rjmp	.+2      	; 0x91f4 <_Z20planner_reverse_passv+0x64>
    block_index = BLOCK_BUFFER_SIZE; 
    91f2:	fc 2c       	mov	r15, r12
  }
  block_index--;
    91f4:	fa 94       	dec	r15
      NULL, NULL, NULL         };
    while(block_index != tail) { 
      block_index = prev_block_index(block_index); 
      block[2]= block[1];
      block[1]= block[0];
      block[0] = &block_buffer[block_index];
    91f6:	df 9c       	mul	r13, r15
    91f8:	80 01       	movw	r16, r0
    91fa:	11 24       	eor	r1, r1
    91fc:	07 5a       	subi	r16, 0xA7	; 167
    91fe:	16 4f       	sbci	r17, 0xF6	; 246
      planner_reverse_pass_kernel(block[0], block[1], block[2]);
    9200:	be 01       	movw	r22, r28
    9202:	c8 01       	movw	r24, r16
    9204:	36 df       	rcall	.-404    	; 0x9072 <_Z27planner_reverse_pass_kernelP7block_tS0_S0_>
    9206:	ae 01       	movw	r20, r28
  
  if(((block_buffer_head-tail + BLOCK_BUFFER_SIZE) & (BLOCK_BUFFER_SIZE - 1)) > 3) {
    block_index = (block_buffer_head - 3) & (BLOCK_BUFFER_SIZE - 1);
    block_t *block[3] = { 
      NULL, NULL, NULL         };
    while(block_index != tail) { 
    9208:	ef 10       	cpse	r14, r15
    920a:	f0 cf       	rjmp	.-32     	; 0x91ec <_Z20planner_reverse_passv+0x5c>
      block[1]= block[0];
      block[0] = &block_buffer[block_index];
      planner_reverse_pass_kernel(block[0], block[1], block[2]);
    }
  }
}
    920c:	df 91       	pop	r29
    920e:	cf 91       	pop	r28
    9210:	1f 91       	pop	r17
    9212:	0f 91       	pop	r16
    9214:	ff 90       	pop	r15
    9216:	ef 90       	pop	r14
    9218:	df 90       	pop	r13
    921a:	cf 90       	pop	r12
    921c:	08 95       	ret

0000921e <_Z27planner_forward_pass_kernelP7block_tS0_S0_>:

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    921e:	8f 92       	push	r8
    9220:	9f 92       	push	r9
    9222:	af 92       	push	r10
    9224:	bf 92       	push	r11
    9226:	cf 92       	push	r12
    9228:	df 92       	push	r13
    922a:	ef 92       	push	r14
    922c:	ff 92       	push	r15
    922e:	0f 93       	push	r16
    9230:	1f 93       	push	r17
    9232:	cf 93       	push	r28
    9234:	df 93       	push	r29
    9236:	8c 01       	movw	r16, r24
    9238:	eb 01       	movw	r28, r22
  if(!previous) { 
    923a:	00 97       	sbiw	r24, 0x00	; 0
    923c:	09 f4       	brne	.+2      	; 0x9240 <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0x22>
    923e:	65 c0       	rjmp	.+202    	; 0x930a <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0xec>

  // If the previous block is an acceleration block, but it is not long enough to complete the
  // full speed change within the block, we need to adjust the entry speed accordingly. Entry
  // speeds have already been reset, maximized, and reverse planned by reverse planner.
  // If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
  if (!previous->nominal_length_flag) {
    9240:	fc 01       	movw	r30, r24
    9242:	87 a9       	ldd	r24, Z+55	; 0x37
    9244:	81 11       	cpse	r24, r1
    9246:	61 c0       	rjmp	.+194    	; 0x930a <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0xec>
    if (previous->entry_speed < current->entry_speed) {
    9248:	86 a0       	ldd	r8, Z+38	; 0x26
    924a:	97 a0       	ldd	r9, Z+39	; 0x27
    924c:	a0 a4       	ldd	r10, Z+40	; 0x28
    924e:	b1 a4       	ldd	r11, Z+41	; 0x29
    9250:	ce a0       	ldd	r12, Y+38	; 0x26
    9252:	df a0       	ldd	r13, Y+39	; 0x27
    9254:	e8 a4       	ldd	r14, Y+40	; 0x28
    9256:	f9 a4       	ldd	r15, Y+41	; 0x29
    9258:	2c 2d       	mov	r18, r12
    925a:	3d 2d       	mov	r19, r13
    925c:	4e 2d       	mov	r20, r14
    925e:	5f 2d       	mov	r21, r15
    9260:	c5 01       	movw	r24, r10
    9262:	b4 01       	movw	r22, r8
    9264:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    9268:	88 23       	and	r24, r24
    926a:	0c f0       	brlt	.+2      	; 0x926e <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0x50>
    926c:	4e c0       	rjmp	.+156    	; 0x930a <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0xec>
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {
  return  sqrt(target_velocity*target_velocity-2*acceleration*distance);
    926e:	a5 01       	movw	r20, r10
    9270:	94 01       	movw	r18, r8
    9272:	c5 01       	movw	r24, r10
    9274:	b4 01       	movw	r22, r8
    9276:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    927a:	4b 01       	movw	r8, r22
    927c:	5c 01       	movw	r10, r24
  // full speed change within the block, we need to adjust the entry speed accordingly. Entry
  // speeds have already been reset, maximized, and reverse planned by reverse planner.
  // If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
  if (!previous->nominal_length_flag) {
    if (previous->entry_speed < current->entry_speed) {
      double entry_speed = min( current->entry_speed,
    927e:	f8 01       	movw	r30, r16
    9280:	82 a9       	ldd	r24, Z+50	; 0x32
    9282:	93 a9       	ldd	r25, Z+51	; 0x33
    9284:	a4 a9       	ldd	r26, Z+52	; 0x34
    9286:	b5 a9       	ldd	r27, Z+53	; 0x35
    9288:	bc 01       	movw	r22, r24
    928a:	cd 01       	movw	r24, r26
    928c:	90 58       	subi	r25, 0x80	; 128
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {
  return  sqrt(target_velocity*target_velocity-2*acceleration*distance);
    928e:	9b 01       	movw	r18, r22
    9290:	ac 01       	movw	r20, r24
    9292:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    9296:	f8 01       	movw	r30, r16
    9298:	26 a5       	ldd	r18, Z+46	; 0x2e
    929a:	37 a5       	ldd	r19, Z+47	; 0x2f
    929c:	40 a9       	ldd	r20, Z+48	; 0x30
    929e:	51 a9       	ldd	r21, Z+49	; 0x31
    92a0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    92a4:	9b 01       	movw	r18, r22
    92a6:	ac 01       	movw	r20, r24
    92a8:	c5 01       	movw	r24, r10
    92aa:	b4 01       	movw	r22, r8
    92ac:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    92b0:	0e 94 62 b9 	call	0x172c4	; 0x172c4 <sqrt>
    92b4:	a6 2e       	mov	r10, r22
    92b6:	b7 2e       	mov	r11, r23
    92b8:	08 2f       	mov	r16, r24
    92ba:	19 2f       	mov	r17, r25
  // full speed change within the block, we need to adjust the entry speed accordingly. Entry
  // speeds have already been reset, maximized, and reverse planned by reverse planner.
  // If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
  if (!previous->nominal_length_flag) {
    if (previous->entry_speed < current->entry_speed) {
      double entry_speed = min( current->entry_speed,
    92bc:	76 2f       	mov	r23, r22
    92be:	27 2f       	mov	r18, r23
    92c0:	3b 2d       	mov	r19, r11
    92c2:	40 2f       	mov	r20, r16
    92c4:	51 2f       	mov	r21, r17
    92c6:	6c 2d       	mov	r22, r12
    92c8:	7d 2d       	mov	r23, r13
    92ca:	8e 2d       	mov	r24, r14
    92cc:	9f 2d       	mov	r25, r15
    92ce:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    92d2:	88 23       	and	r24, r24
    92d4:	24 f4       	brge	.+8      	; 0x92de <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0xc0>
    92d6:	ac 2c       	mov	r10, r12
    92d8:	bd 2c       	mov	r11, r13
    92da:	0e 2d       	mov	r16, r14
    92dc:	1f 2d       	mov	r17, r15
      max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );

      // Check for junction speed change
      if (current->entry_speed != entry_speed) {
    92de:	2c 2d       	mov	r18, r12
    92e0:	3d 2d       	mov	r19, r13
    92e2:	4e 2d       	mov	r20, r14
    92e4:	5f 2d       	mov	r21, r15
    92e6:	6a 2d       	mov	r22, r10
    92e8:	7b 2d       	mov	r23, r11
    92ea:	80 2f       	mov	r24, r16
    92ec:	91 2f       	mov	r25, r17
    92ee:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    92f2:	88 23       	and	r24, r24
    92f4:	51 f0       	breq	.+20     	; 0x930a <_Z27planner_forward_pass_kernelP7block_tS0_S0_+0xec>
        current->entry_speed = entry_speed;
    92f6:	8a 2d       	mov	r24, r10
    92f8:	9b 2d       	mov	r25, r11
    92fa:	a0 2f       	mov	r26, r16
    92fc:	b1 2f       	mov	r27, r17
    92fe:	8e a3       	std	Y+38, r24	; 0x26
    9300:	9f a3       	std	Y+39, r25	; 0x27
    9302:	a8 a7       	std	Y+40, r26	; 0x28
    9304:	b9 a7       	std	Y+41, r27	; 0x29
        current->recalculate_flag = true;
    9306:	81 e0       	ldi	r24, 0x01	; 1
    9308:	8e ab       	std	Y+54, r24	; 0x36
      }
    }
  }
}
    930a:	df 91       	pop	r29
    930c:	cf 91       	pop	r28
    930e:	1f 91       	pop	r17
    9310:	0f 91       	pop	r16
    9312:	ff 90       	pop	r15
    9314:	ef 90       	pop	r14
    9316:	df 90       	pop	r13
    9318:	cf 90       	pop	r12
    931a:	bf 90       	pop	r11
    931c:	af 90       	pop	r10
    931e:	9f 90       	pop	r9
    9320:	8f 90       	pop	r8
    9322:	08 95       	ret

00009324 <_Z20planner_forward_passv>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    9324:	ef 92       	push	r14
    9326:	ff 92       	push	r15
    9328:	0f 93       	push	r16
    932a:	1f 93       	push	r17
    932c:	cf 93       	push	r28
    932e:	df 93       	push	r29
  uint8_t block_index = block_buffer_tail;
    9330:	f0 90 57 09 	lds	r15, 0x0957
  block_t *block[3] = { 
    NULL, NULL, NULL   };

  while(block_index != block_buffer_head) {
    9334:	80 91 58 09 	lds	r24, 0x0958
    9338:	f8 16       	cp	r15, r24
    933a:	e9 f0       	breq	.+58     	; 0x9376 <_Z20planner_forward_passv+0x52>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
  uint8_t block_index = block_buffer_tail;
  block_t *block[3] = { 
    NULL, NULL, NULL   };
    933c:	20 e0       	ldi	r18, 0x00	; 0
    933e:	30 e0       	ldi	r19, 0x00	; 0
    9340:	c0 e0       	ldi	r28, 0x00	; 0
    9342:	d0 e0       	ldi	r29, 0x00	; 0

  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    9344:	0f 2e       	mov	r0, r31
    9346:	fd e4       	ldi	r31, 0x4D	; 77
    9348:	ef 2e       	mov	r14, r31
    934a:	f0 2d       	mov	r31, r0
    934c:	01 c0       	rjmp	.+2      	; 0x9350 <_Z20planner_forward_passv+0x2c>
    934e:	e8 01       	movw	r28, r16
    9350:	ef 9c       	mul	r14, r15
    9352:	80 01       	movw	r16, r0
    9354:	11 24       	eor	r1, r1
    9356:	07 5a       	subi	r16, 0xA7	; 167
    9358:	16 4f       	sbci	r17, 0xF6	; 246
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    935a:	a8 01       	movw	r20, r16
    935c:	be 01       	movw	r22, r28
    935e:	c9 01       	movw	r24, r18
    9360:	5e df       	rcall	.-324    	; 0x921e <_Z27planner_forward_pass_kernelP7block_tS0_S0_>
    block_index = next_block_index(block_index);
    9362:	8f 2d       	mov	r24, r15
    9364:	98 dc       	rcall	.-1744   	; 0x8c96 <_ZL16next_block_indexa>
    9366:	f8 2e       	mov	r15, r24
void planner_forward_pass() {
  uint8_t block_index = block_buffer_tail;
  block_t *block[3] = { 
    NULL, NULL, NULL   };

  while(block_index != block_buffer_head) {
    9368:	80 91 58 09 	lds	r24, 0x0958
    936c:	9e 01       	movw	r18, r28
    936e:	8f 11       	cpse	r24, r15
    9370:	ee cf       	rjmp	.-36     	; 0x934e <_Z20planner_forward_passv+0x2a>
    9372:	ce 01       	movw	r24, r28
    9374:	04 c0       	rjmp	.+8      	; 0x937e <_Z20planner_forward_passv+0x5a>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
  uint8_t block_index = block_buffer_tail;
  block_t *block[3] = { 
    NULL, NULL, NULL   };
    9376:	80 e0       	ldi	r24, 0x00	; 0
    9378:	90 e0       	ldi	r25, 0x00	; 0
    937a:	00 e0       	ldi	r16, 0x00	; 0
    937c:	10 e0       	ldi	r17, 0x00	; 0
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = next_block_index(block_index);
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    937e:	40 e0       	ldi	r20, 0x00	; 0
    9380:	50 e0       	ldi	r21, 0x00	; 0
    9382:	b8 01       	movw	r22, r16
    9384:	4c df       	rcall	.-360    	; 0x921e <_Z27planner_forward_pass_kernelP7block_tS0_S0_>
}
    9386:	df 91       	pop	r29
    9388:	cf 91       	pop	r28
    938a:	1f 91       	pop	r17
    938c:	0f 91       	pop	r16
    938e:	ff 90       	pop	r15
    9390:	ef 90       	pop	r14
    9392:	08 95       	ret

00009394 <_Z30planner_recalculate_trapezoidsv>:

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    9394:	4f 92       	push	r4
    9396:	5f 92       	push	r5
    9398:	6f 92       	push	r6
    939a:	7f 92       	push	r7
    939c:	8f 92       	push	r8
    939e:	9f 92       	push	r9
    93a0:	af 92       	push	r10
    93a2:	bf 92       	push	r11
    93a4:	cf 92       	push	r12
    93a6:	df 92       	push	r13
    93a8:	ef 92       	push	r14
    93aa:	ff 92       	push	r15
    93ac:	0f 93       	push	r16
    93ae:	1f 93       	push	r17
    93b0:	cf 93       	push	r28
    93b2:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    93b4:	90 90 57 09 	lds	r9, 0x0957
  block_t *current;
  block_t *next = NULL;

  while(block_index != block_buffer_head) {
    93b8:	89 2d       	mov	r24, r9
    93ba:	99 27       	eor	r25, r25
    93bc:	87 fd       	sbrc	r24, 7
    93be:	90 95       	com	r25
    93c0:	20 91 58 09 	lds	r18, 0x0958
    93c4:	30 e0       	ldi	r19, 0x00	; 0
    93c6:	82 17       	cp	r24, r18
    93c8:	93 07       	cpc	r25, r19
    93ca:	09 f0       	breq	.+2      	; 0x93ce <_Z30planner_recalculate_trapezoidsv+0x3a>
    93cc:	63 c0       	rjmp	.+198    	; 0x9494 <_Z30planner_recalculate_trapezoidsv+0x100>
    93ce:	6f c0       	rjmp	.+222    	; 0x94ae <_Z30planner_recalculate_trapezoidsv+0x11a>
    current = next;
    next = &block_buffer[block_index];
    93d0:	88 9e       	mul	r8, r24
    93d2:	90 01       	movw	r18, r0
    93d4:	89 9e       	mul	r8, r25
    93d6:	30 0d       	add	r19, r0
    93d8:	11 24       	eor	r1, r1
    93da:	0f 2e       	mov	r0, r31
    93dc:	f9 e5       	ldi	r31, 0x59	; 89
    93de:	af 2e       	mov	r10, r31
    93e0:	f9 e0       	ldi	r31, 0x09	; 9
    93e2:	bf 2e       	mov	r11, r31
    93e4:	f0 2d       	mov	r31, r0
    93e6:	a2 0e       	add	r10, r18
    93e8:	b3 1e       	adc	r11, r19
    if (current) {
    93ea:	20 97       	sbiw	r28, 0x00	; 0
    93ec:	29 f1       	breq	.+74     	; 0x9438 <_Z30planner_recalculate_trapezoidsv+0xa4>
      // Recalculate if current block entry or exit junction speed has changed.
      if (current->recalculate_flag || next->recalculate_flag) {
    93ee:	8e a9       	ldd	r24, Y+54	; 0x36
    93f0:	81 11       	cpse	r24, r1
    93f2:	04 c0       	rjmp	.+8      	; 0x93fc <_Z30planner_recalculate_trapezoidsv+0x68>
    93f4:	f5 01       	movw	r30, r10
    93f6:	86 a9       	ldd	r24, Z+54	; 0x36
    93f8:	88 23       	and	r24, r24
    93fa:	f1 f0       	breq	.+60     	; 0x9438 <_Z30planner_recalculate_trapezoidsv+0xa4>
        // NOTE: Entry and exit factors always > 0 by all previous logic operations.
        calculate_trapezoid_for_block(current, current->entry_speed/current->nominal_speed,
        next->entry_speed/current->nominal_speed);
    93fc:	ca a0       	ldd	r12, Y+34	; 0x22
    93fe:	db a0       	ldd	r13, Y+35	; 0x23
    9400:	ec a0       	ldd	r14, Y+36	; 0x24
    9402:	fd a0       	ldd	r15, Y+37	; 0x25
    9404:	a7 01       	movw	r20, r14
    9406:	96 01       	movw	r18, r12
    9408:	f5 01       	movw	r30, r10
    940a:	66 a1       	ldd	r22, Z+38	; 0x26
    940c:	77 a1       	ldd	r23, Z+39	; 0x27
    940e:	80 a5       	ldd	r24, Z+40	; 0x28
    9410:	91 a5       	ldd	r25, Z+41	; 0x29
    9412:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9416:	2b 01       	movw	r4, r22
    9418:	3c 01       	movw	r6, r24
    941a:	a7 01       	movw	r20, r14
    941c:	96 01       	movw	r18, r12
    941e:	6e a1       	ldd	r22, Y+38	; 0x26
    9420:	7f a1       	ldd	r23, Y+39	; 0x27
    9422:	88 a5       	ldd	r24, Y+40	; 0x28
    9424:	99 a5       	ldd	r25, Y+41	; 0x29
    9426:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    942a:	ab 01       	movw	r20, r22
    942c:	bc 01       	movw	r22, r24
    942e:	93 01       	movw	r18, r6
    9430:	82 01       	movw	r16, r4
    9432:	ce 01       	movw	r24, r28
    9434:	35 dc       	rcall	.-1942   	; 0x8ca0 <_Z29calculate_trapezoid_for_blockP7block_tff>
        current->recalculate_flag = false; // Reset current only to ensure next trapezoid is computed
    9436:	1e aa       	std	Y+54, r1	; 0x36
  block_t *current;
  block_t *next = NULL;

  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    9438:	e5 01       	movw	r28, r10
        calculate_trapezoid_for_block(current, current->entry_speed/current->nominal_speed,
        next->entry_speed/current->nominal_speed);
        current->recalculate_flag = false; // Reset current only to ensure next trapezoid is computed
      }
    }
    block_index = next_block_index( block_index );
    943a:	89 2d       	mov	r24, r9
    943c:	2c dc       	rcall	.-1960   	; 0x8c96 <_ZL16next_block_indexa>
    943e:	98 2e       	mov	r9, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;

  while(block_index != block_buffer_head) {
    9440:	99 27       	eor	r25, r25
    9442:	87 fd       	sbrc	r24, 7
    9444:	90 95       	com	r25
    9446:	20 91 58 09 	lds	r18, 0x0958
    944a:	30 e0       	ldi	r19, 0x00	; 0
    944c:	82 17       	cp	r24, r18
    944e:	93 07       	cpc	r25, r19
    9450:	09 f0       	breq	.+2      	; 0x9454 <_Z30planner_recalculate_trapezoidsv+0xc0>
    9452:	be cf       	rjmp	.-132    	; 0x93d0 <_Z30planner_recalculate_trapezoidsv+0x3c>
      }
    }
    block_index = next_block_index( block_index );
  }
  // Last/newest block in buffer. Exit speed is set with MINIMUM_PLANNER_SPEED. Always recalculated.
  if(next != NULL) {
    9454:	20 97       	sbiw	r28, 0x00	; 0
    9456:	59 f1       	breq	.+86     	; 0x94ae <_Z30planner_recalculate_trapezoidsv+0x11a>
    calculate_trapezoid_for_block(next, next->entry_speed/next->nominal_speed,
    MINIMUM_PLANNER_SPEED/next->nominal_speed);
    9458:	ca a0       	ldd	r12, Y+34	; 0x22
    945a:	db a0       	ldd	r13, Y+35	; 0x23
    945c:	ec a0       	ldd	r14, Y+36	; 0x24
    945e:	fd a0       	ldd	r15, Y+37	; 0x25
    9460:	a7 01       	movw	r20, r14
    9462:	96 01       	movw	r18, r12
    9464:	6d ec       	ldi	r22, 0xCD	; 205
    9466:	7c ec       	ldi	r23, 0xCC	; 204
    9468:	8c e4       	ldi	r24, 0x4C	; 76
    946a:	9d e3       	ldi	r25, 0x3D	; 61
    946c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9470:	4b 01       	movw	r8, r22
    9472:	5c 01       	movw	r10, r24
    9474:	a7 01       	movw	r20, r14
    9476:	96 01       	movw	r18, r12
    9478:	6e a1       	ldd	r22, Y+38	; 0x26
    947a:	7f a1       	ldd	r23, Y+39	; 0x27
    947c:	88 a5       	ldd	r24, Y+40	; 0x28
    947e:	99 a5       	ldd	r25, Y+41	; 0x29
    9480:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9484:	ab 01       	movw	r20, r22
    9486:	bc 01       	movw	r22, r24
    9488:	95 01       	movw	r18, r10
    948a:	84 01       	movw	r16, r8
    948c:	ce 01       	movw	r24, r28
    948e:	08 dc       	rcall	.-2032   	; 0x8ca0 <_Z29calculate_trapezoid_for_blockP7block_tff>
    next->recalculate_flag = false;
    9490:	1e aa       	std	Y+54, r1	; 0x36
    9492:	0d c0       	rjmp	.+26     	; 0x94ae <_Z30planner_recalculate_trapezoidsv+0x11a>
  block_t *current;
  block_t *next = NULL;

  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    9494:	2d e4       	ldi	r18, 0x4D	; 77
    9496:	28 9f       	mul	r18, r24
    9498:	e0 01       	movw	r28, r0
    949a:	29 9f       	mul	r18, r25
    949c:	d0 0d       	add	r29, r0
    949e:	11 24       	eor	r1, r1
    94a0:	c7 5a       	subi	r28, 0xA7	; 167
    94a2:	d6 4f       	sbci	r29, 0xF6	; 246
    94a4:	0f 2e       	mov	r0, r31
    94a6:	fd e4       	ldi	r31, 0x4D	; 77
    94a8:	8f 2e       	mov	r8, r31
    94aa:	f0 2d       	mov	r31, r0
    94ac:	c6 cf       	rjmp	.-116    	; 0x943a <_Z30planner_recalculate_trapezoidsv+0xa6>
  if(next != NULL) {
    calculate_trapezoid_for_block(next, next->entry_speed/next->nominal_speed,
    MINIMUM_PLANNER_SPEED/next->nominal_speed);
    next->recalculate_flag = false;
  }
}
    94ae:	df 91       	pop	r29
    94b0:	cf 91       	pop	r28
    94b2:	1f 91       	pop	r17
    94b4:	0f 91       	pop	r16
    94b6:	ff 90       	pop	r15
    94b8:	ef 90       	pop	r14
    94ba:	df 90       	pop	r13
    94bc:	cf 90       	pop	r12
    94be:	bf 90       	pop	r11
    94c0:	af 90       	pop	r10
    94c2:	9f 90       	pop	r9
    94c4:	8f 90       	pop	r8
    94c6:	7f 90       	pop	r7
    94c8:	6f 90       	pop	r6
    94ca:	5f 90       	pop	r5
    94cc:	4f 90       	pop	r4
    94ce:	08 95       	ret

000094d0 <_Z19planner_recalculatev>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {   
  planner_reverse_pass();
    94d0:	5f de       	rcall	.-834    	; 0x9190 <_Z20planner_reverse_passv>
  planner_forward_pass();
    94d2:	28 df       	rcall	.-432    	; 0x9324 <_Z20planner_forward_passv>
  planner_recalculate_trapezoids();
    94d4:	5f cf       	rjmp	.-322    	; 0x9394 <_Z30planner_recalculate_trapezoidsv>

000094d6 <_Z9plan_initv>:
}

void plan_init() {
  block_buffer_head = 0;
    94d6:	10 92 58 09 	sts	0x0958, r1
  block_buffer_tail = 0;
    94da:	10 92 57 09 	sts	0x0957, r1
  memset(position, 0, sizeof(position)); // clear position
    94de:	80 e1       	ldi	r24, 0x10	; 16
    94e0:	ea e2       	ldi	r30, 0x2A	; 42
    94e2:	fe e0       	ldi	r31, 0x0E	; 14
    94e4:	df 01       	movw	r26, r30
    94e6:	1d 92       	st	X+, r1
    94e8:	8a 95       	dec	r24
    94ea:	e9 f7       	brne	.-6      	; 0x94e6 <_Z9plan_initv+0x10>
  previous_speed[0] = 0.0;
    94ec:	10 92 9a 0e 	sts	0x0E9A, r1
    94f0:	10 92 9b 0e 	sts	0x0E9B, r1
    94f4:	10 92 9c 0e 	sts	0x0E9C, r1
    94f8:	10 92 9d 0e 	sts	0x0E9D, r1
  previous_speed[1] = 0.0;
    94fc:	10 92 9e 0e 	sts	0x0E9E, r1
    9500:	10 92 9f 0e 	sts	0x0E9F, r1
    9504:	10 92 a0 0e 	sts	0x0EA0, r1
    9508:	10 92 a1 0e 	sts	0x0EA1, r1
  previous_speed[2] = 0.0;
    950c:	10 92 a2 0e 	sts	0x0EA2, r1
    9510:	10 92 a3 0e 	sts	0x0EA3, r1
    9514:	10 92 a4 0e 	sts	0x0EA4, r1
    9518:	10 92 a5 0e 	sts	0x0EA5, r1
  previous_speed[3] = 0.0;
    951c:	10 92 a6 0e 	sts	0x0EA6, r1
    9520:	10 92 a7 0e 	sts	0x0EA7, r1
    9524:	10 92 a8 0e 	sts	0x0EA8, r1
    9528:	10 92 a9 0e 	sts	0x0EA9, r1
  previous_nominal_speed = 0.0;
    952c:	10 92 aa 0e 	sts	0x0EAA, r1
    9530:	10 92 ab 0e 	sts	0x0EAB, r1
    9534:	10 92 ac 0e 	sts	0x0EAC, r1
    9538:	10 92 ad 0e 	sts	0x0EAD, r1
    953c:	08 95       	ret

0000953e <_Z13getHighESpeedv>:



#ifdef AUTOTEMP
void getHighESpeed()
{
    953e:	4f 92       	push	r4
    9540:	5f 92       	push	r5
    9542:	6f 92       	push	r6
    9544:	7f 92       	push	r7
    9546:	8f 92       	push	r8
    9548:	9f 92       	push	r9
    954a:	af 92       	push	r10
    954c:	bf 92       	push	r11
    954e:	cf 92       	push	r12
    9550:	df 92       	push	r13
    9552:	ef 92       	push	r14
    9554:	ff 92       	push	r15
    9556:	0f 93       	push	r16
    9558:	1f 93       	push	r17
    955a:	cf 93       	push	r28
    955c:	df 93       	push	r29
  static float oldt=0;
  if(!autotemp_enabled){
    955e:	80 91 29 0e 	lds	r24, 0x0E29
    9562:	88 23       	and	r24, r24
    9564:	09 f4       	brne	.+2      	; 0x9568 <_Z13getHighESpeedv+0x2a>
    9566:	27 c1       	rjmp	.+590    	; 0x97b6 <_Z13getHighESpeedv+0x278>
    return;
  }
  if(degTargetHotend0()+2<autotemp_min) {  //probably temperature set to zero.
    9568:	80 90 42 02 	lds	r8, 0x0242
    956c:	90 90 43 02 	lds	r9, 0x0243
    9570:	a0 90 44 02 	lds	r10, 0x0244
    9574:	b0 90 45 02 	lds	r11, 0x0245
FORCE_INLINE float degBed() {
  return current_temperature_bed;
};

FORCE_INLINE float degTargetHotend(uint8_t extruder) {  
  return target_temperature[extruder];
    9578:	60 91 19 11 	lds	r22, 0x1119
    957c:	70 91 1a 11 	lds	r23, 0x111A
    9580:	88 27       	eor	r24, r24
    9582:	77 fd       	sbrc	r23, 7
    9584:	80 95       	com	r24
    9586:	98 2f       	mov	r25, r24
    9588:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    958c:	20 e0       	ldi	r18, 0x00	; 0
    958e:	30 e0       	ldi	r19, 0x00	; 0
    9590:	40 e0       	ldi	r20, 0x00	; 0
    9592:	50 e4       	ldi	r21, 0x40	; 64
    9594:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    9598:	28 2d       	mov	r18, r8
    959a:	39 2d       	mov	r19, r9
    959c:	4a 2d       	mov	r20, r10
    959e:	5b 2d       	mov	r21, r11
    95a0:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    95a4:	88 23       	and	r24, r24
    95a6:	0c f4       	brge	.+2      	; 0x95aa <_Z13getHighESpeedv+0x6c>
    95a8:	06 c1       	rjmp	.+524    	; 0x97b6 <_Z13getHighESpeedv+0x278>
    return; //do nothing
  }

  float high=0.0;
  uint8_t block_index = block_buffer_tail;
    95aa:	10 91 57 09 	lds	r17, 0x0957

  while(block_index != block_buffer_head) {
    95ae:	80 91 58 09 	lds	r24, 0x0958
    95b2:	18 17       	cp	r17, r24
    95b4:	09 f4       	brne	.+2      	; 0x95b8 <_Z13getHighESpeedv+0x7a>
    95b6:	70 c0       	rjmp	.+224    	; 0x9698 <_Z13getHighESpeedv+0x15a>
  }
  if(degTargetHotend0()+2<autotemp_min) {  //probably temperature set to zero.
    return; //do nothing
  }

  float high=0.0;
    95b8:	c1 2c       	mov	r12, r1
    95ba:	d1 2c       	mov	r13, r1
    95bc:	e1 2c       	mov	r14, r1
    95be:	f1 2c       	mov	r15, r1
  uint8_t block_index = block_buffer_tail;

  while(block_index != block_buffer_head) {
    if((block_buffer[block_index].steps_x != 0) ||
    95c0:	0d e4       	ldi	r16, 0x4D	; 77
    95c2:	21 2f       	mov	r18, r17
    95c4:	30 e0       	ldi	r19, 0x00	; 0
    95c6:	02 9f       	mul	r16, r18
    95c8:	f0 01       	movw	r30, r0
    95ca:	03 9f       	mul	r16, r19
    95cc:	f0 0d       	add	r31, r0
    95ce:	11 24       	eor	r1, r1
    95d0:	e7 5a       	subi	r30, 0xA7	; 167
    95d2:	f6 4f       	sbci	r31, 0xF6	; 246
    95d4:	80 81       	ld	r24, Z
    95d6:	91 81       	ldd	r25, Z+1	; 0x01
    95d8:	a2 81       	ldd	r26, Z+2	; 0x02
    95da:	b3 81       	ldd	r27, Z+3	; 0x03
    95dc:	89 2b       	or	r24, r25
    95de:	8a 2b       	or	r24, r26
    95e0:	8b 2b       	or	r24, r27
    95e2:	f1 f4       	brne	.+60     	; 0x9620 <_Z13getHighESpeedv+0xe2>
    95e4:	02 9f       	mul	r16, r18
    95e6:	f0 01       	movw	r30, r0
    95e8:	03 9f       	mul	r16, r19
    95ea:	f0 0d       	add	r31, r0
    95ec:	11 24       	eor	r1, r1
    95ee:	e7 5a       	subi	r30, 0xA7	; 167
    95f0:	f6 4f       	sbci	r31, 0xF6	; 246
    95f2:	84 81       	ldd	r24, Z+4	; 0x04
    95f4:	95 81       	ldd	r25, Z+5	; 0x05
    95f6:	a6 81       	ldd	r26, Z+6	; 0x06
    95f8:	b7 81       	ldd	r27, Z+7	; 0x07
    95fa:	89 2b       	or	r24, r25
    95fc:	8a 2b       	or	r24, r26
    95fe:	8b 2b       	or	r24, r27
    9600:	79 f4       	brne	.+30     	; 0x9620 <_Z13getHighESpeedv+0xe2>
    9602:	02 9f       	mul	r16, r18
    9604:	f0 01       	movw	r30, r0
    9606:	03 9f       	mul	r16, r19
    9608:	f0 0d       	add	r31, r0
    960a:	11 24       	eor	r1, r1
    960c:	e7 5a       	subi	r30, 0xA7	; 167
    960e:	f6 4f       	sbci	r31, 0xF6	; 246
    9610:	80 85       	ldd	r24, Z+8	; 0x08
    9612:	91 85       	ldd	r25, Z+9	; 0x09
    9614:	a2 85       	ldd	r26, Z+10	; 0x0a
    9616:	b3 85       	ldd	r27, Z+11	; 0x0b
    9618:	89 2b       	or	r24, r25
    961a:	8a 2b       	or	r24, r26
    961c:	8b 2b       	or	r24, r27
    961e:	a9 f1       	breq	.+106    	; 0x968a <_Z13getHighESpeedv+0x14c>
      (block_buffer[block_index].steps_y != 0) ||
      (block_buffer[block_index].steps_z != 0)) {
      float se=(float(block_buffer[block_index].steps_e)/float(block_buffer[block_index].step_event_count))*block_buffer[block_index].nominal_speed;
    9620:	02 9f       	mul	r16, r18
    9622:	e0 01       	movw	r28, r0
    9624:	03 9f       	mul	r16, r19
    9626:	d0 0d       	add	r29, r0
    9628:	11 24       	eor	r1, r1
    962a:	c7 5a       	subi	r28, 0xA7	; 167
    962c:	d6 4f       	sbci	r29, 0xF6	; 246
    962e:	6c 85       	ldd	r22, Y+12	; 0x0c
    9630:	7d 85       	ldd	r23, Y+13	; 0x0d
    9632:	8e 85       	ldd	r24, Y+14	; 0x0e
    9634:	9f 85       	ldd	r25, Y+15	; 0x0f
    9636:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    963a:	2b 01       	movw	r4, r22
    963c:	3c 01       	movw	r6, r24
    963e:	68 89       	ldd	r22, Y+16	; 0x10
    9640:	79 89       	ldd	r23, Y+17	; 0x11
    9642:	8a 89       	ldd	r24, Y+18	; 0x12
    9644:	9b 89       	ldd	r25, Y+19	; 0x13
    9646:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    964a:	9b 01       	movw	r18, r22
    964c:	ac 01       	movw	r20, r24
    964e:	c3 01       	movw	r24, r6
    9650:	b2 01       	movw	r22, r4
    9652:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9656:	2a a1       	ldd	r18, Y+34	; 0x22
    9658:	3b a1       	ldd	r19, Y+35	; 0x23
    965a:	4c a1       	ldd	r20, Y+36	; 0x24
    965c:	5d a1       	ldd	r21, Y+37	; 0x25
    965e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9662:	66 2e       	mov	r6, r22
    9664:	77 2e       	mov	r7, r23
    9666:	d8 2f       	mov	r29, r24
    9668:	c9 2f       	mov	r28, r25
      //se; mm/sec;
      if(se>high)
    966a:	2c 2d       	mov	r18, r12
    966c:	3d 2d       	mov	r19, r13
    966e:	4e 2d       	mov	r20, r14
    9670:	5f 2d       	mov	r21, r15
    9672:	66 2d       	mov	r22, r6
    9674:	77 2d       	mov	r23, r7
    9676:	8d 2f       	mov	r24, r29
    9678:	9c 2f       	mov	r25, r28
    967a:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    967e:	18 16       	cp	r1, r24
    9680:	24 f4       	brge	.+8      	; 0x968a <_Z13getHighESpeedv+0x14c>
      {
        high=se;
    9682:	c6 2c       	mov	r12, r6
    9684:	d7 2c       	mov	r13, r7
    9686:	ed 2e       	mov	r14, r29
    9688:	fc 2e       	mov	r15, r28
      }
    }
    block_index = (block_index+1) & (BLOCK_BUFFER_SIZE - 1);
    968a:	1f 5f       	subi	r17, 0xFF	; 255
    968c:	1f 70       	andi	r17, 0x0F	; 15
  }

  float high=0.0;
  uint8_t block_index = block_buffer_tail;

  while(block_index != block_buffer_head) {
    968e:	80 91 58 09 	lds	r24, 0x0958
    9692:	81 13       	cpse	r24, r17
    9694:	96 cf       	rjmp	.-212    	; 0x95c2 <_Z13getHighESpeedv+0x84>
    9696:	04 c0       	rjmp	.+8      	; 0x96a0 <_Z13getHighESpeedv+0x162>
  }
  if(degTargetHotend0()+2<autotemp_min) {  //probably temperature set to zero.
    return; //do nothing
  }

  float high=0.0;
    9698:	c1 2c       	mov	r12, r1
    969a:	d1 2c       	mov	r13, r1
    969c:	e1 2c       	mov	r14, r1
    969e:	f1 2c       	mov	r15, r1
      }
    }
    block_index = (block_index+1) & (BLOCK_BUFFER_SIZE - 1);
  }

  float g=autotemp_min+high*autotemp_factor;
    96a0:	20 91 3e 02 	lds	r18, 0x023E
    96a4:	30 91 3f 02 	lds	r19, 0x023F
    96a8:	40 91 40 02 	lds	r20, 0x0240
    96ac:	50 91 41 02 	lds	r21, 0x0241
    96b0:	6c 2d       	mov	r22, r12
    96b2:	7d 2d       	mov	r23, r13
    96b4:	8e 2d       	mov	r24, r14
    96b6:	9f 2d       	mov	r25, r15
    96b8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    96bc:	9b 01       	movw	r18, r22
    96be:	ac 01       	movw	r20, r24
    96c0:	68 2d       	mov	r22, r8
    96c2:	79 2d       	mov	r23, r9
    96c4:	8a 2d       	mov	r24, r10
    96c6:	9b 2d       	mov	r25, r11
    96c8:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    96cc:	06 2f       	mov	r16, r22
    96ce:	17 2f       	mov	r17, r23
    96d0:	d8 2f       	mov	r29, r24
    96d2:	c9 2f       	mov	r28, r25
  float t=g;
  if(t<autotemp_min)
    96d4:	76 2f       	mov	r23, r22
    96d6:	27 2f       	mov	r18, r23
    96d8:	31 2f       	mov	r19, r17
    96da:	4d 2f       	mov	r20, r29
    96dc:	5c 2f       	mov	r21, r28
    96de:	68 2d       	mov	r22, r8
    96e0:	79 2d       	mov	r23, r9
    96e2:	8a 2d       	mov	r24, r10
    96e4:	9b 2d       	mov	r25, r11
    96e6:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    96ea:	18 16       	cp	r1, r24
    96ec:	24 f0       	brlt	.+8      	; 0x96f6 <_Z13getHighESpeedv+0x1b8>
    }
    block_index = (block_index+1) & (BLOCK_BUFFER_SIZE - 1);
  }

  float g=autotemp_min+high*autotemp_factor;
  float t=g;
    96ee:	80 2e       	mov	r8, r16
    96f0:	91 2e       	mov	r9, r17
    96f2:	ad 2e       	mov	r10, r29
    96f4:	bc 2e       	mov	r11, r28
  if(t<autotemp_min)
    t=autotemp_min;
  if(t>autotemp_max)
    96f6:	00 91 46 02 	lds	r16, 0x0246
    96fa:	10 91 47 02 	lds	r17, 0x0247
    96fe:	d0 91 48 02 	lds	r29, 0x0248
    9702:	c0 91 49 02 	lds	r28, 0x0249
    9706:	28 2d       	mov	r18, r8
    9708:	39 2d       	mov	r19, r9
    970a:	4a 2d       	mov	r20, r10
    970c:	5b 2d       	mov	r21, r11
    970e:	60 2f       	mov	r22, r16
    9710:	71 2f       	mov	r23, r17
    9712:	8d 2f       	mov	r24, r29
    9714:	9c 2f       	mov	r25, r28
    9716:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    971a:	88 23       	and	r24, r24
    971c:	24 f0       	brlt	.+8      	; 0x9726 <_Z13getHighESpeedv+0x1e8>
    971e:	08 2d       	mov	r16, r8
    9720:	19 2d       	mov	r17, r9
    9722:	da 2d       	mov	r29, r10
    9724:	cb 2d       	mov	r28, r11
    t=autotemp_max;
  if(oldt>t)
    9726:	c0 90 ae 0e 	lds	r12, 0x0EAE
    972a:	d0 90 af 0e 	lds	r13, 0x0EAF
    972e:	e0 90 b0 0e 	lds	r14, 0x0EB0
    9732:	f0 90 b1 0e 	lds	r15, 0x0EB1
    9736:	20 2f       	mov	r18, r16
    9738:	31 2f       	mov	r19, r17
    973a:	4d 2f       	mov	r20, r29
    973c:	5c 2f       	mov	r21, r28
    973e:	c7 01       	movw	r24, r14
    9740:	b6 01       	movw	r22, r12
    9742:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    9746:	18 16       	cp	r1, r24
    9748:	04 f5       	brge	.+64     	; 0x978a <_Z13getHighESpeedv+0x24c>
  {
    t=AUTOTEMP_OLDWEIGHT*oldt+(1-AUTOTEMP_OLDWEIGHT)*t;
    974a:	20 e0       	ldi	r18, 0x00	; 0
    974c:	37 ed       	ldi	r19, 0xD7	; 215
    974e:	43 ea       	ldi	r20, 0xA3	; 163
    9750:	5c e3       	ldi	r21, 0x3C	; 60
    9752:	60 2f       	mov	r22, r16
    9754:	71 2f       	mov	r23, r17
    9756:	8d 2f       	mov	r24, r29
    9758:	9c 2f       	mov	r25, r28
    975a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    975e:	06 2f       	mov	r16, r22
    9760:	17 2f       	mov	r17, r23
    9762:	d8 2f       	mov	r29, r24
    9764:	c9 2f       	mov	r28, r25
    9766:	28 e4       	ldi	r18, 0x48	; 72
    9768:	31 ee       	ldi	r19, 0xE1	; 225
    976a:	4a e7       	ldi	r20, 0x7A	; 122
    976c:	5f e3       	ldi	r21, 0x3F	; 63
    976e:	c7 01       	movw	r24, r14
    9770:	b6 01       	movw	r22, r12
    9772:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9776:	20 2f       	mov	r18, r16
    9778:	31 2f       	mov	r19, r17
    977a:	4d 2f       	mov	r20, r29
    977c:	5c 2f       	mov	r21, r28
    977e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    9782:	06 2f       	mov	r16, r22
    9784:	17 2f       	mov	r17, r23
    9786:	d8 2f       	mov	r29, r24
    9788:	c9 2f       	mov	r28, r25
  }
  oldt=t;
    978a:	40 2f       	mov	r20, r16
    978c:	51 2f       	mov	r21, r17
    978e:	6d 2f       	mov	r22, r29
    9790:	7c 2f       	mov	r23, r28
    9792:	40 93 ae 0e 	sts	0x0EAE, r20
    9796:	50 93 af 0e 	sts	0x0EAF, r21
    979a:	60 93 b0 0e 	sts	0x0EB0, r22
    979e:	70 93 b1 0e 	sts	0x0EB1, r23
FORCE_INLINE float degTargetBed() {   
  return target_temperature_bed;
};

FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  
  target_temperature[extruder] = celsius;
    97a2:	60 2f       	mov	r22, r16
    97a4:	71 2f       	mov	r23, r17
    97a6:	8d 2f       	mov	r24, r29
    97a8:	9c 2f       	mov	r25, r28
    97aa:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    97ae:	70 93 1a 11 	sts	0x111A, r23
    97b2:	60 93 19 11 	sts	0x1119, r22
  setTargetHotend0(t);
}
    97b6:	df 91       	pop	r29
    97b8:	cf 91       	pop	r28
    97ba:	1f 91       	pop	r17
    97bc:	0f 91       	pop	r16
    97be:	ff 90       	pop	r15
    97c0:	ef 90       	pop	r14
    97c2:	df 90       	pop	r13
    97c4:	cf 90       	pop	r12
    97c6:	bf 90       	pop	r11
    97c8:	af 90       	pop	r10
    97ca:	9f 90       	pop	r9
    97cc:	8f 90       	pop	r8
    97ce:	7f 90       	pop	r7
    97d0:	6f 90       	pop	r6
    97d2:	5f 90       	pop	r5
    97d4:	4f 90       	pop	r4
    97d6:	08 95       	ret

000097d8 <_Z19check_axes_activityv>:
{
  unsigned char x_active = 0;
  unsigned char y_active = 0;  
  unsigned char z_active = 0;
  unsigned char e_active = 0;
  unsigned char tail_fan_speed = fanSpeed;
    97d8:	60 91 61 05 	lds	r22, 0x0561
  unsigned char tail_valve_pressure = ValvePressure;
  unsigned char tail_e_to_p_pressure = EtoPPressure;
  #endif
  block_t *block;

  if(block_buffer_tail != block_buffer_head)
    97dc:	90 91 57 09 	lds	r25, 0x0957
    97e0:	80 91 58 09 	lds	r24, 0x0958
    97e4:	98 17       	cp	r25, r24
    97e6:	99 f0       	breq	.+38     	; 0x980e <_Z19check_axes_activityv+0x36>
  {
    uint8_t block_index = block_buffer_tail;
    97e8:	80 91 57 09 	lds	r24, 0x0957
    tail_fan_speed = block_buffer[block_index].fan_speed;
    97ec:	9d e4       	ldi	r25, 0x4D	; 77
    97ee:	89 9f       	mul	r24, r25
    97f0:	f0 01       	movw	r30, r0
    97f2:	11 24       	eor	r1, r1
    97f4:	ef 55       	subi	r30, 0x5F	; 95
    97f6:	f6 4f       	sbci	r31, 0xF6	; 246
    97f8:	60 81       	ld	r22, Z
    #ifdef BARICUDA
    tail_valve_pressure = block_buffer[block_index].valve_pressure;
    tail_e_to_p_pressure = block_buffer[block_index].e_to_p_pressure;
    #endif
    while(block_index != block_buffer_head)
    97fa:	90 91 58 09 	lds	r25, 0x0958
    97fe:	89 17       	cp	r24, r25
    9800:	31 f0       	breq	.+12     	; 0x980e <_Z19check_axes_activityv+0x36>
      block = &block_buffer[block_index];
      if(block->steps_x != 0) x_active++;
      if(block->steps_y != 0) y_active++;
      if(block->steps_z != 0) z_active++;
      if(block->steps_e != 0) e_active++;
      block_index = (block_index+1) & (BLOCK_BUFFER_SIZE - 1);
    9802:	8f 5f       	subi	r24, 0xFF	; 255
    9804:	8f 70       	andi	r24, 0x0F	; 15
    tail_fan_speed = block_buffer[block_index].fan_speed;
    #ifdef BARICUDA
    tail_valve_pressure = block_buffer[block_index].valve_pressure;
    tail_e_to_p_pressure = block_buffer[block_index].e_to_p_pressure;
    #endif
    while(block_index != block_buffer_head)
    9806:	90 91 58 09 	lds	r25, 0x0958
    980a:	98 13       	cpse	r25, r24
    980c:	fa cf       	rjmp	.-12     	; 0x9802 <_Z19check_axes_activityv+0x2a>
    }
  #endif//FAN_KICKSTART_TIME
  #ifdef FAN_SOFT_PWM
  fanSpeedSoftPwm = tail_fan_speed;
  #else
  analogWrite(FAN_PIN,tail_fan_speed);
    980e:	70 e0       	ldi	r23, 0x00	; 0
    9810:	87 e0       	ldi	r24, 0x07	; 7
    9812:	0e 94 d6 ba 	call	0x175ac	; 0x175ac <analogWrite>
  #endif//!FAN_SOFT_PWM
#endif//FAN_PIN > -1
#ifdef AUTOTEMP
  getHighESpeed();
    9816:	93 ce       	rjmp	.-730    	; 0x953e <_Z13getHighESpeedv>

00009818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>:
float junction_deviation = 0.1;
// Add a new linear movement to the buffer. steps_x, _y and _z is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(const float &x, const float &y, const float &z, const float &e, float feed_rate, const uint8_t &extruder)
{
    9818:	2f 92       	push	r2
    981a:	3f 92       	push	r3
    981c:	4f 92       	push	r4
    981e:	5f 92       	push	r5
    9820:	6f 92       	push	r6
    9822:	7f 92       	push	r7
    9824:	8f 92       	push	r8
    9826:	9f 92       	push	r9
    9828:	af 92       	push	r10
    982a:	bf 92       	push	r11
    982c:	cf 92       	push	r12
    982e:	df 92       	push	r13
    9830:	ef 92       	push	r14
    9832:	ff 92       	push	r15
    9834:	0f 93       	push	r16
    9836:	1f 93       	push	r17
    9838:	cf 93       	push	r28
    983a:	df 93       	push	r29
    983c:	cd b7       	in	r28, 0x3d	; 61
    983e:	de b7       	in	r29, 0x3e	; 62
    9840:	cb 56       	subi	r28, 0x6B	; 107
    9842:	d1 09       	sbc	r29, r1
    9844:	0f b6       	in	r0, 0x3f	; 63
    9846:	f8 94       	cli
    9848:	de bf       	out	0x3e, r29	; 62
    984a:	0f be       	out	0x3f, r0	; 63
    984c:	cd bf       	out	0x3d, r28	; 61
    984e:	3c 01       	movw	r6, r24
    9850:	5b 01       	movw	r10, r22
    9852:	4a 01       	movw	r8, r20
    9854:	29 01       	movw	r4, r18
    9856:	ef aa       	std	Y+55, r14	; 0x37
    9858:	f8 ae       	std	Y+56, r15	; 0x38
    985a:	26 96       	adiw	r28, 0x06	; 6
    985c:	0f af       	std	Y+63, r16	; 0x3f
    985e:	26 97       	sbiw	r28, 0x06	; 6
    9860:	2a 96       	adiw	r28, 0x0a	; 10
    9862:	1f af       	std	Y+63, r17	; 0x3f
    9864:	2a 97       	sbiw	r28, 0x0a	; 10
    9866:	86 01       	movw	r16, r12
  // Calculate the buffer head after we push this byte
  int next_buffer_head = next_block_index(block_buffer_head);
    9868:	80 91 58 09 	lds	r24, 0x0958
    986c:	14 da       	rcall	.-3032   	; 0x8c96 <_ZL16next_block_indexa>
    986e:	a0 96       	adiw	r28, 0x20	; 32
    9870:	8f af       	std	Y+63, r24	; 0x3f
    9872:	a0 97       	sbiw	r28, 0x20	; 32
    9874:	e8 2e       	mov	r14, r24
    9876:	ff 24       	eor	r15, r15
    9878:	e7 fc       	sbrc	r14, 7
    987a:	f0 94       	com	r15

  // If the buffer is full: good! That means we are well ahead of the robot. 
  // Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head)
    987c:	80 91 57 09 	lds	r24, 0x0957
    9880:	90 e0       	ldi	r25, 0x00	; 0
    9882:	e8 16       	cp	r14, r24
    9884:	f9 06       	cpc	r15, r25
    9886:	61 f4       	brne	.+24     	; 0x98a0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x88>
  {
    manage_heater(); 
    9888:	0e 94 3f 73 	call	0xe67e	; 0xe67e <_Z13manage_heaterv>
    manage_inactivity(); 
    988c:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_Z17manage_inactivityv>
    lcd_update();
    9890:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
  // Calculate the buffer head after we push this byte
  int next_buffer_head = next_block_index(block_buffer_head);

  // If the buffer is full: good! That means we are well ahead of the robot. 
  // Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head)
    9894:	80 91 57 09 	lds	r24, 0x0957
    9898:	90 e0       	ldi	r25, 0x00	; 0
    989a:	e8 16       	cp	r14, r24
    989c:	f9 06       	cpc	r15, r25
    989e:	a1 f3       	breq	.-24     	; 0x9888 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x70>

  // The target position of the tool in absolute steps
  // Calculate target position in absolute steps
  //this should be done after the wait, because otherwise a M92 code within the gcode disrupts this calculation somehow
  long target[4];
  target[X_AXIS] = lround(x*axis_steps_per_unit[X_AXIS]);
    98a0:	20 91 76 0e 	lds	r18, 0x0E76
    98a4:	30 91 77 0e 	lds	r19, 0x0E77
    98a8:	40 91 78 0e 	lds	r20, 0x0E78
    98ac:	50 91 79 0e 	lds	r21, 0x0E79
    98b0:	d3 01       	movw	r26, r6
    98b2:	6d 91       	ld	r22, X+
    98b4:	7d 91       	ld	r23, X+
    98b6:	8d 91       	ld	r24, X+
    98b8:	9c 91       	ld	r25, X
    98ba:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    98be:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    98c2:	69 af       	std	Y+57, r22	; 0x39
    98c4:	7a af       	std	Y+58, r23	; 0x3a
    98c6:	8b af       	std	Y+59, r24	; 0x3b
    98c8:	9c af       	std	Y+60, r25	; 0x3c
  target[Y_AXIS] = lround(y*axis_steps_per_unit[Y_AXIS]);
    98ca:	20 91 7a 0e 	lds	r18, 0x0E7A
    98ce:	30 91 7b 0e 	lds	r19, 0x0E7B
    98d2:	40 91 7c 0e 	lds	r20, 0x0E7C
    98d6:	50 91 7d 0e 	lds	r21, 0x0E7D
    98da:	f5 01       	movw	r30, r10
    98dc:	60 81       	ld	r22, Z
    98de:	71 81       	ldd	r23, Z+1	; 0x01
    98e0:	82 81       	ldd	r24, Z+2	; 0x02
    98e2:	93 81       	ldd	r25, Z+3	; 0x03
    98e4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    98e8:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    98ec:	6d af       	std	Y+61, r22	; 0x3d
    98ee:	7e af       	std	Y+62, r23	; 0x3e
    98f0:	8f af       	std	Y+63, r24	; 0x3f
    98f2:	21 96       	adiw	r28, 0x01	; 1
    98f4:	9f af       	std	Y+63, r25	; 0x3f
    98f6:	21 97       	sbiw	r28, 0x01	; 1
  target[Z_AXIS] = lround(z*axis_steps_per_unit[Z_AXIS]);     
    98f8:	20 91 7e 0e 	lds	r18, 0x0E7E
    98fc:	30 91 7f 0e 	lds	r19, 0x0E7F
    9900:	40 91 80 0e 	lds	r20, 0x0E80
    9904:	50 91 81 0e 	lds	r21, 0x0E81
    9908:	d4 01       	movw	r26, r8
    990a:	6d 91       	ld	r22, X+
    990c:	7d 91       	ld	r23, X+
    990e:	8d 91       	ld	r24, X+
    9910:	9c 91       	ld	r25, X
    9912:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9916:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    991a:	22 96       	adiw	r28, 0x02	; 2
    991c:	6f af       	std	Y+63, r22	; 0x3f
    991e:	22 97       	sbiw	r28, 0x02	; 2
    9920:	23 96       	adiw	r28, 0x03	; 3
    9922:	7f af       	std	Y+63, r23	; 0x3f
    9924:	23 97       	sbiw	r28, 0x03	; 3
    9926:	24 96       	adiw	r28, 0x04	; 4
    9928:	8f af       	std	Y+63, r24	; 0x3f
    992a:	24 97       	sbiw	r28, 0x04	; 4
    992c:	25 96       	adiw	r28, 0x05	; 5
    992e:	9f af       	std	Y+63, r25	; 0x3f
    9930:	25 97       	sbiw	r28, 0x05	; 5
  target[E_AXIS] = lround(e*axis_steps_per_unit[E_AXIS]);
    9932:	20 91 82 0e 	lds	r18, 0x0E82
    9936:	30 91 83 0e 	lds	r19, 0x0E83
    993a:	40 91 84 0e 	lds	r20, 0x0E84
    993e:	50 91 85 0e 	lds	r21, 0x0E85
    9942:	f2 01       	movw	r30, r4
    9944:	60 81       	ld	r22, Z
    9946:	71 81       	ldd	r23, Z+1	; 0x01
    9948:	82 81       	ldd	r24, Z+2	; 0x02
    994a:	93 81       	ldd	r25, Z+3	; 0x03
    994c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9950:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    9954:	6b ab       	std	Y+51, r22	; 0x33
    9956:	7c ab       	std	Y+52, r23	; 0x34
    9958:	8d ab       	std	Y+53, r24	; 0x35
    995a:	9e ab       	std	Y+54, r25	; 0x36

  #ifdef PREVENT_DANGEROUS_EXTRUDE
  if(target[E_AXIS]!=position[E_AXIS])
    995c:	80 91 36 0e 	lds	r24, 0x0E36
    9960:	90 91 37 0e 	lds	r25, 0x0E37
    9964:	a0 91 38 0e 	lds	r26, 0x0E38
    9968:	b0 91 39 0e 	lds	r27, 0x0E39
    996c:	2b a9       	ldd	r18, Y+51	; 0x33
    996e:	3c a9       	ldd	r19, Y+52	; 0x34
    9970:	4d a9       	ldd	r20, Y+53	; 0x35
    9972:	5e a9       	ldd	r21, Y+54	; 0x36
    9974:	28 17       	cp	r18, r24
    9976:	39 07       	cpc	r19, r25
    9978:	4a 07       	cpc	r20, r26
    997a:	5b 07       	cpc	r21, r27
    997c:	09 f4       	brne	.+2      	; 0x9980 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x168>
    997e:	cb c0       	rjmp	.+406    	; 0x9b16 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2fe>
//high level conversion routines, for use outside of temperature.cpp
//inline so that there is no performance decrease.
//deg=degreeCelsius

FORCE_INLINE float degHotend(uint8_t extruder) {  
  return current_temperature[extruder];
    9980:	e0 91 63 05 	lds	r30, 0x0563
    9984:	f0 e0       	ldi	r31, 0x00	; 0
    9986:	ee 0f       	add	r30, r30
    9988:	ff 1f       	adc	r31, r31
    998a:	ee 0f       	add	r30, r30
    998c:	ff 1f       	adc	r31, r31
    998e:	ef 5e       	subi	r30, 0xEF	; 239
    9990:	fe 4e       	sbci	r31, 0xEE	; 238
  {
    if(degHotend(active_extruder)<extrude_min_temp)
    9992:	20 81       	ld	r18, Z
    9994:	31 81       	ldd	r19, Z+1	; 0x01
    9996:	42 81       	ldd	r20, Z+2	; 0x02
    9998:	53 81       	ldd	r21, Z+3	; 0x03
    999a:	60 91 3a 02 	lds	r22, 0x023A
    999e:	70 91 3b 02 	lds	r23, 0x023B
    99a2:	80 91 3c 02 	lds	r24, 0x023C
    99a6:	90 91 3d 02 	lds	r25, 0x023D
    99aa:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    99ae:	18 16       	cp	r1, r24
    99b0:	0c f0       	brlt	.+2      	; 0x99b4 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x19c>
    99b2:	3e c0       	rjmp	.+124    	; 0x9a30 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x218>
    {
      position[E_AXIS]=target[E_AXIS]; //behave as if the move really took place, but ignore E part
    99b4:	8b a9       	ldd	r24, Y+51	; 0x33
    99b6:	9c a9       	ldd	r25, Y+52	; 0x34
    99b8:	ad a9       	ldd	r26, Y+53	; 0x35
    99ba:	be a9       	ldd	r27, Y+54	; 0x36
    99bc:	80 93 36 0e 	sts	0x0E36, r24
    99c0:	90 93 37 0e 	sts	0x0E37, r25
    99c4:	a0 93 38 0e 	sts	0x0E38, r26
    99c8:	b0 93 39 0e 	sts	0x0E39, r27


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    99cc:	e7 e1       	ldi	r30, 0x17	; 23
    99ce:	f8 e0       	ldi	r31, 0x08	; 8
    99d0:	34 91       	lpm	r19, Z
  while(ch)
    99d2:	33 23       	and	r19, r19
    99d4:	81 f0       	breq	.+32     	; 0x99f6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1de>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    99d6:	a0 ec       	ldi	r26, 0xC0	; 192
    99d8:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    99da:	86 ec       	ldi	r24, 0xC6	; 198
    99dc:	90 e0       	ldi	r25, 0x00	; 0
    99de:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    99e0:	2c 91       	ld	r18, X
    99e2:	25 ff       	sbrs	r18, 5
    99e4:	fd cf       	rjmp	.-6      	; 0x99e0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1c8>
        ;

      M_UDRx = c;
    99e6:	fc 01       	movw	r30, r24
    99e8:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    99ea:	4f 5f       	subi	r20, 0xFF	; 255
    99ec:	5f 4f       	sbci	r21, 0xFF	; 255
    99ee:	fa 01       	movw	r30, r20
    99f0:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    99f2:	31 11       	cpse	r19, r1
    99f4:	f5 cf       	rjmp	.-22     	; 0x99e0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1c8>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    99f6:	ed e1       	ldi	r30, 0x1D	; 29
    99f8:	f8 e0       	ldi	r31, 0x08	; 8
    99fa:	34 91       	lpm	r19, Z
  while(ch)
    99fc:	33 23       	and	r19, r19
    99fe:	81 f0       	breq	.+32     	; 0x9a20 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x208>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9a00:	a0 ec       	ldi	r26, 0xC0	; 192
    9a02:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    9a04:	86 ec       	ldi	r24, 0xC6	; 198
    9a06:	90 e0       	ldi	r25, 0x00	; 0
    9a08:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9a0a:	2c 91       	ld	r18, X
    9a0c:	25 ff       	sbrs	r18, 5
    9a0e:	fd cf       	rjmp	.-6      	; 0x9a0a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1f2>
        ;

      M_UDRx = c;
    9a10:	fc 01       	movw	r30, r24
    9a12:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    9a14:	4f 5f       	subi	r20, 0xFF	; 255
    9a16:	5f 4f       	sbci	r21, 0xFF	; 255
    9a18:	fa 01       	movw	r30, r20
    9a1a:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    9a1c:	31 11       	cpse	r19, r1
    9a1e:	f5 cf       	rjmp	.-22     	; 0x9a0a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1f2>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9a20:	e0 ec       	ldi	r30, 0xC0	; 192
    9a22:	f0 e0       	ldi	r31, 0x00	; 0
    9a24:	80 81       	ld	r24, Z
    9a26:	85 ff       	sbrs	r24, 5
    9a28:	fd cf       	rjmp	.-6      	; 0x9a24 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x20c>
        ;

      M_UDRx = c;
    9a2a:	8a e0       	ldi	r24, 0x0A	; 10
    9a2c:	80 93 c6 00 	sts	0x00C6, r24
      SERIAL_ECHO_START;
      SERIAL_ECHOLNPGM(MSG_ERR_COLD_EXTRUDE_STOP);
    }
    
    #ifdef PREVENT_LENGTHY_EXTRUDE
    if(labs(target[E_AXIS]-position[E_AXIS])>axis_steps_per_unit[E_AXIS]*EXTRUDE_MAXLENGTH)
    9a30:	80 91 36 0e 	lds	r24, 0x0E36
    9a34:	90 91 37 0e 	lds	r25, 0x0E37
    9a38:	a0 91 38 0e 	lds	r26, 0x0E38
    9a3c:	b0 91 39 0e 	lds	r27, 0x0E39
    9a40:	2b a9       	ldd	r18, Y+51	; 0x33
    9a42:	3c a9       	ldd	r19, Y+52	; 0x34
    9a44:	4d a9       	ldd	r20, Y+53	; 0x35
    9a46:	5e a9       	ldd	r21, Y+54	; 0x36
    9a48:	28 1b       	sub	r18, r24
    9a4a:	39 0b       	sbc	r19, r25
    9a4c:	4a 0b       	sbc	r20, r26
    9a4e:	5b 0b       	sbc	r21, r27
    9a50:	ca 01       	movw	r24, r20
    9a52:	b9 01       	movw	r22, r18
    9a54:	3a f4       	brpl	.+14     	; 0x9a64 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x24c>
    9a56:	90 95       	com	r25
    9a58:	80 95       	com	r24
    9a5a:	70 95       	com	r23
    9a5c:	61 95       	neg	r22
    9a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a60:	8f 4f       	sbci	r24, 0xFF	; 255
    9a62:	9f 4f       	sbci	r25, 0xFF	; 255
    9a64:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    9a68:	6b 01       	movw	r12, r22
    9a6a:	7c 01       	movw	r14, r24
    9a6c:	20 e0       	ldi	r18, 0x00	; 0
    9a6e:	30 e0       	ldi	r19, 0x00	; 0
    9a70:	4d ec       	ldi	r20, 0xCD	; 205
    9a72:	53 e4       	ldi	r21, 0x43	; 67
    9a74:	60 91 82 0e 	lds	r22, 0x0E82
    9a78:	70 91 83 0e 	lds	r23, 0x0E83
    9a7c:	80 91 84 0e 	lds	r24, 0x0E84
    9a80:	90 91 85 0e 	lds	r25, 0x0E85
    9a84:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    9a88:	9b 01       	movw	r18, r22
    9a8a:	ac 01       	movw	r20, r24
    9a8c:	c7 01       	movw	r24, r14
    9a8e:	b6 01       	movw	r22, r12
    9a90:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    9a94:	18 16       	cp	r1, r24
    9a96:	0c f0       	brlt	.+2      	; 0x9a9a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x282>
    9a98:	3e c0       	rjmp	.+124    	; 0x9b16 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2fe>
    {
      position[E_AXIS]=target[E_AXIS]; //behave as if the move really took place, but ignore E part
    9a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    9a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    9a9e:	ad a9       	ldd	r26, Y+53	; 0x35
    9aa0:	be a9       	ldd	r27, Y+54	; 0x36
    9aa2:	80 93 36 0e 	sts	0x0E36, r24
    9aa6:	90 93 37 0e 	sts	0x0E37, r25
    9aaa:	a0 93 38 0e 	sts	0x0E38, r26
    9aae:	b0 93 39 0e 	sts	0x0E39, r27


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    9ab2:	e7 e1       	ldi	r30, 0x17	; 23
    9ab4:	f8 e0       	ldi	r31, 0x08	; 8
    9ab6:	34 91       	lpm	r19, Z
  while(ch)
    9ab8:	33 23       	and	r19, r19
    9aba:	81 f0       	breq	.+32     	; 0x9adc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2c4>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9abc:	a0 ec       	ldi	r26, 0xC0	; 192
    9abe:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    9ac0:	86 ec       	ldi	r24, 0xC6	; 198
    9ac2:	90 e0       	ldi	r25, 0x00	; 0
    9ac4:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9ac6:	2c 91       	ld	r18, X
    9ac8:	25 ff       	sbrs	r18, 5
    9aca:	fd cf       	rjmp	.-6      	; 0x9ac6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2ae>
        ;

      M_UDRx = c;
    9acc:	fc 01       	movw	r30, r24
    9ace:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    9ad0:	4f 5f       	subi	r20, 0xFF	; 255
    9ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    9ad4:	fa 01       	movw	r30, r20
    9ad6:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    9ad8:	31 11       	cpse	r19, r1
    9ada:	f5 cf       	rjmp	.-22     	; 0x9ac6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2ae>


//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
    9adc:	e7 e3       	ldi	r30, 0x37	; 55
    9ade:	f8 e0       	ldi	r31, 0x08	; 8
    9ae0:	34 91       	lpm	r19, Z
  while(ch)
    9ae2:	33 23       	and	r19, r19
    9ae4:	81 f0       	breq	.+32     	; 0x9b06 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2ee>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9ae6:	a0 ec       	ldi	r26, 0xC0	; 192
    9ae8:	b0 e0       	ldi	r27, 0x00	; 0
        ;

      M_UDRx = c;
    9aea:	86 ec       	ldi	r24, 0xC6	; 198
    9aec:	90 e0       	ldi	r25, 0x00	; 0
    9aee:	af 01       	movw	r20, r30
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9af0:	2c 91       	ld	r18, X
    9af2:	25 ff       	sbrs	r18, 5
    9af4:	fd cf       	rjmp	.-6      	; 0x9af0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2d8>
        ;

      M_UDRx = c;
    9af6:	fc 01       	movw	r30, r24
    9af8:	30 83       	st	Z, r19
  {
    MYSERIAL.write(ch);
    ch=pgm_read_byte(++str);
    9afa:	4f 5f       	subi	r20, 0xFF	; 255
    9afc:	5f 4f       	sbci	r21, 0xFF	; 255
    9afe:	fa 01       	movw	r30, r20
    9b00:	34 91       	lpm	r19, Z

//things to write to serial from Programmemory. saves 400 to 2k of RAM.
FORCE_INLINE void serialprintPGM(const char *str)
{
  char ch=pgm_read_byte(str);
  while(ch)
    9b02:	31 11       	cpse	r19, r1
    9b04:	f5 cf       	rjmp	.-22     	; 0x9af0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2d8>
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    9b06:	e0 ec       	ldi	r30, 0xC0	; 192
    9b08:	f0 e0       	ldi	r31, 0x00	; 0
    9b0a:	80 81       	ld	r24, Z
    9b0c:	85 ff       	sbrs	r24, 5
    9b0e:	fd cf       	rjmp	.-6      	; 0x9b0a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x2f2>
        ;

      M_UDRx = c;
    9b10:	8a e0       	ldi	r24, 0x0A	; 10
    9b12:	80 93 c6 00 	sts	0x00C6, r24
    #endif
  }
  #endif

  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    9b16:	80 91 58 09 	lds	r24, 0x0958
    9b1a:	fd e4       	ldi	r31, 0x4D	; 77
    9b1c:	8f 9f       	mul	r24, r31
    9b1e:	c0 01       	movw	r24, r0
    9b20:	11 24       	eor	r1, r1
    9b22:	0f 2e       	mov	r0, r31
    9b24:	f9 e5       	ldi	r31, 0x59	; 89
    9b26:	2f 2e       	mov	r2, r31
    9b28:	f9 e0       	ldi	r31, 0x09	; 9
    9b2a:	3f 2e       	mov	r3, r31
    9b2c:	f0 2d       	mov	r31, r0
    9b2e:	28 0e       	add	r2, r24
    9b30:	39 1e       	adc	r3, r25

  // Mark block as not busy (Not executed by the stepper interrupt)
  block->busy = false;
    9b32:	f1 01       	movw	r30, r2
    9b34:	e4 5b       	subi	r30, 0xB4	; 180
    9b36:	ff 4f       	sbci	r31, 0xFF	; 255
    9b38:	10 82       	st	Z, r1

  // Number of steps for each axis
#ifndef COREXY
// default non-h-bot planning
block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    9b3a:	20 91 2a 0e 	lds	r18, 0x0E2A
    9b3e:	30 91 2b 0e 	lds	r19, 0x0E2B
    9b42:	40 91 2c 0e 	lds	r20, 0x0E2C
    9b46:	50 91 2d 0e 	lds	r21, 0x0E2D
    9b4a:	2b a3       	std	Y+35, r18	; 0x23
    9b4c:	3c a3       	std	Y+36, r19	; 0x24
    9b4e:	4d a3       	std	Y+37, r20	; 0x25
    9b50:	5e a3       	std	Y+38, r21	; 0x26
    9b52:	89 ad       	ldd	r24, Y+57	; 0x39
    9b54:	9a ad       	ldd	r25, Y+58	; 0x3a
    9b56:	ab ad       	ldd	r26, Y+59	; 0x3b
    9b58:	bc ad       	ldd	r27, Y+60	; 0x3c
    9b5a:	82 1b       	sub	r24, r18
    9b5c:	93 0b       	sbc	r25, r19
    9b5e:	a4 0b       	sbc	r26, r20
    9b60:	b5 0b       	sbc	r27, r21
    9b62:	3a f4       	brpl	.+14     	; 0x9b72 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x35a>
    9b64:	b0 95       	com	r27
    9b66:	a0 95       	com	r26
    9b68:	90 95       	com	r25
    9b6a:	81 95       	neg	r24
    9b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b6e:	af 4f       	sbci	r26, 0xFF	; 255
    9b70:	bf 4f       	sbci	r27, 0xFF	; 255
    9b72:	2c 01       	movw	r4, r24
    9b74:	3d 01       	movw	r6, r26
    9b76:	f1 01       	movw	r30, r2
    9b78:	80 83       	st	Z, r24
    9b7a:	91 83       	std	Z+1, r25	; 0x01
    9b7c:	a2 83       	std	Z+2, r26	; 0x02
    9b7e:	b3 83       	std	Z+3, r27	; 0x03
block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    9b80:	20 91 2e 0e 	lds	r18, 0x0E2E
    9b84:	30 91 2f 0e 	lds	r19, 0x0E2F
    9b88:	40 91 30 0e 	lds	r20, 0x0E30
    9b8c:	50 91 31 0e 	lds	r21, 0x0E31
    9b90:	2f a3       	std	Y+39, r18	; 0x27
    9b92:	38 a7       	std	Y+40, r19	; 0x28
    9b94:	49 a7       	std	Y+41, r20	; 0x29
    9b96:	5a a7       	std	Y+42, r21	; 0x2a
    9b98:	21 96       	adiw	r28, 0x01	; 1
    9b9a:	8c ad       	ldd	r24, Y+60	; 0x3c
    9b9c:	9d ad       	ldd	r25, Y+61	; 0x3d
    9b9e:	ae ad       	ldd	r26, Y+62	; 0x3e
    9ba0:	bf ad       	ldd	r27, Y+63	; 0x3f
    9ba2:	21 97       	sbiw	r28, 0x01	; 1
    9ba4:	82 1b       	sub	r24, r18
    9ba6:	93 0b       	sbc	r25, r19
    9ba8:	a4 0b       	sbc	r26, r20
    9baa:	b5 0b       	sbc	r27, r21
    9bac:	3a f4       	brpl	.+14     	; 0x9bbc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x3a4>
    9bae:	b0 95       	com	r27
    9bb0:	a0 95       	com	r26
    9bb2:	90 95       	com	r25
    9bb4:	81 95       	neg	r24
    9bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bb8:	af 4f       	sbci	r26, 0xFF	; 255
    9bba:	bf 4f       	sbci	r27, 0xFF	; 255
    9bbc:	4c 01       	movw	r8, r24
    9bbe:	5d 01       	movw	r10, r26
    9bc0:	f1 01       	movw	r30, r2
    9bc2:	84 83       	std	Z+4, r24	; 0x04
    9bc4:	95 83       	std	Z+5, r25	; 0x05
    9bc6:	a6 83       	std	Z+6, r26	; 0x06
    9bc8:	b7 83       	std	Z+7, r27	; 0x07
// corexy planning
// these equations follow the form of the dA and dB equations on http://www.corexy.com/theory.html
block->steps_x = labs((target[X_AXIS]-position[X_AXIS]) + (target[Y_AXIS]-position[Y_AXIS]));
block->steps_y = labs((target[X_AXIS]-position[X_AXIS]) - (target[Y_AXIS]-position[Y_AXIS]));
#endif
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    9bca:	20 91 32 0e 	lds	r18, 0x0E32
    9bce:	30 91 33 0e 	lds	r19, 0x0E33
    9bd2:	40 91 34 0e 	lds	r20, 0x0E34
    9bd6:	50 91 35 0e 	lds	r21, 0x0E35
    9bda:	2b a7       	std	Y+43, r18	; 0x2b
    9bdc:	3c a7       	std	Y+44, r19	; 0x2c
    9bde:	4d a7       	std	Y+45, r20	; 0x2d
    9be0:	5e a7       	std	Y+46, r21	; 0x2e
    9be2:	25 96       	adiw	r28, 0x05	; 5
    9be4:	8c ad       	ldd	r24, Y+60	; 0x3c
    9be6:	9d ad       	ldd	r25, Y+61	; 0x3d
    9be8:	ae ad       	ldd	r26, Y+62	; 0x3e
    9bea:	bf ad       	ldd	r27, Y+63	; 0x3f
    9bec:	25 97       	sbiw	r28, 0x05	; 5
    9bee:	82 1b       	sub	r24, r18
    9bf0:	93 0b       	sbc	r25, r19
    9bf2:	a4 0b       	sbc	r26, r20
    9bf4:	b5 0b       	sbc	r27, r21
    9bf6:	3a f4       	brpl	.+14     	; 0x9c06 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x3ee>
    9bf8:	b0 95       	com	r27
    9bfa:	a0 95       	com	r26
    9bfc:	90 95       	com	r25
    9bfe:	81 95       	neg	r24
    9c00:	9f 4f       	sbci	r25, 0xFF	; 255
    9c02:	af 4f       	sbci	r26, 0xFF	; 255
    9c04:	bf 4f       	sbci	r27, 0xFF	; 255
    9c06:	6c 01       	movw	r12, r24
    9c08:	7d 01       	movw	r14, r26
    9c0a:	f1 01       	movw	r30, r2
    9c0c:	80 87       	std	Z+8, r24	; 0x08
    9c0e:	91 87       	std	Z+9, r25	; 0x09
    9c10:	a2 87       	std	Z+10, r26	; 0x0a
    9c12:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_e = labs(target[E_AXIS]-position[E_AXIS]);
    9c14:	20 91 36 0e 	lds	r18, 0x0E36
    9c18:	30 91 37 0e 	lds	r19, 0x0E37
    9c1c:	40 91 38 0e 	lds	r20, 0x0E38
    9c20:	50 91 39 0e 	lds	r21, 0x0E39
    9c24:	2f a7       	std	Y+47, r18	; 0x2f
    9c26:	38 ab       	std	Y+48, r19	; 0x30
    9c28:	49 ab       	std	Y+49, r20	; 0x31
    9c2a:	5a ab       	std	Y+50, r21	; 0x32
    9c2c:	2b a9       	ldd	r18, Y+51	; 0x33
    9c2e:	3c a9       	ldd	r19, Y+52	; 0x34
    9c30:	4d a9       	ldd	r20, Y+53	; 0x35
    9c32:	5e a9       	ldd	r21, Y+54	; 0x36
    9c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    9c36:	98 a9       	ldd	r25, Y+48	; 0x30
    9c38:	a9 a9       	ldd	r26, Y+49	; 0x31
    9c3a:	ba a9       	ldd	r27, Y+50	; 0x32
    9c3c:	28 1b       	sub	r18, r24
    9c3e:	39 0b       	sbc	r19, r25
    9c40:	4a 0b       	sbc	r20, r26
    9c42:	5b 0b       	sbc	r21, r27
    9c44:	3a f4       	brpl	.+14     	; 0x9c54 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x43c>
    9c46:	50 95       	com	r21
    9c48:	40 95       	com	r20
    9c4a:	30 95       	com	r19
    9c4c:	21 95       	neg	r18
    9c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    9c50:	4f 4f       	sbci	r20, 0xFF	; 255
    9c52:	5f 4f       	sbci	r21, 0xFF	; 255
  block->steps_e *= extrudemultiply;
    9c54:	a0 91 1d 02 	lds	r26, 0x021D
    9c58:	b0 91 1e 02 	lds	r27, 0x021E
    9c5c:	0e 94 02 c1 	call	0x18204	; 0x18204 <__mulshisi3>
  block->steps_e /= 100;
    9c60:	24 e6       	ldi	r18, 0x64	; 100
    9c62:	30 e0       	ldi	r19, 0x00	; 0
    9c64:	40 e0       	ldi	r20, 0x00	; 0
    9c66:	50 e0       	ldi	r21, 0x00	; 0
    9c68:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
    9c6c:	d1 01       	movw	r26, r2
    9c6e:	1c 96       	adiw	r26, 0x0c	; 12
    9c70:	2c 93       	st	X, r18
    9c72:	1c 97       	sbiw	r26, 0x0c	; 12
    9c74:	1d 96       	adiw	r26, 0x0d	; 13
    9c76:	3c 93       	st	X, r19
    9c78:	1d 97       	sbiw	r26, 0x0d	; 13
    9c7a:	1e 96       	adiw	r26, 0x0e	; 14
    9c7c:	4c 93       	st	X, r20
    9c7e:	1e 97       	sbiw	r26, 0x0e	; 14
    9c80:	1f 96       	adiw	r26, 0x0f	; 15
    9c82:	5c 93       	st	X, r21
    9c84:	82 2f       	mov	r24, r18
    9c86:	93 2f       	mov	r25, r19
    9c88:	a4 2f       	mov	r26, r20
    9c8a:	b5 2f       	mov	r27, r21
    9c8c:	8c 15       	cp	r24, r12
    9c8e:	9d 05       	cpc	r25, r13
    9c90:	ae 05       	cpc	r26, r14
    9c92:	bf 05       	cpc	r27, r15
    9c94:	14 f4       	brge	.+4      	; 0x9c9a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x482>
    9c96:	d7 01       	movw	r26, r14
    9c98:	c6 01       	movw	r24, r12
    9c9a:	88 15       	cp	r24, r8
    9c9c:	99 05       	cpc	r25, r9
    9c9e:	aa 05       	cpc	r26, r10
    9ca0:	bb 05       	cpc	r27, r11
    9ca2:	14 f4       	brge	.+4      	; 0x9ca8 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x490>
    9ca4:	d5 01       	movw	r26, r10
    9ca6:	c4 01       	movw	r24, r8
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_e)));
    9ca8:	84 15       	cp	r24, r4
    9caa:	95 05       	cpc	r25, r5
    9cac:	a6 05       	cpc	r26, r6
    9cae:	b7 05       	cpc	r27, r7
    9cb0:	14 f4       	brge	.+4      	; 0x9cb6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x49e>
    9cb2:	d3 01       	movw	r26, r6
    9cb4:	c2 01       	movw	r24, r4
    9cb6:	f1 01       	movw	r30, r2
    9cb8:	80 8b       	std	Z+16, r24	; 0x10
    9cba:	91 8b       	std	Z+17, r25	; 0x11
    9cbc:	a2 8b       	std	Z+18, r26	; 0x12
    9cbe:	b3 8b       	std	Z+19, r27	; 0x13

  // Bail if this is a zero-length block
  if (block->step_event_count <= dropsegments)
    9cc0:	06 97       	sbiw	r24, 0x06	; 6
    9cc2:	a1 05       	cpc	r26, r1
    9cc4:	b1 05       	cpc	r27, r1
    9cc6:	10 f4       	brcc	.+4      	; 0x9ccc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x4b4>
    9cc8:	0c 94 ca 56 	jmp	0xad94	; 0xad94 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x157c>
  { 
    return; 
  }

  block->fan_speed = fanSpeed;
    9ccc:	e8 5b       	subi	r30, 0xB8	; 184
    9cce:	ff 4f       	sbci	r31, 0xFF	; 255
    9cd0:	80 91 61 05 	lds	r24, 0x0561
    9cd4:	90 91 62 05 	lds	r25, 0x0562
    9cd8:	aa 27       	eor	r26, r26
    9cda:	97 fd       	sbrc	r25, 7
    9cdc:	a0 95       	com	r26
    9cde:	ba 2f       	mov	r27, r26
    9ce0:	80 83       	st	Z, r24
    9ce2:	91 83       	std	Z+1, r25	; 0x01
    9ce4:	a2 83       	std	Z+2, r26	; 0x02
    9ce6:	b3 83       	std	Z+3, r27	; 0x03
  #endif

  // Compute direction bits for this block 
  block->direction_bits = 0;
#ifndef COREXY
  if (target[X_AXIS] < position[X_AXIS])
    9ce8:	29 ad       	ldd	r18, Y+57	; 0x39
    9cea:	3a ad       	ldd	r19, Y+58	; 0x3a
    9cec:	4b ad       	ldd	r20, Y+59	; 0x3b
    9cee:	5c ad       	ldd	r21, Y+60	; 0x3c
    9cf0:	8b a1       	ldd	r24, Y+35	; 0x23
    9cf2:	9c a1       	ldd	r25, Y+36	; 0x24
    9cf4:	ad a1       	ldd	r26, Y+37	; 0x25
    9cf6:	be a1       	ldd	r27, Y+38	; 0x26
    9cf8:	28 17       	cp	r18, r24
    9cfa:	39 07       	cpc	r19, r25
    9cfc:	4a 07       	cpc	r20, r26
    9cfe:	5b 07       	cpc	r21, r27
    9d00:	24 f0       	brlt	.+8      	; 0x9d0a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x4f2>
  block->valve_pressure = ValvePressure;
  block->e_to_p_pressure = EtoPPressure;
  #endif

  // Compute direction bits for this block 
  block->direction_bits = 0;
    9d02:	d1 01       	movw	r26, r2
    9d04:	90 96       	adiw	r26, 0x20	; 32
    9d06:	1c 92       	st	X, r1
    9d08:	03 c0       	rjmp	.+6      	; 0x9d10 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x4f8>
#ifndef COREXY
  if (target[X_AXIS] < position[X_AXIS])
  {
    block->direction_bits |= (1<<X_AXIS); 
    9d0a:	81 e0       	ldi	r24, 0x01	; 1
    9d0c:	f1 01       	movw	r30, r2
    9d0e:	80 a3       	std	Z+32, r24	; 0x20
  }
  if (target[Y_AXIS] < position[Y_AXIS])
    9d10:	21 96       	adiw	r28, 0x01	; 1
    9d12:	2c ad       	ldd	r18, Y+60	; 0x3c
    9d14:	3d ad       	ldd	r19, Y+61	; 0x3d
    9d16:	4e ad       	ldd	r20, Y+62	; 0x3e
    9d18:	5f ad       	ldd	r21, Y+63	; 0x3f
    9d1a:	21 97       	sbiw	r28, 0x01	; 1
    9d1c:	8f a1       	ldd	r24, Y+39	; 0x27
    9d1e:	98 a5       	ldd	r25, Y+40	; 0x28
    9d20:	a9 a5       	ldd	r26, Y+41	; 0x29
    9d22:	ba a5       	ldd	r27, Y+42	; 0x2a
    9d24:	28 17       	cp	r18, r24
    9d26:	39 07       	cpc	r19, r25
    9d28:	4a 07       	cpc	r20, r26
    9d2a:	5b 07       	cpc	r21, r27
    9d2c:	3c f4       	brge	.+14     	; 0x9d3c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x524>
  {
    block->direction_bits |= (1<<Y_AXIS); 
    9d2e:	d1 01       	movw	r26, r2
    9d30:	90 96       	adiw	r26, 0x20	; 32
    9d32:	8c 91       	ld	r24, X
    9d34:	90 97       	sbiw	r26, 0x20	; 32
    9d36:	82 60       	ori	r24, 0x02	; 2
    9d38:	90 96       	adiw	r26, 0x20	; 32
    9d3a:	8c 93       	st	X, r24
  if ((target[X_AXIS]-position[X_AXIS]) - (target[Y_AXIS]-position[Y_AXIS]) < 0)
  {
    block->direction_bits |= (1<<Y_AXIS); 
  }
#endif
  if (target[Z_AXIS] < position[Z_AXIS])
    9d3c:	25 96       	adiw	r28, 0x05	; 5
    9d3e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9d40:	3d ad       	ldd	r19, Y+61	; 0x3d
    9d42:	4e ad       	ldd	r20, Y+62	; 0x3e
    9d44:	5f ad       	ldd	r21, Y+63	; 0x3f
    9d46:	25 97       	sbiw	r28, 0x05	; 5
    9d48:	8b a5       	ldd	r24, Y+43	; 0x2b
    9d4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    9d4c:	ad a5       	ldd	r26, Y+45	; 0x2d
    9d4e:	be a5       	ldd	r27, Y+46	; 0x2e
    9d50:	28 17       	cp	r18, r24
    9d52:	39 07       	cpc	r19, r25
    9d54:	4a 07       	cpc	r20, r26
    9d56:	5b 07       	cpc	r21, r27
    9d58:	3c f4       	brge	.+14     	; 0x9d68 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x550>
  {
    block->direction_bits |= (1<<Z_AXIS); 
    9d5a:	d1 01       	movw	r26, r2
    9d5c:	90 96       	adiw	r26, 0x20	; 32
    9d5e:	8c 91       	ld	r24, X
    9d60:	90 97       	sbiw	r26, 0x20	; 32
    9d62:	84 60       	ori	r24, 0x04	; 4
    9d64:	90 96       	adiw	r26, 0x20	; 32
    9d66:	8c 93       	st	X, r24
  }
  if (target[E_AXIS] < position[E_AXIS])
    9d68:	2b a9       	ldd	r18, Y+51	; 0x33
    9d6a:	3c a9       	ldd	r19, Y+52	; 0x34
    9d6c:	4d a9       	ldd	r20, Y+53	; 0x35
    9d6e:	5e a9       	ldd	r21, Y+54	; 0x36
    9d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    9d72:	98 a9       	ldd	r25, Y+48	; 0x30
    9d74:	a9 a9       	ldd	r26, Y+49	; 0x31
    9d76:	ba a9       	ldd	r27, Y+50	; 0x32
    9d78:	28 17       	cp	r18, r24
    9d7a:	39 07       	cpc	r19, r25
    9d7c:	4a 07       	cpc	r20, r26
    9d7e:	5b 07       	cpc	r21, r27
    9d80:	3c f4       	brge	.+14     	; 0x9d90 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x578>
  {
    block->direction_bits |= (1<<E_AXIS); 
    9d82:	d1 01       	movw	r26, r2
    9d84:	90 96       	adiw	r26, 0x20	; 32
    9d86:	8c 91       	ld	r24, X
    9d88:	90 97       	sbiw	r26, 0x20	; 32
    9d8a:	88 60       	ori	r24, 0x08	; 8
    9d8c:	90 96       	adiw	r26, 0x20	; 32
    9d8e:	8c 93       	st	X, r24
  }

  block->active_extruder = extruder;
    9d90:	f8 01       	movw	r30, r16
    9d92:	80 81       	ld	r24, Z
    9d94:	d1 01       	movw	r26, r2
    9d96:	91 96       	adiw	r26, 0x21	; 33
    9d98:	8c 93       	st	X, r24
  {
    enable_x();
    enable_y();
  }
  #else
  if(block->steps_x != 0) enable_x();
    9d9a:	45 28       	or	r4, r5
    9d9c:	46 28       	or	r4, r6
    9d9e:	47 28       	or	r4, r7
    9da0:	09 f0       	breq	.+2      	; 0x9da4 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x58c>
    9da2:	15 98       	cbi	0x02, 5	; 2
  if(block->steps_y != 0) enable_y();
    9da4:	f1 01       	movw	r30, r2
    9da6:	84 81       	ldd	r24, Z+4	; 0x04
    9da8:	95 81       	ldd	r25, Z+5	; 0x05
    9daa:	a6 81       	ldd	r26, Z+6	; 0x06
    9dac:	b7 81       	ldd	r27, Z+7	; 0x07
    9dae:	89 2b       	or	r24, r25
    9db0:	8a 2b       	or	r24, r26
    9db2:	8b 2b       	or	r24, r27
    9db4:	09 f0       	breq	.+2      	; 0x9db8 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x5a0>
    9db6:	17 98       	cbi	0x02, 7	; 2
  #endif
#ifndef Z_LATE_ENABLE
  if(block->steps_z != 0) enable_z();
    9db8:	f1 01       	movw	r30, r2
    9dba:	80 85       	ldd	r24, Z+8	; 0x08
    9dbc:	91 85       	ldd	r25, Z+9	; 0x09
    9dbe:	a2 85       	ldd	r26, Z+10	; 0x0a
    9dc0:	b3 85       	ldd	r27, Z+11	; 0x0b
    9dc2:	89 2b       	or	r24, r25
    9dc4:	8a 2b       	or	r24, r26
    9dc6:	8b 2b       	or	r24, r27
    9dc8:	09 f0       	breq	.+2      	; 0x9dcc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x5b4>
    9dca:	42 98       	cbi	0x08, 2	; 8
#endif

  // Enable all
  if(block->steps_e != 0)
    9dcc:	d1 01       	movw	r26, r2
    9dce:	1c 96       	adiw	r26, 0x0c	; 12
    9dd0:	2d 91       	ld	r18, X+
    9dd2:	3d 91       	ld	r19, X+
    9dd4:	4d 91       	ld	r20, X+
    9dd6:	5c 91       	ld	r21, X
    9dd8:	1f 97       	sbiw	r26, 0x0f	; 15
    9dda:	6f 96       	adiw	r28, 0x1f	; 31
    9ddc:	2c af       	std	Y+60, r18	; 0x3c
    9dde:	3d af       	std	Y+61, r19	; 0x3d
    9de0:	4e af       	std	Y+62, r20	; 0x3e
    9de2:	5f af       	std	Y+63, r21	; 0x3f
    9de4:	6f 97       	sbiw	r28, 0x1f	; 31
    9de6:	23 2b       	or	r18, r19
    9de8:	24 2b       	or	r18, r20
    9dea:	25 2b       	or	r18, r21
    9dec:	89 f0       	breq	.+34     	; 0x9e10 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x5f8>
  {
    enable_e0();
    9dee:	a0 98       	cbi	0x14, 0	; 20
    enable_e1();
    enable_e2(); 
  }

  if (block->steps_e == 0)
    9df0:	1c 96       	adiw	r26, 0x0c	; 12
    9df2:	2d 91       	ld	r18, X+
    9df4:	3d 91       	ld	r19, X+
    9df6:	4d 91       	ld	r20, X+
    9df8:	5c 91       	ld	r21, X
    9dfa:	1f 97       	sbiw	r26, 0x0f	; 15
    9dfc:	6f 96       	adiw	r28, 0x1f	; 31
    9dfe:	2c af       	std	Y+60, r18	; 0x3c
    9e00:	3d af       	std	Y+61, r19	; 0x3d
    9e02:	4e af       	std	Y+62, r20	; 0x3e
    9e04:	5f af       	std	Y+63, r21	; 0x3f
    9e06:	6f 97       	sbiw	r28, 0x1f	; 31
    9e08:	23 2b       	or	r18, r19
    9e0a:	24 2b       	or	r18, r20
    9e0c:	25 2b       	or	r18, r21
    9e0e:	29 f5       	brne	.+74     	; 0x9e5a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x642>
  {
    if(feed_rate<mintravelfeedrate) feed_rate=mintravelfeedrate;
    9e10:	a0 90 4a 0e 	lds	r10, 0x0E4A
    9e14:	b0 90 4b 0e 	lds	r11, 0x0E4B
    9e18:	00 91 4c 0e 	lds	r16, 0x0E4C
    9e1c:	10 91 4d 0e 	lds	r17, 0x0E4D
    9e20:	7f a9       	ldd	r23, Y+55	; 0x37
    9e22:	68 ad       	ldd	r22, Y+56	; 0x38
    9e24:	26 96       	adiw	r28, 0x06	; 6
    9e26:	9f ad       	ldd	r25, Y+63	; 0x3f
    9e28:	26 97       	sbiw	r28, 0x06	; 6
    9e2a:	2a 96       	adiw	r28, 0x0a	; 10
    9e2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    9e2e:	2a 97       	sbiw	r28, 0x0a	; 10
    9e30:	27 2f       	mov	r18, r23
    9e32:	36 2f       	mov	r19, r22
    9e34:	49 2f       	mov	r20, r25
    9e36:	58 2f       	mov	r21, r24
    9e38:	6a 2d       	mov	r22, r10
    9e3a:	7b 2d       	mov	r23, r11
    9e3c:	80 2f       	mov	r24, r16
    9e3e:	91 2f       	mov	r25, r17
    9e40:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    9e44:	18 16       	cp	r1, r24
    9e46:	6c f1       	brlt	.+90     	; 0x9ea2 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x68a>
    9e48:	af a8       	ldd	r10, Y+55	; 0x37
    9e4a:	b8 ac       	ldd	r11, Y+56	; 0x38
    9e4c:	26 96       	adiw	r28, 0x06	; 6
    9e4e:	0f ad       	ldd	r16, Y+63	; 0x3f
    9e50:	26 97       	sbiw	r28, 0x06	; 6
    9e52:	2a 96       	adiw	r28, 0x0a	; 10
    9e54:	1f ad       	ldd	r17, Y+63	; 0x3f
    9e56:	2a 97       	sbiw	r28, 0x0a	; 10
    9e58:	24 c0       	rjmp	.+72     	; 0x9ea2 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x68a>
  }
  else
  {
    if(feed_rate<minimumfeedrate) feed_rate=minimumfeedrate;
    9e5a:	a0 90 62 0e 	lds	r10, 0x0E62
    9e5e:	b0 90 63 0e 	lds	r11, 0x0E63
    9e62:	00 91 64 0e 	lds	r16, 0x0E64
    9e66:	10 91 65 0e 	lds	r17, 0x0E65
    9e6a:	2a 2d       	mov	r18, r10
    9e6c:	3b 2d       	mov	r19, r11
    9e6e:	40 2f       	mov	r20, r16
    9e70:	51 2f       	mov	r21, r17
    9e72:	bf a9       	ldd	r27, Y+55	; 0x37
    9e74:	a8 ad       	ldd	r26, Y+56	; 0x38
    9e76:	26 96       	adiw	r28, 0x06	; 6
    9e78:	ff ad       	ldd	r31, Y+63	; 0x3f
    9e7a:	26 97       	sbiw	r28, 0x06	; 6
    9e7c:	2a 96       	adiw	r28, 0x0a	; 10
    9e7e:	ef ad       	ldd	r30, Y+63	; 0x3f
    9e80:	2a 97       	sbiw	r28, 0x0a	; 10
    9e82:	6b 2f       	mov	r22, r27
    9e84:	7a 2f       	mov	r23, r26
    9e86:	8f 2f       	mov	r24, r31
    9e88:	9e 2f       	mov	r25, r30
    9e8a:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    9e8e:	88 23       	and	r24, r24
    9e90:	44 f0       	brlt	.+16     	; 0x9ea2 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x68a>
    9e92:	af a8       	ldd	r10, Y+55	; 0x37
    9e94:	b8 ac       	ldd	r11, Y+56	; 0x38
    9e96:	26 96       	adiw	r28, 0x06	; 6
    9e98:	0f ad       	ldd	r16, Y+63	; 0x3f
    9e9a:	26 97       	sbiw	r28, 0x06	; 6
    9e9c:	2a 96       	adiw	r28, 0x0a	; 10
    9e9e:	1f ad       	ldd	r17, Y+63	; 0x3f
    9ea0:	2a 97       	sbiw	r28, 0x0a	; 10
  } 

  float delta_mm[4];
  #ifndef COREXY
    delta_mm[X_AXIS] = (target[X_AXIS]-position[X_AXIS])/axis_steps_per_unit[X_AXIS];
    9ea2:	80 91 2a 0e 	lds	r24, 0x0E2A
    9ea6:	90 91 2b 0e 	lds	r25, 0x0E2B
    9eaa:	a0 91 2c 0e 	lds	r26, 0x0E2C
    9eae:	b0 91 2d 0e 	lds	r27, 0x0E2D
    9eb2:	29 ad       	ldd	r18, Y+57	; 0x39
    9eb4:	3a ad       	ldd	r19, Y+58	; 0x3a
    9eb6:	4b ad       	ldd	r20, Y+59	; 0x3b
    9eb8:	5c ad       	ldd	r21, Y+60	; 0x3c
    9eba:	28 1b       	sub	r18, r24
    9ebc:	39 0b       	sbc	r19, r25
    9ebe:	4a 0b       	sbc	r20, r26
    9ec0:	5b 0b       	sbc	r21, r27
    9ec2:	ca 01       	movw	r24, r20
    9ec4:	b9 01       	movw	r22, r18
    9ec6:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    9eca:	20 91 76 0e 	lds	r18, 0x0E76
    9ece:	30 91 77 0e 	lds	r19, 0x0E77
    9ed2:	40 91 78 0e 	lds	r20, 0x0E78
    9ed6:	50 91 79 0e 	lds	r21, 0x0E79
    9eda:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9ede:	6b a3       	std	Y+35, r22	; 0x23
    9ee0:	7f a3       	std	Y+39, r23	; 0x27
    9ee2:	8b a7       	std	Y+43, r24	; 0x2b
    9ee4:	9f a7       	std	Y+47, r25	; 0x2f
    9ee6:	47 2f       	mov	r20, r23
    9ee8:	38 2f       	mov	r19, r24
    9eea:	29 2f       	mov	r18, r25
    9eec:	86 2f       	mov	r24, r22
    9eee:	94 2f       	mov	r25, r20
    9ef0:	a3 2f       	mov	r26, r19
    9ef2:	b2 2f       	mov	r27, r18
    9ef4:	89 8b       	std	Y+17, r24	; 0x11
    9ef6:	9a 8b       	std	Y+18, r25	; 0x12
    9ef8:	ab 8b       	std	Y+19, r26	; 0x13
    9efa:	bc 8b       	std	Y+20, r27	; 0x14
    delta_mm[Y_AXIS] = (target[Y_AXIS]-position[Y_AXIS])/axis_steps_per_unit[Y_AXIS];
    9efc:	80 91 2e 0e 	lds	r24, 0x0E2E
    9f00:	90 91 2f 0e 	lds	r25, 0x0E2F
    9f04:	a0 91 30 0e 	lds	r26, 0x0E30
    9f08:	b0 91 31 0e 	lds	r27, 0x0E31
    9f0c:	21 96       	adiw	r28, 0x01	; 1
    9f0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9f10:	3d ad       	ldd	r19, Y+61	; 0x3d
    9f12:	4e ad       	ldd	r20, Y+62	; 0x3e
    9f14:	5f ad       	ldd	r21, Y+63	; 0x3f
    9f16:	21 97       	sbiw	r28, 0x01	; 1
    9f18:	28 1b       	sub	r18, r24
    9f1a:	39 0b       	sbc	r19, r25
    9f1c:	4a 0b       	sbc	r20, r26
    9f1e:	5b 0b       	sbc	r21, r27
    9f20:	ca 01       	movw	r24, r20
    9f22:	b9 01       	movw	r22, r18
    9f24:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    9f28:	20 91 7a 0e 	lds	r18, 0x0E7A
    9f2c:	30 91 7b 0e 	lds	r19, 0x0E7B
    9f30:	40 91 7c 0e 	lds	r20, 0x0E7C
    9f34:	50 91 7d 0e 	lds	r21, 0x0E7D
    9f38:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9f3c:	96 2e       	mov	r9, r22
    9f3e:	87 2e       	mov	r8, r23
    9f40:	78 2e       	mov	r7, r24
    9f42:	69 2e       	mov	r6, r25
    9f44:	86 2f       	mov	r24, r22
    9f46:	98 2d       	mov	r25, r8
    9f48:	a7 2d       	mov	r26, r7
    9f4a:	b6 2d       	mov	r27, r6
    9f4c:	8d 8b       	std	Y+21, r24	; 0x15
    9f4e:	9e 8b       	std	Y+22, r25	; 0x16
    9f50:	af 8b       	std	Y+23, r26	; 0x17
    9f52:	b8 8f       	std	Y+24, r27	; 0x18
  #else
    delta_mm[X_AXIS] = ((target[X_AXIS]-position[X_AXIS]) + (target[Y_AXIS]-position[Y_AXIS]))/axis_steps_per_unit[X_AXIS];
    delta_mm[Y_AXIS] = ((target[X_AXIS]-position[X_AXIS]) - (target[Y_AXIS]-position[Y_AXIS]))/axis_steps_per_unit[Y_AXIS];
  #endif
  delta_mm[Z_AXIS] = (target[Z_AXIS]-position[Z_AXIS])/axis_steps_per_unit[Z_AXIS];
    9f54:	80 91 32 0e 	lds	r24, 0x0E32
    9f58:	90 91 33 0e 	lds	r25, 0x0E33
    9f5c:	a0 91 34 0e 	lds	r26, 0x0E34
    9f60:	b0 91 35 0e 	lds	r27, 0x0E35
    9f64:	25 96       	adiw	r28, 0x05	; 5
    9f66:	2c ad       	ldd	r18, Y+60	; 0x3c
    9f68:	3d ad       	ldd	r19, Y+61	; 0x3d
    9f6a:	4e ad       	ldd	r20, Y+62	; 0x3e
    9f6c:	5f ad       	ldd	r21, Y+63	; 0x3f
    9f6e:	25 97       	sbiw	r28, 0x05	; 5
    9f70:	28 1b       	sub	r18, r24
    9f72:	39 0b       	sbc	r19, r25
    9f74:	4a 0b       	sbc	r20, r26
    9f76:	5b 0b       	sbc	r21, r27
    9f78:	ca 01       	movw	r24, r20
    9f7a:	b9 01       	movw	r22, r18
    9f7c:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    9f80:	20 91 7e 0e 	lds	r18, 0x0E7E
    9f84:	30 91 7f 0e 	lds	r19, 0x0E7F
    9f88:	40 91 80 0e 	lds	r20, 0x0E80
    9f8c:	50 91 81 0e 	lds	r21, 0x0E81
    9f90:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9f94:	56 2e       	mov	r5, r22
    9f96:	47 2e       	mov	r4, r23
    9f98:	8f ab       	std	Y+55, r24	; 0x37
    9f9a:	98 af       	std	Y+56, r25	; 0x38
    9f9c:	38 2f       	mov	r19, r24
    9f9e:	29 2f       	mov	r18, r25
    9fa0:	86 2f       	mov	r24, r22
    9fa2:	94 2d       	mov	r25, r4
    9fa4:	a3 2f       	mov	r26, r19
    9fa6:	b2 2f       	mov	r27, r18
    9fa8:	89 8f       	std	Y+25, r24	; 0x19
    9faa:	9a 8f       	std	Y+26, r25	; 0x1a
    9fac:	ab 8f       	std	Y+27, r26	; 0x1b
    9fae:	bc 8f       	std	Y+28, r27	; 0x1c
  delta_mm[E_AXIS] = ((target[E_AXIS]-position[E_AXIS])/axis_steps_per_unit[E_AXIS])*extrudemultiply/100.0;
    9fb0:	80 91 36 0e 	lds	r24, 0x0E36
    9fb4:	90 91 37 0e 	lds	r25, 0x0E37
    9fb8:	a0 91 38 0e 	lds	r26, 0x0E38
    9fbc:	b0 91 39 0e 	lds	r27, 0x0E39
    9fc0:	2b a9       	ldd	r18, Y+51	; 0x33
    9fc2:	3c a9       	ldd	r19, Y+52	; 0x34
    9fc4:	4d a9       	ldd	r20, Y+53	; 0x35
    9fc6:	5e a9       	ldd	r21, Y+54	; 0x36
    9fc8:	28 1b       	sub	r18, r24
    9fca:	39 0b       	sbc	r19, r25
    9fcc:	4a 0b       	sbc	r20, r26
    9fce:	5b 0b       	sbc	r21, r27
    9fd0:	ca 01       	movw	r24, r20
    9fd2:	b9 01       	movw	r22, r18
    9fd4:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    9fd8:	20 91 82 0e 	lds	r18, 0x0E82
    9fdc:	30 91 83 0e 	lds	r19, 0x0E83
    9fe0:	40 91 84 0e 	lds	r20, 0x0E84
    9fe4:	50 91 85 0e 	lds	r21, 0x0E85
    9fe8:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    9fec:	6b 01       	movw	r12, r22
    9fee:	7c 01       	movw	r14, r24
    9ff0:	60 91 1d 02 	lds	r22, 0x021D
    9ff4:	70 91 1e 02 	lds	r23, 0x021E
    9ff8:	88 27       	eor	r24, r24
    9ffa:	77 fd       	sbrc	r23, 7
    9ffc:	80 95       	com	r24
    9ffe:	98 2f       	mov	r25, r24
    a000:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a004:	9b 01       	movw	r18, r22
    a006:	ac 01       	movw	r20, r24
    a008:	c7 01       	movw	r24, r14
    a00a:	b6 01       	movw	r22, r12
    a00c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a010:	20 e0       	ldi	r18, 0x00	; 0
    a012:	30 e0       	ldi	r19, 0x00	; 0
    a014:	48 ec       	ldi	r20, 0xC8	; 200
    a016:	52 e4       	ldi	r21, 0x42	; 66
    a018:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a01c:	f6 2f       	mov	r31, r22
    a01e:	e7 2f       	mov	r30, r23
    a020:	38 2f       	mov	r19, r24
    a022:	29 2f       	mov	r18, r25
    a024:	86 2f       	mov	r24, r22
    a026:	9e 2f       	mov	r25, r30
    a028:	a3 2f       	mov	r26, r19
    a02a:	b2 2f       	mov	r27, r18
    a02c:	4f 2f       	mov	r20, r31
    a02e:	5e 2f       	mov	r21, r30
    a030:	63 2f       	mov	r22, r19
    a032:	72 2f       	mov	r23, r18
    a034:	4d 8f       	std	Y+29, r20	; 0x1d
    a036:	5e 8f       	std	Y+30, r21	; 0x1e
    a038:	6f 8f       	std	Y+31, r22	; 0x1f
    a03a:	78 a3       	std	Y+32, r23	; 0x20
  if ( block->steps_x <=dropsegments && block->steps_y <=dropsegments && block->steps_z <=dropsegments )
    a03c:	f1 01       	movw	r30, r2
    a03e:	20 81       	ld	r18, Z
    a040:	31 81       	ldd	r19, Z+1	; 0x01
    a042:	42 81       	ldd	r20, Z+2	; 0x02
    a044:	53 81       	ldd	r21, Z+3	; 0x03
    a046:	6b 96       	adiw	r28, 0x1b	; 27
    a048:	2c af       	std	Y+60, r18	; 0x3c
    a04a:	3d af       	std	Y+61, r19	; 0x3d
    a04c:	4e af       	std	Y+62, r20	; 0x3e
    a04e:	5f af       	std	Y+63, r21	; 0x3f
    a050:	6b 97       	sbiw	r28, 0x1b	; 27
    a052:	26 30       	cpi	r18, 0x06	; 6
    a054:	31 05       	cpc	r19, r1
    a056:	41 05       	cpc	r20, r1
    a058:	51 05       	cpc	r21, r1
    a05a:	c4 f4       	brge	.+48     	; 0xa08c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x874>
    a05c:	44 81       	ldd	r20, Z+4	; 0x04
    a05e:	55 81       	ldd	r21, Z+5	; 0x05
    a060:	66 81       	ldd	r22, Z+6	; 0x06
    a062:	77 81       	ldd	r23, Z+7	; 0x07
    a064:	46 30       	cpi	r20, 0x06	; 6
    a066:	51 05       	cpc	r21, r1
    a068:	61 05       	cpc	r22, r1
    a06a:	71 05       	cpc	r23, r1
    a06c:	7c f4       	brge	.+30     	; 0xa08c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x874>
    a06e:	40 85       	ldd	r20, Z+8	; 0x08
    a070:	51 85       	ldd	r21, Z+9	; 0x09
    a072:	62 85       	ldd	r22, Z+10	; 0x0a
    a074:	73 85       	ldd	r23, Z+11	; 0x0b
    a076:	46 30       	cpi	r20, 0x06	; 6
    a078:	51 05       	cpc	r21, r1
    a07a:	61 05       	cpc	r22, r1
    a07c:	71 05       	cpc	r23, r1
    a07e:	34 f4       	brge	.+12     	; 0xa08c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x874>
  {
    block->millimeters = fabs(delta_mm[E_AXIS]);
    a080:	bf 77       	andi	r27, 0x7F	; 127
    a082:	86 a7       	std	Z+46, r24	; 0x2e
    a084:	97 a7       	std	Z+47, r25	; 0x2f
    a086:	a0 ab       	std	Z+48, r26	; 0x30
    a088:	b1 ab       	std	Z+49, r27	; 0x31
    a08a:	35 c0       	rjmp	.+106    	; 0xa0f6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x8de>
  } 
  else
  {
    block->millimeters = sqrt(square(delta_mm[X_AXIS]) + square(delta_mm[Y_AXIS]) + square(delta_mm[Z_AXIS]));
    a08c:	5b a1       	ldd	r21, Y+35	; 0x23
    a08e:	4f a1       	ldd	r20, Y+39	; 0x27
    a090:	3b a5       	ldd	r19, Y+43	; 0x2b
    a092:	2f a5       	ldd	r18, Y+47	; 0x2f
    a094:	65 2f       	mov	r22, r21
    a096:	74 2f       	mov	r23, r20
    a098:	83 2f       	mov	r24, r19
    a09a:	92 2f       	mov	r25, r18
    a09c:	0e 94 a0 b9 	call	0x17340	; 0x17340 <square>
    a0a0:	6b 01       	movw	r12, r22
    a0a2:	7c 01       	movw	r14, r24
    a0a4:	69 2d       	mov	r22, r9
    a0a6:	78 2d       	mov	r23, r8
    a0a8:	87 2d       	mov	r24, r7
    a0aa:	96 2d       	mov	r25, r6
    a0ac:	0e 94 a0 b9 	call	0x17340	; 0x17340 <square>
    a0b0:	9b 01       	movw	r18, r22
    a0b2:	ac 01       	movw	r20, r24
    a0b4:	c7 01       	movw	r24, r14
    a0b6:	b6 01       	movw	r22, r12
    a0b8:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    a0bc:	f6 2e       	mov	r15, r22
    a0be:	e7 2e       	mov	r14, r23
    a0c0:	d8 2e       	mov	r13, r24
    a0c2:	c9 2e       	mov	r12, r25
    a0c4:	3f a9       	ldd	r19, Y+55	; 0x37
    a0c6:	28 ad       	ldd	r18, Y+56	; 0x38
    a0c8:	65 2d       	mov	r22, r5
    a0ca:	74 2d       	mov	r23, r4
    a0cc:	83 2f       	mov	r24, r19
    a0ce:	92 2f       	mov	r25, r18
    a0d0:	0e 94 a0 b9 	call	0x17340	; 0x17340 <square>
    a0d4:	9b 01       	movw	r18, r22
    a0d6:	ac 01       	movw	r20, r24
    a0d8:	6f 2d       	mov	r22, r15
    a0da:	7e 2d       	mov	r23, r14
    a0dc:	8d 2d       	mov	r24, r13
    a0de:	9c 2d       	mov	r25, r12
    a0e0:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    a0e4:	0e 94 62 b9 	call	0x172c4	; 0x172c4 <sqrt>
    a0e8:	d1 01       	movw	r26, r2
    a0ea:	9e 96       	adiw	r26, 0x2e	; 46
    a0ec:	6d 93       	st	X+, r22
    a0ee:	7d 93       	st	X+, r23
    a0f0:	8d 93       	st	X+, r24
    a0f2:	9c 93       	st	X, r25
    a0f4:	d1 97       	sbiw	r26, 0x31	; 49
  }
  float inverse_millimeters = 1.0/block->millimeters;  // Inverse millimeters to remove multiple divides 
    a0f6:	d1 01       	movw	r26, r2
    a0f8:	9e 96       	adiw	r26, 0x2e	; 46
    a0fa:	2d 91       	ld	r18, X+
    a0fc:	3d 91       	ld	r19, X+
    a0fe:	4d 91       	ld	r20, X+
    a100:	5c 91       	ld	r21, X
    a102:	d1 97       	sbiw	r26, 0x31	; 49
    a104:	65 96       	adiw	r28, 0x15	; 21
    a106:	2c af       	std	Y+60, r18	; 0x3c
    a108:	3d af       	std	Y+61, r19	; 0x3d
    a10a:	4e af       	std	Y+62, r20	; 0x3e
    a10c:	5f af       	std	Y+63, r21	; 0x3f
    a10e:	65 97       	sbiw	r28, 0x15	; 21
    a110:	60 e0       	ldi	r22, 0x00	; 0
    a112:	70 e0       	ldi	r23, 0x00	; 0
    a114:	80 e8       	ldi	r24, 0x80	; 128
    a116:	9f e3       	ldi	r25, 0x3F	; 63
    a118:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a11c:	9b 01       	movw	r18, r22
    a11e:	ac 01       	movw	r20, r24

    // Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
  float inverse_second = feed_rate * inverse_millimeters;
    a120:	6a 2d       	mov	r22, r10
    a122:	7b 2d       	mov	r23, r11
    a124:	80 2f       	mov	r24, r16
    a126:	91 2f       	mov	r25, r17
    a128:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a12c:	6f a3       	std	Y+39, r22	; 0x27
    a12e:	7b a7       	std	Y+43, r23	; 0x2b
    a130:	8f a7       	std	Y+47, r24	; 0x2f
    a132:	9f ab       	std	Y+55, r25	; 0x37

  int moves_queued=(block_buffer_head-block_buffer_tail + BLOCK_BUFFER_SIZE) & (BLOCK_BUFFER_SIZE - 1);
    a134:	20 91 58 09 	lds	r18, 0x0958
    a138:	40 91 57 09 	lds	r20, 0x0957
    a13c:	30 e0       	ldi	r19, 0x00	; 0
    a13e:	24 1b       	sub	r18, r20
    a140:	31 09       	sbc	r19, r1
    a142:	f9 01       	movw	r30, r18
    a144:	ef 70       	andi	r30, 0x0F	; 15
    a146:	ff 27       	eor	r31, r31
    a148:	67 96       	adiw	r28, 0x17	; 23
    a14a:	ff af       	std	Y+63, r31	; 0x3f
    a14c:	ee af       	std	Y+62, r30	; 0x3e
    a14e:	67 97       	sbiw	r28, 0x17	; 23
    feed_rate = feed_rate*moves_queued / (BLOCK_BUFFER_SIZE * 0.5); 
#endif

#ifdef SLOWDOWN
  //  segment time im micro seconds
  unsigned long segment_time = lround(1000000.0/inverse_second);
    a150:	26 2f       	mov	r18, r22
    a152:	37 2f       	mov	r19, r23
    a154:	48 2f       	mov	r20, r24
    a156:	59 2f       	mov	r21, r25
    a158:	60 e0       	ldi	r22, 0x00	; 0
    a15a:	74 e2       	ldi	r23, 0x24	; 36
    a15c:	84 e7       	ldi	r24, 0x74	; 116
    a15e:	99 e4       	ldi	r25, 0x49	; 73
    a160:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a164:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    a168:	f6 2e       	mov	r15, r22
    a16a:	e7 2e       	mov	r14, r23
    a16c:	d8 2e       	mov	r13, r24
    a16e:	c9 2e       	mov	r12, r25
  if ((moves_queued > 1) && (moves_queued < (BLOCK_BUFFER_SIZE * 0.5)))
    a170:	67 96       	adiw	r28, 0x17	; 23
    a172:	2e ad       	ldd	r18, Y+62	; 0x3e
    a174:	3f ad       	ldd	r19, Y+63	; 0x3f
    a176:	67 97       	sbiw	r28, 0x17	; 23
    a178:	22 30       	cpi	r18, 0x02	; 2
    a17a:	31 05       	cpc	r19, r1
    a17c:	0c f4       	brge	.+2      	; 0xa180 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x968>
    a17e:	54 c0       	rjmp	.+168    	; 0xa228 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xa10>
    a180:	b9 01       	movw	r22, r18
    a182:	88 27       	eor	r24, r24
    a184:	77 fd       	sbrc	r23, 7
    a186:	80 95       	com	r24
    a188:	98 2f       	mov	r25, r24
    a18a:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a18e:	20 e0       	ldi	r18, 0x00	; 0
    a190:	30 e0       	ldi	r19, 0x00	; 0
    a192:	40 e0       	ldi	r20, 0x00	; 0
    a194:	51 e4       	ldi	r21, 0x41	; 65
    a196:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    a19a:	88 23       	and	r24, r24
    a19c:	0c f0       	brlt	.+2      	; 0xa1a0 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x988>
    a19e:	44 c0       	rjmp	.+136    	; 0xa228 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xa10>
    feed_rate = feed_rate*moves_queued / (BLOCK_BUFFER_SIZE * 0.5); 
#endif

#ifdef SLOWDOWN
  //  segment time im micro seconds
  unsigned long segment_time = lround(1000000.0/inverse_second);
    a1a0:	8f 2c       	mov	r8, r15
    a1a2:	9e 2c       	mov	r9, r14
    a1a4:	ad 2c       	mov	r10, r13
    a1a6:	bc 2c       	mov	r11, r12
  if ((moves_queued > 1) && (moves_queued < (BLOCK_BUFFER_SIZE * 0.5)))
  {
    if (segment_time < minsegmenttime)
    a1a8:	80 91 96 0e 	lds	r24, 0x0E96
    a1ac:	90 91 97 0e 	lds	r25, 0x0E97
    a1b0:	a0 91 98 0e 	lds	r26, 0x0E98
    a1b4:	b0 91 99 0e 	lds	r27, 0x0E99
    a1b8:	88 16       	cp	r8, r24
    a1ba:	99 06       	cpc	r9, r25
    a1bc:	aa 06       	cpc	r10, r26
    a1be:	bb 06       	cpc	r11, r27
    a1c0:	98 f5       	brcc	.+102    	; 0xa228 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xa10>
    { // buffer is draining, add extra time.  The amount of time added increases if the buffer is still emptied more.
      inverse_second=1000000.0/(segment_time+lround(2*(minsegmenttime-segment_time)/moves_queued));
    a1c2:	88 19       	sub	r24, r8
    a1c4:	99 09       	sbc	r25, r9
    a1c6:	aa 09       	sbc	r26, r10
    a1c8:	bb 09       	sbc	r27, r11
    a1ca:	bc 01       	movw	r22, r24
    a1cc:	cd 01       	movw	r24, r26
    a1ce:	66 0f       	add	r22, r22
    a1d0:	77 1f       	adc	r23, r23
    a1d2:	88 1f       	adc	r24, r24
    a1d4:	99 1f       	adc	r25, r25
    a1d6:	67 96       	adiw	r28, 0x17	; 23
    a1d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    a1da:	bf ad       	ldd	r27, Y+63	; 0x3f
    a1dc:	67 97       	sbiw	r28, 0x17	; 23
    a1de:	9d 01       	movw	r18, r26
    a1e0:	44 27       	eor	r20, r20
    a1e2:	37 fd       	sbrc	r19, 7
    a1e4:	40 95       	com	r20
    a1e6:	54 2f       	mov	r21, r20
    a1e8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
    a1ec:	ca 01       	movw	r24, r20
    a1ee:	b9 01       	movw	r22, r18
    a1f0:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a1f4:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    a1f8:	46 2f       	mov	r20, r22
    a1fa:	57 2f       	mov	r21, r23
    a1fc:	68 2f       	mov	r22, r24
    a1fe:	79 2f       	mov	r23, r25
    a200:	cb 01       	movw	r24, r22
    a202:	ba 01       	movw	r22, r20
    a204:	68 0d       	add	r22, r8
    a206:	79 1d       	adc	r23, r9
    a208:	8a 1d       	adc	r24, r10
    a20a:	9b 1d       	adc	r25, r11
    a20c:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a210:	9b 01       	movw	r18, r22
    a212:	ac 01       	movw	r20, r24
    a214:	60 e0       	ldi	r22, 0x00	; 0
    a216:	74 e2       	ldi	r23, 0x24	; 36
    a218:	84 e7       	ldi	r24, 0x74	; 116
    a21a:	99 e4       	ldi	r25, 0x49	; 73
    a21c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a220:	6f a3       	std	Y+39, r22	; 0x27
    a222:	7b a7       	std	Y+43, r23	; 0x2b
    a224:	8f a7       	std	Y+47, r24	; 0x2f
    a226:	9f ab       	std	Y+55, r25	; 0x37
  }
#endif
  //  END OF SLOW DOWN SECTION    


  block->nominal_speed = block->millimeters * inverse_second; // (mm/sec) Always > 0
    a228:	65 96       	adiw	r28, 0x15	; 21
    a22a:	2c ad       	ldd	r18, Y+60	; 0x3c
    a22c:	3d ad       	ldd	r19, Y+61	; 0x3d
    a22e:	4e ad       	ldd	r20, Y+62	; 0x3e
    a230:	5f ad       	ldd	r21, Y+63	; 0x3f
    a232:	65 97       	sbiw	r28, 0x15	; 21
    a234:	bf a1       	ldd	r27, Y+39	; 0x27
    a236:	ab a5       	ldd	r26, Y+43	; 0x2b
    a238:	ff a5       	ldd	r31, Y+47	; 0x2f
    a23a:	ef a9       	ldd	r30, Y+55	; 0x37
    a23c:	6b 2f       	mov	r22, r27
    a23e:	7a 2f       	mov	r23, r26
    a240:	8f 2f       	mov	r24, r31
    a242:	9e 2f       	mov	r25, r30
    a244:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a248:	a7 96       	adiw	r28, 0x27	; 39
    a24a:	6f af       	std	Y+63, r22	; 0x3f
    a24c:	a7 97       	sbiw	r28, 0x27	; 39
    a24e:	a8 96       	adiw	r28, 0x28	; 40
    a250:	7f af       	std	Y+63, r23	; 0x3f
    a252:	a8 97       	sbiw	r28, 0x28	; 40
    a254:	a9 96       	adiw	r28, 0x29	; 41
    a256:	8f af       	std	Y+63, r24	; 0x3f
    a258:	a9 97       	sbiw	r28, 0x29	; 41
    a25a:	aa 96       	adiw	r28, 0x2a	; 42
    a25c:	9f af       	std	Y+63, r25	; 0x3f
    a25e:	aa 97       	sbiw	r28, 0x2a	; 42
    a260:	47 2f       	mov	r20, r23
    a262:	38 2f       	mov	r19, r24
    a264:	29 2f       	mov	r18, r25
    a266:	86 2f       	mov	r24, r22
    a268:	94 2f       	mov	r25, r20
    a26a:	a3 2f       	mov	r26, r19
    a26c:	b2 2f       	mov	r27, r18
    a26e:	f1 01       	movw	r30, r2
    a270:	82 a3       	std	Z+34, r24	; 0x22
    a272:	93 a3       	std	Z+35, r25	; 0x23
    a274:	a4 a3       	std	Z+36, r26	; 0x24
    a276:	b5 a3       	std	Z+37, r27	; 0x25
  block->nominal_rate = ceil(block->step_event_count * inverse_second); // (step/sec) Always > 0
    a278:	60 89       	ldd	r22, Z+16	; 0x10
    a27a:	71 89       	ldd	r23, Z+17	; 0x11
    a27c:	82 89       	ldd	r24, Z+18	; 0x12
    a27e:	93 89       	ldd	r25, Z+19	; 0x13
    a280:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a284:	2b 01       	movw	r4, r22
    a286:	3c 01       	movw	r6, r24
    a288:	7f a1       	ldd	r23, Y+39	; 0x27
    a28a:	6b a5       	ldd	r22, Y+43	; 0x2b
    a28c:	9f a5       	ldd	r25, Y+47	; 0x2f
    a28e:	8f a9       	ldd	r24, Y+55	; 0x37
    a290:	27 2f       	mov	r18, r23
    a292:	36 2f       	mov	r19, r22
    a294:	49 2f       	mov	r20, r25
    a296:	58 2f       	mov	r21, r24
    a298:	c3 01       	movw	r24, r6
    a29a:	b2 01       	movw	r22, r4
    a29c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a2a0:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    a2a4:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    a2a8:	a4 96       	adiw	r28, 0x24	; 36
    a2aa:	6c af       	std	Y+60, r22	; 0x3c
    a2ac:	7d af       	std	Y+61, r23	; 0x3d
    a2ae:	8e af       	std	Y+62, r24	; 0x3e
    a2b0:	9f af       	std	Y+63, r25	; 0x3f
    a2b2:	a4 97       	sbiw	r28, 0x24	; 36
    a2b4:	d1 01       	movw	r26, r2
    a2b6:	d8 96       	adiw	r26, 0x38	; 56
    a2b8:	6d 93       	st	X+, r22
    a2ba:	7d 93       	st	X+, r23
    a2bc:	8d 93       	st	X+, r24
    a2be:	9c 93       	st	X, r25
    a2c0:	db 97       	sbiw	r26, 0x3b	; 59
    a2c2:	8e 01       	movw	r16, r28
    a2c4:	0f 5e       	subi	r16, 0xEF	; 239
    a2c6:	1f 4f       	sbci	r17, 0xFF	; 255
    a2c8:	fe 01       	movw	r30, r28
    a2ca:	31 96       	adiw	r30, 0x01	; 1
    a2cc:	a6 96       	adiw	r28, 0x26	; 38
    a2ce:	ff af       	std	Y+63, r31	; 0x3f
    a2d0:	ee af       	std	Y+62, r30	; 0x3e
    a2d2:	a6 97       	sbiw	r28, 0x26	; 38
    a2d4:	0f 2e       	mov	r0, r31
    a2d6:	f6 e8       	ldi	r31, 0x86	; 134
    a2d8:	ef 2e       	mov	r14, r31
    a2da:	fe e0       	ldi	r31, 0x0E	; 14
    a2dc:	ff 2e       	mov	r15, r31
    a2de:	f0 2d       	mov	r31, r0

float junction_deviation = 0.1;
// Add a new linear movement to the buffer. steps_x, _y and _z is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(const float &x, const float &y, const float &z, const float &e, float feed_rate, const uint8_t &extruder)
    a2e0:	9e 01       	movw	r18, r28
    a2e2:	2f 5d       	subi	r18, 0xDF	; 223
    a2e4:	3f 4f       	sbci	r19, 0xFF	; 255
    a2e6:	3a a3       	std	Y+34, r19	; 0x22
    a2e8:	29 a3       	std	Y+33, r18	; 0x21
    a2ea:	fc a3       	std	Y+36, r31	; 0x24
    a2ec:	eb a3       	std	Y+35, r30	; 0x23
  block->nominal_speed = block->millimeters * inverse_second; // (mm/sec) Always > 0
  block->nominal_rate = ceil(block->step_event_count * inverse_second); // (step/sec) Always > 0

  // Calculate and limit speed in mm/sec for each axis
  float current_speed[4];
  float speed_factor = 1.0; //factor <=1 do decrease speed
    a2ee:	18 ae       	std	Y+56, r1	; 0x38
    a2f0:	26 96       	adiw	r28, 0x06	; 6
    a2f2:	1f ae       	std	Y+63, r1	; 0x3f
    a2f4:	26 97       	sbiw	r28, 0x06	; 6
    a2f6:	30 e8       	ldi	r19, 0x80	; 128
    a2f8:	2a 96       	adiw	r28, 0x0a	; 10
    a2fa:	3f af       	std	Y+63, r19	; 0x3f
    a2fc:	2a 97       	sbiw	r28, 0x0a	; 10
    a2fe:	4f e3       	ldi	r20, 0x3F	; 63
    a300:	2e 96       	adiw	r28, 0x0e	; 14
    a302:	4f af       	std	Y+63, r20	; 0x3f
    a304:	2e 97       	sbiw	r28, 0x0e	; 14
    a306:	ac 96       	adiw	r28, 0x2c	; 44
    a308:	3f ae       	std	Y+63, r3	; 0x3f
    a30a:	2e ae       	std	Y+62, r2	; 0x3e
    a30c:	ac 97       	sbiw	r28, 0x2c	; 44
    a30e:	17 01       	movw	r2, r14
  for(int i=0; i < 4; i++)
  {
    current_speed[i] = delta_mm[i] * inverse_second;
    a310:	d8 01       	movw	r26, r16
    a312:	6d 91       	ld	r22, X+
    a314:	7d 91       	ld	r23, X+
    a316:	8d 91       	ld	r24, X+
    a318:	9d 91       	ld	r25, X+
    a31a:	8d 01       	movw	r16, r26
    a31c:	bf a1       	ldd	r27, Y+39	; 0x27
    a31e:	ab a5       	ldd	r26, Y+43	; 0x2b
    a320:	ff a5       	ldd	r31, Y+47	; 0x2f
    a322:	ef a9       	ldd	r30, Y+55	; 0x37
    a324:	2b 2f       	mov	r18, r27
    a326:	3a 2f       	mov	r19, r26
    a328:	4f 2f       	mov	r20, r31
    a32a:	5e 2f       	mov	r21, r30
    a32c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a330:	86 2e       	mov	r8, r22
    a332:	97 2e       	mov	r9, r23
    a334:	a8 2e       	mov	r10, r24
    a336:	b9 2e       	mov	r11, r25
    a338:	eb a1       	ldd	r30, Y+35	; 0x23
    a33a:	fc a1       	ldd	r31, Y+36	; 0x24
    a33c:	81 92       	st	Z+, r8
    a33e:	91 92       	st	Z+, r9
    a340:	a1 92       	st	Z+, r10
    a342:	b1 92       	st	Z+, r11
    a344:	fc a3       	std	Y+36, r31	; 0x24
    a346:	eb a3       	std	Y+35, r30	; 0x23
    if(fabs(current_speed[i]) > max_feedrate[i])
    a348:	e8 94       	clt
    a34a:	b7 f8       	bld	r11, 7
    a34c:	d1 01       	movw	r26, r2
    a34e:	cd 90       	ld	r12, X+
    a350:	dd 90       	ld	r13, X+
    a352:	ed 90       	ld	r14, X+
    a354:	fd 90       	ld	r15, X+
    a356:	1d 01       	movw	r2, r26
    a358:	a7 01       	movw	r20, r14
    a35a:	96 01       	movw	r18, r12
    a35c:	c5 01       	movw	r24, r10
    a35e:	b4 01       	movw	r22, r8
    a360:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a364:	18 16       	cp	r1, r24
    a366:	54 f5       	brge	.+84     	; 0xa3bc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xba4>
      speed_factor = min(speed_factor, max_feedrate[i] / fabs(current_speed[i]));
    a368:	a5 01       	movw	r20, r10
    a36a:	94 01       	movw	r18, r8
    a36c:	c7 01       	movw	r24, r14
    a36e:	b6 01       	movw	r22, r12
    a370:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a374:	c6 2e       	mov	r12, r22
    a376:	d7 2e       	mov	r13, r23
    a378:	e8 2e       	mov	r14, r24
    a37a:	f9 2e       	mov	r15, r25
    a37c:	78 ad       	ldd	r23, Y+56	; 0x38
    a37e:	26 96       	adiw	r28, 0x06	; 6
    a380:	6f ad       	ldd	r22, Y+63	; 0x3f
    a382:	26 97       	sbiw	r28, 0x06	; 6
    a384:	2a 96       	adiw	r28, 0x0a	; 10
    a386:	9f ad       	ldd	r25, Y+63	; 0x3f
    a388:	2a 97       	sbiw	r28, 0x0a	; 10
    a38a:	2e 96       	adiw	r28, 0x0e	; 14
    a38c:	8f ad       	ldd	r24, Y+63	; 0x3f
    a38e:	2e 97       	sbiw	r28, 0x0e	; 14
    a390:	27 2f       	mov	r18, r23
    a392:	36 2f       	mov	r19, r22
    a394:	49 2f       	mov	r20, r25
    a396:	58 2f       	mov	r21, r24
    a398:	6c 2d       	mov	r22, r12
    a39a:	7d 2d       	mov	r23, r13
    a39c:	8e 2d       	mov	r24, r14
    a39e:	9f 2d       	mov	r25, r15
    a3a0:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a3a4:	18 16       	cp	r1, r24
    a3a6:	54 f0       	brlt	.+20     	; 0xa3bc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xba4>
    a3a8:	c8 ae       	std	Y+56, r12	; 0x38
    a3aa:	26 96       	adiw	r28, 0x06	; 6
    a3ac:	df ae       	std	Y+63, r13	; 0x3f
    a3ae:	26 97       	sbiw	r28, 0x06	; 6
    a3b0:	2a 96       	adiw	r28, 0x0a	; 10
    a3b2:	ef ae       	std	Y+63, r14	; 0x3f
    a3b4:	2a 97       	sbiw	r28, 0x0a	; 10
    a3b6:	2e 96       	adiw	r28, 0x0e	; 14
    a3b8:	ff ae       	std	Y+63, r15	; 0x3f
    a3ba:	2e 97       	sbiw	r28, 0x0e	; 14
  block->nominal_rate = ceil(block->step_event_count * inverse_second); // (step/sec) Always > 0

  // Calculate and limit speed in mm/sec for each axis
  float current_speed[4];
  float speed_factor = 1.0; //factor <=1 do decrease speed
  for(int i=0; i < 4; i++)
    a3bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    a3be:	fa a1       	ldd	r31, Y+34	; 0x22
    a3c0:	0e 17       	cp	r16, r30
    a3c2:	1f 07       	cpc	r17, r31
    a3c4:	09 f0       	breq	.+2      	; 0xa3c8 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xbb0>
    a3c6:	a4 cf       	rjmp	.-184    	; 0xa310 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xaf8>
    a3c8:	ac 96       	adiw	r28, 0x2c	; 44
    a3ca:	2e ac       	ldd	r2, Y+62	; 0x3e
    a3cc:	3f ac       	ldd	r3, Y+63	; 0x3f
    a3ce:	ac 97       	sbiw	r28, 0x2c	; 44
  if(min_xy_segment_time < MAX_FREQ_TIME)
    speed_factor = min(speed_factor, speed_factor * (float)min_xy_segment_time / (float)MAX_FREQ_TIME);
#endif

  // Correct the speed  
  if( speed_factor < 1.0)
    a3d0:	20 e0       	ldi	r18, 0x00	; 0
    a3d2:	30 e0       	ldi	r19, 0x00	; 0
    a3d4:	40 e8       	ldi	r20, 0x80	; 128
    a3d6:	5f e3       	ldi	r21, 0x3F	; 63
    a3d8:	b8 ad       	ldd	r27, Y+56	; 0x38
    a3da:	26 96       	adiw	r28, 0x06	; 6
    a3dc:	af ad       	ldd	r26, Y+63	; 0x3f
    a3de:	26 97       	sbiw	r28, 0x06	; 6
    a3e0:	2a 96       	adiw	r28, 0x0a	; 10
    a3e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    a3e4:	2a 97       	sbiw	r28, 0x0a	; 10
    a3e6:	2e 96       	adiw	r28, 0x0e	; 14
    a3e8:	ef ad       	ldd	r30, Y+63	; 0x3f
    a3ea:	2e 97       	sbiw	r28, 0x0e	; 14
    a3ec:	6b 2f       	mov	r22, r27
    a3ee:	7a 2f       	mov	r23, r26
    a3f0:	8f 2f       	mov	r24, r31
    a3f2:	9e 2f       	mov	r25, r30
    a3f4:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    a3f8:	88 23       	and	r24, r24
    a3fa:	0c f0       	brlt	.+2      	; 0xa3fe <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xbe6>
    a3fc:	6d c0       	rjmp	.+218    	; 0xa4d8 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xcc0>

float junction_deviation = 0.1;
// Add a new linear movement to the buffer. steps_x, _y and _z is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(const float &x, const float &y, const float &z, const float &e, float feed_rate, const uint8_t &extruder)
    a3fe:	8e 01       	movw	r16, r28
    a400:	0f 5e       	subi	r16, 0xEF	; 239
    a402:	1f 4f       	sbci	r17, 0xFF	; 255
    a404:	a6 96       	adiw	r28, 0x26	; 38
    a406:	ee ac       	ldd	r14, Y+62	; 0x3e
    a408:	ff ac       	ldd	r15, Y+63	; 0x3f
    a40a:	a6 97       	sbiw	r28, 0x26	; 38
    a40c:	d8 ac       	ldd	r13, Y+56	; 0x38
    a40e:	26 96       	adiw	r28, 0x06	; 6
    a410:	cf ac       	ldd	r12, Y+63	; 0x3f
    a412:	26 97       	sbiw	r28, 0x06	; 6
    a414:	2a 96       	adiw	r28, 0x0a	; 10
    a416:	bf ac       	ldd	r11, Y+63	; 0x3f
    a418:	2a 97       	sbiw	r28, 0x0a	; 10
    a41a:	2e 96       	adiw	r28, 0x0e	; 14
    a41c:	af ac       	ldd	r10, Y+63	; 0x3f
    a41e:	2e 97       	sbiw	r28, 0x0e	; 14
  // Correct the speed  
  if( speed_factor < 1.0)
  {
    for(unsigned char i=0; i < 4; i++)
    {
      current_speed[i] *= speed_factor;
    a420:	2d 2d       	mov	r18, r13
    a422:	3c 2d       	mov	r19, r12
    a424:	4b 2d       	mov	r20, r11
    a426:	5a 2d       	mov	r21, r10
    a428:	d7 01       	movw	r26, r14
    a42a:	6d 91       	ld	r22, X+
    a42c:	7d 91       	ld	r23, X+
    a42e:	8d 91       	ld	r24, X+
    a430:	9c 91       	ld	r25, X
    a432:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a436:	f7 01       	movw	r30, r14
    a438:	61 93       	st	Z+, r22
    a43a:	71 93       	st	Z+, r23
    a43c:	81 93       	st	Z+, r24
    a43e:	91 93       	st	Z+, r25
    a440:	7f 01       	movw	r14, r30
#endif

  // Correct the speed  
  if( speed_factor < 1.0)
  {
    for(unsigned char i=0; i < 4; i++)
    a442:	e0 17       	cp	r30, r16
    a444:	f1 07       	cpc	r31, r17
    a446:	61 f7       	brne	.-40     	; 0xa420 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xc08>
    {
      current_speed[i] *= speed_factor;
    }
    block->nominal_speed *= speed_factor;
    a448:	a7 96       	adiw	r28, 0x27	; 39
    a44a:	7f ad       	ldd	r23, Y+63	; 0x3f
    a44c:	a7 97       	sbiw	r28, 0x27	; 39
    a44e:	a8 96       	adiw	r28, 0x28	; 40
    a450:	6f ad       	ldd	r22, Y+63	; 0x3f
    a452:	a8 97       	sbiw	r28, 0x28	; 40
    a454:	a9 96       	adiw	r28, 0x29	; 41
    a456:	9f ad       	ldd	r25, Y+63	; 0x3f
    a458:	a9 97       	sbiw	r28, 0x29	; 41
    a45a:	aa 96       	adiw	r28, 0x2a	; 42
    a45c:	8f ad       	ldd	r24, Y+63	; 0x3f
    a45e:	aa 97       	sbiw	r28, 0x2a	; 42
    a460:	27 2f       	mov	r18, r23
    a462:	36 2f       	mov	r19, r22
    a464:	49 2f       	mov	r20, r25
    a466:	58 2f       	mov	r21, r24
    a468:	b8 ad       	ldd	r27, Y+56	; 0x38
    a46a:	26 96       	adiw	r28, 0x06	; 6
    a46c:	af ad       	ldd	r26, Y+63	; 0x3f
    a46e:	26 97       	sbiw	r28, 0x06	; 6
    a470:	2a 96       	adiw	r28, 0x0a	; 10
    a472:	ff ad       	ldd	r31, Y+63	; 0x3f
    a474:	2a 97       	sbiw	r28, 0x0a	; 10
    a476:	2e 96       	adiw	r28, 0x0e	; 14
    a478:	ef ad       	ldd	r30, Y+63	; 0x3f
    a47a:	2e 97       	sbiw	r28, 0x0e	; 14
    a47c:	6b 2f       	mov	r22, r27
    a47e:	7a 2f       	mov	r23, r26
    a480:	8f 2f       	mov	r24, r31
    a482:	9e 2f       	mov	r25, r30
    a484:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a488:	d1 01       	movw	r26, r2
    a48a:	92 96       	adiw	r26, 0x22	; 34
    a48c:	6d 93       	st	X+, r22
    a48e:	7d 93       	st	X+, r23
    a490:	8d 93       	st	X+, r24
    a492:	9c 93       	st	X, r25
    a494:	95 97       	sbiw	r26, 0x25	; 37
    block->nominal_rate *= speed_factor;
    a496:	a4 96       	adiw	r28, 0x24	; 36
    a498:	6c ad       	ldd	r22, Y+60	; 0x3c
    a49a:	7d ad       	ldd	r23, Y+61	; 0x3d
    a49c:	8e ad       	ldd	r24, Y+62	; 0x3e
    a49e:	9f ad       	ldd	r25, Y+63	; 0x3f
    a4a0:	a4 97       	sbiw	r28, 0x24	; 36
    a4a2:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a4a6:	9b 01       	movw	r18, r22
    a4a8:	ac 01       	movw	r20, r24
    a4aa:	b8 ad       	ldd	r27, Y+56	; 0x38
    a4ac:	26 96       	adiw	r28, 0x06	; 6
    a4ae:	af ad       	ldd	r26, Y+63	; 0x3f
    a4b0:	26 97       	sbiw	r28, 0x06	; 6
    a4b2:	2a 96       	adiw	r28, 0x0a	; 10
    a4b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    a4b6:	2a 97       	sbiw	r28, 0x0a	; 10
    a4b8:	2e 96       	adiw	r28, 0x0e	; 14
    a4ba:	ef ad       	ldd	r30, Y+63	; 0x3f
    a4bc:	2e 97       	sbiw	r28, 0x0e	; 14
    a4be:	6b 2f       	mov	r22, r27
    a4c0:	7a 2f       	mov	r23, r26
    a4c2:	8f 2f       	mov	r24, r31
    a4c4:	9e 2f       	mov	r25, r30
    a4c6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a4ca:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    a4ce:	f1 01       	movw	r30, r2
    a4d0:	60 af       	std	Z+56, r22	; 0x38
    a4d2:	71 af       	std	Z+57, r23	; 0x39
    a4d4:	82 af       	std	Z+58, r24	; 0x3a
    a4d6:	93 af       	std	Z+59, r25	; 0x3b
  }

  // Compute and limit the acceleration rate for the trapezoid generator.  
  float steps_per_mm = block->step_event_count/block->millimeters;
    a4d8:	65 96       	adiw	r28, 0x15	; 21
    a4da:	2c ad       	ldd	r18, Y+60	; 0x3c
    a4dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    a4de:	4e ad       	ldd	r20, Y+62	; 0x3e
    a4e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    a4e2:	65 97       	sbiw	r28, 0x15	; 21
    a4e4:	c3 01       	movw	r24, r6
    a4e6:	b2 01       	movw	r22, r4
    a4e8:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a4ec:	16 2f       	mov	r17, r22
    a4ee:	07 2f       	mov	r16, r23
    a4f0:	8b a3       	std	Y+35, r24	; 0x23
    a4f2:	9f a3       	std	Y+39, r25	; 0x27
  if(block->steps_x == 0 && block->steps_y == 0 && block->steps_z == 0)
    a4f4:	6b 96       	adiw	r28, 0x1b	; 27
    a4f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    a4f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    a4fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    a4fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    a4fe:	6b 97       	sbiw	r28, 0x1b	; 27
    a500:	23 2b       	or	r18, r19
    a502:	24 2b       	or	r18, r20
    a504:	25 2b       	or	r18, r21
    a506:	81 f5       	brne	.+96     	; 0xa568 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xd50>
    a508:	f1 01       	movw	r30, r2
    a50a:	84 81       	ldd	r24, Z+4	; 0x04
    a50c:	95 81       	ldd	r25, Z+5	; 0x05
    a50e:	a6 81       	ldd	r26, Z+6	; 0x06
    a510:	b7 81       	ldd	r27, Z+7	; 0x07
    a512:	89 2b       	or	r24, r25
    a514:	8a 2b       	or	r24, r26
    a516:	8b 2b       	or	r24, r27
    a518:	39 f5       	brne	.+78     	; 0xa568 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xd50>
    a51a:	80 85       	ldd	r24, Z+8	; 0x08
    a51c:	91 85       	ldd	r25, Z+9	; 0x09
    a51e:	a2 85       	ldd	r26, Z+10	; 0x0a
    a520:	b3 85       	ldd	r27, Z+11	; 0x0b
    a522:	89 2b       	or	r24, r25
    a524:	8a 2b       	or	r24, r26
    a526:	8b 2b       	or	r24, r27
    a528:	f9 f4       	brne	.+62     	; 0xa568 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xd50>
  {
    block->acceleration_st = ceil(retract_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
    a52a:	20 91 5a 0e 	lds	r18, 0x0E5A
    a52e:	30 91 5b 0e 	lds	r19, 0x0E5B
    a532:	40 91 5c 0e 	lds	r20, 0x0E5C
    a536:	50 91 5d 0e 	lds	r21, 0x0E5D
    a53a:	fb a1       	ldd	r31, Y+35	; 0x23
    a53c:	ef a1       	ldd	r30, Y+39	; 0x27
    a53e:	61 2f       	mov	r22, r17
    a540:	70 2f       	mov	r23, r16
    a542:	8f 2f       	mov	r24, r31
    a544:	9e 2f       	mov	r25, r30
    a546:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a54a:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    a54e:	71 01       	movw	r14, r2
    a550:	f4 e4       	ldi	r31, 0x44	; 68
    a552:	ef 0e       	add	r14, r31
    a554:	f1 1c       	adc	r15, r1
    a556:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    a55a:	d7 01       	movw	r26, r14
    a55c:	6d 93       	st	X+, r22
    a55e:	7d 93       	st	X+, r23
    a560:	8d 93       	st	X+, r24
    a562:	9c 93       	st	X, r25
    a564:	13 97       	sbiw	r26, 0x03	; 3
    a566:	fc c0       	rjmp	.+504    	; 0xa760 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xf48>
  }
  else
  {
    block->acceleration_st = ceil(acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
    a568:	20 91 5e 0e 	lds	r18, 0x0E5E
    a56c:	30 91 5f 0e 	lds	r19, 0x0E5F
    a570:	40 91 60 0e 	lds	r20, 0x0E60
    a574:	50 91 61 0e 	lds	r21, 0x0E61
    a578:	fb a1       	ldd	r31, Y+35	; 0x23
    a57a:	ef a1       	ldd	r30, Y+39	; 0x27
    a57c:	61 2f       	mov	r22, r17
    a57e:	70 2f       	mov	r23, r16
    a580:	8f 2f       	mov	r24, r31
    a582:	9e 2f       	mov	r25, r30
    a584:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a588:	0e 94 0d b6 	call	0x16c1a	; 0x16c1a <ceil>
    a58c:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    a590:	f1 01       	movw	r30, r2
    a592:	ec 5b       	subi	r30, 0xBC	; 188
    a594:	ff 4f       	sbci	r31, 0xFF	; 255
    a596:	60 83       	st	Z, r22
    a598:	71 83       	std	Z+1, r23	; 0x01
    a59a:	82 83       	std	Z+2, r24	; 0x02
    a59c:	93 83       	std	Z+3, r25	; 0x03
    // Limit acceleration per axis
    if(((float)block->acceleration_st * (float)block->steps_x / (float)block->step_event_count) > axis_steps_per_sqr_second[X_AXIS])
    a59e:	80 90 3a 0e 	lds	r8, 0x0E3A
    a5a2:	90 90 3b 0e 	lds	r9, 0x0E3B
    a5a6:	a0 90 3c 0e 	lds	r10, 0x0E3C
    a5aa:	b0 90 3d 0e 	lds	r11, 0x0E3D
    a5ae:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a5b2:	6b 01       	movw	r12, r22
    a5b4:	7c 01       	movw	r14, r24
    a5b6:	6b 96       	adiw	r28, 0x1b	; 27
    a5b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    a5ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    a5bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    a5be:	9f ad       	ldd	r25, Y+63	; 0x3f
    a5c0:	6b 97       	sbiw	r28, 0x1b	; 27
    a5c2:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a5c6:	9b 01       	movw	r18, r22
    a5c8:	ac 01       	movw	r20, r24
    a5ca:	c7 01       	movw	r24, r14
    a5cc:	b6 01       	movw	r22, r12
    a5ce:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a5d2:	a3 01       	movw	r20, r6
    a5d4:	92 01       	movw	r18, r4
    a5d6:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a5da:	6b 01       	movw	r12, r22
    a5dc:	7c 01       	movw	r14, r24
    a5de:	c5 01       	movw	r24, r10
    a5e0:	b4 01       	movw	r22, r8
    a5e2:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a5e6:	9b 01       	movw	r18, r22
    a5e8:	ac 01       	movw	r20, r24
    a5ea:	c7 01       	movw	r24, r14
    a5ec:	b6 01       	movw	r22, r12
    a5ee:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a5f2:	18 16       	cp	r1, r24
    a5f4:	3c f4       	brge	.+14     	; 0xa604 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xdec>
      block->acceleration_st = axis_steps_per_sqr_second[X_AXIS];
    a5f6:	f1 01       	movw	r30, r2
    a5f8:	ec 5b       	subi	r30, 0xBC	; 188
    a5fa:	ff 4f       	sbci	r31, 0xFF	; 255
    a5fc:	80 82       	st	Z, r8
    a5fe:	91 82       	std	Z+1, r9	; 0x01
    a600:	a2 82       	std	Z+2, r10	; 0x02
    a602:	b3 82       	std	Z+3, r11	; 0x03
    if(((float)block->acceleration_st * (float)block->steps_y / (float)block->step_event_count) > axis_steps_per_sqr_second[Y_AXIS])
    a604:	80 90 3e 0e 	lds	r8, 0x0E3E
    a608:	90 90 3f 0e 	lds	r9, 0x0E3F
    a60c:	a0 90 40 0e 	lds	r10, 0x0E40
    a610:	b0 90 41 0e 	lds	r11, 0x0E41
    a614:	f1 01       	movw	r30, r2
    a616:	ec 5b       	subi	r30, 0xBC	; 188
    a618:	ff 4f       	sbci	r31, 0xFF	; 255
    a61a:	60 81       	ld	r22, Z
    a61c:	71 81       	ldd	r23, Z+1	; 0x01
    a61e:	82 81       	ldd	r24, Z+2	; 0x02
    a620:	93 81       	ldd	r25, Z+3	; 0x03
    a622:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a626:	6b 01       	movw	r12, r22
    a628:	7c 01       	movw	r14, r24
    a62a:	f1 01       	movw	r30, r2
    a62c:	64 81       	ldd	r22, Z+4	; 0x04
    a62e:	75 81       	ldd	r23, Z+5	; 0x05
    a630:	86 81       	ldd	r24, Z+6	; 0x06
    a632:	97 81       	ldd	r25, Z+7	; 0x07
    a634:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a638:	9b 01       	movw	r18, r22
    a63a:	ac 01       	movw	r20, r24
    a63c:	c7 01       	movw	r24, r14
    a63e:	b6 01       	movw	r22, r12
    a640:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a644:	a3 01       	movw	r20, r6
    a646:	92 01       	movw	r18, r4
    a648:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a64c:	6b 01       	movw	r12, r22
    a64e:	7c 01       	movw	r14, r24
    a650:	c5 01       	movw	r24, r10
    a652:	b4 01       	movw	r22, r8
    a654:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a658:	9b 01       	movw	r18, r22
    a65a:	ac 01       	movw	r20, r24
    a65c:	c7 01       	movw	r24, r14
    a65e:	b6 01       	movw	r22, r12
    a660:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a664:	18 16       	cp	r1, r24
    a666:	3c f4       	brge	.+14     	; 0xa676 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xe5e>
      block->acceleration_st = axis_steps_per_sqr_second[Y_AXIS];
    a668:	f1 01       	movw	r30, r2
    a66a:	ec 5b       	subi	r30, 0xBC	; 188
    a66c:	ff 4f       	sbci	r31, 0xFF	; 255
    a66e:	80 82       	st	Z, r8
    a670:	91 82       	std	Z+1, r9	; 0x01
    a672:	a2 82       	std	Z+2, r10	; 0x02
    a674:	b3 82       	std	Z+3, r11	; 0x03
    if(((float)block->acceleration_st * (float)block->steps_e / (float)block->step_event_count) > axis_steps_per_sqr_second[E_AXIS])
    a676:	80 90 46 0e 	lds	r8, 0x0E46
    a67a:	90 90 47 0e 	lds	r9, 0x0E47
    a67e:	a0 90 48 0e 	lds	r10, 0x0E48
    a682:	b0 90 49 0e 	lds	r11, 0x0E49
    a686:	f1 01       	movw	r30, r2
    a688:	ec 5b       	subi	r30, 0xBC	; 188
    a68a:	ff 4f       	sbci	r31, 0xFF	; 255
    a68c:	60 81       	ld	r22, Z
    a68e:	71 81       	ldd	r23, Z+1	; 0x01
    a690:	82 81       	ldd	r24, Z+2	; 0x02
    a692:	93 81       	ldd	r25, Z+3	; 0x03
    a694:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a698:	6b 01       	movw	r12, r22
    a69a:	7c 01       	movw	r14, r24
    a69c:	6f 96       	adiw	r28, 0x1f	; 31
    a69e:	6c ad       	ldd	r22, Y+60	; 0x3c
    a6a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    a6a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    a6a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    a6a6:	6f 97       	sbiw	r28, 0x1f	; 31
    a6a8:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a6ac:	9b 01       	movw	r18, r22
    a6ae:	ac 01       	movw	r20, r24
    a6b0:	c7 01       	movw	r24, r14
    a6b2:	b6 01       	movw	r22, r12
    a6b4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a6b8:	a3 01       	movw	r20, r6
    a6ba:	92 01       	movw	r18, r4
    a6bc:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a6c0:	6b 01       	movw	r12, r22
    a6c2:	7c 01       	movw	r14, r24
    a6c4:	c5 01       	movw	r24, r10
    a6c6:	b4 01       	movw	r22, r8
    a6c8:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a6cc:	9b 01       	movw	r18, r22
    a6ce:	ac 01       	movw	r20, r24
    a6d0:	c7 01       	movw	r24, r14
    a6d2:	b6 01       	movw	r22, r12
    a6d4:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a6d8:	18 16       	cp	r1, r24
    a6da:	3c f4       	brge	.+14     	; 0xa6ea <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xed2>
      block->acceleration_st = axis_steps_per_sqr_second[E_AXIS];
    a6dc:	f1 01       	movw	r30, r2
    a6de:	ec 5b       	subi	r30, 0xBC	; 188
    a6e0:	ff 4f       	sbci	r31, 0xFF	; 255
    a6e2:	80 82       	st	Z, r8
    a6e4:	91 82       	std	Z+1, r9	; 0x01
    a6e6:	a2 82       	std	Z+2, r10	; 0x02
    a6e8:	b3 82       	std	Z+3, r11	; 0x03
    if(((float)block->acceleration_st * (float)block->steps_z / (float)block->step_event_count ) > axis_steps_per_sqr_second[Z_AXIS])
    a6ea:	80 90 42 0e 	lds	r8, 0x0E42
    a6ee:	90 90 43 0e 	lds	r9, 0x0E43
    a6f2:	a0 90 44 0e 	lds	r10, 0x0E44
    a6f6:	b0 90 45 0e 	lds	r11, 0x0E45
    a6fa:	f1 01       	movw	r30, r2
    a6fc:	ec 5b       	subi	r30, 0xBC	; 188
    a6fe:	ff 4f       	sbci	r31, 0xFF	; 255
    a700:	60 81       	ld	r22, Z
    a702:	71 81       	ldd	r23, Z+1	; 0x01
    a704:	82 81       	ldd	r24, Z+2	; 0x02
    a706:	93 81       	ldd	r25, Z+3	; 0x03
    a708:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a70c:	6b 01       	movw	r12, r22
    a70e:	7c 01       	movw	r14, r24
    a710:	d1 01       	movw	r26, r2
    a712:	18 96       	adiw	r26, 0x08	; 8
    a714:	6d 91       	ld	r22, X+
    a716:	7d 91       	ld	r23, X+
    a718:	8d 91       	ld	r24, X+
    a71a:	9c 91       	ld	r25, X
    a71c:	1b 97       	sbiw	r26, 0x0b	; 11
    a71e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    a722:	9b 01       	movw	r18, r22
    a724:	ac 01       	movw	r20, r24
    a726:	c7 01       	movw	r24, r14
    a728:	b6 01       	movw	r22, r12
    a72a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a72e:	a3 01       	movw	r20, r6
    a730:	92 01       	movw	r18, r4
    a732:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a736:	6b 01       	movw	r12, r22
    a738:	7c 01       	movw	r14, r24
    a73a:	c5 01       	movw	r24, r10
    a73c:	b4 01       	movw	r22, r8
    a73e:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a742:	9b 01       	movw	r18, r22
    a744:	ac 01       	movw	r20, r24
    a746:	c7 01       	movw	r24, r14
    a748:	b6 01       	movw	r22, r12
    a74a:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a74e:	18 16       	cp	r1, r24
    a750:	3c f4       	brge	.+14     	; 0xa760 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0xf48>
      block->acceleration_st = axis_steps_per_sqr_second[Z_AXIS];
    a752:	f1 01       	movw	r30, r2
    a754:	ec 5b       	subi	r30, 0xBC	; 188
    a756:	ff 4f       	sbci	r31, 0xFF	; 255
    a758:	80 82       	st	Z, r8
    a75a:	91 82       	std	Z+1, r9	; 0x01
    a75c:	a2 82       	std	Z+2, r10	; 0x02
    a75e:	b3 82       	std	Z+3, r11	; 0x03
  }
  block->acceleration = block->acceleration_st / steps_per_mm;
    a760:	f1 01       	movw	r30, r2
    a762:	ec 5b       	subi	r30, 0xBC	; 188
    a764:	ff 4f       	sbci	r31, 0xFF	; 255
    a766:	60 81       	ld	r22, Z
    a768:	71 81       	ldd	r23, Z+1	; 0x01
    a76a:	82 81       	ldd	r24, Z+2	; 0x02
    a76c:	93 81       	ldd	r25, Z+3	; 0x03
    a76e:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    a772:	6b 01       	movw	r12, r22
    a774:	7c 01       	movw	r14, r24
    a776:	9b a1       	ldd	r25, Y+35	; 0x23
    a778:	8f a1       	ldd	r24, Y+39	; 0x27
    a77a:	21 2f       	mov	r18, r17
    a77c:	30 2f       	mov	r19, r16
    a77e:	49 2f       	mov	r20, r25
    a780:	58 2f       	mov	r21, r24
    a782:	c7 01       	movw	r24, r14
    a784:	b6 01       	movw	r22, r12
    a786:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    a78a:	f6 2f       	mov	r31, r22
    a78c:	e7 2f       	mov	r30, r23
    a78e:	38 2f       	mov	r19, r24
    a790:	29 2f       	mov	r18, r25
    a792:	86 2f       	mov	r24, r22
    a794:	9e 2f       	mov	r25, r30
    a796:	a3 2f       	mov	r26, r19
    a798:	b2 2f       	mov	r27, r18
    a79a:	65 96       	adiw	r28, 0x15	; 21
    a79c:	8c af       	std	Y+60, r24	; 0x3c
    a79e:	9d af       	std	Y+61, r25	; 0x3d
    a7a0:	ae af       	std	Y+62, r26	; 0x3e
    a7a2:	bf af       	std	Y+63, r27	; 0x3f
    a7a4:	65 97       	sbiw	r28, 0x15	; 21
    a7a6:	4f 2f       	mov	r20, r31
    a7a8:	5e 2f       	mov	r21, r30
    a7aa:	63 2f       	mov	r22, r19
    a7ac:	72 2f       	mov	r23, r18
    a7ae:	f1 01       	movw	r30, r2
    a7b0:	42 ab       	std	Z+50, r20	; 0x32
    a7b2:	53 ab       	std	Z+51, r21	; 0x33
    a7b4:	64 ab       	std	Z+52, r22	; 0x34
    a7b6:	75 ab       	std	Z+53, r23	; 0x35
  block->acceleration_rate = (long)((float)block->acceleration_st * (16777216.0 / (F_CPU / 8.0)));
    a7b8:	2d eb       	ldi	r18, 0xBD	; 189
    a7ba:	37 e3       	ldi	r19, 0x37	; 55
    a7bc:	46 e0       	ldi	r20, 0x06	; 6
    a7be:	51 e4       	ldi	r21, 0x41	; 65
    a7c0:	c7 01       	movw	r24, r14
    a7c2:	b6 01       	movw	r22, r12
    a7c4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a7c8:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    a7cc:	d1 01       	movw	r26, r2
    a7ce:	5c 96       	adiw	r26, 0x1c	; 28
    a7d0:	6d 93       	st	X+, r22
    a7d2:	7d 93       	st	X+, r23
    a7d4:	8d 93       	st	X+, r24
    a7d6:	9c 93       	st	X, r25
    a7d8:	5f 97       	sbiw	r26, 0x1f	; 31
      }
    }
  }
#endif
  // Start with a safe speed
  float vmax_junction = max_xy_jerk/2; 
    a7da:	80 90 56 0e 	lds	r8, 0x0E56
    a7de:	90 90 57 0e 	lds	r9, 0x0E57
    a7e2:	a0 90 58 0e 	lds	r10, 0x0E58
    a7e6:	b0 90 59 0e 	lds	r11, 0x0E59
    a7ea:	20 e0       	ldi	r18, 0x00	; 0
    a7ec:	30 e0       	ldi	r19, 0x00	; 0
    a7ee:	40 e0       	ldi	r20, 0x00	; 0
    a7f0:	5f e3       	ldi	r21, 0x3F	; 63
    a7f2:	c5 01       	movw	r24, r10
    a7f4:	b4 01       	movw	r22, r8
    a7f6:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a7fa:	76 2e       	mov	r7, r22
    a7fc:	67 2e       	mov	r6, r23
    a7fe:	58 2e       	mov	r5, r24
    a800:	49 2e       	mov	r4, r25
    a802:	6b a7       	std	Y+43, r22	; 0x2b
    a804:	7f a7       	std	Y+47, r23	; 0x2f
    a806:	8f ab       	std	Y+55, r24	; 0x37
    a808:	98 af       	std	Y+56, r25	; 0x38
  float vmax_junction_factor = 1.0; 
  if(fabs(current_speed[Z_AXIS]) > max_z_jerk/2) 
    a80a:	29 85       	ldd	r18, Y+9	; 0x09
    a80c:	3a 85       	ldd	r19, Y+10	; 0x0a
    a80e:	4b 85       	ldd	r20, Y+11	; 0x0b
    a810:	5c 85       	ldd	r21, Y+12	; 0x0c
    a812:	2d 96       	adiw	r28, 0x0d	; 13
    a814:	2c af       	std	Y+60, r18	; 0x3c
    a816:	3d af       	std	Y+61, r19	; 0x3d
    a818:	4e af       	std	Y+62, r20	; 0x3e
    a81a:	5f af       	std	Y+63, r21	; 0x3f
    a81c:	2d 97       	sbiw	r28, 0x0d	; 13
    a81e:	80 91 52 0e 	lds	r24, 0x0E52
    a822:	90 91 53 0e 	lds	r25, 0x0E53
    a826:	a0 91 54 0e 	lds	r26, 0x0E54
    a82a:	b0 91 55 0e 	lds	r27, 0x0E55
    a82e:	29 96       	adiw	r28, 0x09	; 9
    a830:	8c af       	std	Y+60, r24	; 0x3c
    a832:	9d af       	std	Y+61, r25	; 0x3d
    a834:	ae af       	std	Y+62, r26	; 0x3e
    a836:	bf af       	std	Y+63, r27	; 0x3f
    a838:	29 97       	sbiw	r28, 0x09	; 9
    a83a:	20 e0       	ldi	r18, 0x00	; 0
    a83c:	30 e0       	ldi	r19, 0x00	; 0
    a83e:	40 e0       	ldi	r20, 0x00	; 0
    a840:	5f e3       	ldi	r21, 0x3F	; 63
    a842:	bc 01       	movw	r22, r24
    a844:	cd 01       	movw	r24, r26
    a846:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a84a:	f6 2e       	mov	r15, r22
    a84c:	e7 2e       	mov	r14, r23
    a84e:	d8 2e       	mov	r13, r24
    a850:	c9 2e       	mov	r12, r25
    a852:	2d 96       	adiw	r28, 0x0d	; 13
    a854:	6c ad       	ldd	r22, Y+60	; 0x3c
    a856:	7d ad       	ldd	r23, Y+61	; 0x3d
    a858:	8e ad       	ldd	r24, Y+62	; 0x3e
    a85a:	9f ad       	ldd	r25, Y+63	; 0x3f
    a85c:	2d 97       	sbiw	r28, 0x0d	; 13
    a85e:	9f 77       	andi	r25, 0x7F	; 127
    a860:	2f 2d       	mov	r18, r15
    a862:	3e 2d       	mov	r19, r14
    a864:	4d 2d       	mov	r20, r13
    a866:	5c 2d       	mov	r21, r12
    a868:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a86c:	18 16       	cp	r1, r24
    a86e:	84 f4       	brge	.+32     	; 0xa890 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1078>
    vmax_junction = min(vmax_junction, max_z_jerk/2);
    a870:	2f 2d       	mov	r18, r15
    a872:	3e 2d       	mov	r19, r14
    a874:	4d 2d       	mov	r20, r13
    a876:	5c 2d       	mov	r21, r12
    a878:	67 2d       	mov	r22, r7
    a87a:	76 2d       	mov	r23, r6
    a87c:	85 2d       	mov	r24, r5
    a87e:	94 2d       	mov	r25, r4
    a880:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    a884:	88 23       	and	r24, r24
    a886:	24 f0       	brlt	.+8      	; 0xa890 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1078>
    a888:	fb a6       	std	Y+43, r15	; 0x2b
    a88a:	ef a6       	std	Y+47, r14	; 0x2f
    a88c:	df aa       	std	Y+55, r13	; 0x37
    a88e:	c8 ae       	std	Y+56, r12	; 0x38
  if(fabs(current_speed[E_AXIS]) > max_e_jerk/2) 
    a890:	2d 85       	ldd	r18, Y+13	; 0x0d
    a892:	3e 85       	ldd	r19, Y+14	; 0x0e
    a894:	4f 85       	ldd	r20, Y+15	; 0x0f
    a896:	58 89       	ldd	r21, Y+16	; 0x10
    a898:	61 96       	adiw	r28, 0x11	; 17
    a89a:	2c af       	std	Y+60, r18	; 0x3c
    a89c:	3d af       	std	Y+61, r19	; 0x3d
    a89e:	4e af       	std	Y+62, r20	; 0x3e
    a8a0:	5f af       	std	Y+63, r21	; 0x3f
    a8a2:	61 97       	sbiw	r28, 0x11	; 17
    a8a4:	c0 90 4e 0e 	lds	r12, 0x0E4E
    a8a8:	d0 90 4f 0e 	lds	r13, 0x0E4F
    a8ac:	e0 90 50 0e 	lds	r14, 0x0E50
    a8b0:	f0 90 51 0e 	lds	r15, 0x0E51
    a8b4:	20 e0       	ldi	r18, 0x00	; 0
    a8b6:	30 e0       	ldi	r19, 0x00	; 0
    a8b8:	40 e0       	ldi	r20, 0x00	; 0
    a8ba:	5f e3       	ldi	r21, 0x3F	; 63
    a8bc:	c7 01       	movw	r24, r14
    a8be:	b6 01       	movw	r22, r12
    a8c0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    a8c4:	76 2e       	mov	r7, r22
    a8c6:	67 2e       	mov	r6, r23
    a8c8:	58 2e       	mov	r5, r24
    a8ca:	49 2e       	mov	r4, r25
    a8cc:	61 96       	adiw	r28, 0x11	; 17
    a8ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    a8d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    a8d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    a8d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    a8d6:	61 97       	sbiw	r28, 0x11	; 17
    a8d8:	9f 77       	andi	r25, 0x7F	; 127
    a8da:	27 2d       	mov	r18, r7
    a8dc:	36 2d       	mov	r19, r6
    a8de:	45 2d       	mov	r20, r5
    a8e0:	54 2d       	mov	r21, r4
    a8e2:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a8e6:	18 16       	cp	r1, r24
    a8e8:	a4 f4       	brge	.+40     	; 0xa912 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x10fa>
    vmax_junction = min(vmax_junction, max_e_jerk/2);
    a8ea:	27 2d       	mov	r18, r7
    a8ec:	36 2d       	mov	r19, r6
    a8ee:	45 2d       	mov	r20, r5
    a8f0:	54 2d       	mov	r21, r4
    a8f2:	bb a5       	ldd	r27, Y+43	; 0x2b
    a8f4:	af a5       	ldd	r26, Y+47	; 0x2f
    a8f6:	ff a9       	ldd	r31, Y+55	; 0x37
    a8f8:	e8 ad       	ldd	r30, Y+56	; 0x38
    a8fa:	6b 2f       	mov	r22, r27
    a8fc:	7a 2f       	mov	r23, r26
    a8fe:	8f 2f       	mov	r24, r31
    a900:	9e 2f       	mov	r25, r30
    a902:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    a906:	88 23       	and	r24, r24
    a908:	24 f0       	brlt	.+8      	; 0xa912 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x10fa>
    a90a:	7b a6       	std	Y+43, r7	; 0x2b
    a90c:	6f a6       	std	Y+47, r6	; 0x2f
    a90e:	5f aa       	std	Y+55, r5	; 0x37
    a910:	48 ae       	std	Y+56, r4	; 0x38
  vmax_junction = min(vmax_junction, block->nominal_speed);
    a912:	d1 01       	movw	r26, r2
    a914:	92 96       	adiw	r26, 0x22	; 34
    a916:	1c 91       	ld	r17, X
    a918:	92 97       	sbiw	r26, 0x22	; 34
    a91a:	93 96       	adiw	r26, 0x23	; 35
    a91c:	0c 91       	ld	r16, X
    a91e:	93 97       	sbiw	r26, 0x23	; 35
    a920:	94 96       	adiw	r26, 0x24	; 36
    a922:	bc 91       	ld	r27, X
    a924:	bb a3       	std	Y+35, r27	; 0x23
    a926:	f1 01       	movw	r30, r2
    a928:	f5 a1       	ldd	r31, Z+37	; 0x25
    a92a:	ff a3       	std	Y+39, r31	; 0x27
    a92c:	21 2f       	mov	r18, r17
    a92e:	30 2f       	mov	r19, r16
    a930:	4b 2f       	mov	r20, r27
    a932:	5f 2f       	mov	r21, r31
    a934:	bb a5       	ldd	r27, Y+43	; 0x2b
    a936:	af a5       	ldd	r26, Y+47	; 0x2f
    a938:	ff a9       	ldd	r31, Y+55	; 0x37
    a93a:	e8 ad       	ldd	r30, Y+56	; 0x38
    a93c:	6b 2f       	mov	r22, r27
    a93e:	7a 2f       	mov	r23, r26
    a940:	8f 2f       	mov	r24, r31
    a942:	9e 2f       	mov	r25, r30
    a944:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    a948:	88 23       	and	r24, r24
    a94a:	34 f0       	brlt	.+12     	; 0xa958 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1140>
    a94c:	1b a7       	std	Y+43, r17	; 0x2b
    a94e:	0f a7       	std	Y+47, r16	; 0x2f
    a950:	2b a1       	ldd	r18, Y+35	; 0x23
    a952:	2f ab       	std	Y+55, r18	; 0x37
    a954:	3f a1       	ldd	r19, Y+39	; 0x27
    a956:	38 af       	std	Y+56, r19	; 0x38
  float safe_speed = vmax_junction;

  if ((moves_queued > 1) && (previous_nominal_speed > 0.0001)) {
    a958:	67 96       	adiw	r28, 0x17	; 23
    a95a:	4e ad       	ldd	r20, Y+62	; 0x3e
    a95c:	5f ad       	ldd	r21, Y+63	; 0x3f
    a95e:	67 97       	sbiw	r28, 0x17	; 23
    a960:	42 30       	cpi	r20, 0x02	; 2
    a962:	51 05       	cpc	r21, r1
    a964:	0c f4       	brge	.+2      	; 0xa968 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1150>
    a966:	46 c1       	rjmp	.+652    	; 0xabf4 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x13dc>
    a968:	50 91 aa 0e 	lds	r21, 0x0EAA
    a96c:	66 96       	adiw	r28, 0x16	; 22
    a96e:	5f af       	std	Y+63, r21	; 0x3f
    a970:	66 97       	sbiw	r28, 0x16	; 22
    a972:	80 91 ab 0e 	lds	r24, 0x0EAB
    a976:	68 96       	adiw	r28, 0x18	; 24
    a978:	8f af       	std	Y+63, r24	; 0x3f
    a97a:	68 97       	sbiw	r28, 0x18	; 24
    a97c:	90 91 ac 0e 	lds	r25, 0x0EAC
    a980:	6c 96       	adiw	r28, 0x1c	; 28
    a982:	9f af       	std	Y+63, r25	; 0x3f
    a984:	6c 97       	sbiw	r28, 0x1c	; 28
    a986:	a0 91 ad 0e 	lds	r26, 0x0EAD
    a98a:	a1 96       	adiw	r28, 0x21	; 33
    a98c:	af af       	std	Y+63, r26	; 0x3f
    a98e:	a1 97       	sbiw	r28, 0x21	; 33
    a990:	27 e1       	ldi	r18, 0x17	; 23
    a992:	37 eb       	ldi	r19, 0xB7	; 183
    a994:	41 ed       	ldi	r20, 0xD1	; 209
    a996:	58 e3       	ldi	r21, 0x38	; 56
    a998:	66 96       	adiw	r28, 0x16	; 22
    a99a:	bf ad       	ldd	r27, Y+63	; 0x3f
    a99c:	66 97       	sbiw	r28, 0x16	; 22
    a99e:	a1 96       	adiw	r28, 0x21	; 33
    a9a0:	ef ad       	ldd	r30, Y+63	; 0x3f
    a9a2:	a1 97       	sbiw	r28, 0x21	; 33
    a9a4:	6b 2f       	mov	r22, r27
    a9a6:	78 2f       	mov	r23, r24
    a9a8:	89 2f       	mov	r24, r25
    a9aa:	9e 2f       	mov	r25, r30
    a9ac:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    a9b0:	18 16       	cp	r1, r24
    a9b2:	0c f0       	brlt	.+2      	; 0xa9b6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x119e>
    a9b4:	24 c1       	rjmp	.+584    	; 0xabfe <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x13e6>
    float jerk = sqrt(pow((current_speed[X_AXIS]-previous_speed[X_AXIS]), 2)+pow((current_speed[Y_AXIS]-previous_speed[Y_AXIS]), 2));
    a9b6:	20 91 9a 0e 	lds	r18, 0x0E9A
    a9ba:	30 91 9b 0e 	lds	r19, 0x0E9B
    a9be:	40 91 9c 0e 	lds	r20, 0x0E9C
    a9c2:	50 91 9d 0e 	lds	r21, 0x0E9D
    a9c6:	69 81       	ldd	r22, Y+1	; 0x01
    a9c8:	7a 81       	ldd	r23, Y+2	; 0x02
    a9ca:	8b 81       	ldd	r24, Y+3	; 0x03
    a9cc:	9c 81       	ldd	r25, Y+4	; 0x04
    a9ce:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    a9d2:	76 2e       	mov	r7, r22
    a9d4:	67 2e       	mov	r6, r23
    a9d6:	58 2e       	mov	r5, r24
    a9d8:	49 2e       	mov	r4, r25
    a9da:	20 91 9e 0e 	lds	r18, 0x0E9E
    a9de:	30 91 9f 0e 	lds	r19, 0x0E9F
    a9e2:	40 91 a0 0e 	lds	r20, 0x0EA0
    a9e6:	50 91 a1 0e 	lds	r21, 0x0EA1
    a9ea:	6d 81       	ldd	r22, Y+5	; 0x05
    a9ec:	7e 81       	ldd	r23, Y+6	; 0x06
    a9ee:	8f 81       	ldd	r24, Y+7	; 0x07
    a9f0:	98 85       	ldd	r25, Y+8	; 0x08
    a9f2:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    a9f6:	a5 96       	adiw	r28, 0x25	; 37
    a9f8:	6f af       	std	Y+63, r22	; 0x3f
    a9fa:	a5 97       	sbiw	r28, 0x25	; 37
    a9fc:	a7 96       	adiw	r28, 0x27	; 39
    a9fe:	7f af       	std	Y+63, r23	; 0x3f
    aa00:	a7 97       	sbiw	r28, 0x27	; 39
    aa02:	a8 96       	adiw	r28, 0x28	; 40
    aa04:	8f af       	std	Y+63, r24	; 0x3f
    aa06:	a8 97       	sbiw	r28, 0x28	; 40
    aa08:	a9 96       	adiw	r28, 0x29	; 41
    aa0a:	9f af       	std	Y+63, r25	; 0x3f
    aa0c:	a9 97       	sbiw	r28, 0x29	; 41
    aa0e:	27 2d       	mov	r18, r7
    aa10:	36 2d       	mov	r19, r6
    aa12:	45 2d       	mov	r20, r5
    aa14:	54 2d       	mov	r21, r4
    aa16:	67 2d       	mov	r22, r7
    aa18:	76 2d       	mov	r23, r6
    aa1a:	85 2d       	mov	r24, r5
    aa1c:	94 2d       	mov	r25, r4
    aa1e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    aa22:	2b 01       	movw	r4, r22
    aa24:	3c 01       	movw	r6, r24
    aa26:	a5 96       	adiw	r28, 0x25	; 37
    aa28:	7f ad       	ldd	r23, Y+63	; 0x3f
    aa2a:	a5 97       	sbiw	r28, 0x25	; 37
    aa2c:	a7 96       	adiw	r28, 0x27	; 39
    aa2e:	6f ad       	ldd	r22, Y+63	; 0x3f
    aa30:	a7 97       	sbiw	r28, 0x27	; 39
    aa32:	a8 96       	adiw	r28, 0x28	; 40
    aa34:	9f ad       	ldd	r25, Y+63	; 0x3f
    aa36:	a8 97       	sbiw	r28, 0x28	; 40
    aa38:	a9 96       	adiw	r28, 0x29	; 41
    aa3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    aa3c:	a9 97       	sbiw	r28, 0x29	; 41
    aa3e:	27 2f       	mov	r18, r23
    aa40:	36 2f       	mov	r19, r22
    aa42:	49 2f       	mov	r20, r25
    aa44:	58 2f       	mov	r21, r24
    aa46:	67 2f       	mov	r22, r23
    aa48:	73 2f       	mov	r23, r19
    aa4a:	89 2f       	mov	r24, r25
    aa4c:	95 2f       	mov	r25, r21
    aa4e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    aa52:	9b 01       	movw	r18, r22
    aa54:	ac 01       	movw	r20, r24
    aa56:	c3 01       	movw	r24, r6
    aa58:	b2 01       	movw	r22, r4
    aa5a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    aa5e:	0e 94 62 b9 	call	0x172c4	; 0x172c4 <sqrt>
    aa62:	2b 01       	movw	r4, r22
    aa64:	3c 01       	movw	r6, r24
    //    if((fabs(previous_speed[X_AXIS]) > 0.0001) || (fabs(previous_speed[Y_AXIS]) > 0.0001)) {
    vmax_junction = block->nominal_speed;
    //    }
    if (jerk > max_xy_jerk) {
    aa66:	9b 01       	movw	r18, r22
    aa68:	ac 01       	movw	r20, r24
    aa6a:	c5 01       	movw	r24, r10
    aa6c:	b4 01       	movw	r22, r8
    aa6e:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    aa72:	88 23       	and	r24, r24
    aa74:	5c f4       	brge	.+22     	; 0xaa8c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1274>
      vmax_junction_factor = (max_xy_jerk/jerk);
    aa76:	a3 01       	movw	r20, r6
    aa78:	92 01       	movw	r18, r4
    aa7a:	c5 01       	movw	r24, r10
    aa7c:	b4 01       	movw	r22, r8
    aa7e:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    aa82:	56 2e       	mov	r5, r22
    aa84:	47 2e       	mov	r4, r23
    aa86:	78 2e       	mov	r7, r24
    aa88:	69 2e       	mov	r6, r25
    aa8a:	09 c0       	rjmp	.+18     	; 0xaa9e <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1286>
    }
  }
#endif
  // Start with a safe speed
  float vmax_junction = max_xy_jerk/2; 
  float vmax_junction_factor = 1.0; 
    aa8c:	51 2c       	mov	r5, r1
    aa8e:	41 2c       	mov	r4, r1
    aa90:	68 94       	set
    aa92:	77 24       	eor	r7, r7
    aa94:	77 f8       	bld	r7, 7
    aa96:	0f 2e       	mov	r0, r31
    aa98:	ff e3       	ldi	r31, 0x3F	; 63
    aa9a:	6f 2e       	mov	r6, r31
    aa9c:	f0 2d       	mov	r31, r0
    vmax_junction = block->nominal_speed;
    //    }
    if (jerk > max_xy_jerk) {
      vmax_junction_factor = (max_xy_jerk/jerk);
    } 
    if(fabs(current_speed[Z_AXIS] - previous_speed[Z_AXIS]) > max_z_jerk) {
    aa9e:	20 91 a2 0e 	lds	r18, 0x0EA2
    aaa2:	30 91 a3 0e 	lds	r19, 0x0EA3
    aaa6:	40 91 a4 0e 	lds	r20, 0x0EA4
    aaaa:	50 91 a5 0e 	lds	r21, 0x0EA5
    aaae:	2d 96       	adiw	r28, 0x0d	; 13
    aab0:	6c ad       	ldd	r22, Y+60	; 0x3c
    aab2:	7d ad       	ldd	r23, Y+61	; 0x3d
    aab4:	8e ad       	ldd	r24, Y+62	; 0x3e
    aab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    aab8:	2d 97       	sbiw	r28, 0x0d	; 13
    aaba:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    aabe:	4b 01       	movw	r8, r22
    aac0:	5c 01       	movw	r10, r24
    aac2:	e8 94       	clt
    aac4:	b7 f8       	bld	r11, 7
    aac6:	a5 01       	movw	r20, r10
    aac8:	94 01       	movw	r18, r8
    aaca:	29 96       	adiw	r28, 0x09	; 9
    aacc:	6c ad       	ldd	r22, Y+60	; 0x3c
    aace:	7d ad       	ldd	r23, Y+61	; 0x3d
    aad0:	8e ad       	ldd	r24, Y+62	; 0x3e
    aad2:	9f ad       	ldd	r25, Y+63	; 0x3f
    aad4:	29 97       	sbiw	r28, 0x09	; 9
    aad6:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    aada:	88 23       	and	r24, r24
    aadc:	fc f4       	brge	.+62     	; 0xab1c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1304>
      vmax_junction_factor= min(vmax_junction_factor, (max_z_jerk/fabs(current_speed[Z_AXIS] - previous_speed[Z_AXIS])));
    aade:	a5 01       	movw	r20, r10
    aae0:	94 01       	movw	r18, r8
    aae2:	29 96       	adiw	r28, 0x09	; 9
    aae4:	6c ad       	ldd	r22, Y+60	; 0x3c
    aae6:	7d ad       	ldd	r23, Y+61	; 0x3d
    aae8:	8e ad       	ldd	r24, Y+62	; 0x3e
    aaea:	9f ad       	ldd	r25, Y+63	; 0x3f
    aaec:	29 97       	sbiw	r28, 0x09	; 9
    aaee:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    aaf2:	b6 2e       	mov	r11, r22
    aaf4:	a7 2e       	mov	r10, r23
    aaf6:	98 2e       	mov	r9, r24
    aaf8:	89 2e       	mov	r8, r25
    aafa:	76 2f       	mov	r23, r22
    aafc:	27 2f       	mov	r18, r23
    aafe:	3a 2d       	mov	r19, r10
    ab00:	49 2d       	mov	r20, r9
    ab02:	58 2d       	mov	r21, r8
    ab04:	65 2d       	mov	r22, r5
    ab06:	74 2d       	mov	r23, r4
    ab08:	87 2d       	mov	r24, r7
    ab0a:	96 2d       	mov	r25, r6
    ab0c:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    ab10:	88 23       	and	r24, r24
    ab12:	24 f0       	brlt	.+8      	; 0xab1c <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1304>
    ab14:	5b 2c       	mov	r5, r11
    ab16:	4a 2c       	mov	r4, r10
    ab18:	79 2c       	mov	r7, r9
    ab1a:	68 2c       	mov	r6, r8
    } 
    if(fabs(current_speed[E_AXIS] - previous_speed[E_AXIS]) > max_e_jerk) {
    ab1c:	20 91 a6 0e 	lds	r18, 0x0EA6
    ab20:	30 91 a7 0e 	lds	r19, 0x0EA7
    ab24:	40 91 a8 0e 	lds	r20, 0x0EA8
    ab28:	50 91 a9 0e 	lds	r21, 0x0EA9
    ab2c:	61 96       	adiw	r28, 0x11	; 17
    ab2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    ab30:	7d ad       	ldd	r23, Y+61	; 0x3d
    ab32:	8e ad       	ldd	r24, Y+62	; 0x3e
    ab34:	9f ad       	ldd	r25, Y+63	; 0x3f
    ab36:	61 97       	sbiw	r28, 0x11	; 17
    ab38:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    ab3c:	4b 01       	movw	r8, r22
    ab3e:	5c 01       	movw	r10, r24
    ab40:	e8 94       	clt
    ab42:	b7 f8       	bld	r11, 7
    ab44:	a5 01       	movw	r20, r10
    ab46:	94 01       	movw	r18, r8
    ab48:	c7 01       	movw	r24, r14
    ab4a:	b6 01       	movw	r22, r12
    ab4c:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    ab50:	88 23       	and	r24, r24
    ab52:	dc f4       	brge	.+54     	; 0xab8a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1372>
      vmax_junction_factor = min(vmax_junction_factor, (max_e_jerk/fabs(current_speed[E_AXIS] - previous_speed[E_AXIS])));
    ab54:	a5 01       	movw	r20, r10
    ab56:	94 01       	movw	r18, r8
    ab58:	c7 01       	movw	r24, r14
    ab5a:	b6 01       	movw	r22, r12
    ab5c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    ab60:	f6 2e       	mov	r15, r22
    ab62:	e7 2e       	mov	r14, r23
    ab64:	d8 2e       	mov	r13, r24
    ab66:	c9 2e       	mov	r12, r25
    ab68:	76 2f       	mov	r23, r22
    ab6a:	27 2f       	mov	r18, r23
    ab6c:	3e 2d       	mov	r19, r14
    ab6e:	4d 2d       	mov	r20, r13
    ab70:	5c 2d       	mov	r21, r12
    ab72:	65 2d       	mov	r22, r5
    ab74:	74 2d       	mov	r23, r4
    ab76:	87 2d       	mov	r24, r7
    ab78:	96 2d       	mov	r25, r6
    ab7a:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    ab7e:	88 23       	and	r24, r24
    ab80:	24 f0       	brlt	.+8      	; 0xab8a <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1372>
    ab82:	5f 2c       	mov	r5, r15
    ab84:	4e 2c       	mov	r4, r14
    ab86:	7d 2c       	mov	r7, r13
    ab88:	6c 2c       	mov	r6, r12
    } 
    vmax_junction = min(previous_nominal_speed, vmax_junction * vmax_junction_factor); // Limit speed to max previous speed
    ab8a:	9b a1       	ldd	r25, Y+35	; 0x23
    ab8c:	8f a1       	ldd	r24, Y+39	; 0x27
    ab8e:	21 2f       	mov	r18, r17
    ab90:	30 2f       	mov	r19, r16
    ab92:	49 2f       	mov	r20, r25
    ab94:	58 2f       	mov	r21, r24
    ab96:	65 2d       	mov	r22, r5
    ab98:	74 2d       	mov	r23, r4
    ab9a:	87 2d       	mov	r24, r7
    ab9c:	96 2d       	mov	r25, r6
    ab9e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    aba2:	b6 2e       	mov	r11, r22
    aba4:	a7 2e       	mov	r10, r23
    aba6:	98 2e       	mov	r9, r24
    aba8:	89 2e       	mov	r8, r25
    abaa:	26 2f       	mov	r18, r22
    abac:	37 2f       	mov	r19, r23
    abae:	48 2f       	mov	r20, r24
    abb0:	59 2f       	mov	r21, r25
    abb2:	66 96       	adiw	r28, 0x16	; 22
    abb4:	bf ad       	ldd	r27, Y+63	; 0x3f
    abb6:	66 97       	sbiw	r28, 0x16	; 22
    abb8:	68 96       	adiw	r28, 0x18	; 24
    abba:	af ad       	ldd	r26, Y+63	; 0x3f
    abbc:	68 97       	sbiw	r28, 0x18	; 24
    abbe:	6c 96       	adiw	r28, 0x1c	; 28
    abc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    abc2:	6c 97       	sbiw	r28, 0x1c	; 28
    abc4:	a1 96       	adiw	r28, 0x21	; 33
    abc6:	ef ad       	ldd	r30, Y+63	; 0x3f
    abc8:	a1 97       	sbiw	r28, 0x21	; 33
    abca:	6b 2f       	mov	r22, r27
    abcc:	7a 2f       	mov	r23, r26
    abce:	8f 2f       	mov	r24, r31
    abd0:	9e 2f       	mov	r25, r30
    abd2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    abd6:	88 23       	and	r24, r24
    abd8:	b4 f4       	brge	.+44     	; 0xac06 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x13ee>
    abda:	66 96       	adiw	r28, 0x16	; 22
    abdc:	bf ac       	ldd	r11, Y+63	; 0x3f
    abde:	66 97       	sbiw	r28, 0x16	; 22
    abe0:	68 96       	adiw	r28, 0x18	; 24
    abe2:	af ac       	ldd	r10, Y+63	; 0x3f
    abe4:	68 97       	sbiw	r28, 0x18	; 24
    abe6:	6c 96       	adiw	r28, 0x1c	; 28
    abe8:	9f ac       	ldd	r9, Y+63	; 0x3f
    abea:	6c 97       	sbiw	r28, 0x1c	; 28
    abec:	a1 96       	adiw	r28, 0x21	; 33
    abee:	8f ac       	ldd	r8, Y+63	; 0x3f
    abf0:	a1 97       	sbiw	r28, 0x21	; 33
    abf2:	09 c0       	rjmp	.+18     	; 0xac06 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x13ee>
  float vmax_junction_factor = 1.0; 
  if(fabs(current_speed[Z_AXIS]) > max_z_jerk/2) 
    vmax_junction = min(vmax_junction, max_z_jerk/2);
  if(fabs(current_speed[E_AXIS]) > max_e_jerk/2) 
    vmax_junction = min(vmax_junction, max_e_jerk/2);
  vmax_junction = min(vmax_junction, block->nominal_speed);
    abf4:	bb a4       	ldd	r11, Y+43	; 0x2b
    abf6:	af a4       	ldd	r10, Y+47	; 0x2f
    abf8:	9f a8       	ldd	r9, Y+55	; 0x37
    abfa:	88 ac       	ldd	r8, Y+56	; 0x38
    abfc:	04 c0       	rjmp	.+8      	; 0xac06 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x13ee>
    abfe:	bb a4       	ldd	r11, Y+43	; 0x2b
    ac00:	af a4       	ldd	r10, Y+47	; 0x2f
    ac02:	9f a8       	ldd	r9, Y+55	; 0x37
    ac04:	88 ac       	ldd	r8, Y+56	; 0x38
    if(fabs(current_speed[E_AXIS] - previous_speed[E_AXIS]) > max_e_jerk) {
      vmax_junction_factor = min(vmax_junction_factor, (max_e_jerk/fabs(current_speed[E_AXIS] - previous_speed[E_AXIS])));
    } 
    vmax_junction = min(previous_nominal_speed, vmax_junction * vmax_junction_factor); // Limit speed to max previous speed
  }
  block->max_entry_speed = vmax_junction;
    ac06:	8b 2d       	mov	r24, r11
    ac08:	9a 2d       	mov	r25, r10
    ac0a:	a9 2d       	mov	r26, r9
    ac0c:	b8 2d       	mov	r27, r8
    ac0e:	f1 01       	movw	r30, r2
    ac10:	82 a7       	std	Z+42, r24	; 0x2a
    ac12:	93 a7       	std	Z+43, r25	; 0x2b
    ac14:	a4 a7       	std	Z+44, r26	; 0x2c
    ac16:	b5 a7       	std	Z+45, r27	; 0x2d

  // Initialize block entry speed. Compute based on deceleration to user-defined MINIMUM_PLANNER_SPEED.
  double v_allowable = max_allowable_speed(-block->acceleration,MINIMUM_PLANNER_SPEED,block->millimeters);
    ac18:	65 96       	adiw	r28, 0x15	; 21
    ac1a:	6c ad       	ldd	r22, Y+60	; 0x3c
    ac1c:	7d ad       	ldd	r23, Y+61	; 0x3d
    ac1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ac20:	9f ad       	ldd	r25, Y+63	; 0x3f
    ac22:	65 97       	sbiw	r28, 0x15	; 21
    ac24:	90 58       	subi	r25, 0x80	; 128
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {
  return  sqrt(target_velocity*target_velocity-2*acceleration*distance);
    ac26:	9b 01       	movw	r18, r22
    ac28:	ac 01       	movw	r20, r24
    ac2a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    ac2e:	d1 01       	movw	r26, r2
    ac30:	9e 96       	adiw	r26, 0x2e	; 46
    ac32:	2d 91       	ld	r18, X+
    ac34:	3d 91       	ld	r19, X+
    ac36:	4d 91       	ld	r20, X+
    ac38:	5c 91       	ld	r21, X
    ac3a:	d1 97       	sbiw	r26, 0x31	; 49
    ac3c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    ac40:	9b 01       	movw	r18, r22
    ac42:	ac 01       	movw	r20, r24
    ac44:	6b e0       	ldi	r22, 0x0B	; 11
    ac46:	77 ed       	ldi	r23, 0xD7	; 215
    ac48:	83 e2       	ldi	r24, 0x23	; 35
    ac4a:	9b e3       	ldi	r25, 0x3B	; 59
    ac4c:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    ac50:	0e 94 62 b9 	call	0x172c4	; 0x172c4 <sqrt>
    ac54:	e6 2e       	mov	r14, r22
    ac56:	f7 2e       	mov	r15, r23
    ac58:	d8 2e       	mov	r13, r24
    ac5a:	c9 2e       	mov	r12, r25
  }
  block->max_entry_speed = vmax_junction;

  // Initialize block entry speed. Compute based on deceleration to user-defined MINIMUM_PLANNER_SPEED.
  double v_allowable = max_allowable_speed(-block->acceleration,MINIMUM_PLANNER_SPEED,block->millimeters);
  block->entry_speed = min(vmax_junction, v_allowable);
    ac5c:	76 2f       	mov	r23, r22
    ac5e:	27 2f       	mov	r18, r23
    ac60:	3f 2d       	mov	r19, r15
    ac62:	4d 2d       	mov	r20, r13
    ac64:	5c 2d       	mov	r21, r12
    ac66:	6b 2d       	mov	r22, r11
    ac68:	7a 2d       	mov	r23, r10
    ac6a:	89 2d       	mov	r24, r9
    ac6c:	98 2d       	mov	r25, r8
    ac6e:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    ac72:	88 23       	and	r24, r24
    ac74:	24 f0       	brlt	.+8      	; 0xac7e <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x1466>
    ac76:	be 2c       	mov	r11, r14
    ac78:	af 2c       	mov	r10, r15
    ac7a:	9d 2c       	mov	r9, r13
    ac7c:	8c 2c       	mov	r8, r12
    ac7e:	8b 2d       	mov	r24, r11
    ac80:	9a 2d       	mov	r25, r10
    ac82:	a9 2d       	mov	r26, r9
    ac84:	b8 2d       	mov	r27, r8
    ac86:	f1 01       	movw	r30, r2
    ac88:	86 a3       	std	Z+38, r24	; 0x26
    ac8a:	97 a3       	std	Z+39, r25	; 0x27
    ac8c:	a0 a7       	std	Z+40, r26	; 0x28
    ac8e:	b1 a7       	std	Z+41, r27	; 0x29
  // the current block and next block junction speeds are guaranteed to always be at their maximum
  // junction speeds in deceleration and acceleration, respectively. This is due to how the current
  // block nominal speed limits both the current and next maximum junction speeds. Hence, in both
  // the reverse and forward planners, the corresponding block junction speed will always be at the
  // the maximum junction speed and may always be ignored for any speed reduction checks.
  if (block->nominal_speed <= v_allowable) { 
    ac90:	2e 2d       	mov	r18, r14
    ac92:	3f 2d       	mov	r19, r15
    ac94:	4d 2d       	mov	r20, r13
    ac96:	5c 2d       	mov	r21, r12
    ac98:	fb a1       	ldd	r31, Y+35	; 0x23
    ac9a:	ef a1       	ldd	r30, Y+39	; 0x27
    ac9c:	61 2f       	mov	r22, r17
    ac9e:	70 2f       	mov	r23, r16
    aca0:	8f 2f       	mov	r24, r31
    aca2:	9e 2f       	mov	r25, r30
    aca4:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    aca8:	18 16       	cp	r1, r24
    acaa:	2c f0       	brlt	.+10     	; 0xacb6 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x149e>
    block->nominal_length_flag = true; 
    acac:	81 e0       	ldi	r24, 0x01	; 1
    acae:	d1 01       	movw	r26, r2
    acb0:	d7 96       	adiw	r26, 0x37	; 55
    acb2:	8c 93       	st	X, r24
    acb4:	02 c0       	rjmp	.+4      	; 0xacba <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x14a2>
  }
  else { 
    block->nominal_length_flag = false; 
    acb6:	f1 01       	movw	r30, r2
    acb8:	17 aa       	std	Z+55, r1	; 0x37
  }
  block->recalculate_flag = true; // Always calculate trapezoid for new block
    acba:	81 e0       	ldi	r24, 0x01	; 1
    acbc:	d1 01       	movw	r26, r2
    acbe:	d6 96       	adiw	r26, 0x36	; 54
    acc0:	8c 93       	st	X, r24

  // Update previous path unit_vector and nominal speed
  memcpy(previous_speed, current_speed, sizeof(previous_speed)); // previous_speed[] = current_speed[]
    acc2:	80 e1       	ldi	r24, 0x10	; 16
    acc4:	fe 01       	movw	r30, r28
    acc6:	31 96       	adiw	r30, 0x01	; 1
    acc8:	aa e9       	ldi	r26, 0x9A	; 154
    acca:	be e0       	ldi	r27, 0x0E	; 14
    accc:	01 90       	ld	r0, Z+
    acce:	0d 92       	st	X+, r0
    acd0:	8a 95       	dec	r24
    acd2:	e1 f7       	brne	.-8      	; 0xaccc <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh+0x14b4>
  previous_nominal_speed = block->nominal_speed;
    acd4:	3b a1       	ldd	r19, Y+35	; 0x23
    acd6:	2f a1       	ldd	r18, Y+39	; 0x27
    acd8:	81 2f       	mov	r24, r17
    acda:	90 2f       	mov	r25, r16
    acdc:	a3 2f       	mov	r26, r19
    acde:	b2 2f       	mov	r27, r18
    ace0:	80 93 aa 0e 	sts	0x0EAA, r24
    ace4:	90 93 ab 0e 	sts	0x0EAB, r25
    ace8:	a0 93 ac 0e 	sts	0x0EAC, r26
    acec:	b0 93 ad 0e 	sts	0x0EAD, r27
   SERIAL_ECHOLN(block->advance_rate/256.0);
   */
#endif // ADVANCE

  calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed,
  safe_speed/block->nominal_speed);
    acf0:	21 2f       	mov	r18, r17
    acf2:	30 2f       	mov	r19, r16
    acf4:	4a 2f       	mov	r20, r26
    acf6:	5b 2f       	mov	r21, r27
    acf8:	bb a5       	ldd	r27, Y+43	; 0x2b
    acfa:	af a5       	ldd	r26, Y+47	; 0x2f
    acfc:	ff a9       	ldd	r31, Y+55	; 0x37
    acfe:	e8 ad       	ldd	r30, Y+56	; 0x38
    ad00:	6b 2f       	mov	r22, r27
    ad02:	7a 2f       	mov	r23, r26
    ad04:	8f 2f       	mov	r24, r31
    ad06:	9e 2f       	mov	r25, r30
    ad08:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    ad0c:	6b 01       	movw	r12, r22
    ad0e:	7c 01       	movw	r14, r24
    ad10:	9b a1       	ldd	r25, Y+35	; 0x23
    ad12:	8f a1       	ldd	r24, Y+39	; 0x27
    ad14:	21 2f       	mov	r18, r17
    ad16:	30 2f       	mov	r19, r16
    ad18:	49 2f       	mov	r20, r25
    ad1a:	58 2f       	mov	r21, r24
    ad1c:	6b 2d       	mov	r22, r11
    ad1e:	7a 2d       	mov	r23, r10
    ad20:	89 2d       	mov	r24, r9
    ad22:	98 2d       	mov	r25, r8
    ad24:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    ad28:	ab 01       	movw	r20, r22
    ad2a:	bc 01       	movw	r22, r24
    ad2c:	97 01       	movw	r18, r14
    ad2e:	86 01       	movw	r16, r12
    ad30:	c1 01       	movw	r24, r2
    ad32:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <_Z29calculate_trapezoid_for_blockP7block_tff>

  // Move buffer head
  block_buffer_head = next_buffer_head;
    ad36:	a0 96       	adiw	r28, 0x20	; 32
    ad38:	bf ad       	ldd	r27, Y+63	; 0x3f
    ad3a:	a0 97       	sbiw	r28, 0x20	; 32
    ad3c:	b0 93 58 09 	sts	0x0958, r27

  // Update position
  memcpy(position, target, sizeof(target)); // position[] = target[]
    ad40:	ea e2       	ldi	r30, 0x2A	; 42
    ad42:	fe e0       	ldi	r31, 0x0E	; 14
    ad44:	29 ad       	ldd	r18, Y+57	; 0x39
    ad46:	3a ad       	ldd	r19, Y+58	; 0x3a
    ad48:	4b ad       	ldd	r20, Y+59	; 0x3b
    ad4a:	5c ad       	ldd	r21, Y+60	; 0x3c
    ad4c:	20 83       	st	Z, r18
    ad4e:	31 83       	std	Z+1, r19	; 0x01
    ad50:	42 83       	std	Z+2, r20	; 0x02
    ad52:	53 83       	std	Z+3, r21	; 0x03
    ad54:	21 96       	adiw	r28, 0x01	; 1
    ad56:	8c ad       	ldd	r24, Y+60	; 0x3c
    ad58:	9d ad       	ldd	r25, Y+61	; 0x3d
    ad5a:	ae ad       	ldd	r26, Y+62	; 0x3e
    ad5c:	bf ad       	ldd	r27, Y+63	; 0x3f
    ad5e:	21 97       	sbiw	r28, 0x01	; 1
    ad60:	84 83       	std	Z+4, r24	; 0x04
    ad62:	95 83       	std	Z+5, r25	; 0x05
    ad64:	a6 83       	std	Z+6, r26	; 0x06
    ad66:	b7 83       	std	Z+7, r27	; 0x07
    ad68:	25 96       	adiw	r28, 0x05	; 5
    ad6a:	2c ad       	ldd	r18, Y+60	; 0x3c
    ad6c:	3d ad       	ldd	r19, Y+61	; 0x3d
    ad6e:	4e ad       	ldd	r20, Y+62	; 0x3e
    ad70:	5f ad       	ldd	r21, Y+63	; 0x3f
    ad72:	25 97       	sbiw	r28, 0x05	; 5
    ad74:	20 87       	std	Z+8, r18	; 0x08
    ad76:	31 87       	std	Z+9, r19	; 0x09
    ad78:	42 87       	std	Z+10, r20	; 0x0a
    ad7a:	53 87       	std	Z+11, r21	; 0x0b
    ad7c:	8b a9       	ldd	r24, Y+51	; 0x33
    ad7e:	9c a9       	ldd	r25, Y+52	; 0x34
    ad80:	ad a9       	ldd	r26, Y+53	; 0x35
    ad82:	be a9       	ldd	r27, Y+54	; 0x36
    ad84:	84 87       	std	Z+12, r24	; 0x0c
    ad86:	95 87       	std	Z+13, r25	; 0x0d
    ad88:	a6 87       	std	Z+14, r26	; 0x0e
    ad8a:	b7 87       	std	Z+15, r27	; 0x0f

  planner_recalculate();
    ad8c:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <_Z19planner_recalculatev>

  st_wake_up();
    ad90:	0e 94 11 6a 	call	0xd422	; 0xd422 <_Z10st_wake_upv>
}
    ad94:	c5 59       	subi	r28, 0x95	; 149
    ad96:	df 4f       	sbci	r29, 0xFF	; 255
    ad98:	0f b6       	in	r0, 0x3f	; 63
    ad9a:	f8 94       	cli
    ad9c:	de bf       	out	0x3e, r29	; 62
    ad9e:	0f be       	out	0x3f, r0	; 63
    ada0:	cd bf       	out	0x3d, r28	; 61
    ada2:	df 91       	pop	r29
    ada4:	cf 91       	pop	r28
    ada6:	1f 91       	pop	r17
    ada8:	0f 91       	pop	r16
    adaa:	ff 90       	pop	r15
    adac:	ef 90       	pop	r14
    adae:	df 90       	pop	r13
    adb0:	cf 90       	pop	r12
    adb2:	bf 90       	pop	r11
    adb4:	af 90       	pop	r10
    adb6:	9f 90       	pop	r9
    adb8:	8f 90       	pop	r8
    adba:	7f 90       	pop	r7
    adbc:	6f 90       	pop	r6
    adbe:	5f 90       	pop	r5
    adc0:	4f 90       	pop	r4
    adc2:	3f 90       	pop	r3
    adc4:	2f 90       	pop	r2
    adc6:	08 95       	ret

0000adc8 <_Z17plan_set_positionRKfS0_S0_S0_>:

void plan_set_position(const float &x, const float &y, const float &z, const float &e)
{
    adc8:	ef 92       	push	r14
    adca:	ff 92       	push	r15
    adcc:	0f 93       	push	r16
    adce:	1f 93       	push	r17
    add0:	cf 93       	push	r28
    add2:	df 93       	push	r29
    add4:	7b 01       	movw	r14, r22
    add6:	8a 01       	movw	r16, r20
    add8:	e9 01       	movw	r28, r18
  position[X_AXIS] = lround(x*axis_steps_per_unit[X_AXIS]);
    adda:	20 91 76 0e 	lds	r18, 0x0E76
    adde:	30 91 77 0e 	lds	r19, 0x0E77
    ade2:	40 91 78 0e 	lds	r20, 0x0E78
    ade6:	50 91 79 0e 	lds	r21, 0x0E79
    adea:	fc 01       	movw	r30, r24
    adec:	60 81       	ld	r22, Z
    adee:	71 81       	ldd	r23, Z+1	; 0x01
    adf0:	82 81       	ldd	r24, Z+2	; 0x02
    adf2:	93 81       	ldd	r25, Z+3	; 0x03
    adf4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    adf8:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    adfc:	ea e2       	ldi	r30, 0x2A	; 42
    adfe:	fe e0       	ldi	r31, 0x0E	; 14
    ae00:	60 83       	st	Z, r22
    ae02:	71 83       	std	Z+1, r23	; 0x01
    ae04:	82 83       	std	Z+2, r24	; 0x02
    ae06:	93 83       	std	Z+3, r25	; 0x03
  position[Y_AXIS] = lround(y*axis_steps_per_unit[Y_AXIS]);
    ae08:	20 91 7a 0e 	lds	r18, 0x0E7A
    ae0c:	30 91 7b 0e 	lds	r19, 0x0E7B
    ae10:	40 91 7c 0e 	lds	r20, 0x0E7C
    ae14:	50 91 7d 0e 	lds	r21, 0x0E7D
    ae18:	f7 01       	movw	r30, r14
    ae1a:	60 81       	ld	r22, Z
    ae1c:	71 81       	ldd	r23, Z+1	; 0x01
    ae1e:	82 81       	ldd	r24, Z+2	; 0x02
    ae20:	93 81       	ldd	r25, Z+3	; 0x03
    ae22:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    ae26:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    ae2a:	ee e2       	ldi	r30, 0x2E	; 46
    ae2c:	fe e0       	ldi	r31, 0x0E	; 14
    ae2e:	60 83       	st	Z, r22
    ae30:	71 83       	std	Z+1, r23	; 0x01
    ae32:	82 83       	std	Z+2, r24	; 0x02
    ae34:	93 83       	std	Z+3, r25	; 0x03
  position[Z_AXIS] = lround(z*axis_steps_per_unit[Z_AXIS]);     
    ae36:	20 91 7e 0e 	lds	r18, 0x0E7E
    ae3a:	30 91 7f 0e 	lds	r19, 0x0E7F
    ae3e:	40 91 80 0e 	lds	r20, 0x0E80
    ae42:	50 91 81 0e 	lds	r21, 0x0E81
    ae46:	f8 01       	movw	r30, r16
    ae48:	60 81       	ld	r22, Z
    ae4a:	71 81       	ldd	r23, Z+1	; 0x01
    ae4c:	82 81       	ldd	r24, Z+2	; 0x02
    ae4e:	93 81       	ldd	r25, Z+3	; 0x03
    ae50:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    ae54:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    ae58:	e2 e3       	ldi	r30, 0x32	; 50
    ae5a:	fe e0       	ldi	r31, 0x0E	; 14
    ae5c:	60 83       	st	Z, r22
    ae5e:	71 83       	std	Z+1, r23	; 0x01
    ae60:	82 83       	std	Z+2, r24	; 0x02
    ae62:	93 83       	std	Z+3, r25	; 0x03
  position[E_AXIS] = lround(e*axis_steps_per_unit[E_AXIS]);  
    ae64:	20 91 82 0e 	lds	r18, 0x0E82
    ae68:	30 91 83 0e 	lds	r19, 0x0E83
    ae6c:	40 91 84 0e 	lds	r20, 0x0E84
    ae70:	50 91 85 0e 	lds	r21, 0x0E85
    ae74:	68 81       	ld	r22, Y
    ae76:	79 81       	ldd	r23, Y+1	; 0x01
    ae78:	8a 81       	ldd	r24, Y+2	; 0x02
    ae7a:	9b 81       	ldd	r25, Y+3	; 0x03
    ae7c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    ae80:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    ae84:	e6 e3       	ldi	r30, 0x36	; 54
    ae86:	fe e0       	ldi	r31, 0x0E	; 14
    ae88:	60 83       	st	Z, r22
    ae8a:	71 83       	std	Z+1, r23	; 0x01
    ae8c:	82 83       	std	Z+2, r24	; 0x02
    ae8e:	93 83       	std	Z+3, r25	; 0x03
  st_set_position(position[X_AXIS], position[Y_AXIS], position[Z_AXIS], position[E_AXIS]);
    ae90:	9f 01       	movw	r18, r30
    ae92:	42 e3       	ldi	r20, 0x32	; 50
    ae94:	5e e0       	ldi	r21, 0x0E	; 14
    ae96:	6e e2       	ldi	r22, 0x2E	; 46
    ae98:	7e e0       	ldi	r23, 0x0E	; 14
    ae9a:	8a e2       	ldi	r24, 0x2A	; 42
    ae9c:	9e e0       	ldi	r25, 0x0E	; 14
    ae9e:	0e 94 1b 72 	call	0xe436	; 0xe436 <_Z15st_set_positionRKlS0_S0_S0_>
  previous_nominal_speed = 0.0; // Resets planner junction speeds. Assumes start from rest.
    aea2:	10 92 aa 0e 	sts	0x0EAA, r1
    aea6:	10 92 ab 0e 	sts	0x0EAB, r1
    aeaa:	10 92 ac 0e 	sts	0x0EAC, r1
    aeae:	10 92 ad 0e 	sts	0x0EAD, r1
  previous_speed[0] = 0.0;
    aeb2:	10 92 9a 0e 	sts	0x0E9A, r1
    aeb6:	10 92 9b 0e 	sts	0x0E9B, r1
    aeba:	10 92 9c 0e 	sts	0x0E9C, r1
    aebe:	10 92 9d 0e 	sts	0x0E9D, r1
  previous_speed[1] = 0.0;
    aec2:	10 92 9e 0e 	sts	0x0E9E, r1
    aec6:	10 92 9f 0e 	sts	0x0E9F, r1
    aeca:	10 92 a0 0e 	sts	0x0EA0, r1
    aece:	10 92 a1 0e 	sts	0x0EA1, r1
  previous_speed[2] = 0.0;
    aed2:	10 92 a2 0e 	sts	0x0EA2, r1
    aed6:	10 92 a3 0e 	sts	0x0EA3, r1
    aeda:	10 92 a4 0e 	sts	0x0EA4, r1
    aede:	10 92 a5 0e 	sts	0x0EA5, r1
  previous_speed[3] = 0.0;
    aee2:	10 92 a6 0e 	sts	0x0EA6, r1
    aee6:	10 92 a7 0e 	sts	0x0EA7, r1
    aeea:	10 92 a8 0e 	sts	0x0EA8, r1
    aeee:	10 92 a9 0e 	sts	0x0EA9, r1
}
    aef2:	df 91       	pop	r29
    aef4:	cf 91       	pop	r28
    aef6:	1f 91       	pop	r17
    aef8:	0f 91       	pop	r16
    aefa:	ff 90       	pop	r15
    aefc:	ef 90       	pop	r14
    aefe:	08 95       	ret

0000af00 <_Z19plan_set_e_positionRKf>:

void plan_set_e_position(const float &e)
{
  position[E_AXIS] = lround(e*axis_steps_per_unit[E_AXIS]);  
    af00:	20 91 82 0e 	lds	r18, 0x0E82
    af04:	30 91 83 0e 	lds	r19, 0x0E83
    af08:	40 91 84 0e 	lds	r20, 0x0E84
    af0c:	50 91 85 0e 	lds	r21, 0x0E85
    af10:	fc 01       	movw	r30, r24
    af12:	60 81       	ld	r22, Z
    af14:	71 81       	ldd	r23, Z+1	; 0x01
    af16:	82 81       	ldd	r24, Z+2	; 0x02
    af18:	93 81       	ldd	r25, Z+3	; 0x03
    af1a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    af1e:	0e 94 c5 b8 	call	0x1718a	; 0x1718a <lround>
    af22:	e6 e3       	ldi	r30, 0x36	; 54
    af24:	fe e0       	ldi	r31, 0x0E	; 14
    af26:	60 83       	st	Z, r22
    af28:	71 83       	std	Z+1, r23	; 0x01
    af2a:	82 83       	std	Z+2, r24	; 0x02
    af2c:	93 83       	std	Z+3, r25	; 0x03
  st_set_e_position(position[E_AXIS]);
    af2e:	cf 01       	movw	r24, r30
    af30:	0c 94 57 72 	jmp	0xe4ae	; 0xe4ae <_Z17st_set_e_positionRKl>

0000af34 <_Z12movesplannedv>:
}

uint8_t movesplanned()
{
  return (block_buffer_head-block_buffer_tail + BLOCK_BUFFER_SIZE) & (BLOCK_BUFFER_SIZE - 1);
    af34:	80 91 58 09 	lds	r24, 0x0958
    af38:	90 91 57 09 	lds	r25, 0x0957
    af3c:	89 1b       	sub	r24, r25
}
    af3e:	8f 70       	andi	r24, 0x0F	; 15
    af40:	08 95       	ret

0000af42 <_Z20set_extrude_min_tempf>:

#ifdef PREVENT_DANGEROUS_EXTRUDE
void set_extrude_min_temp(float temp)
{
  extrude_min_temp=temp;
    af42:	60 93 3a 02 	sts	0x023A, r22
    af46:	70 93 3b 02 	sts	0x023B, r23
    af4a:	80 93 3c 02 	sts	0x023C, r24
    af4e:	90 93 3d 02 	sts	0x023D, r25
    af52:	08 95       	ret

0000af54 <_Z24reset_acceleration_ratesv>:
}
#endif

// Calculate the steps/s^2 acceleration rates, based on the mm/s^s
void reset_acceleration_rates()
{
    af54:	8f 92       	push	r8
    af56:	9f 92       	push	r9
    af58:	af 92       	push	r10
    af5a:	bf 92       	push	r11
    af5c:	cf 92       	push	r12
    af5e:	df 92       	push	r13
    af60:	ef 92       	push	r14
    af62:	ff 92       	push	r15
    af64:	0f 93       	push	r16
    af66:	1f 93       	push	r17
    af68:	cf 93       	push	r28
    af6a:	df 93       	push	r29
    af6c:	c6 e6       	ldi	r28, 0x66	; 102
    af6e:	de e0       	ldi	r29, 0x0E	; 14
    af70:	0f 2e       	mov	r0, r31
    af72:	f6 e7       	ldi	r31, 0x76	; 118
    af74:	ef 2e       	mov	r14, r31
    af76:	fe e0       	ldi	r31, 0x0E	; 14
    af78:	ff 2e       	mov	r15, r31
    af7a:	f0 2d       	mov	r31, r0
    af7c:	0a e3       	ldi	r16, 0x3A	; 58
    af7e:	1e e0       	ldi	r17, 0x0E	; 14
  extrude_min_temp=temp;
}
#endif

// Calculate the steps/s^2 acceleration rates, based on the mm/s^s
void reset_acceleration_rates()
    af80:	0f 2e       	mov	r0, r31
    af82:	f6 e7       	ldi	r31, 0x76	; 118
    af84:	cf 2e       	mov	r12, r31
    af86:	fe e0       	ldi	r31, 0x0E	; 14
    af88:	df 2e       	mov	r13, r31
    af8a:	f0 2d       	mov	r31, r0
{
	for(int8_t i=0; i < NUM_AXIS; i++)
        {
        axis_steps_per_sqr_second[i] = max_acceleration_units_per_sq_second[i] * axis_steps_per_unit[i];
    af8c:	69 91       	ld	r22, Y+
    af8e:	79 91       	ld	r23, Y+
    af90:	89 91       	ld	r24, Y+
    af92:	99 91       	ld	r25, Y+
    af94:	f7 01       	movw	r30, r14
    af96:	81 90       	ld	r8, Z+
    af98:	91 90       	ld	r9, Z+
    af9a:	a1 90       	ld	r10, Z+
    af9c:	b1 90       	ld	r11, Z+
    af9e:	7f 01       	movw	r14, r30
    afa0:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
    afa4:	a5 01       	movw	r20, r10
    afa6:	94 01       	movw	r18, r8
    afa8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    afac:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
    afb0:	f8 01       	movw	r30, r16
    afb2:	61 93       	st	Z+, r22
    afb4:	71 93       	st	Z+, r23
    afb6:	81 93       	st	Z+, r24
    afb8:	91 93       	st	Z+, r25
    afba:	8f 01       	movw	r16, r30
#endif

// Calculate the steps/s^2 acceleration rates, based on the mm/s^s
void reset_acceleration_rates()
{
	for(int8_t i=0; i < NUM_AXIS; i++)
    afbc:	cc 15       	cp	r28, r12
    afbe:	dd 05       	cpc	r29, r13
    afc0:	29 f7       	brne	.-54     	; 0xaf8c <_Z24reset_acceleration_ratesv+0x38>
        {
        axis_steps_per_sqr_second[i] = max_acceleration_units_per_sq_second[i] * axis_steps_per_unit[i];
        }
}
    afc2:	df 91       	pop	r29
    afc4:	cf 91       	pop	r28
    afc6:	1f 91       	pop	r17
    afc8:	0f 91       	pop	r16
    afca:	ff 90       	pop	r15
    afcc:	ef 90       	pop	r14
    afce:	df 90       	pop	r13
    afd0:	cf 90       	pop	r12
    afd2:	bf 90       	pop	r11
    afd4:	af 90       	pop	r10
    afd6:	9f 90       	pop	r9
    afd8:	8f 90       	pop	r8
    afda:	08 95       	ret

0000afdc <_ZL7spiInith>:

 fail:
  error(SD_CARD_ERROR_WRITE_MULTIPLE);
  chipSelectHigh();
  return false;
}
    afdc:	28 2f       	mov	r18, r24
    afde:	30 e0       	ldi	r19, 0x00	; 0
    afe0:	35 95       	asr	r19
    afe2:	27 95       	ror	r18
    afe4:	20 65       	ori	r18, 0x50	; 80
    afe6:	2c bd       	out	0x2c, r18	; 44
    afe8:	80 fd       	sbrc	r24, 0
    afea:	05 c0       	rjmp	.+10     	; 0xaff6 <_ZL7spiInith+0x1a>
    afec:	91 e0       	ldi	r25, 0x01	; 1
    afee:	86 30       	cpi	r24, 0x06	; 6
    aff0:	19 f4       	brne	.+6      	; 0xaff8 <_ZL7spiInith+0x1c>
    aff2:	90 e0       	ldi	r25, 0x00	; 0
    aff4:	01 c0       	rjmp	.+2      	; 0xaff8 <_ZL7spiInith+0x1c>
    aff6:	90 e0       	ldi	r25, 0x00	; 0
    aff8:	9d bd       	out	0x2d, r25	; 45
    affa:	08 95       	ret

0000affc <_ZL6spiRecv>:
    affc:	8f ef       	ldi	r24, 0xFF	; 255
    affe:	8e bd       	out	0x2e, r24	; 46
    b000:	0d b4       	in	r0, 0x2d	; 45
    b002:	07 fe       	sbrs	r0, 7
    b004:	fd cf       	rjmp	.-6      	; 0xb000 <_ZL6spiRecv+0x4>
    b006:	8e b5       	in	r24, 0x2e	; 46
    b008:	08 95       	ret

0000b00a <_ZL7spiSendh>:
    b00a:	8e bd       	out	0x2e, r24	; 46
    b00c:	0d b4       	in	r0, 0x2d	; 45
    b00e:	07 fe       	sbrs	r0, 7
    b010:	fd cf       	rjmp	.-6      	; 0xb00c <_ZL7spiSendh+0x2>
    b012:	08 95       	ret

0000b014 <_ZN7Sd2Card14chipSelectHighEv>:
    b014:	61 e0       	ldi	r22, 0x01	; 1
    b016:	fc 01       	movw	r30, r24
    b018:	80 81       	ld	r24, Z
    b01a:	0c 94 67 bc 	jmp	0x178ce	; 0x178ce <digitalWrite>

0000b01e <_ZN7Sd2Card13chipSelectLowEv>:
    b01e:	cf 93       	push	r28
    b020:	df 93       	push	r29
    b022:	ec 01       	movw	r28, r24
    b024:	8a 81       	ldd	r24, Y+2	; 0x02
    b026:	da df       	rcall	.-76     	; 0xafdc <_ZL7spiInith>
    b028:	60 e0       	ldi	r22, 0x00	; 0
    b02a:	88 81       	ld	r24, Y
    b02c:	0e 94 67 bc 	call	0x178ce	; 0x178ce <digitalWrite>
    b030:	df 91       	pop	r29
    b032:	cf 91       	pop	r28
    b034:	08 95       	ret

0000b036 <_ZN7Sd2Card8readDataEPhj>:
    b036:	cf 92       	push	r12
    b038:	df 92       	push	r13
    b03a:	ef 92       	push	r14
    b03c:	ff 92       	push	r15
    b03e:	0f 93       	push	r16
    b040:	1f 93       	push	r17
    b042:	cf 93       	push	r28
    b044:	df 93       	push	r29
    b046:	ec 01       	movw	r28, r24
    b048:	6b 01       	movw	r12, r22
    b04a:	7a 01       	movw	r14, r20
    b04c:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b050:	8b 01       	movw	r16, r22
    b052:	0a c0       	rjmp	.+20     	; 0xb068 <_ZN7Sd2Card8readDataEPhj+0x32>
    b054:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b058:	60 1b       	sub	r22, r16
    b05a:	71 0b       	sbc	r23, r17
    b05c:	6d 32       	cpi	r22, 0x2D	; 45
    b05e:	71 40       	sbci	r23, 0x01	; 1
    b060:	18 f0       	brcs	.+6      	; 0xb068 <_ZN7Sd2Card8readDataEPhj+0x32>
    b062:	81 e1       	ldi	r24, 0x11	; 17
    b064:	89 83       	std	Y+1, r24	; 0x01
    b066:	30 c0       	rjmp	.+96     	; 0xb0c8 <_ZN7Sd2Card8readDataEPhj+0x92>
    b068:	c9 df       	rcall	.-110    	; 0xaffc <_ZL6spiRecv>
    b06a:	8b 83       	std	Y+3, r24	; 0x03
    b06c:	8f 3f       	cpi	r24, 0xFF	; 255
    b06e:	91 f3       	breq	.-28     	; 0xb054 <_ZN7Sd2Card8readDataEPhj+0x1e>
    b070:	8e 3f       	cpi	r24, 0xFE	; 254
    b072:	19 f0       	breq	.+6      	; 0xb07a <_ZN7Sd2Card8readDataEPhj+0x44>
    b074:	8f e0       	ldi	r24, 0x0F	; 15
    b076:	89 83       	std	Y+1, r24	; 0x01
    b078:	27 c0       	rjmp	.+78     	; 0xb0c8 <_ZN7Sd2Card8readDataEPhj+0x92>
    b07a:	e1 14       	cp	r14, r1
    b07c:	f1 04       	cpc	r15, r1
    b07e:	f1 f0       	breq	.+60     	; 0xb0bc <_ZN7Sd2Card8readDataEPhj+0x86>
    b080:	81 e0       	ldi	r24, 0x01	; 1
    b082:	e8 1a       	sub	r14, r24
    b084:	f1 08       	sbc	r15, r1
    b086:	8f ef       	ldi	r24, 0xFF	; 255
    b088:	8e bd       	out	0x2e, r24	; 46
    b08a:	e1 14       	cp	r14, r1
    b08c:	f1 04       	cpc	r15, r1
    b08e:	71 f0       	breq	.+28     	; 0xb0ac <_ZN7Sd2Card8readDataEPhj+0x76>
    b090:	f6 01       	movw	r30, r12
    b092:	80 e0       	ldi	r24, 0x00	; 0
    b094:	90 e0       	ldi	r25, 0x00	; 0
    b096:	3f ef       	ldi	r19, 0xFF	; 255
    b098:	0d b4       	in	r0, 0x2d	; 45
    b09a:	07 fe       	sbrs	r0, 7
    b09c:	fd cf       	rjmp	.-6      	; 0xb098 <_ZN7Sd2Card8readDataEPhj+0x62>
    b09e:	2e b5       	in	r18, 0x2e	; 46
    b0a0:	21 93       	st	Z+, r18
    b0a2:	3e bd       	out	0x2e, r19	; 46
    b0a4:	01 96       	adiw	r24, 0x01	; 1
    b0a6:	8e 15       	cp	r24, r14
    b0a8:	9f 05       	cpc	r25, r15
    b0aa:	b0 f3       	brcs	.-20     	; 0xb098 <_ZN7Sd2Card8readDataEPhj+0x62>
    b0ac:	0d b4       	in	r0, 0x2d	; 45
    b0ae:	07 fe       	sbrs	r0, 7
    b0b0:	fd cf       	rjmp	.-6      	; 0xb0ac <_ZN7Sd2Card8readDataEPhj+0x76>
    b0b2:	8e b5       	in	r24, 0x2e	; 46
    b0b4:	f6 01       	movw	r30, r12
    b0b6:	ee 0d       	add	r30, r14
    b0b8:	ff 1d       	adc	r31, r15
    b0ba:	80 83       	st	Z, r24
    b0bc:	9f df       	rcall	.-194    	; 0xaffc <_ZL6spiRecv>
    b0be:	9e df       	rcall	.-196    	; 0xaffc <_ZL6spiRecv>
    b0c0:	ce 01       	movw	r24, r28
    b0c2:	a8 df       	rcall	.-176    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b0c4:	81 e0       	ldi	r24, 0x01	; 1
    b0c6:	03 c0       	rjmp	.+6      	; 0xb0ce <_ZN7Sd2Card8readDataEPhj+0x98>
    b0c8:	ce 01       	movw	r24, r28
    b0ca:	a4 df       	rcall	.-184    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b0cc:	80 e0       	ldi	r24, 0x00	; 0
    b0ce:	df 91       	pop	r29
    b0d0:	cf 91       	pop	r28
    b0d2:	1f 91       	pop	r17
    b0d4:	0f 91       	pop	r16
    b0d6:	ff 90       	pop	r15
    b0d8:	ef 90       	pop	r14
    b0da:	df 90       	pop	r13
    b0dc:	cf 90       	pop	r12
    b0de:	08 95       	ret

0000b0e0 <_ZN7Sd2Card10setSckRateEh>:
    b0e0:	67 30       	cpi	r22, 0x07	; 7
    b0e2:	28 f0       	brcs	.+10     	; 0xb0ee <_ZN7Sd2Card10setSckRateEh+0xe>
    b0e4:	28 e1       	ldi	r18, 0x18	; 24
    b0e6:	fc 01       	movw	r30, r24
    b0e8:	21 83       	std	Z+1, r18	; 0x01
    b0ea:	80 e0       	ldi	r24, 0x00	; 0
    b0ec:	08 95       	ret
    b0ee:	fc 01       	movw	r30, r24
    b0f0:	62 83       	std	Z+2, r22	; 0x02
    b0f2:	81 e0       	ldi	r24, 0x01	; 1
    b0f4:	08 95       	ret

0000b0f6 <_ZN7Sd2Card11waitNotBusyEj>:
    b0f6:	0f 93       	push	r16
    b0f8:	1f 93       	push	r17
    b0fa:	cf 93       	push	r28
    b0fc:	df 93       	push	r29
    b0fe:	eb 01       	movw	r28, r22
    b100:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b104:	8b 01       	movw	r16, r22
    b106:	07 c0       	rjmp	.+14     	; 0xb116 <_ZN7Sd2Card11waitNotBusyEj+0x20>
    b108:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b10c:	60 1b       	sub	r22, r16
    b10e:	71 0b       	sbc	r23, r17
    b110:	6c 17       	cp	r22, r28
    b112:	7d 07       	cpc	r23, r29
    b114:	28 f4       	brcc	.+10     	; 0xb120 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    b116:	72 df       	rcall	.-284    	; 0xaffc <_ZL6spiRecv>
    b118:	8f 3f       	cpi	r24, 0xFF	; 255
    b11a:	b1 f7       	brne	.-20     	; 0xb108 <_ZN7Sd2Card11waitNotBusyEj+0x12>
    b11c:	81 e0       	ldi	r24, 0x01	; 1
    b11e:	01 c0       	rjmp	.+2      	; 0xb122 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    b120:	80 e0       	ldi	r24, 0x00	; 0
    b122:	df 91       	pop	r29
    b124:	cf 91       	pop	r28
    b126:	1f 91       	pop	r17
    b128:	0f 91       	pop	r16
    b12a:	08 95       	ret

0000b12c <_ZN7Sd2Card11cardCommandEhm>:
    b12c:	bf 92       	push	r11
    b12e:	cf 92       	push	r12
    b130:	df 92       	push	r13
    b132:	ef 92       	push	r14
    b134:	ff 92       	push	r15
    b136:	0f 93       	push	r16
    b138:	1f 93       	push	r17
    b13a:	cf 93       	push	r28
    b13c:	df 93       	push	r29
    b13e:	8c 01       	movw	r16, r24
    b140:	b6 2e       	mov	r11, r22
    b142:	69 01       	movw	r12, r18
    b144:	7a 01       	movw	r14, r20
    b146:	6b df       	rcall	.-298    	; 0xb01e <_ZN7Sd2Card13chipSelectLowEv>
    b148:	6c e2       	ldi	r22, 0x2C	; 44
    b14a:	71 e0       	ldi	r23, 0x01	; 1
    b14c:	c8 01       	movw	r24, r16
    b14e:	d3 df       	rcall	.-90     	; 0xb0f6 <_ZN7Sd2Card11waitNotBusyEj>
    b150:	8b 2d       	mov	r24, r11
    b152:	80 64       	ori	r24, 0x40	; 64
    b154:	5a df       	rcall	.-332    	; 0xb00a <_ZL7spiSendh>
    b156:	c8 e1       	ldi	r28, 0x18	; 24
    b158:	d0 e0       	ldi	r29, 0x00	; 0
    b15a:	d7 01       	movw	r26, r14
    b15c:	c6 01       	movw	r24, r12
    b15e:	0c 2e       	mov	r0, r28
    b160:	04 c0       	rjmp	.+8      	; 0xb16a <_ZN7Sd2Card11cardCommandEhm+0x3e>
    b162:	b6 95       	lsr	r27
    b164:	a7 95       	ror	r26
    b166:	97 95       	ror	r25
    b168:	87 95       	ror	r24
    b16a:	0a 94       	dec	r0
    b16c:	d2 f7       	brpl	.-12     	; 0xb162 <_ZN7Sd2Card11cardCommandEhm+0x36>
    b16e:	4d df       	rcall	.-358    	; 0xb00a <_ZL7spiSendh>
    b170:	28 97       	sbiw	r28, 0x08	; 8
    b172:	c8 3f       	cpi	r28, 0xF8	; 248
    b174:	8f ef       	ldi	r24, 0xFF	; 255
    b176:	d8 07       	cpc	r29, r24
    b178:	81 f7       	brne	.-32     	; 0xb15a <_ZN7Sd2Card11cardCommandEhm+0x2e>
    b17a:	bb 20       	and	r11, r11
    b17c:	b9 f0       	breq	.+46     	; 0xb1ac <_ZN7Sd2Card11cardCommandEhm+0x80>
    b17e:	e8 e0       	ldi	r30, 0x08	; 8
    b180:	be 16       	cp	r11, r30
    b182:	79 f0       	breq	.+30     	; 0xb1a2 <_ZN7Sd2Card11cardCommandEhm+0x76>
    b184:	8f ef       	ldi	r24, 0xFF	; 255
    b186:	41 df       	rcall	.-382    	; 0xb00a <_ZL7spiSendh>
    b188:	fc e0       	ldi	r31, 0x0C	; 12
    b18a:	bf 12       	cpse	r11, r31
    b18c:	01 c0       	rjmp	.+2      	; 0xb190 <_ZN7Sd2Card11cardCommandEhm+0x64>
    b18e:	36 df       	rcall	.-404    	; 0xaffc <_ZL6spiRecv>
    b190:	c0 e0       	ldi	r28, 0x00	; 0
    b192:	34 df       	rcall	.-408    	; 0xaffc <_ZL6spiRecv>
    b194:	f8 01       	movw	r30, r16
    b196:	83 83       	std	Z+3, r24	; 0x03
    b198:	88 23       	and	r24, r24
    b19a:	5c f4       	brge	.+22     	; 0xb1b2 <_ZN7Sd2Card11cardCommandEhm+0x86>
    b19c:	cf 3f       	cpi	r28, 0xFF	; 255
    b19e:	21 f4       	brne	.+8      	; 0xb1a8 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    b1a0:	08 c0       	rjmp	.+16     	; 0xb1b2 <_ZN7Sd2Card11cardCommandEhm+0x86>
    b1a2:	87 e8       	ldi	r24, 0x87	; 135
    b1a4:	32 df       	rcall	.-412    	; 0xb00a <_ZL7spiSendh>
    b1a6:	f4 cf       	rjmp	.-24     	; 0xb190 <_ZN7Sd2Card11cardCommandEhm+0x64>
    b1a8:	cf 5f       	subi	r28, 0xFF	; 255
    b1aa:	f3 cf       	rjmp	.-26     	; 0xb192 <_ZN7Sd2Card11cardCommandEhm+0x66>
    b1ac:	85 e9       	ldi	r24, 0x95	; 149
    b1ae:	2d df       	rcall	.-422    	; 0xb00a <_ZL7spiSendh>
    b1b0:	ef cf       	rjmp	.-34     	; 0xb190 <_ZN7Sd2Card11cardCommandEhm+0x64>
    b1b2:	df 91       	pop	r29
    b1b4:	cf 91       	pop	r28
    b1b6:	1f 91       	pop	r17
    b1b8:	0f 91       	pop	r16
    b1ba:	ff 90       	pop	r15
    b1bc:	ef 90       	pop	r14
    b1be:	df 90       	pop	r13
    b1c0:	cf 90       	pop	r12
    b1c2:	bf 90       	pop	r11
    b1c4:	08 95       	ret

0000b1c6 <_ZN7Sd2Card9readBlockEmPh>:
    b1c6:	0f 93       	push	r16
    b1c8:	1f 93       	push	r17
    b1ca:	cf 93       	push	r28
    b1cc:	df 93       	push	r29
    b1ce:	ec 01       	movw	r28, r24
    b1d0:	89 01       	movw	r16, r18
    b1d2:	8c 81       	ldd	r24, Y+4	; 0x04
    b1d4:	83 30       	cpi	r24, 0x03	; 3
    b1d6:	49 f0       	breq	.+18     	; 0xb1ea <_ZN7Sd2Card9readBlockEmPh+0x24>
    b1d8:	03 2e       	mov	r0, r19
    b1da:	39 e0       	ldi	r19, 0x09	; 9
    b1dc:	44 0f       	add	r20, r20
    b1de:	55 1f       	adc	r21, r21
    b1e0:	66 1f       	adc	r22, r22
    b1e2:	77 1f       	adc	r23, r23
    b1e4:	3a 95       	dec	r19
    b1e6:	d1 f7       	brne	.-12     	; 0xb1dc <_ZN7Sd2Card9readBlockEmPh+0x16>
    b1e8:	30 2d       	mov	r19, r0
    b1ea:	9a 01       	movw	r18, r20
    b1ec:	ab 01       	movw	r20, r22
    b1ee:	61 e1       	ldi	r22, 0x11	; 17
    b1f0:	ce 01       	movw	r24, r28
    b1f2:	9c df       	rcall	.-200    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b1f4:	88 23       	and	r24, r24
    b1f6:	31 f0       	breq	.+12     	; 0xb204 <_ZN7Sd2Card9readBlockEmPh+0x3e>
    b1f8:	84 e0       	ldi	r24, 0x04	; 4
    b1fa:	89 83       	std	Y+1, r24	; 0x01
    b1fc:	ce 01       	movw	r24, r28
    b1fe:	0a df       	rcall	.-492    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b200:	80 e0       	ldi	r24, 0x00	; 0
    b202:	05 c0       	rjmp	.+10     	; 0xb20e <_ZN7Sd2Card9readBlockEmPh+0x48>
    b204:	40 e0       	ldi	r20, 0x00	; 0
    b206:	52 e0       	ldi	r21, 0x02	; 2
    b208:	b8 01       	movw	r22, r16
    b20a:	ce 01       	movw	r24, r28
    b20c:	14 df       	rcall	.-472    	; 0xb036 <_ZN7Sd2Card8readDataEPhj>
    b20e:	df 91       	pop	r29
    b210:	cf 91       	pop	r28
    b212:	1f 91       	pop	r17
    b214:	0f 91       	pop	r16
    b216:	08 95       	ret

0000b218 <_ZN7Sd2Card4initEhh>:
    b218:	8f 92       	push	r8
    b21a:	9f 92       	push	r9
    b21c:	af 92       	push	r10
    b21e:	bf 92       	push	r11
    b220:	ff 92       	push	r15
    b222:	0f 93       	push	r16
    b224:	1f 93       	push	r17
    b226:	cf 93       	push	r28
    b228:	df 93       	push	r29
    b22a:	ec 01       	movw	r28, r24
    b22c:	f6 2e       	mov	r15, r22
    b22e:	1c 82       	std	Y+4, r1	; 0x04
    b230:	19 82       	std	Y+1, r1	; 0x01
    b232:	48 83       	st	Y, r20
    b234:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b238:	8b 01       	movw	r16, r22
    b23a:	61 e0       	ldi	r22, 0x01	; 1
    b23c:	88 81       	ld	r24, Y
    b23e:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
    b242:	ce 01       	movw	r24, r28
    b244:	e7 de       	rcall	.-562    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b246:	60 e0       	ldi	r22, 0x00	; 0
    b248:	82 e3       	ldi	r24, 0x32	; 50
    b24a:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
    b24e:	61 e0       	ldi	r22, 0x01	; 1
    b250:	83 e3       	ldi	r24, 0x33	; 51
    b252:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
    b256:	61 e0       	ldi	r22, 0x01	; 1
    b258:	84 e3       	ldi	r24, 0x34	; 52
    b25a:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
    b25e:	61 e0       	ldi	r22, 0x01	; 1
    b260:	85 e3       	ldi	r24, 0x35	; 53
    b262:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
    b266:	61 e0       	ldi	r22, 0x01	; 1
    b268:	85 e3       	ldi	r24, 0x35	; 53
    b26a:	0e 94 67 bc 	call	0x178ce	; 0x178ce <digitalWrite>
    b26e:	85 e0       	ldi	r24, 0x05	; 5
    b270:	8a 83       	std	Y+2, r24	; 0x02
    b272:	b4 de       	rcall	.-664    	; 0xafdc <_ZL7spiInith>
    b274:	0f 2e       	mov	r0, r31
    b276:	fa e0       	ldi	r31, 0x0A	; 10
    b278:	bf 2e       	mov	r11, r31
    b27a:	f0 2d       	mov	r31, r0
    b27c:	8f ef       	ldi	r24, 0xFF	; 255
    b27e:	c5 de       	rcall	.-630    	; 0xb00a <_ZL7spiSendh>
    b280:	ba 94       	dec	r11
    b282:	e1 f7       	brne	.-8      	; 0xb27c <_ZN7Sd2Card4initEhh+0x64>
    b284:	0a c0       	rjmp	.+20     	; 0xb29a <_ZN7Sd2Card4initEhh+0x82>
    b286:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b28a:	60 1b       	sub	r22, r16
    b28c:	71 0b       	sbc	r23, r17
    b28e:	61 3d       	cpi	r22, 0xD1	; 209
    b290:	77 40       	sbci	r23, 0x07	; 7
    b292:	18 f0       	brcs	.+6      	; 0xb29a <_ZN7Sd2Card4initEhh+0x82>
    b294:	81 e0       	ldi	r24, 0x01	; 1
    b296:	89 83       	std	Y+1, r24	; 0x01
    b298:	63 c0       	rjmp	.+198    	; 0xb360 <_ZN7Sd2Card4initEhh+0x148>
    b29a:	20 e0       	ldi	r18, 0x00	; 0
    b29c:	30 e0       	ldi	r19, 0x00	; 0
    b29e:	a9 01       	movw	r20, r18
    b2a0:	60 e0       	ldi	r22, 0x00	; 0
    b2a2:	ce 01       	movw	r24, r28
    b2a4:	43 df       	rcall	.-378    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b2a6:	8b 83       	std	Y+3, r24	; 0x03
    b2a8:	81 30       	cpi	r24, 0x01	; 1
    b2aa:	69 f7       	brne	.-38     	; 0xb286 <_ZN7Sd2Card4initEhh+0x6e>
    b2ac:	2a ea       	ldi	r18, 0xAA	; 170
    b2ae:	31 e0       	ldi	r19, 0x01	; 1
    b2b0:	40 e0       	ldi	r20, 0x00	; 0
    b2b2:	50 e0       	ldi	r21, 0x00	; 0
    b2b4:	68 e0       	ldi	r22, 0x08	; 8
    b2b6:	ce 01       	movw	r24, r28
    b2b8:	39 df       	rcall	.-398    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b2ba:	82 ff       	sbrs	r24, 2
    b2bc:	03 c0       	rjmp	.+6      	; 0xb2c4 <_ZN7Sd2Card4initEhh+0xac>
    b2be:	81 e0       	ldi	r24, 0x01	; 1
    b2c0:	8c 83       	std	Y+4, r24	; 0x04
    b2c2:	0e c0       	rjmp	.+28     	; 0xb2e0 <_ZN7Sd2Card4initEhh+0xc8>
    b2c4:	68 94       	set
    b2c6:	bb 24       	eor	r11, r11
    b2c8:	b2 f8       	bld	r11, 2
    b2ca:	98 de       	rcall	.-720    	; 0xaffc <_ZL6spiRecv>
    b2cc:	8b 83       	std	Y+3, r24	; 0x03
    b2ce:	ba 94       	dec	r11
    b2d0:	e1 f7       	brne	.-8      	; 0xb2ca <_ZN7Sd2Card4initEhh+0xb2>
    b2d2:	8a 3a       	cpi	r24, 0xAA	; 170
    b2d4:	19 f0       	breq	.+6      	; 0xb2dc <_ZN7Sd2Card4initEhh+0xc4>
    b2d6:	82 e0       	ldi	r24, 0x02	; 2
    b2d8:	89 83       	std	Y+1, r24	; 0x01
    b2da:	42 c0       	rjmp	.+132    	; 0xb360 <_ZN7Sd2Card4initEhh+0x148>
    b2dc:	82 e0       	ldi	r24, 0x02	; 2
    b2de:	8c 83       	std	Y+4, r24	; 0x04
    b2e0:	8c 81       	ldd	r24, Y+4	; 0x04
    b2e2:	82 30       	cpi	r24, 0x02	; 2
    b2e4:	31 f4       	brne	.+12     	; 0xb2f2 <_ZN7Sd2Card4initEhh+0xda>
    b2e6:	81 2c       	mov	r8, r1
    b2e8:	91 2c       	mov	r9, r1
    b2ea:	54 01       	movw	r10, r8
    b2ec:	68 94       	set
    b2ee:	b6 f8       	bld	r11, 6
    b2f0:	0e c0       	rjmp	.+28     	; 0xb30e <_ZN7Sd2Card4initEhh+0xf6>
    b2f2:	81 2c       	mov	r8, r1
    b2f4:	91 2c       	mov	r9, r1
    b2f6:	54 01       	movw	r10, r8
    b2f8:	0a c0       	rjmp	.+20     	; 0xb30e <_ZN7Sd2Card4initEhh+0xf6>
    b2fa:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    b2fe:	60 1b       	sub	r22, r16
    b300:	71 0b       	sbc	r23, r17
    b302:	61 3d       	cpi	r22, 0xD1	; 209
    b304:	77 40       	sbci	r23, 0x07	; 7
    b306:	18 f0       	brcs	.+6      	; 0xb30e <_ZN7Sd2Card4initEhh+0xf6>
    b308:	8a e0       	ldi	r24, 0x0A	; 10
    b30a:	89 83       	std	Y+1, r24	; 0x01
    b30c:	29 c0       	rjmp	.+82     	; 0xb360 <_ZN7Sd2Card4initEhh+0x148>
    b30e:	20 e0       	ldi	r18, 0x00	; 0
    b310:	30 e0       	ldi	r19, 0x00	; 0
    b312:	a9 01       	movw	r20, r18
    b314:	67 e3       	ldi	r22, 0x37	; 55
    b316:	ce 01       	movw	r24, r28
    b318:	09 df       	rcall	.-494    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b31a:	a5 01       	movw	r20, r10
    b31c:	94 01       	movw	r18, r8
    b31e:	69 e2       	ldi	r22, 0x29	; 41
    b320:	ce 01       	movw	r24, r28
    b322:	04 df       	rcall	.-504    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b324:	8b 83       	std	Y+3, r24	; 0x03
    b326:	81 11       	cpse	r24, r1
    b328:	e8 cf       	rjmp	.-48     	; 0xb2fa <_ZN7Sd2Card4initEhh+0xe2>
    b32a:	8c 81       	ldd	r24, Y+4	; 0x04
    b32c:	82 30       	cpi	r24, 0x02	; 2
    b32e:	91 f4       	brne	.+36     	; 0xb354 <_ZN7Sd2Card4initEhh+0x13c>
    b330:	20 e0       	ldi	r18, 0x00	; 0
    b332:	30 e0       	ldi	r19, 0x00	; 0
    b334:	a9 01       	movw	r20, r18
    b336:	6a e3       	ldi	r22, 0x3A	; 58
    b338:	ce 01       	movw	r24, r28
    b33a:	f8 de       	rcall	.-528    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b33c:	88 23       	and	r24, r24
    b33e:	19 f0       	breq	.+6      	; 0xb346 <_ZN7Sd2Card4initEhh+0x12e>
    b340:	88 e0       	ldi	r24, 0x08	; 8
    b342:	89 83       	std	Y+1, r24	; 0x01
    b344:	0d c0       	rjmp	.+26     	; 0xb360 <_ZN7Sd2Card4initEhh+0x148>
    b346:	5a de       	rcall	.-844    	; 0xaffc <_ZL6spiRecv>
    b348:	80 7c       	andi	r24, 0xC0	; 192
    b34a:	80 3c       	cpi	r24, 0xC0	; 192
    b34c:	69 f4       	brne	.+26     	; 0xb368 <_ZN7Sd2Card4initEhh+0x150>
    b34e:	83 e0       	ldi	r24, 0x03	; 3
    b350:	8c 83       	std	Y+4, r24	; 0x04
    b352:	0a c0       	rjmp	.+20     	; 0xb368 <_ZN7Sd2Card4initEhh+0x150>
    b354:	ce 01       	movw	r24, r28
    b356:	5e de       	rcall	.-836    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b358:	6f 2d       	mov	r22, r15
    b35a:	ce 01       	movw	r24, r28
    b35c:	c1 de       	rcall	.-638    	; 0xb0e0 <_ZN7Sd2Card10setSckRateEh>
    b35e:	08 c0       	rjmp	.+16     	; 0xb370 <_ZN7Sd2Card4initEhh+0x158>
    b360:	ce 01       	movw	r24, r28
    b362:	58 de       	rcall	.-848    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b364:	80 e0       	ldi	r24, 0x00	; 0
    b366:	04 c0       	rjmp	.+8      	; 0xb370 <_ZN7Sd2Card4initEhh+0x158>
    b368:	49 de       	rcall	.-878    	; 0xaffc <_ZL6spiRecv>
    b36a:	48 de       	rcall	.-880    	; 0xaffc <_ZL6spiRecv>
    b36c:	47 de       	rcall	.-882    	; 0xaffc <_ZL6spiRecv>
    b36e:	f2 cf       	rjmp	.-28     	; 0xb354 <_ZN7Sd2Card4initEhh+0x13c>
    b370:	df 91       	pop	r29
    b372:	cf 91       	pop	r28
    b374:	1f 91       	pop	r17
    b376:	0f 91       	pop	r16
    b378:	ff 90       	pop	r15
    b37a:	bf 90       	pop	r11
    b37c:	af 90       	pop	r10
    b37e:	9f 90       	pop	r9
    b380:	8f 90       	pop	r8
    b382:	08 95       	ret

0000b384 <_ZN7Sd2Card9writeDataEhPKh>:
    b384:	cf 93       	push	r28
    b386:	df 93       	push	r29
    b388:	ec 01       	movw	r28, r24
    b38a:	6e bd       	out	0x2e, r22	; 46
    b38c:	9a 01       	movw	r18, r20
    b38e:	2f 5f       	subi	r18, 0xFF	; 255
    b390:	3f 4f       	sbci	r19, 0xFF	; 255
    b392:	4f 5f       	subi	r20, 0xFF	; 255
    b394:	5d 4f       	sbci	r21, 0xFD	; 253
    b396:	0d b4       	in	r0, 0x2d	; 45
    b398:	07 fe       	sbrs	r0, 7
    b39a:	fd cf       	rjmp	.-6      	; 0xb396 <_ZN7Sd2Card9writeDataEhPKh+0x12>
    b39c:	f9 01       	movw	r30, r18
    b39e:	d9 01       	movw	r26, r18
    b3a0:	11 97       	sbiw	r26, 0x01	; 1
    b3a2:	8c 91       	ld	r24, X
    b3a4:	8e bd       	out	0x2e, r24	; 46
    b3a6:	0d b4       	in	r0, 0x2d	; 45
    b3a8:	07 fe       	sbrs	r0, 7
    b3aa:	fd cf       	rjmp	.-6      	; 0xb3a6 <_ZN7Sd2Card9writeDataEhPKh+0x22>
    b3ac:	80 81       	ld	r24, Z
    b3ae:	8e bd       	out	0x2e, r24	; 46
    b3b0:	2e 5f       	subi	r18, 0xFE	; 254
    b3b2:	3f 4f       	sbci	r19, 0xFF	; 255
    b3b4:	24 17       	cp	r18, r20
    b3b6:	35 07       	cpc	r19, r21
    b3b8:	71 f7       	brne	.-36     	; 0xb396 <_ZN7Sd2Card9writeDataEhPKh+0x12>
    b3ba:	0d b4       	in	r0, 0x2d	; 45
    b3bc:	07 fe       	sbrs	r0, 7
    b3be:	fd cf       	rjmp	.-6      	; 0xb3ba <_ZN7Sd2Card9writeDataEhPKh+0x36>
    b3c0:	8f ef       	ldi	r24, 0xFF	; 255
    b3c2:	23 de       	rcall	.-954    	; 0xb00a <_ZL7spiSendh>
    b3c4:	8f ef       	ldi	r24, 0xFF	; 255
    b3c6:	21 de       	rcall	.-958    	; 0xb00a <_ZL7spiSendh>
    b3c8:	19 de       	rcall	.-974    	; 0xaffc <_ZL6spiRecv>
    b3ca:	8b 83       	std	Y+3, r24	; 0x03
    b3cc:	8f 71       	andi	r24, 0x1F	; 31
    b3ce:	85 30       	cpi	r24, 0x05	; 5
    b3d0:	31 f0       	breq	.+12     	; 0xb3de <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    b3d2:	83 e1       	ldi	r24, 0x13	; 19
    b3d4:	89 83       	std	Y+1, r24	; 0x01
    b3d6:	ce 01       	movw	r24, r28
    b3d8:	1d de       	rcall	.-966    	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
    b3da:	80 e0       	ldi	r24, 0x00	; 0
    b3dc:	01 c0       	rjmp	.+2      	; 0xb3e0 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    b3de:	81 e0       	ldi	r24, 0x01	; 1
    b3e0:	df 91       	pop	r29
    b3e2:	cf 91       	pop	r28
    b3e4:	08 95       	ret

0000b3e6 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    b3e6:	0f 93       	push	r16
    b3e8:	1f 93       	push	r17
    b3ea:	cf 93       	push	r28
    b3ec:	df 93       	push	r29
    b3ee:	ec 01       	movw	r28, r24
    b3f0:	89 01       	movw	r16, r18
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    b3f2:	8c 81       	ldd	r24, Y+4	; 0x04
    b3f4:	83 30       	cpi	r24, 0x03	; 3
    b3f6:	49 f0       	breq	.+18     	; 0xb40a <_ZN7Sd2Card10writeBlockEmPKh+0x24>
    b3f8:	03 2e       	mov	r0, r19
    b3fa:	39 e0       	ldi	r19, 0x09	; 9
    b3fc:	44 0f       	add	r20, r20
    b3fe:	55 1f       	adc	r21, r21
    b400:	66 1f       	adc	r22, r22
    b402:	77 1f       	adc	r23, r23
    b404:	3a 95       	dec	r19
    b406:	d1 f7       	brne	.-12     	; 0xb3fc <_ZN7Sd2Card10writeBlockEmPKh+0x16>
    b408:	30 2d       	mov	r19, r0
  if (cardCommand(CMD24, blockNumber)) {
    b40a:	9a 01       	movw	r18, r20
    b40c:	ab 01       	movw	r20, r22
    b40e:	68 e1       	ldi	r22, 0x18	; 24
    b410:	ce 01       	movw	r24, r28
    b412:	8c de       	rcall	.-744    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b414:	88 23       	and	r24, r24
    b416:	19 f0       	breq	.+6      	; 0xb41e <_ZN7Sd2Card10writeBlockEmPKh+0x38>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    b418:	86 e0       	ldi	r24, 0x06	; 6
    b41a:	89 83       	std	Y+1, r24	; 0x01
    b41c:	21 c0       	rjmp	.+66     	; 0xb460 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    b41e:	a8 01       	movw	r20, r16
    b420:	6e ef       	ldi	r22, 0xFE	; 254
    b422:	ce 01       	movw	r24, r28
    b424:	af df       	rcall	.-162    	; 0xb384 <_ZN7Sd2Card9writeDataEhPKh>
    b426:	88 23       	and	r24, r24
    b428:	d9 f0       	breq	.+54     	; 0xb460 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    b42a:	68 e5       	ldi	r22, 0x58	; 88
    b42c:	72 e0       	ldi	r23, 0x02	; 2
    b42e:	ce 01       	movw	r24, r28
    b430:	62 de       	rcall	.-828    	; 0xb0f6 <_ZN7Sd2Card11waitNotBusyEj>
    b432:	81 11       	cpse	r24, r1
    b434:	03 c0       	rjmp	.+6      	; 0xb43c <_ZN7Sd2Card10writeBlockEmPKh+0x56>
    b436:	87 e1       	ldi	r24, 0x17	; 23
    b438:	89 83       	std	Y+1, r24	; 0x01
    b43a:	12 c0       	rjmp	.+36     	; 0xb460 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    b43c:	20 e0       	ldi	r18, 0x00	; 0
    b43e:	30 e0       	ldi	r19, 0x00	; 0
    b440:	a9 01       	movw	r20, r18
    b442:	6d e0       	ldi	r22, 0x0D	; 13
    b444:	ce 01       	movw	r24, r28
    b446:	72 de       	rcall	.-796    	; 0xb12c <_ZN7Sd2Card11cardCommandEhm>
    b448:	81 11       	cpse	r24, r1
    b44a:	03 c0       	rjmp	.+6      	; 0xb452 <_ZN7Sd2Card10writeBlockEmPKh+0x6c>
    b44c:	d7 dd       	rcall	.-1106   	; 0xaffc <_ZL6spiRecv>
    b44e:	88 23       	and	r24, r24
    b450:	19 f0       	breq	.+6      	; 0xb458 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    b452:	86 e1       	ldi	r24, 0x16	; 22
    b454:	89 83       	std	Y+1, r24	; 0x01
    b456:	04 c0       	rjmp	.+8      	; 0xb460 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    b458:	ce 01       	movw	r24, r28
    b45a:	dc dd       	rcall	.-1096   	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    b45c:	81 e0       	ldi	r24, 0x01	; 1
    b45e:	03 c0       	rjmp	.+6      	; 0xb466 <_ZN7Sd2Card10writeBlockEmPKh+0x80>

 fail:
  chipSelectHigh();
    b460:	ce 01       	movw	r24, r28
    b462:	d8 dd       	rcall	.-1104   	; 0xb014 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    b464:	80 e0       	ldi	r24, 0x00	; 0
}
    b466:	df 91       	pop	r29
    b468:	cf 91       	pop	r28
    b46a:	1f 91       	pop	r17
    b46c:	0f 91       	pop	r16
    b46e:	08 95       	ret

0000b470 <_ZN10SdBaseFile10addClusterEv>:
  d->name[0] = entry.name[0];
  vol_->cacheFlush();

 fail:
  return false;
}
    b470:	cf 93       	push	r28
    b472:	df 93       	push	r29
    b474:	ec 01       	movw	r28, r24
    b476:	9c 01       	movw	r18, r24
    b478:	2c 5f       	subi	r18, 0xFC	; 252
    b47a:	3f 4f       	sbci	r19, 0xFF	; 255
    b47c:	41 e0       	ldi	r20, 0x01	; 1
    b47e:	50 e0       	ldi	r21, 0x00	; 0
    b480:	60 e0       	ldi	r22, 0x00	; 0
    b482:	70 e0       	ldi	r23, 0x00	; 0
    b484:	89 8d       	ldd	r24, Y+25	; 0x19
    b486:	9a 8d       	ldd	r25, Y+26	; 0x1a
    b488:	0e 94 87 66 	call	0xcd0e	; 0xcd0e <_ZN8SdVolume15allocContiguousEmPm>
    b48c:	88 23       	and	r24, r24
    b48e:	a9 f0       	breq	.+42     	; 0xb4ba <_ZN10SdBaseFile10addClusterEv+0x4a>
    b490:	4d 89       	ldd	r20, Y+21	; 0x15
    b492:	5e 89       	ldd	r21, Y+22	; 0x16
    b494:	6f 89       	ldd	r22, Y+23	; 0x17
    b496:	78 8d       	ldd	r23, Y+24	; 0x18
    b498:	45 2b       	or	r20, r21
    b49a:	46 2b       	or	r20, r22
    b49c:	47 2b       	or	r20, r23
    b49e:	79 f4       	brne	.+30     	; 0xb4be <_ZN10SdBaseFile10addClusterEv+0x4e>
    b4a0:	4c 81       	ldd	r20, Y+4	; 0x04
    b4a2:	5d 81       	ldd	r21, Y+5	; 0x05
    b4a4:	6e 81       	ldd	r22, Y+6	; 0x06
    b4a6:	7f 81       	ldd	r23, Y+7	; 0x07
    b4a8:	4d 8b       	std	Y+21, r20	; 0x15
    b4aa:	5e 8b       	std	Y+22, r21	; 0x16
    b4ac:	6f 8b       	std	Y+23, r22	; 0x17
    b4ae:	78 8f       	std	Y+24, r23	; 0x18
    b4b0:	89 81       	ldd	r24, Y+1	; 0x01
    b4b2:	80 68       	ori	r24, 0x80	; 128
    b4b4:	89 83       	std	Y+1, r24	; 0x01
    b4b6:	81 e0       	ldi	r24, 0x01	; 1
    b4b8:	03 c0       	rjmp	.+6      	; 0xb4c0 <_ZN10SdBaseFile10addClusterEv+0x50>
    b4ba:	80 e0       	ldi	r24, 0x00	; 0
    b4bc:	01 c0       	rjmp	.+2      	; 0xb4c0 <_ZN10SdBaseFile10addClusterEv+0x50>
    b4be:	81 e0       	ldi	r24, 0x01	; 1
    b4c0:	df 91       	pop	r29
    b4c2:	cf 91       	pop	r28
    b4c4:	08 95       	ret

0000b4c6 <_ZN10SdBaseFile13addDirClusterEv>:
    b4c6:	cf 92       	push	r12
    b4c8:	df 92       	push	r13
    b4ca:	ef 92       	push	r14
    b4cc:	ff 92       	push	r15
    b4ce:	1f 93       	push	r17
    b4d0:	cf 93       	push	r28
    b4d2:	df 93       	push	r29
    b4d4:	ec 01       	movw	r28, r24
    b4d6:	49 89       	ldd	r20, Y+17	; 0x11
    b4d8:	5a 89       	ldd	r21, Y+18	; 0x12
    b4da:	6b 89       	ldd	r22, Y+19	; 0x13
    b4dc:	7c 89       	ldd	r23, Y+20	; 0x14
    b4de:	40 3e       	cpi	r20, 0xE0	; 224
    b4e0:	5f 4f       	sbci	r21, 0xFF	; 255
    b4e2:	6f 41       	sbci	r22, 0x1F	; 31
    b4e4:	71 05       	cpc	r23, r1
    b4e6:	08 f0       	brcs	.+2      	; 0xb4ea <_ZN10SdBaseFile13addDirClusterEv+0x24>
    b4e8:	6e c0       	rjmp	.+220    	; 0xb5c6 <_ZN10SdBaseFile13addDirClusterEv+0x100>
    b4ea:	c2 df       	rcall	.-124    	; 0xb470 <_ZN10SdBaseFile10addClusterEv>
    b4ec:	88 23       	and	r24, r24
    b4ee:	09 f4       	brne	.+2      	; 0xb4f2 <_ZN10SdBaseFile13addDirClusterEv+0x2c>
    b4f0:	6c c0       	rjmp	.+216    	; 0xb5ca <_ZN10SdBaseFile13addDirClusterEv+0x104>
    b4f2:	0e 94 5a 64 	call	0xc8b4	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    b4f6:	88 23       	and	r24, r24
    b4f8:	09 f4       	brne	.+2      	; 0xb4fc <_ZN10SdBaseFile13addDirClusterEv+0x36>
    b4fa:	69 c0       	rjmp	.+210    	; 0xb5ce <_ZN10SdBaseFile13addDirClusterEv+0x108>
    b4fc:	e9 8d       	ldd	r30, Y+25	; 0x19
    b4fe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b500:	cc 80       	ldd	r12, Y+4	; 0x04
    b502:	dd 80       	ldd	r13, Y+5	; 0x05
    b504:	ee 80       	ldd	r14, Y+6	; 0x06
    b506:	ff 80       	ldd	r15, Y+7	; 0x07
    b508:	32 e0       	ldi	r19, 0x02	; 2
    b50a:	c3 1a       	sub	r12, r19
    b50c:	d1 08       	sbc	r13, r1
    b50e:	e1 08       	sbc	r14, r1
    b510:	f1 08       	sbc	r15, r1
    b512:	05 84       	ldd	r0, Z+13	; 0x0d
    b514:	04 c0       	rjmp	.+8      	; 0xb51e <_ZN10SdBaseFile13addDirClusterEv+0x58>
    b516:	cc 0c       	add	r12, r12
    b518:	dd 1c       	adc	r13, r13
    b51a:	ee 1c       	adc	r14, r14
    b51c:	ff 1c       	adc	r15, r15
    b51e:	0a 94       	dec	r0
    b520:	d2 f7       	brpl	.-12     	; 0xb516 <_ZN10SdBaseFile13addDirClusterEv+0x50>
    b522:	86 85       	ldd	r24, Z+14	; 0x0e
    b524:	97 85       	ldd	r25, Z+15	; 0x0f
    b526:	a0 89       	ldd	r26, Z+16	; 0x10
    b528:	b1 89       	ldd	r27, Z+17	; 0x11
    b52a:	c8 0e       	add	r12, r24
    b52c:	d9 1e       	adc	r13, r25
    b52e:	ea 1e       	adc	r14, r26
    b530:	fb 1e       	adc	r15, r27
    b532:	81 e0       	ldi	r24, 0x01	; 1
    b534:	80 93 b8 0e 	sts	0x0EB8, r24
    b538:	c0 92 bb 10 	sts	0x10BB, r12
    b53c:	d0 92 bc 10 	sts	0x10BC, r13
    b540:	e0 92 bd 10 	sts	0x10BD, r14
    b544:	f0 92 be 10 	sts	0x10BE, r15
    b548:	80 e0       	ldi	r24, 0x00	; 0
    b54a:	92 e0       	ldi	r25, 0x02	; 2
    b54c:	eb eb       	ldi	r30, 0xBB	; 187
    b54e:	fe e0       	ldi	r31, 0x0E	; 14
    b550:	df 01       	movw	r26, r30
    b552:	9c 01       	movw	r18, r24
    b554:	1d 92       	st	X+, r1
    b556:	21 50       	subi	r18, 0x01	; 1
    b558:	30 40       	sbci	r19, 0x00	; 0
    b55a:	e1 f7       	brne	.-8      	; 0xb554 <_ZN10SdBaseFile13addDirClusterEv+0x8e>
    b55c:	e9 8d       	ldd	r30, Y+25	; 0x19
    b55e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b560:	84 81       	ldd	r24, Z+4	; 0x04
    b562:	82 30       	cpi	r24, 0x02	; 2
    b564:	b0 f0       	brcs	.+44     	; 0xb592 <_ZN10SdBaseFile13addDirClusterEv+0xcc>
    b566:	11 e0       	ldi	r17, 0x01	; 1
    b568:	b7 01       	movw	r22, r14
    b56a:	a6 01       	movw	r20, r12
    b56c:	41 0f       	add	r20, r17
    b56e:	51 1d       	adc	r21, r1
    b570:	61 1d       	adc	r22, r1
    b572:	71 1d       	adc	r23, r1
    b574:	2b eb       	ldi	r18, 0xBB	; 187
    b576:	3e e0       	ldi	r19, 0x0E	; 14
    b578:	80 91 b9 0e 	lds	r24, 0x0EB9
    b57c:	90 91 ba 0e 	lds	r25, 0x0EBA
    b580:	32 df       	rcall	.-412    	; 0xb3e6 <_ZN7Sd2Card10writeBlockEmPKh>
    b582:	88 23       	and	r24, r24
    b584:	31 f1       	breq	.+76     	; 0xb5d2 <_ZN10SdBaseFile13addDirClusterEv+0x10c>
    b586:	1f 5f       	subi	r17, 0xFF	; 255
    b588:	e9 8d       	ldd	r30, Y+25	; 0x19
    b58a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b58c:	84 81       	ldd	r24, Z+4	; 0x04
    b58e:	18 17       	cp	r17, r24
    b590:	58 f3       	brcs	.-42     	; 0xb568 <_ZN10SdBaseFile13addDirClusterEv+0xa2>
    b592:	80 e0       	ldi	r24, 0x00	; 0
    b594:	92 e0       	ldi	r25, 0x02	; 2
    b596:	a0 e0       	ldi	r26, 0x00	; 0
    b598:	b0 e0       	ldi	r27, 0x00	; 0
    b59a:	05 84       	ldd	r0, Z+13	; 0x0d
    b59c:	04 c0       	rjmp	.+8      	; 0xb5a6 <_ZN10SdBaseFile13addDirClusterEv+0xe0>
    b59e:	88 0f       	add	r24, r24
    b5a0:	99 1f       	adc	r25, r25
    b5a2:	aa 1f       	adc	r26, r26
    b5a4:	bb 1f       	adc	r27, r27
    b5a6:	0a 94       	dec	r0
    b5a8:	d2 f7       	brpl	.-12     	; 0xb59e <_ZN10SdBaseFile13addDirClusterEv+0xd8>
    b5aa:	49 89       	ldd	r20, Y+17	; 0x11
    b5ac:	5a 89       	ldd	r21, Y+18	; 0x12
    b5ae:	6b 89       	ldd	r22, Y+19	; 0x13
    b5b0:	7c 89       	ldd	r23, Y+20	; 0x14
    b5b2:	84 0f       	add	r24, r20
    b5b4:	95 1f       	adc	r25, r21
    b5b6:	a6 1f       	adc	r26, r22
    b5b8:	b7 1f       	adc	r27, r23
    b5ba:	89 8b       	std	Y+17, r24	; 0x11
    b5bc:	9a 8b       	std	Y+18, r25	; 0x12
    b5be:	ab 8b       	std	Y+19, r26	; 0x13
    b5c0:	bc 8b       	std	Y+20, r27	; 0x14
    b5c2:	81 e0       	ldi	r24, 0x01	; 1
    b5c4:	07 c0       	rjmp	.+14     	; 0xb5d4 <_ZN10SdBaseFile13addDirClusterEv+0x10e>
    b5c6:	80 e0       	ldi	r24, 0x00	; 0
    b5c8:	05 c0       	rjmp	.+10     	; 0xb5d4 <_ZN10SdBaseFile13addDirClusterEv+0x10e>
    b5ca:	80 e0       	ldi	r24, 0x00	; 0
    b5cc:	03 c0       	rjmp	.+6      	; 0xb5d4 <_ZN10SdBaseFile13addDirClusterEv+0x10e>
    b5ce:	80 e0       	ldi	r24, 0x00	; 0
    b5d0:	01 c0       	rjmp	.+2      	; 0xb5d4 <_ZN10SdBaseFile13addDirClusterEv+0x10e>
    b5d2:	80 e0       	ldi	r24, 0x00	; 0
    b5d4:	df 91       	pop	r29
    b5d6:	cf 91       	pop	r28
    b5d8:	1f 91       	pop	r17
    b5da:	ff 90       	pop	r15
    b5dc:	ef 90       	pop	r14
    b5de:	df 90       	pop	r13
    b5e0:	cf 90       	pop	r12
    b5e2:	08 95       	ret

0000b5e4 <_ZN10SdBaseFile13cacheDirEntryEh>:
    b5e4:	cf 93       	push	r28
    b5e6:	df 93       	push	r29
    b5e8:	ec 01       	movw	r28, r24
    b5ea:	41 e0       	ldi	r20, 0x01	; 1
    b5ec:	61 11       	cpse	r22, r1
    b5ee:	01 c0       	rjmp	.+2      	; 0xb5f2 <_ZN10SdBaseFile13cacheDirEntryEh+0xe>
    b5f0:	40 e0       	ldi	r20, 0x00	; 0
    b5f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    b5f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    b5f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    b5f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    b5fa:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    b5fe:	88 23       	and	r24, r24
    b600:	41 f0       	breq	.+16     	; 0xb612 <_ZN10SdBaseFile13cacheDirEntryEh+0x2e>
    b602:	28 89       	ldd	r18, Y+16	; 0x10
    b604:	80 e2       	ldi	r24, 0x20	; 32
    b606:	28 9f       	mul	r18, r24
    b608:	90 01       	movw	r18, r0
    b60a:	11 24       	eor	r1, r1
    b60c:	25 54       	subi	r18, 0x45	; 69
    b60e:	31 4f       	sbci	r19, 0xF1	; 241
    b610:	02 c0       	rjmp	.+4      	; 0xb616 <_ZN10SdBaseFile13cacheDirEntryEh+0x32>
    b612:	20 e0       	ldi	r18, 0x00	; 0
    b614:	30 e0       	ldi	r19, 0x00	; 0
    b616:	82 2f       	mov	r24, r18
    b618:	93 2f       	mov	r25, r19
    b61a:	df 91       	pop	r29
    b61c:	cf 91       	pop	r28
    b61e:	08 95       	ret

0000b620 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>:
    b620:	cf 93       	push	r28
    b622:	df 93       	push	r29
    b624:	e8 2f       	mov	r30, r24
    b626:	f9 2f       	mov	r31, r25
    b628:	80 e0       	ldi	r24, 0x00	; 0
    b62a:	90 e0       	ldi	r25, 0x00	; 0
    b62c:	3e e2       	ldi	r19, 0x2E	; 46
    b62e:	df 01       	movw	r26, r30
    b630:	20 81       	ld	r18, Z
    b632:	20 32       	cpi	r18, 0x20	; 32
    b634:	69 f0       	breq	.+26     	; 0xb650 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x30>
    b636:	88 30       	cpi	r24, 0x08	; 8
    b638:	29 f4       	brne	.+10     	; 0xb644 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x24>
    b63a:	eb 01       	movw	r28, r22
    b63c:	c9 0f       	add	r28, r25
    b63e:	d1 1d       	adc	r29, r1
    b640:	38 83       	st	Y, r19
    b642:	9f 5f       	subi	r25, 0xFF	; 255
    b644:	2c 91       	ld	r18, X
    b646:	db 01       	movw	r26, r22
    b648:	a9 0f       	add	r26, r25
    b64a:	b1 1d       	adc	r27, r1
    b64c:	2c 93       	st	X, r18
    b64e:	9f 5f       	subi	r25, 0xFF	; 255
    b650:	8f 5f       	subi	r24, 0xFF	; 255
    b652:	31 96       	adiw	r30, 0x01	; 1
    b654:	8b 30       	cpi	r24, 0x0B	; 11
    b656:	59 f7       	brne	.-42     	; 0xb62e <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0xe>
    b658:	fb 01       	movw	r30, r22
    b65a:	e9 0f       	add	r30, r25
    b65c:	f1 1d       	adc	r31, r1
    b65e:	10 82       	st	Z, r1
    b660:	df 91       	pop	r29
    b662:	cf 91       	pop	r28
    b664:	08 95       	ret

0000b666 <_ZN10SdBaseFile11getFilenameEPc>:
    b666:	cf 93       	push	r28
    b668:	df 93       	push	r29
    b66a:	eb 01       	movw	r28, r22
    b66c:	fc 01       	movw	r30, r24
    b66e:	23 81       	ldd	r18, Z+3	; 0x03
    b670:	22 23       	and	r18, r18
    b672:	81 f0       	breq	.+32     	; 0xb694 <_ZN10SdBaseFile11getFilenameEPc+0x2e>
    b674:	22 50       	subi	r18, 0x02	; 2
    b676:	22 30       	cpi	r18, 0x02	; 2
    b678:	28 f4       	brcc	.+10     	; 0xb684 <_ZN10SdBaseFile11getFilenameEPc+0x1e>
    b67a:	8f e2       	ldi	r24, 0x2F	; 47
    b67c:	88 83       	st	Y, r24
    b67e:	19 82       	std	Y+1, r1	; 0x01
    b680:	81 e0       	ldi	r24, 0x01	; 1
    b682:	0b c0       	rjmp	.+22     	; 0xb69a <_ZN10SdBaseFile11getFilenameEPc+0x34>
    b684:	60 e0       	ldi	r22, 0x00	; 0
    b686:	ae df       	rcall	.-164    	; 0xb5e4 <_ZN10SdBaseFile13cacheDirEntryEh>
    b688:	00 97       	sbiw	r24, 0x00	; 0
    b68a:	31 f0       	breq	.+12     	; 0xb698 <_ZN10SdBaseFile11getFilenameEPc+0x32>
    b68c:	be 01       	movw	r22, r28
    b68e:	c8 df       	rcall	.-112    	; 0xb620 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>
    b690:	81 e0       	ldi	r24, 0x01	; 1
    b692:	03 c0       	rjmp	.+6      	; 0xb69a <_ZN10SdBaseFile11getFilenameEPc+0x34>
    b694:	80 e0       	ldi	r24, 0x00	; 0
    b696:	01 c0       	rjmp	.+2      	; 0xb69a <_ZN10SdBaseFile11getFilenameEPc+0x34>
    b698:	80 e0       	ldi	r24, 0x00	; 0
    b69a:	df 91       	pop	r29
    b69c:	cf 91       	pop	r28
    b69e:	08 95       	ret

0000b6a0 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>:
    b6a0:	ff 92       	push	r15
    b6a2:	0f 93       	push	r16
    b6a4:	1f 93       	push	r17
    b6a6:	cf 93       	push	r28
    b6a8:	df 93       	push	r29
    b6aa:	ea 01       	movw	r28, r20
    b6ac:	fb 01       	movw	r30, r22
    b6ae:	2b e0       	ldi	r18, 0x0B	; 11
    b6b0:	30 e2       	ldi	r19, 0x20	; 32
    b6b2:	31 93       	st	Z+, r19
    b6b4:	21 50       	subi	r18, 0x01	; 1
    b6b6:	e9 f7       	brne	.-6      	; 0xb6b2 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x12>
    b6b8:	a8 2f       	mov	r26, r24
    b6ba:	b9 2f       	mov	r27, r25
    b6bc:	50 e0       	ldi	r21, 0x00	; 0
    b6be:	17 e0       	ldi	r17, 0x07	; 7
    b6c0:	25 e5       	ldi	r18, 0x55	; 85
    b6c2:	38 e0       	ldi	r19, 0x08	; 8
    b6c4:	68 94       	set
    b6c6:	ff 24       	eor	r15, r15
    b6c8:	f3 f8       	bld	r15, 3
    b6ca:	0a e0       	ldi	r16, 0x0A	; 10
    b6cc:	1c c0       	rjmp	.+56     	; 0xb706 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x66>
    b6ce:	1a 30       	cpi	r17, 0x0A	; 10
    b6d0:	11 f1       	breq	.+68     	; 0xb716 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x76>
    b6d2:	5f 2d       	mov	r21, r15
    b6d4:	10 2f       	mov	r17, r16
    b6d6:	17 c0       	rjmp	.+46     	; 0xb706 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x66>
    b6d8:	4e 17       	cp	r20, r30
    b6da:	f9 f0       	breq	.+62     	; 0xb71a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x7a>
    b6dc:	fc 01       	movw	r30, r24
    b6de:	01 96       	adiw	r24, 0x01	; 1
    b6e0:	e4 91       	lpm	r30, Z
    b6e2:	e1 11       	cpse	r30, r1
    b6e4:	f9 cf       	rjmp	.-14     	; 0xb6d8 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x38>
    b6e6:	15 17       	cp	r17, r21
    b6e8:	d0 f0       	brcs	.+52     	; 0xb71e <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x7e>
    b6ea:	41 32       	cpi	r20, 0x21	; 33
    b6ec:	d0 f0       	brcs	.+52     	; 0xb722 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x82>
    b6ee:	4f 37       	cpi	r20, 0x7F	; 127
    b6f0:	d0 f4       	brcc	.+52     	; 0xb726 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
    b6f2:	fb 01       	movw	r30, r22
    b6f4:	e5 0f       	add	r30, r21
    b6f6:	f1 1d       	adc	r31, r1
    b6f8:	84 2f       	mov	r24, r20
    b6fa:	81 56       	subi	r24, 0x61	; 97
    b6fc:	8a 31       	cpi	r24, 0x1A	; 26
    b6fe:	08 f4       	brcc	.+2      	; 0xb702 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x62>
    b700:	40 52       	subi	r20, 0x20	; 32
    b702:	40 83       	st	Z, r20
    b704:	5f 5f       	subi	r21, 0xFF	; 255
    b706:	9a 2f       	mov	r25, r26
    b708:	8b 2f       	mov	r24, r27
    b70a:	4d 91       	ld	r20, X+
    b70c:	44 23       	and	r20, r20
    b70e:	69 f0       	breq	.+26     	; 0xb72a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8a>
    b710:	4f 32       	cpi	r20, 0x2F	; 47
    b712:	a1 f4       	brne	.+40     	; 0xb73c <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x9c>
    b714:	0a c0       	rjmp	.+20     	; 0xb72a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8a>
    b716:	80 e0       	ldi	r24, 0x00	; 0
    b718:	15 c0       	rjmp	.+42     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b71a:	80 e0       	ldi	r24, 0x00	; 0
    b71c:	13 c0       	rjmp	.+38     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b71e:	80 e0       	ldi	r24, 0x00	; 0
    b720:	11 c0       	rjmp	.+34     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b722:	80 e0       	ldi	r24, 0x00	; 0
    b724:	0f c0       	rjmp	.+30     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b726:	80 e0       	ldi	r24, 0x00	; 0
    b728:	0d c0       	rjmp	.+26     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b72a:	98 83       	st	Y, r25
    b72c:	89 83       	std	Y+1, r24	; 0x01
    b72e:	81 e0       	ldi	r24, 0x01	; 1
    b730:	fb 01       	movw	r30, r22
    b732:	90 81       	ld	r25, Z
    b734:	90 32       	cpi	r25, 0x20	; 32
    b736:	31 f4       	brne	.+12     	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b738:	80 e0       	ldi	r24, 0x00	; 0
    b73a:	04 c0       	rjmp	.+8      	; 0xb744 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xa4>
    b73c:	4e 32       	cpi	r20, 0x2E	; 46
    b73e:	39 f2       	breq	.-114    	; 0xb6ce <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x2e>
    b740:	c9 01       	movw	r24, r18
    b742:	cc cf       	rjmp	.-104    	; 0xb6dc <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x3c>
    b744:	df 91       	pop	r29
    b746:	cf 91       	pop	r28
    b748:	1f 91       	pop	r17
    b74a:	0f 91       	pop	r16
    b74c:	ff 90       	pop	r15
    b74e:	08 95       	ret

0000b750 <_ZN10SdBaseFile8openRootEP8SdVolume>:
    b750:	0f 93       	push	r16
    b752:	1f 93       	push	r17
    b754:	cf 93       	push	r28
    b756:	df 93       	push	r29
    b758:	ec 01       	movw	r28, r24
    b75a:	8b 01       	movw	r16, r22
    b75c:	8b 81       	ldd	r24, Y+3	; 0x03
    b75e:	81 11       	cpse	r24, r1
    b760:	4e c0       	rjmp	.+156    	; 0xb7fe <_ZN10SdBaseFile8openRootEP8SdVolume+0xae>
    b762:	fb 01       	movw	r30, r22
    b764:	87 89       	ldd	r24, Z+23	; 0x17
    b766:	80 31       	cpi	r24, 0x10	; 16
    b768:	19 f5       	brne	.+70     	; 0xb7b0 <_ZN10SdBaseFile8openRootEP8SdVolume+0x60>
    b76a:	82 e0       	ldi	r24, 0x02	; 2
    b76c:	8b 83       	std	Y+3, r24	; 0x03
    b76e:	1d 8a       	std	Y+21, r1	; 0x15
    b770:	1e 8a       	std	Y+22, r1	; 0x16
    b772:	1f 8a       	std	Y+23, r1	; 0x17
    b774:	18 8e       	std	Y+24, r1	; 0x18
    b776:	40 8d       	ldd	r20, Z+24	; 0x18
    b778:	51 8d       	ldd	r21, Z+25	; 0x19
    b77a:	60 e0       	ldi	r22, 0x00	; 0
    b77c:	70 e0       	ldi	r23, 0x00	; 0
    b77e:	44 0f       	add	r20, r20
    b780:	55 1f       	adc	r21, r21
    b782:	66 1f       	adc	r22, r22
    b784:	77 1f       	adc	r23, r23
    b786:	44 0f       	add	r20, r20
    b788:	55 1f       	adc	r21, r21
    b78a:	66 1f       	adc	r22, r22
    b78c:	77 1f       	adc	r23, r23
    b78e:	44 0f       	add	r20, r20
    b790:	55 1f       	adc	r21, r21
    b792:	66 1f       	adc	r22, r22
    b794:	77 1f       	adc	r23, r23
    b796:	44 0f       	add	r20, r20
    b798:	55 1f       	adc	r21, r21
    b79a:	66 1f       	adc	r22, r22
    b79c:	77 1f       	adc	r23, r23
    b79e:	44 0f       	add	r20, r20
    b7a0:	55 1f       	adc	r21, r21
    b7a2:	66 1f       	adc	r22, r22
    b7a4:	77 1f       	adc	r23, r23
    b7a6:	49 8b       	std	Y+17, r20	; 0x11
    b7a8:	5a 8b       	std	Y+18, r21	; 0x12
    b7aa:	6b 8b       	std	Y+19, r22	; 0x13
    b7ac:	7c 8b       	std	Y+20, r23	; 0x14
    b7ae:	15 c0       	rjmp	.+42     	; 0xb7da <_ZN10SdBaseFile8openRootEP8SdVolume+0x8a>
    b7b0:	80 32       	cpi	r24, 0x20	; 32
    b7b2:	39 f5       	brne	.+78     	; 0xb802 <_ZN10SdBaseFile8openRootEP8SdVolume+0xb2>
    b7b4:	83 e0       	ldi	r24, 0x03	; 3
    b7b6:	8b 83       	std	Y+3, r24	; 0x03
    b7b8:	fb 01       	movw	r30, r22
    b7ba:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7bc:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7be:	64 8d       	ldd	r22, Z+28	; 0x1c
    b7c0:	75 8d       	ldd	r23, Z+29	; 0x1d
    b7c2:	4d 8b       	std	Y+21, r20	; 0x15
    b7c4:	5e 8b       	std	Y+22, r21	; 0x16
    b7c6:	6f 8b       	std	Y+23, r22	; 0x17
    b7c8:	78 8f       	std	Y+24, r23	; 0x18
    b7ca:	9e 01       	movw	r18, r28
    b7cc:	2f 5e       	subi	r18, 0xEF	; 239
    b7ce:	3f 4f       	sbci	r19, 0xFF	; 255
    b7d0:	c8 01       	movw	r24, r16
    b7d2:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN8SdVolume9chainSizeEmPm>
    b7d6:	88 23       	and	r24, r24
    b7d8:	b1 f0       	breq	.+44     	; 0xb806 <_ZN10SdBaseFile8openRootEP8SdVolume+0xb6>
    b7da:	1a 8f       	std	Y+26, r17	; 0x1a
    b7dc:	09 8f       	std	Y+25, r16	; 0x19
    b7de:	81 e0       	ldi	r24, 0x01	; 1
    b7e0:	89 83       	std	Y+1, r24	; 0x01
    b7e2:	1c 82       	std	Y+4, r1	; 0x04
    b7e4:	1d 82       	std	Y+5, r1	; 0x05
    b7e6:	1e 82       	std	Y+6, r1	; 0x06
    b7e8:	1f 82       	std	Y+7, r1	; 0x07
    b7ea:	18 86       	std	Y+8, r1	; 0x08
    b7ec:	19 86       	std	Y+9, r1	; 0x09
    b7ee:	1a 86       	std	Y+10, r1	; 0x0a
    b7f0:	1b 86       	std	Y+11, r1	; 0x0b
    b7f2:	1c 86       	std	Y+12, r1	; 0x0c
    b7f4:	1d 86       	std	Y+13, r1	; 0x0d
    b7f6:	1e 86       	std	Y+14, r1	; 0x0e
    b7f8:	1f 86       	std	Y+15, r1	; 0x0f
    b7fa:	18 8a       	std	Y+16, r1	; 0x10
    b7fc:	05 c0       	rjmp	.+10     	; 0xb808 <_ZN10SdBaseFile8openRootEP8SdVolume+0xb8>
    b7fe:	80 e0       	ldi	r24, 0x00	; 0
    b800:	03 c0       	rjmp	.+6      	; 0xb808 <_ZN10SdBaseFile8openRootEP8SdVolume+0xb8>
    b802:	80 e0       	ldi	r24, 0x00	; 0
    b804:	01 c0       	rjmp	.+2      	; 0xb808 <_ZN10SdBaseFile8openRootEP8SdVolume+0xb8>
    b806:	80 e0       	ldi	r24, 0x00	; 0
    b808:	df 91       	pop	r29
    b80a:	cf 91       	pop	r28
    b80c:	1f 91       	pop	r17
    b80e:	0f 91       	pop	r16
    b810:	08 95       	ret

0000b812 <_ZN10SdBaseFile4readEPvj>:
    b812:	4f 92       	push	r4
    b814:	5f 92       	push	r5
    b816:	6f 92       	push	r6
    b818:	7f 92       	push	r7
    b81a:	8f 92       	push	r8
    b81c:	9f 92       	push	r9
    b81e:	af 92       	push	r10
    b820:	bf 92       	push	r11
    b822:	cf 92       	push	r12
    b824:	df 92       	push	r13
    b826:	ef 92       	push	r14
    b828:	ff 92       	push	r15
    b82a:	0f 93       	push	r16
    b82c:	1f 93       	push	r17
    b82e:	cf 93       	push	r28
    b830:	df 93       	push	r29
    b832:	ec 01       	movw	r28, r24
    b834:	e6 2f       	mov	r30, r22
    b836:	f7 2f       	mov	r31, r23
    b838:	3a 01       	movw	r6, r20
    b83a:	8b 81       	ldd	r24, Y+3	; 0x03
    b83c:	88 23       	and	r24, r24
    b83e:	09 f4       	brne	.+2      	; 0xb842 <_ZN10SdBaseFile4readEPvj+0x30>
    b840:	d9 c0       	rjmp	.+434    	; 0xb9f4 <_ZN10SdBaseFile4readEPvj+0x1e2>
    b842:	89 81       	ldd	r24, Y+1	; 0x01
    b844:	80 ff       	sbrs	r24, 0
    b846:	d9 c0       	rjmp	.+434    	; 0xb9fa <_ZN10SdBaseFile4readEPvj+0x1e8>
    b848:	49 89       	ldd	r20, Y+17	; 0x11
    b84a:	5a 89       	ldd	r21, Y+18	; 0x12
    b84c:	6b 89       	ldd	r22, Y+19	; 0x13
    b84e:	7c 89       	ldd	r23, Y+20	; 0x14
    b850:	88 85       	ldd	r24, Y+8	; 0x08
    b852:	99 85       	ldd	r25, Y+9	; 0x09
    b854:	aa 85       	ldd	r26, Y+10	; 0x0a
    b856:	bb 85       	ldd	r27, Y+11	; 0x0b
    b858:	63 01       	movw	r12, r6
    b85a:	e1 2c       	mov	r14, r1
    b85c:	f1 2c       	mov	r15, r1
    b85e:	8a 01       	movw	r16, r20
    b860:	9b 01       	movw	r18, r22
    b862:	08 1b       	sub	r16, r24
    b864:	19 0b       	sbc	r17, r25
    b866:	2a 0b       	sbc	r18, r26
    b868:	3b 0b       	sbc	r19, r27
    b86a:	c0 16       	cp	r12, r16
    b86c:	d1 06       	cpc	r13, r17
    b86e:	e2 06       	cpc	r14, r18
    b870:	f3 06       	cpc	r15, r19
    b872:	18 f0       	brcs	.+6      	; 0xb87a <_ZN10SdBaseFile4readEPvj+0x68>
    b874:	3a 01       	movw	r6, r20
    b876:	68 1a       	sub	r6, r24
    b878:	79 0a       	sbc	r7, r25
    b87a:	61 14       	cp	r6, r1
    b87c:	71 04       	cpc	r7, r1
    b87e:	09 f4       	brne	.+2      	; 0xb882 <_ZN10SdBaseFile4readEPvj+0x70>
    b880:	b7 c0       	rjmp	.+366    	; 0xb9f0 <_ZN10SdBaseFile4readEPvj+0x1de>
    b882:	73 01       	movw	r14, r6
    b884:	ce 2e       	mov	r12, r30
    b886:	df 2e       	mov	r13, r31
    b888:	2e 01       	movw	r4, r28
    b88a:	04 e0       	ldi	r16, 0x04	; 4
    b88c:	40 0e       	add	r4, r16
    b88e:	51 1c       	adc	r5, r1
    b890:	81 2c       	mov	r8, r1
    b892:	68 94       	set
    b894:	99 24       	eor	r9, r9
    b896:	91 f8       	bld	r9, 1
    b898:	88 85       	ldd	r24, Y+8	; 0x08
    b89a:	99 85       	ldd	r25, Y+9	; 0x09
    b89c:	aa 85       	ldd	r26, Y+10	; 0x0a
    b89e:	bb 85       	ldd	r27, Y+11	; 0x0b
    b8a0:	8c 01       	movw	r16, r24
    b8a2:	9d 01       	movw	r18, r26
    b8a4:	11 70       	andi	r17, 0x01	; 1
    b8a6:	22 27       	eor	r18, r18
    b8a8:	33 27       	eor	r19, r19
    b8aa:	58 01       	movw	r10, r16
    b8ac:	2b 81       	ldd	r18, Y+3	; 0x03
    b8ae:	22 30       	cpi	r18, 0x02	; 2
    b8b0:	d1 f4       	brne	.+52     	; 0xb8e6 <_ZN10SdBaseFile4readEPvj+0xd4>
    b8b2:	ac 01       	movw	r20, r24
    b8b4:	bd 01       	movw	r22, r26
    b8b6:	03 2e       	mov	r0, r19
    b8b8:	39 e0       	ldi	r19, 0x09	; 9
    b8ba:	76 95       	lsr	r23
    b8bc:	67 95       	ror	r22
    b8be:	57 95       	ror	r21
    b8c0:	47 95       	ror	r20
    b8c2:	3a 95       	dec	r19
    b8c4:	d1 f7       	brne	.-12     	; 0xb8ba <_ZN10SdBaseFile4readEPvj+0xa8>
    b8c6:	30 2d       	mov	r19, r0
    b8c8:	e9 8d       	ldd	r30, Y+25	; 0x19
    b8ca:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b8cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    b8ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    b8d0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    b8d2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    b8d4:	8a 01       	movw	r16, r20
    b8d6:	9b 01       	movw	r18, r22
    b8d8:	08 0f       	add	r16, r24
    b8da:	19 1f       	adc	r17, r25
    b8dc:	2a 1f       	adc	r18, r26
    b8de:	3b 1f       	adc	r19, r27
    b8e0:	c9 01       	movw	r24, r18
    b8e2:	b8 01       	movw	r22, r16
    b8e4:	4e c0       	rjmp	.+156    	; 0xb982 <_ZN10SdBaseFile4readEPvj+0x170>
    b8e6:	e9 8d       	ldd	r30, Y+25	; 0x19
    b8e8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b8ea:	8c 01       	movw	r16, r24
    b8ec:	9d 01       	movw	r18, r26
    b8ee:	0f 2e       	mov	r0, r31
    b8f0:	f9 e0       	ldi	r31, 0x09	; 9
    b8f2:	36 95       	lsr	r19
    b8f4:	27 95       	ror	r18
    b8f6:	17 95       	ror	r17
    b8f8:	07 95       	ror	r16
    b8fa:	fa 95       	dec	r31
    b8fc:	d1 f7       	brne	.-12     	; 0xb8f2 <_ZN10SdBaseFile4readEPvj+0xe0>
    b8fe:	f0 2d       	mov	r31, r0
    b900:	44 81       	ldd	r20, Z+4	; 0x04
    b902:	41 50       	subi	r20, 0x01	; 1
    b904:	14 2f       	mov	r17, r20
    b906:	10 23       	and	r17, r16
    b908:	a1 14       	cp	r10, r1
    b90a:	b1 04       	cpc	r11, r1
    b90c:	d1 f4       	brne	.+52     	; 0xb942 <_ZN10SdBaseFile4readEPvj+0x130>
    b90e:	11 11       	cpse	r17, r1
    b910:	18 c0       	rjmp	.+48     	; 0xb942 <_ZN10SdBaseFile4readEPvj+0x130>
    b912:	89 2b       	or	r24, r25
    b914:	8a 2b       	or	r24, r26
    b916:	8b 2b       	or	r24, r27
    b918:	49 f4       	brne	.+18     	; 0xb92c <_ZN10SdBaseFile4readEPvj+0x11a>
    b91a:	8d 89       	ldd	r24, Y+21	; 0x15
    b91c:	9e 89       	ldd	r25, Y+22	; 0x16
    b91e:	af 89       	ldd	r26, Y+23	; 0x17
    b920:	b8 8d       	ldd	r27, Y+24	; 0x18
    b922:	8c 83       	std	Y+4, r24	; 0x04
    b924:	9d 83       	std	Y+5, r25	; 0x05
    b926:	ae 83       	std	Y+6, r26	; 0x06
    b928:	bf 83       	std	Y+7, r27	; 0x07
    b92a:	0b c0       	rjmp	.+22     	; 0xb942 <_ZN10SdBaseFile4readEPvj+0x130>
    b92c:	4c 81       	ldd	r20, Y+4	; 0x04
    b92e:	5d 81       	ldd	r21, Y+5	; 0x05
    b930:	6e 81       	ldd	r22, Y+6	; 0x06
    b932:	7f 81       	ldd	r23, Y+7	; 0x07
    b934:	92 01       	movw	r18, r4
    b936:	cf 01       	movw	r24, r30
    b938:	0e 94 d6 64 	call	0xc9ac	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    b93c:	88 23       	and	r24, r24
    b93e:	09 f4       	brne	.+2      	; 0xb942 <_ZN10SdBaseFile4readEPvj+0x130>
    b940:	5f c0       	rjmp	.+190    	; 0xba00 <_ZN10SdBaseFile4readEPvj+0x1ee>
    b942:	e9 8d       	ldd	r30, Y+25	; 0x19
    b944:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b946:	4c 81       	ldd	r20, Y+4	; 0x04
    b948:	5d 81       	ldd	r21, Y+5	; 0x05
    b94a:	6e 81       	ldd	r22, Y+6	; 0x06
    b94c:	7f 81       	ldd	r23, Y+7	; 0x07
    b94e:	42 50       	subi	r20, 0x02	; 2
    b950:	51 09       	sbc	r21, r1
    b952:	61 09       	sbc	r22, r1
    b954:	71 09       	sbc	r23, r1
    b956:	05 84       	ldd	r0, Z+13	; 0x0d
    b958:	04 c0       	rjmp	.+8      	; 0xb962 <_ZN10SdBaseFile4readEPvj+0x150>
    b95a:	44 0f       	add	r20, r20
    b95c:	55 1f       	adc	r21, r21
    b95e:	66 1f       	adc	r22, r22
    b960:	77 1f       	adc	r23, r23
    b962:	0a 94       	dec	r0
    b964:	d2 f7       	brpl	.-12     	; 0xb95a <_ZN10SdBaseFile4readEPvj+0x148>
    b966:	86 85       	ldd	r24, Z+14	; 0x0e
    b968:	97 85       	ldd	r25, Z+15	; 0x0f
    b96a:	a0 89       	ldd	r26, Z+16	; 0x10
    b96c:	b1 89       	ldd	r27, Z+17	; 0x11
    b96e:	84 0f       	add	r24, r20
    b970:	95 1f       	adc	r25, r21
    b972:	a6 1f       	adc	r26, r22
    b974:	b7 1f       	adc	r27, r23
    b976:	bc 01       	movw	r22, r24
    b978:	cd 01       	movw	r24, r26
    b97a:	61 0f       	add	r22, r17
    b97c:	71 1d       	adc	r23, r1
    b97e:	81 1d       	adc	r24, r1
    b980:	91 1d       	adc	r25, r1
    b982:	94 01       	movw	r18, r8
    b984:	2a 19       	sub	r18, r10
    b986:	3b 09       	sbc	r19, r11
    b988:	87 01       	movw	r16, r14
    b98a:	2e 15       	cp	r18, r14
    b98c:	3f 05       	cpc	r19, r15
    b98e:	08 f4       	brcc	.+2      	; 0xb992 <_ZN10SdBaseFile4readEPvj+0x180>
    b990:	89 01       	movw	r16, r18
    b992:	01 15       	cp	r16, r1
    b994:	22 e0       	ldi	r18, 0x02	; 2
    b996:	12 07       	cpc	r17, r18
    b998:	c1 f5       	brne	.+112    	; 0xba0a <_ZN10SdBaseFile4readEPvj+0x1f8>
    b99a:	20 91 bb 10 	lds	r18, 0x10BB
    b99e:	30 91 bc 10 	lds	r19, 0x10BC
    b9a2:	40 91 bd 10 	lds	r20, 0x10BD
    b9a6:	50 91 be 10 	lds	r21, 0x10BE
    b9aa:	62 17       	cp	r22, r18
    b9ac:	73 07       	cpc	r23, r19
    b9ae:	84 07       	cpc	r24, r20
    b9b0:	95 07       	cpc	r25, r21
    b9b2:	91 f5       	brne	.+100    	; 0xba18 <_ZN10SdBaseFile4readEPvj+0x206>
    b9b4:	2a c0       	rjmp	.+84     	; 0xba0a <_ZN10SdBaseFile4readEPvj+0x1f8>
    b9b6:	c5 01       	movw	r24, r10
    b9b8:	85 54       	subi	r24, 0x45	; 69
    b9ba:	91 4f       	sbci	r25, 0xF1	; 241
    b9bc:	40 2f       	mov	r20, r16
    b9be:	51 2f       	mov	r21, r17
    b9c0:	68 2f       	mov	r22, r24
    b9c2:	79 2f       	mov	r23, r25
    b9c4:	8c 2d       	mov	r24, r12
    b9c6:	9d 2d       	mov	r25, r13
    b9c8:	0e 94 0d c4 	call	0x1881a	; 0x1881a <memcpy>
    b9cc:	c0 0e       	add	r12, r16
    b9ce:	d1 1e       	adc	r13, r17
    b9d0:	88 85       	ldd	r24, Y+8	; 0x08
    b9d2:	99 85       	ldd	r25, Y+9	; 0x09
    b9d4:	aa 85       	ldd	r26, Y+10	; 0x0a
    b9d6:	bb 85       	ldd	r27, Y+11	; 0x0b
    b9d8:	80 0f       	add	r24, r16
    b9da:	91 1f       	adc	r25, r17
    b9dc:	a1 1d       	adc	r26, r1
    b9de:	b1 1d       	adc	r27, r1
    b9e0:	88 87       	std	Y+8, r24	; 0x08
    b9e2:	99 87       	std	Y+9, r25	; 0x09
    b9e4:	aa 87       	std	Y+10, r26	; 0x0a
    b9e6:	bb 87       	std	Y+11, r27	; 0x0b
    b9e8:	e0 1a       	sub	r14, r16
    b9ea:	f1 0a       	sbc	r15, r17
    b9ec:	09 f0       	breq	.+2      	; 0xb9f0 <_ZN10SdBaseFile4readEPvj+0x1de>
    b9ee:	54 cf       	rjmp	.-344    	; 0xb898 <_ZN10SdBaseFile4readEPvj+0x86>
    b9f0:	93 01       	movw	r18, r6
    b9f2:	08 c0       	rjmp	.+16     	; 0xba04 <_ZN10SdBaseFile4readEPvj+0x1f2>
    b9f4:	2f ef       	ldi	r18, 0xFF	; 255
    b9f6:	3f ef       	ldi	r19, 0xFF	; 255
    b9f8:	05 c0       	rjmp	.+10     	; 0xba04 <_ZN10SdBaseFile4readEPvj+0x1f2>
    b9fa:	2f ef       	ldi	r18, 0xFF	; 255
    b9fc:	3f ef       	ldi	r19, 0xFF	; 255
    b9fe:	02 c0       	rjmp	.+4      	; 0xba04 <_ZN10SdBaseFile4readEPvj+0x1f2>
    ba00:	2f ef       	ldi	r18, 0xFF	; 255
    ba02:	3f ef       	ldi	r19, 0xFF	; 255
    ba04:	82 2f       	mov	r24, r18
    ba06:	93 2f       	mov	r25, r19
    ba08:	14 c0       	rjmp	.+40     	; 0xba32 <_ZN10SdBaseFile4readEPvj+0x220>
    ba0a:	40 e0       	ldi	r20, 0x00	; 0
    ba0c:	92 d7       	rcall	.+3876   	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    ba0e:	81 11       	cpse	r24, r1
    ba10:	d2 cf       	rjmp	.-92     	; 0xb9b6 <_ZN10SdBaseFile4readEPvj+0x1a4>
    ba12:	2f ef       	ldi	r18, 0xFF	; 255
    ba14:	3f ef       	ldi	r19, 0xFF	; 255
    ba16:	f6 cf       	rjmp	.-20     	; 0xba04 <_ZN10SdBaseFile4readEPvj+0x1f2>
    ba18:	96 01       	movw	r18, r12
    ba1a:	ab 01       	movw	r20, r22
    ba1c:	bc 01       	movw	r22, r24
    ba1e:	80 91 b9 0e 	lds	r24, 0x0EB9
    ba22:	90 91 ba 0e 	lds	r25, 0x0EBA
    ba26:	cf db       	rcall	.-2146   	; 0xb1c6 <_ZN7Sd2Card9readBlockEmPh>
    ba28:	81 11       	cpse	r24, r1
    ba2a:	d0 cf       	rjmp	.-96     	; 0xb9cc <_ZN10SdBaseFile4readEPvj+0x1ba>
    ba2c:	2f ef       	ldi	r18, 0xFF	; 255
    ba2e:	3f ef       	ldi	r19, 0xFF	; 255
    ba30:	e9 cf       	rjmp	.-46     	; 0xba04 <_ZN10SdBaseFile4readEPvj+0x1f2>
    ba32:	df 91       	pop	r29
    ba34:	cf 91       	pop	r28
    ba36:	1f 91       	pop	r17
    ba38:	0f 91       	pop	r16
    ba3a:	ff 90       	pop	r15
    ba3c:	ef 90       	pop	r14
    ba3e:	df 90       	pop	r13
    ba40:	cf 90       	pop	r12
    ba42:	bf 90       	pop	r11
    ba44:	af 90       	pop	r10
    ba46:	9f 90       	pop	r9
    ba48:	8f 90       	pop	r8
    ba4a:	7f 90       	pop	r7
    ba4c:	6f 90       	pop	r6
    ba4e:	5f 90       	pop	r5
    ba50:	4f 90       	pop	r4
    ba52:	08 95       	ret

0000ba54 <_ZN10SdBaseFile4readEv>:
    ba54:	cf 93       	push	r28
    ba56:	df 93       	push	r29
    ba58:	1f 92       	push	r1
    ba5a:	cd b7       	in	r28, 0x3d	; 61
    ba5c:	de b7       	in	r29, 0x3e	; 62
    ba5e:	41 e0       	ldi	r20, 0x01	; 1
    ba60:	50 e0       	ldi	r21, 0x00	; 0
    ba62:	be 01       	movw	r22, r28
    ba64:	6f 5f       	subi	r22, 0xFF	; 255
    ba66:	7f 4f       	sbci	r23, 0xFF	; 255
    ba68:	d4 de       	rcall	.-600    	; 0xb812 <_ZN10SdBaseFile4readEPvj>
    ba6a:	01 97       	sbiw	r24, 0x01	; 1
    ba6c:	19 f4       	brne	.+6      	; 0xba74 <_ZN10SdBaseFile4readEv+0x20>
    ba6e:	29 81       	ldd	r18, Y+1	; 0x01
    ba70:	30 e0       	ldi	r19, 0x00	; 0
    ba72:	02 c0       	rjmp	.+4      	; 0xba78 <_ZN10SdBaseFile4readEv+0x24>
    ba74:	2f ef       	ldi	r18, 0xFF	; 255
    ba76:	3f ef       	ldi	r19, 0xFF	; 255
    ba78:	82 2f       	mov	r24, r18
    ba7a:	93 2f       	mov	r25, r19
    ba7c:	0f 90       	pop	r0
    ba7e:	df 91       	pop	r29
    ba80:	cf 91       	pop	r28
    ba82:	08 95       	ret

0000ba84 <_ZN10SdBaseFile7readDirEP14directoryEntryPc>:
    ba84:	cf 92       	push	r12
    ba86:	df 92       	push	r13
    ba88:	ef 92       	push	r14
    ba8a:	ff 92       	push	r15
    ba8c:	0f 93       	push	r16
    ba8e:	1f 93       	push	r17
    ba90:	cf 93       	push	r28
    ba92:	df 93       	push	r29
    ba94:	7c 01       	movw	r14, r24
    ba96:	eb 01       	movw	r28, r22
    ba98:	6a 01       	movw	r12, r20
    ba9a:	fc 01       	movw	r30, r24
    ba9c:	83 81       	ldd	r24, Z+3	; 0x03
    ba9e:	82 30       	cpi	r24, 0x02	; 2
    baa0:	08 f4       	brcc	.+2      	; 0xbaa4 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x20>
    baa2:	68 c0       	rjmp	.+208    	; 0xbb74 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xf0>
    baa4:	00 85       	ldd	r16, Z+8	; 0x08
    baa6:	11 85       	ldd	r17, Z+9	; 0x09
    baa8:	22 85       	ldd	r18, Z+10	; 0x0a
    baaa:	33 85       	ldd	r19, Z+11	; 0x0b
    baac:	0f 71       	andi	r16, 0x1F	; 31
    baae:	11 27       	eor	r17, r17
    bab0:	22 27       	eor	r18, r18
    bab2:	33 27       	eor	r19, r19
    bab4:	01 2b       	or	r16, r17
    bab6:	02 2b       	or	r16, r18
    bab8:	03 2b       	or	r16, r19
    baba:	09 f0       	breq	.+2      	; 0xbabe <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x3a>
    babc:	5d c0       	rjmp	.+186    	; 0xbb78 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xf4>
    babe:	41 15       	cp	r20, r1
    bac0:	51 05       	cpc	r21, r1
    bac2:	11 f0       	breq	.+4      	; 0xbac8 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x44>
    bac4:	fa 01       	movw	r30, r20
    bac6:	10 82       	st	Z, r1
    bac8:	1d e0       	ldi	r17, 0x0D	; 13
    baca:	40 e2       	ldi	r20, 0x20	; 32
    bacc:	50 e0       	ldi	r21, 0x00	; 0
    bace:	be 01       	movw	r22, r28
    bad0:	c7 01       	movw	r24, r14
    bad2:	9f de       	rcall	.-706    	; 0xb812 <_ZN10SdBaseFile4readEPvj>
    bad4:	80 32       	cpi	r24, 0x20	; 32
    bad6:	91 05       	cpc	r25, r1
    bad8:	29 f0       	breq	.+10     	; 0xbae4 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x60>
    bada:	89 2b       	or	r24, r25
    badc:	09 f0       	breq	.+2      	; 0xbae0 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x5c>
    bade:	4e c0       	rjmp	.+156    	; 0xbb7c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xf8>
    bae0:	80 e0       	ldi	r24, 0x00	; 0
    bae2:	56 c0       	rjmp	.+172    	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bae4:	28 81       	ld	r18, Y
    bae6:	22 23       	and	r18, r18
    bae8:	09 f4       	brne	.+2      	; 0xbaec <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x68>
    baea:	4a c0       	rjmp	.+148    	; 0xbb80 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xfc>
    baec:	25 3e       	cpi	r18, 0xE5	; 229
    baee:	69 f3       	breq	.-38     	; 0xbaca <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x46>
    baf0:	2e 32       	cpi	r18, 0x2E	; 46
    baf2:	59 f3       	breq	.-42     	; 0xbaca <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x46>
    baf4:	3b 85       	ldd	r19, Y+11	; 0x0b
    baf6:	3f 73       	andi	r19, 0x3F	; 63
    baf8:	3f 30       	cpi	r19, 0x0F	; 15
    bafa:	c1 f5       	brne	.+112    	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bafc:	c1 14       	cp	r12, r1
    bafe:	d1 04       	cpc	r13, r1
    bb00:	09 f0       	breq	.+2      	; 0xbb04 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x80>
    bb02:	40 c0       	rjmp	.+128    	; 0xbb84 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x100>
    bb04:	33 c0       	rjmp	.+102    	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bb06:	2f 71       	andi	r18, 0x1F	; 31
    bb08:	30 e0       	ldi	r19, 0x00	; 0
    bb0a:	12 16       	cp	r1, r18
    bb0c:	13 06       	cpc	r1, r19
    bb0e:	74 f5       	brge	.+92     	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bb10:	23 30       	cpi	r18, 0x03	; 3
    bb12:	31 05       	cpc	r19, r1
    bb14:	5c f5       	brge	.+86     	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bb16:	21 50       	subi	r18, 0x01	; 1
    bb18:	31 09       	sbc	r19, r1
    bb1a:	12 9f       	mul	r17, r18
    bb1c:	c0 01       	movw	r24, r0
    bb1e:	13 9f       	mul	r17, r19
    bb20:	90 0d       	add	r25, r0
    bb22:	11 24       	eor	r1, r1
    bb24:	f6 01       	movw	r30, r12
    bb26:	e8 0f       	add	r30, r24
    bb28:	f9 1f       	adc	r31, r25
    bb2a:	29 81       	ldd	r18, Y+1	; 0x01
    bb2c:	20 83       	st	Z, r18
    bb2e:	2b 81       	ldd	r18, Y+3	; 0x03
    bb30:	21 83       	std	Z+1, r18	; 0x01
    bb32:	2d 81       	ldd	r18, Y+5	; 0x05
    bb34:	22 83       	std	Z+2, r18	; 0x02
    bb36:	2f 81       	ldd	r18, Y+7	; 0x07
    bb38:	23 83       	std	Z+3, r18	; 0x03
    bb3a:	29 85       	ldd	r18, Y+9	; 0x09
    bb3c:	24 83       	std	Z+4, r18	; 0x04
    bb3e:	2e 85       	ldd	r18, Y+14	; 0x0e
    bb40:	25 83       	std	Z+5, r18	; 0x05
    bb42:	28 89       	ldd	r18, Y+16	; 0x10
    bb44:	26 83       	std	Z+6, r18	; 0x06
    bb46:	2a 89       	ldd	r18, Y+18	; 0x12
    bb48:	27 83       	std	Z+7, r18	; 0x07
    bb4a:	2c 89       	ldd	r18, Y+20	; 0x14
    bb4c:	20 87       	std	Z+8, r18	; 0x08
    bb4e:	2e 89       	ldd	r18, Y+22	; 0x16
    bb50:	21 87       	std	Z+9, r18	; 0x09
    bb52:	28 8d       	ldd	r18, Y+24	; 0x18
    bb54:	22 87       	std	Z+10, r18	; 0x0a
    bb56:	2c 8d       	ldd	r18, Y+28	; 0x1c
    bb58:	23 87       	std	Z+11, r18	; 0x0b
    bb5a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    bb5c:	24 87       	std	Z+12, r18	; 0x0c
    bb5e:	28 81       	ld	r18, Y
    bb60:	26 ff       	sbrs	r18, 6
    bb62:	04 c0       	rjmp	.+8      	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bb64:	f6 01       	movw	r30, r12
    bb66:	e8 0f       	add	r30, r24
    bb68:	f9 1f       	adc	r31, r25
    bb6a:	15 86       	std	Z+13, r1	; 0x0d
    bb6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    bb6e:	23 fd       	sbrc	r18, 3
    bb70:	ac cf       	rjmp	.-168    	; 0xbaca <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x46>
    bb72:	0e c0       	rjmp	.+28     	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bb74:	8f ef       	ldi	r24, 0xFF	; 255
    bb76:	0c c0       	rjmp	.+24     	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bb78:	8f ef       	ldi	r24, 0xFF	; 255
    bb7a:	0a c0       	rjmp	.+20     	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bb7c:	8f ef       	ldi	r24, 0xFF	; 255
    bb7e:	08 c0       	rjmp	.+16     	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bb80:	80 e0       	ldi	r24, 0x00	; 0
    bb82:	06 c0       	rjmp	.+12     	; 0xbb90 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10c>
    bb84:	4a 8d       	ldd	r20, Y+26	; 0x1a
    bb86:	5b 8d       	ldd	r21, Y+27	; 0x1b
    bb88:	45 2b       	or	r20, r21
    bb8a:	09 f4       	brne	.+2      	; 0xbb8e <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x10a>
    bb8c:	bc cf       	rjmp	.-136    	; 0xbb06 <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0x82>
    bb8e:	ee cf       	rjmp	.-36     	; 0xbb6c <_ZN10SdBaseFile7readDirEP14directoryEntryPc+0xe8>
    bb90:	df 91       	pop	r29
    bb92:	cf 91       	pop	r28
    bb94:	1f 91       	pop	r17
    bb96:	0f 91       	pop	r16
    bb98:	ff 90       	pop	r15
    bb9a:	ef 90       	pop	r14
    bb9c:	df 90       	pop	r13
    bb9e:	cf 90       	pop	r12
    bba0:	08 95       	ret

0000bba2 <_ZN10SdBaseFile12readDirCacheEv>:
    bba2:	ff 92       	push	r15
    bba4:	0f 93       	push	r16
    bba6:	1f 93       	push	r17
    bba8:	cf 93       	push	r28
    bbaa:	df 93       	push	r29
    bbac:	ec 01       	movw	r28, r24
    bbae:	8b 81       	ldd	r24, Y+3	; 0x03
    bbb0:	82 30       	cpi	r24, 0x02	; 2
    bbb2:	40 f1       	brcs	.+80     	; 0xbc04 <_ZN10SdBaseFile12readDirCacheEv+0x62>
    bbb4:	48 85       	ldd	r20, Y+8	; 0x08
    bbb6:	59 85       	ldd	r21, Y+9	; 0x09
    bbb8:	6a 85       	ldd	r22, Y+10	; 0x0a
    bbba:	7b 85       	ldd	r23, Y+11	; 0x0b
    bbbc:	68 94       	set
    bbbe:	14 f8       	bld	r1, 4
    bbc0:	76 95       	lsr	r23
    bbc2:	67 95       	ror	r22
    bbc4:	57 95       	ror	r21
    bbc6:	47 95       	ror	r20
    bbc8:	16 94       	lsr	r1
    bbca:	d1 f7       	brne	.-12     	; 0xbbc0 <_ZN10SdBaseFile12readDirCacheEv+0x1e>
    bbcc:	0f 2e       	mov	r0, r31
    bbce:	ff e0       	ldi	r31, 0x0F	; 15
    bbd0:	ff 2e       	mov	r15, r31
    bbd2:	f0 2d       	mov	r31, r0
    bbd4:	f4 22       	and	r15, r20
    bbd6:	ce 01       	movw	r24, r28
    bbd8:	3d df       	rcall	.-390    	; 0xba54 <_ZN10SdBaseFile4readEv>
    bbda:	99 23       	and	r25, r25
    bbdc:	b4 f0       	brlt	.+44     	; 0xbc0a <_ZN10SdBaseFile12readDirCacheEv+0x68>
    bbde:	08 85       	ldd	r16, Y+8	; 0x08
    bbe0:	19 85       	ldd	r17, Y+9	; 0x09
    bbe2:	2a 85       	ldd	r18, Y+10	; 0x0a
    bbe4:	3b 85       	ldd	r19, Y+11	; 0x0b
    bbe6:	01 5e       	subi	r16, 0xE1	; 225
    bbe8:	1f 4f       	sbci	r17, 0xFF	; 255
    bbea:	2f 4f       	sbci	r18, 0xFF	; 255
    bbec:	3f 4f       	sbci	r19, 0xFF	; 255
    bbee:	08 87       	std	Y+8, r16	; 0x08
    bbf0:	19 87       	std	Y+9, r17	; 0x09
    bbf2:	2a 87       	std	Y+10, r18	; 0x0a
    bbf4:	3b 87       	std	Y+11, r19	; 0x0b
    bbf6:	80 e2       	ldi	r24, 0x20	; 32
    bbf8:	f8 9e       	mul	r15, r24
    bbfa:	90 01       	movw	r18, r0
    bbfc:	11 24       	eor	r1, r1
    bbfe:	25 54       	subi	r18, 0x45	; 69
    bc00:	31 4f       	sbci	r19, 0xF1	; 241
    bc02:	05 c0       	rjmp	.+10     	; 0xbc0e <_ZN10SdBaseFile12readDirCacheEv+0x6c>
    bc04:	20 e0       	ldi	r18, 0x00	; 0
    bc06:	30 e0       	ldi	r19, 0x00	; 0
    bc08:	02 c0       	rjmp	.+4      	; 0xbc0e <_ZN10SdBaseFile12readDirCacheEv+0x6c>
    bc0a:	20 e0       	ldi	r18, 0x00	; 0
    bc0c:	30 e0       	ldi	r19, 0x00	; 0
    bc0e:	82 2f       	mov	r24, r18
    bc10:	93 2f       	mov	r25, r19
    bc12:	df 91       	pop	r29
    bc14:	cf 91       	pop	r28
    bc16:	1f 91       	pop	r17
    bc18:	0f 91       	pop	r16
    bc1a:	ff 90       	pop	r15
    bc1c:	08 95       	ret

0000bc1e <_ZN10SdBaseFile7seekSetEm>:
    bc1e:	4f 92       	push	r4
    bc20:	5f 92       	push	r5
    bc22:	6f 92       	push	r6
    bc24:	7f 92       	push	r7
    bc26:	8f 92       	push	r8
    bc28:	9f 92       	push	r9
    bc2a:	af 92       	push	r10
    bc2c:	bf 92       	push	r11
    bc2e:	cf 92       	push	r12
    bc30:	df 92       	push	r13
    bc32:	ef 92       	push	r14
    bc34:	ff 92       	push	r15
    bc36:	0f 93       	push	r16
    bc38:	1f 93       	push	r17
    bc3a:	cf 93       	push	r28
    bc3c:	df 93       	push	r29
    bc3e:	ec 01       	movw	r28, r24
    bc40:	4a 01       	movw	r8, r20
    bc42:	5b 01       	movw	r10, r22
    bc44:	2b 81       	ldd	r18, Y+3	; 0x03
    bc46:	22 23       	and	r18, r18
    bc48:	09 f4       	brne	.+2      	; 0xbc4c <_ZN10SdBaseFile7seekSetEm+0x2e>
    bc4a:	80 c0       	rjmp	.+256    	; 0xbd4c <_ZN10SdBaseFile7seekSetEm+0x12e>
    bc4c:	89 89       	ldd	r24, Y+17	; 0x11
    bc4e:	9a 89       	ldd	r25, Y+18	; 0x12
    bc50:	ab 89       	ldd	r26, Y+19	; 0x13
    bc52:	bc 89       	ldd	r27, Y+20	; 0x14
    bc54:	84 17       	cp	r24, r20
    bc56:	95 07       	cpc	r25, r21
    bc58:	a6 07       	cpc	r26, r22
    bc5a:	b7 07       	cpc	r27, r23
    bc5c:	08 f4       	brcc	.+2      	; 0xbc60 <_ZN10SdBaseFile7seekSetEm+0x42>
    bc5e:	78 c0       	rjmp	.+240    	; 0xbd50 <_ZN10SdBaseFile7seekSetEm+0x132>
    bc60:	22 30       	cpi	r18, 0x02	; 2
    bc62:	31 f4       	brne	.+12     	; 0xbc70 <_ZN10SdBaseFile7seekSetEm+0x52>
    bc64:	48 87       	std	Y+8, r20	; 0x08
    bc66:	59 87       	std	Y+9, r21	; 0x09
    bc68:	6a 87       	std	Y+10, r22	; 0x0a
    bc6a:	7b 87       	std	Y+11, r23	; 0x0b
    bc6c:	81 e0       	ldi	r24, 0x01	; 1
    bc6e:	71 c0       	rjmp	.+226    	; 0xbd52 <_ZN10SdBaseFile7seekSetEm+0x134>
    bc70:	41 15       	cp	r20, r1
    bc72:	51 05       	cpc	r21, r1
    bc74:	61 05       	cpc	r22, r1
    bc76:	71 05       	cpc	r23, r1
    bc78:	51 f4       	brne	.+20     	; 0xbc8e <_ZN10SdBaseFile7seekSetEm+0x70>
    bc7a:	1c 82       	std	Y+4, r1	; 0x04
    bc7c:	1d 82       	std	Y+5, r1	; 0x05
    bc7e:	1e 82       	std	Y+6, r1	; 0x06
    bc80:	1f 82       	std	Y+7, r1	; 0x07
    bc82:	18 86       	std	Y+8, r1	; 0x08
    bc84:	19 86       	std	Y+9, r1	; 0x09
    bc86:	1a 86       	std	Y+10, r1	; 0x0a
    bc88:	1b 86       	std	Y+11, r1	; 0x0b
    bc8a:	81 e0       	ldi	r24, 0x01	; 1
    bc8c:	62 c0       	rjmp	.+196    	; 0xbd52 <_ZN10SdBaseFile7seekSetEm+0x134>
    bc8e:	88 85       	ldd	r24, Y+8	; 0x08
    bc90:	99 85       	ldd	r25, Y+9	; 0x09
    bc92:	aa 85       	ldd	r26, Y+10	; 0x0a
    bc94:	bb 85       	ldd	r27, Y+11	; 0x0b
    bc96:	e9 8d       	ldd	r30, Y+25	; 0x19
    bc98:	fa 8d       	ldd	r31, Y+26	; 0x1a
    bc9a:	c5 84       	ldd	r12, Z+13	; 0x0d
    bc9c:	d1 2c       	mov	r13, r1
    bc9e:	29 e0       	ldi	r18, 0x09	; 9
    bca0:	c2 0e       	add	r12, r18
    bca2:	d1 1c       	adc	r13, r1
    bca4:	ac 01       	movw	r20, r24
    bca6:	bd 01       	movw	r22, r26
    bca8:	41 50       	subi	r20, 0x01	; 1
    bcaa:	51 09       	sbc	r21, r1
    bcac:	61 09       	sbc	r22, r1
    bcae:	71 09       	sbc	r23, r1
    bcb0:	0c 2c       	mov	r0, r12
    bcb2:	04 c0       	rjmp	.+8      	; 0xbcbc <_ZN10SdBaseFile7seekSetEm+0x9e>
    bcb4:	76 95       	lsr	r23
    bcb6:	67 95       	ror	r22
    bcb8:	57 95       	ror	r21
    bcba:	47 95       	ror	r20
    bcbc:	0a 94       	dec	r0
    bcbe:	d2 f7       	brpl	.-12     	; 0xbcb4 <_ZN10SdBaseFile7seekSetEm+0x96>
    bcc0:	95 01       	movw	r18, r10
    bcc2:	84 01       	movw	r16, r8
    bcc4:	01 50       	subi	r16, 0x01	; 1
    bcc6:	11 09       	sbc	r17, r1
    bcc8:	21 09       	sbc	r18, r1
    bcca:	31 09       	sbc	r19, r1
    bccc:	28 01       	movw	r4, r16
    bcce:	39 01       	movw	r6, r18
    bcd0:	04 c0       	rjmp	.+8      	; 0xbcda <_ZN10SdBaseFile7seekSetEm+0xbc>
    bcd2:	76 94       	lsr	r7
    bcd4:	67 94       	ror	r6
    bcd6:	57 94       	ror	r5
    bcd8:	47 94       	ror	r4
    bcda:	ca 94       	dec	r12
    bcdc:	d2 f7       	brpl	.-12     	; 0xbcd2 <_ZN10SdBaseFile7seekSetEm+0xb4>
    bcde:	73 01       	movw	r14, r6
    bce0:	62 01       	movw	r12, r4
    bce2:	44 16       	cp	r4, r20
    bce4:	55 06       	cpc	r5, r21
    bce6:	66 06       	cpc	r6, r22
    bce8:	77 06       	cpc	r7, r23
    bcea:	20 f0       	brcs	.+8      	; 0xbcf4 <_ZN10SdBaseFile7seekSetEm+0xd6>
    bcec:	89 2b       	or	r24, r25
    bcee:	8a 2b       	or	r24, r26
    bcf0:	8b 2b       	or	r24, r27
    bcf2:	49 f4       	brne	.+18     	; 0xbd06 <_ZN10SdBaseFile7seekSetEm+0xe8>
    bcf4:	8d 89       	ldd	r24, Y+21	; 0x15
    bcf6:	9e 89       	ldd	r25, Y+22	; 0x16
    bcf8:	af 89       	ldd	r26, Y+23	; 0x17
    bcfa:	b8 8d       	ldd	r27, Y+24	; 0x18
    bcfc:	8c 83       	std	Y+4, r24	; 0x04
    bcfe:	9d 83       	std	Y+5, r25	; 0x05
    bd00:	ae 83       	std	Y+6, r26	; 0x06
    bd02:	bf 83       	std	Y+7, r27	; 0x07
    bd04:	15 c0       	rjmp	.+42     	; 0xbd30 <_ZN10SdBaseFile7seekSetEm+0x112>
    bd06:	c4 1a       	sub	r12, r20
    bd08:	d5 0a       	sbc	r13, r21
    bd0a:	e6 0a       	sbc	r14, r22
    bd0c:	f7 0a       	sbc	r15, r23
    bd0e:	10 c0       	rjmp	.+32     	; 0xbd30 <_ZN10SdBaseFile7seekSetEm+0x112>
    bd10:	4c 81       	ldd	r20, Y+4	; 0x04
    bd12:	5d 81       	ldd	r21, Y+5	; 0x05
    bd14:	6e 81       	ldd	r22, Y+6	; 0x06
    bd16:	7f 81       	ldd	r23, Y+7	; 0x07
    bd18:	98 01       	movw	r18, r16
    bd1a:	89 8d       	ldd	r24, Y+25	; 0x19
    bd1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    bd1e:	46 d6       	rcall	.+3212   	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    bd20:	21 e0       	ldi	r18, 0x01	; 1
    bd22:	c2 1a       	sub	r12, r18
    bd24:	d1 08       	sbc	r13, r1
    bd26:	e1 08       	sbc	r14, r1
    bd28:	f1 08       	sbc	r15, r1
    bd2a:	81 11       	cpse	r24, r1
    bd2c:	04 c0       	rjmp	.+8      	; 0xbd36 <_ZN10SdBaseFile7seekSetEm+0x118>
    bd2e:	11 c0       	rjmp	.+34     	; 0xbd52 <_ZN10SdBaseFile7seekSetEm+0x134>
    bd30:	8e 01       	movw	r16, r28
    bd32:	0c 5f       	subi	r16, 0xFC	; 252
    bd34:	1f 4f       	sbci	r17, 0xFF	; 255
    bd36:	c1 14       	cp	r12, r1
    bd38:	d1 04       	cpc	r13, r1
    bd3a:	e1 04       	cpc	r14, r1
    bd3c:	f1 04       	cpc	r15, r1
    bd3e:	41 f7       	brne	.-48     	; 0xbd10 <_ZN10SdBaseFile7seekSetEm+0xf2>
    bd40:	88 86       	std	Y+8, r8	; 0x08
    bd42:	99 86       	std	Y+9, r9	; 0x09
    bd44:	aa 86       	std	Y+10, r10	; 0x0a
    bd46:	bb 86       	std	Y+11, r11	; 0x0b
    bd48:	81 e0       	ldi	r24, 0x01	; 1
    bd4a:	03 c0       	rjmp	.+6      	; 0xbd52 <_ZN10SdBaseFile7seekSetEm+0x134>
    bd4c:	80 e0       	ldi	r24, 0x00	; 0
    bd4e:	01 c0       	rjmp	.+2      	; 0xbd52 <_ZN10SdBaseFile7seekSetEm+0x134>
    bd50:	80 e0       	ldi	r24, 0x00	; 0
    bd52:	df 91       	pop	r29
    bd54:	cf 91       	pop	r28
    bd56:	1f 91       	pop	r17
    bd58:	0f 91       	pop	r16
    bd5a:	ff 90       	pop	r15
    bd5c:	ef 90       	pop	r14
    bd5e:	df 90       	pop	r13
    bd60:	cf 90       	pop	r12
    bd62:	bf 90       	pop	r11
    bd64:	af 90       	pop	r10
    bd66:	9f 90       	pop	r9
    bd68:	8f 90       	pop	r8
    bd6a:	7f 90       	pop	r7
    bd6c:	6f 90       	pop	r6
    bd6e:	5f 90       	pop	r5
    bd70:	4f 90       	pop	r4
    bd72:	08 95       	ret

0000bd74 <_ZN10SdBaseFile4syncEv>:
    bd74:	0f 93       	push	r16
    bd76:	1f 93       	push	r17
    bd78:	cf 93       	push	r28
    bd7a:	df 93       	push	r29
    bd7c:	ec 01       	movw	r28, r24
    bd7e:	8b 81       	ldd	r24, Y+3	; 0x03
    bd80:	88 23       	and	r24, r24
    bd82:	c9 f1       	breq	.+114    	; 0xbdf6 <_ZN10SdBaseFile4syncEv+0x82>
    bd84:	89 81       	ldd	r24, Y+1	; 0x01
    bd86:	88 23       	and	r24, r24
    bd88:	a4 f5       	brge	.+104    	; 0xbdf2 <_ZN10SdBaseFile4syncEv+0x7e>
    bd8a:	61 e0       	ldi	r22, 0x01	; 1
    bd8c:	ce 01       	movw	r24, r28
    bd8e:	2a dc       	rcall	.-1964   	; 0xb5e4 <_ZN10SdBaseFile13cacheDirEntryEh>
    bd90:	8c 01       	movw	r16, r24
    bd92:	00 97       	sbiw	r24, 0x00	; 0
    bd94:	81 f1       	breq	.+96     	; 0xbdf6 <_ZN10SdBaseFile4syncEv+0x82>
    bd96:	fc 01       	movw	r30, r24
    bd98:	80 81       	ld	r24, Z
    bd9a:	85 3e       	cpi	r24, 0xE5	; 229
    bd9c:	61 f1       	breq	.+88     	; 0xbdf6 <_ZN10SdBaseFile4syncEv+0x82>
    bd9e:	8b 81       	ldd	r24, Y+3	; 0x03
    bda0:	82 30       	cpi	r24, 0x02	; 2
    bda2:	40 f4       	brcc	.+16     	; 0xbdb4 <_ZN10SdBaseFile4syncEv+0x40>
    bda4:	89 89       	ldd	r24, Y+17	; 0x11
    bda6:	9a 89       	ldd	r25, Y+18	; 0x12
    bda8:	ab 89       	ldd	r26, Y+19	; 0x13
    bdaa:	bc 89       	ldd	r27, Y+20	; 0x14
    bdac:	84 8f       	std	Z+28, r24	; 0x1c
    bdae:	95 8f       	std	Z+29, r25	; 0x1d
    bdb0:	a6 8f       	std	Z+30, r26	; 0x1e
    bdb2:	b7 8f       	std	Z+31, r27	; 0x1f
    bdb4:	8d 89       	ldd	r24, Y+21	; 0x15
    bdb6:	9e 89       	ldd	r25, Y+22	; 0x16
    bdb8:	f8 01       	movw	r30, r16
    bdba:	93 8f       	std	Z+27, r25	; 0x1b
    bdbc:	82 8f       	std	Z+26, r24	; 0x1a
    bdbe:	4d 89       	ldd	r20, Y+21	; 0x15
    bdc0:	5e 89       	ldd	r21, Y+22	; 0x16
    bdc2:	6f 89       	ldd	r22, Y+23	; 0x17
    bdc4:	78 8d       	ldd	r23, Y+24	; 0x18
    bdc6:	75 8b       	std	Z+21, r23	; 0x15
    bdc8:	64 8b       	std	Z+20, r22	; 0x14
    bdca:	e0 91 b2 0e 	lds	r30, 0x0EB2
    bdce:	f0 91 b3 0e 	lds	r31, 0x0EB3
    bdd2:	30 97       	sbiw	r30, 0x00	; 0
    bdd4:	59 f0       	breq	.+22     	; 0xbdec <_ZN10SdBaseFile4syncEv+0x78>
    bdd6:	b8 01       	movw	r22, r16
    bdd8:	6a 5e       	subi	r22, 0xEA	; 234
    bdda:	7f 4f       	sbci	r23, 0xFF	; 255
    bddc:	c8 01       	movw	r24, r16
    bdde:	48 96       	adiw	r24, 0x18	; 24
    bde0:	19 95       	eicall
    bde2:	f8 01       	movw	r30, r16
    bde4:	80 8d       	ldd	r24, Z+24	; 0x18
    bde6:	91 8d       	ldd	r25, Z+25	; 0x19
    bde8:	93 8b       	std	Z+19, r25	; 0x13
    bdea:	82 8b       	std	Z+18, r24	; 0x12
    bdec:	89 81       	ldd	r24, Y+1	; 0x01
    bdee:	8f 77       	andi	r24, 0x7F	; 127
    bdf0:	89 83       	std	Y+1, r24	; 0x01
    bdf2:	60 d5       	rcall	.+2752   	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    bdf4:	03 c0       	rjmp	.+6      	; 0xbdfc <_ZN10SdBaseFile4syncEv+0x88>
    bdf6:	81 e0       	ldi	r24, 0x01	; 1
    bdf8:	88 83       	st	Y, r24
    bdfa:	80 e0       	ldi	r24, 0x00	; 0
    bdfc:	df 91       	pop	r29
    bdfe:	cf 91       	pop	r28
    be00:	1f 91       	pop	r17
    be02:	0f 91       	pop	r16
    be04:	08 95       	ret

0000be06 <_ZN10SdBaseFile5closeEv>:
    be06:	cf 93       	push	r28
    be08:	df 93       	push	r29
    be0a:	ec 01       	movw	r28, r24
    be0c:	b3 df       	rcall	.-154    	; 0xbd74 <_ZN10SdBaseFile4syncEv>
    be0e:	1b 82       	std	Y+3, r1	; 0x03
    be10:	df 91       	pop	r29
    be12:	cf 91       	pop	r28
    be14:	08 95       	ret

0000be16 <_ZN10SdBaseFile8truncateEm>:
    be16:	4f 92       	push	r4
    be18:	5f 92       	push	r5
    be1a:	6f 92       	push	r6
    be1c:	7f 92       	push	r7
    be1e:	af 92       	push	r10
    be20:	bf 92       	push	r11
    be22:	cf 92       	push	r12
    be24:	df 92       	push	r13
    be26:	ef 92       	push	r14
    be28:	ff 92       	push	r15
    be2a:	0f 93       	push	r16
    be2c:	1f 93       	push	r17
    be2e:	cf 93       	push	r28
    be30:	df 93       	push	r29
    be32:	00 d0       	rcall	.+0      	; 0xbe34 <_ZN10SdBaseFile8truncateEm+0x1e>
    be34:	1f 92       	push	r1
    be36:	cd b7       	in	r28, 0x3d	; 61
    be38:	de b7       	in	r29, 0x3e	; 62
    be3a:	5c 01       	movw	r10, r24
    be3c:	6a 01       	movw	r12, r20
    be3e:	7b 01       	movw	r14, r22
    be40:	dc 01       	movw	r26, r24
    be42:	13 96       	adiw	r26, 0x03	; 3
    be44:	8c 91       	ld	r24, X
    be46:	13 97       	sbiw	r26, 0x03	; 3
    be48:	81 30       	cpi	r24, 0x01	; 1
    be4a:	09 f0       	breq	.+2      	; 0xbe4e <_ZN10SdBaseFile8truncateEm+0x38>
    be4c:	9d c0       	rjmp	.+314    	; 0xbf88 <_ZN10SdBaseFile8truncateEm+0x172>
    be4e:	11 96       	adiw	r26, 0x01	; 1
    be50:	8c 91       	ld	r24, X
    be52:	11 97       	sbiw	r26, 0x01	; 1
    be54:	81 ff       	sbrs	r24, 1
    be56:	9a c0       	rjmp	.+308    	; 0xbf8c <_ZN10SdBaseFile8truncateEm+0x176>
    be58:	51 96       	adiw	r26, 0x11	; 17
    be5a:	8d 91       	ld	r24, X+
    be5c:	9d 91       	ld	r25, X+
    be5e:	0d 90       	ld	r0, X+
    be60:	bc 91       	ld	r27, X
    be62:	a0 2d       	mov	r26, r0
    be64:	84 17       	cp	r24, r20
    be66:	95 07       	cpc	r25, r21
    be68:	a6 07       	cpc	r26, r22
    be6a:	b7 07       	cpc	r27, r23
    be6c:	08 f4       	brcc	.+2      	; 0xbe70 <_ZN10SdBaseFile8truncateEm+0x5a>
    be6e:	90 c0       	rjmp	.+288    	; 0xbf90 <_ZN10SdBaseFile8truncateEm+0x17a>
    be70:	89 2b       	or	r24, r25
    be72:	8a 2b       	or	r24, r26
    be74:	8b 2b       	or	r24, r27
    be76:	09 f4       	brne	.+2      	; 0xbe7a <_ZN10SdBaseFile8truncateEm+0x64>
    be78:	8d c0       	rjmp	.+282    	; 0xbf94 <_ZN10SdBaseFile8truncateEm+0x17e>
    be7a:	f5 01       	movw	r30, r10
    be7c:	40 84       	ldd	r4, Z+8	; 0x08
    be7e:	51 84       	ldd	r5, Z+9	; 0x09
    be80:	62 84       	ldd	r6, Z+10	; 0x0a
    be82:	73 84       	ldd	r7, Z+11	; 0x0b
    be84:	c5 01       	movw	r24, r10
    be86:	cb de       	rcall	.-618    	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    be88:	88 23       	and	r24, r24
    be8a:	09 f4       	brne	.+2      	; 0xbe8e <_ZN10SdBaseFile8truncateEm+0x78>
    be8c:	85 c0       	rjmp	.+266    	; 0xbf98 <_ZN10SdBaseFile8truncateEm+0x182>
    be8e:	c1 14       	cp	r12, r1
    be90:	d1 04       	cpc	r13, r1
    be92:	e1 04       	cpc	r14, r1
    be94:	f1 04       	cpc	r15, r1
    be96:	b1 f4       	brne	.+44     	; 0xbec4 <_ZN10SdBaseFile8truncateEm+0xae>
    be98:	d5 01       	movw	r26, r10
    be9a:	55 96       	adiw	r26, 0x15	; 21
    be9c:	4d 91       	ld	r20, X+
    be9e:	5d 91       	ld	r21, X+
    bea0:	6d 91       	ld	r22, X+
    bea2:	7c 91       	ld	r23, X
    bea4:	58 97       	sbiw	r26, 0x18	; 24
    bea6:	59 96       	adiw	r26, 0x19	; 25
    bea8:	8d 91       	ld	r24, X+
    beaa:	9c 91       	ld	r25, X
    beac:	5a 97       	sbiw	r26, 0x1a	; 26
    beae:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <_ZN8SdVolume9freeChainEm>
    beb2:	88 23       	and	r24, r24
    beb4:	09 f4       	brne	.+2      	; 0xbeb8 <_ZN10SdBaseFile8truncateEm+0xa2>
    beb6:	72 c0       	rjmp	.+228    	; 0xbf9c <_ZN10SdBaseFile8truncateEm+0x186>
    beb8:	f5 01       	movw	r30, r10
    beba:	15 8a       	std	Z+21, r1	; 0x15
    bebc:	16 8a       	std	Z+22, r1	; 0x16
    bebe:	17 8a       	std	Z+23, r1	; 0x17
    bec0:	10 8e       	std	Z+24, r1	; 0x18
    bec2:	4a c0       	rjmp	.+148    	; 0xbf58 <_ZN10SdBaseFile8truncateEm+0x142>
    bec4:	d5 01       	movw	r26, r10
    bec6:	14 96       	adiw	r26, 0x04	; 4
    bec8:	4d 91       	ld	r20, X+
    beca:	5d 91       	ld	r21, X+
    becc:	6d 91       	ld	r22, X+
    bece:	7c 91       	ld	r23, X
    bed0:	17 97       	sbiw	r26, 0x07	; 7
    bed2:	9e 01       	movw	r18, r28
    bed4:	2f 5f       	subi	r18, 0xFF	; 255
    bed6:	3f 4f       	sbci	r19, 0xFF	; 255
    bed8:	59 96       	adiw	r26, 0x19	; 25
    beda:	8d 91       	ld	r24, X+
    bedc:	9c 91       	ld	r25, X
    bede:	5a 97       	sbiw	r26, 0x1a	; 26
    bee0:	65 d5       	rcall	.+2762   	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    bee2:	88 23       	and	r24, r24
    bee4:	b9 f1       	breq	.+110    	; 0xbf54 <_ZN10SdBaseFile8truncateEm+0x13e>
    bee6:	49 81       	ldd	r20, Y+1	; 0x01
    bee8:	5a 81       	ldd	r21, Y+2	; 0x02
    beea:	6b 81       	ldd	r22, Y+3	; 0x03
    beec:	7c 81       	ldd	r23, Y+4	; 0x04
    beee:	d5 01       	movw	r26, r10
    bef0:	59 96       	adiw	r26, 0x19	; 25
    bef2:	ed 91       	ld	r30, X+
    bef4:	fc 91       	ld	r31, X
    bef6:	5a 97       	sbiw	r26, 0x1a	; 26
    bef8:	87 89       	ldd	r24, Z+23	; 0x17
    befa:	80 31       	cpi	r24, 0x10	; 16
    befc:	49 f4       	brne	.+18     	; 0xbf10 <_ZN10SdBaseFile8truncateEm+0xfa>
    befe:	81 e0       	ldi	r24, 0x01	; 1
    bf00:	48 3f       	cpi	r20, 0xF8	; 248
    bf02:	bf ef       	ldi	r27, 0xFF	; 255
    bf04:	5b 07       	cpc	r21, r27
    bf06:	61 05       	cpc	r22, r1
    bf08:	71 05       	cpc	r23, r1
    bf0a:	58 f4       	brcc	.+22     	; 0xbf22 <_ZN10SdBaseFile8truncateEm+0x10c>
    bf0c:	80 e0       	ldi	r24, 0x00	; 0
    bf0e:	09 c0       	rjmp	.+18     	; 0xbf22 <_ZN10SdBaseFile8truncateEm+0x10c>
    bf10:	81 e0       	ldi	r24, 0x01	; 1
    bf12:	48 3f       	cpi	r20, 0xF8	; 248
    bf14:	9f ef       	ldi	r25, 0xFF	; 255
    bf16:	59 07       	cpc	r21, r25
    bf18:	69 07       	cpc	r22, r25
    bf1a:	9f e0       	ldi	r25, 0x0F	; 15
    bf1c:	79 07       	cpc	r23, r25
    bf1e:	08 f4       	brcc	.+2      	; 0xbf22 <_ZN10SdBaseFile8truncateEm+0x10c>
    bf20:	80 e0       	ldi	r24, 0x00	; 0
    bf22:	81 11       	cpse	r24, r1
    bf24:	19 c0       	rjmp	.+50     	; 0xbf58 <_ZN10SdBaseFile8truncateEm+0x142>
    bf26:	cf 01       	movw	r24, r30
    bf28:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <_ZN8SdVolume9freeChainEm>
    bf2c:	88 23       	and	r24, r24
    bf2e:	91 f0       	breq	.+36     	; 0xbf54 <_ZN10SdBaseFile8truncateEm+0x13e>
    bf30:	d5 01       	movw	r26, r10
    bf32:	14 96       	adiw	r26, 0x04	; 4
    bf34:	4d 91       	ld	r20, X+
    bf36:	5d 91       	ld	r21, X+
    bf38:	6d 91       	ld	r22, X+
    bf3a:	7c 91       	ld	r23, X
    bf3c:	17 97       	sbiw	r26, 0x07	; 7
    bf3e:	0f ef       	ldi	r16, 0xFF	; 255
    bf40:	1f ef       	ldi	r17, 0xFF	; 255
    bf42:	2f ef       	ldi	r18, 0xFF	; 255
    bf44:	3f e0       	ldi	r19, 0x0F	; 15
    bf46:	59 96       	adiw	r26, 0x19	; 25
    bf48:	8d 91       	ld	r24, X+
    bf4a:	9c 91       	ld	r25, X
    bf4c:	5a 97       	sbiw	r26, 0x1a	; 26
    bf4e:	3d d6       	rcall	.+3194   	; 0xcbca <_ZN8SdVolume6fatPutEmm>
    bf50:	81 11       	cpse	r24, r1
    bf52:	02 c0       	rjmp	.+4      	; 0xbf58 <_ZN10SdBaseFile8truncateEm+0x142>
    bf54:	80 e0       	ldi	r24, 0x00	; 0
    bf56:	25 c0       	rjmp	.+74     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf58:	f5 01       	movw	r30, r10
    bf5a:	c1 8a       	std	Z+17, r12	; 0x11
    bf5c:	d2 8a       	std	Z+18, r13	; 0x12
    bf5e:	e3 8a       	std	Z+19, r14	; 0x13
    bf60:	f4 8a       	std	Z+20, r15	; 0x14
    bf62:	81 81       	ldd	r24, Z+1	; 0x01
    bf64:	80 68       	ori	r24, 0x80	; 128
    bf66:	81 83       	std	Z+1, r24	; 0x01
    bf68:	c5 01       	movw	r24, r10
    bf6a:	04 df       	rcall	.-504    	; 0xbd74 <_ZN10SdBaseFile4syncEv>
    bf6c:	88 23       	and	r24, r24
    bf6e:	c1 f0       	breq	.+48     	; 0xbfa0 <_ZN10SdBaseFile8truncateEm+0x18a>
    bf70:	b7 01       	movw	r22, r14
    bf72:	a6 01       	movw	r20, r12
    bf74:	4c 14       	cp	r4, r12
    bf76:	5d 04       	cpc	r5, r13
    bf78:	6e 04       	cpc	r6, r14
    bf7a:	7f 04       	cpc	r7, r15
    bf7c:	10 f4       	brcc	.+4      	; 0xbf82 <_ZN10SdBaseFile8truncateEm+0x16c>
    bf7e:	b3 01       	movw	r22, r6
    bf80:	a2 01       	movw	r20, r4
    bf82:	c5 01       	movw	r24, r10
    bf84:	4c de       	rcall	.-872    	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    bf86:	0d c0       	rjmp	.+26     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf88:	80 e0       	ldi	r24, 0x00	; 0
    bf8a:	0b c0       	rjmp	.+22     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf8c:	80 e0       	ldi	r24, 0x00	; 0
    bf8e:	09 c0       	rjmp	.+18     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf90:	80 e0       	ldi	r24, 0x00	; 0
    bf92:	07 c0       	rjmp	.+14     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf94:	81 e0       	ldi	r24, 0x01	; 1
    bf96:	05 c0       	rjmp	.+10     	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf98:	80 e0       	ldi	r24, 0x00	; 0
    bf9a:	03 c0       	rjmp	.+6      	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bf9c:	80 e0       	ldi	r24, 0x00	; 0
    bf9e:	01 c0       	rjmp	.+2      	; 0xbfa2 <_ZN10SdBaseFile8truncateEm+0x18c>
    bfa0:	80 e0       	ldi	r24, 0x00	; 0
    bfa2:	0f 90       	pop	r0
    bfa4:	0f 90       	pop	r0
    bfa6:	0f 90       	pop	r0
    bfa8:	0f 90       	pop	r0
    bfaa:	df 91       	pop	r29
    bfac:	cf 91       	pop	r28
    bfae:	1f 91       	pop	r17
    bfb0:	0f 91       	pop	r16
    bfb2:	ff 90       	pop	r15
    bfb4:	ef 90       	pop	r14
    bfb6:	df 90       	pop	r13
    bfb8:	cf 90       	pop	r12
    bfba:	bf 90       	pop	r11
    bfbc:	af 90       	pop	r10
    bfbe:	7f 90       	pop	r7
    bfc0:	6f 90       	pop	r6
    bfc2:	5f 90       	pop	r5
    bfc4:	4f 90       	pop	r4
    bfc6:	08 95       	ret

0000bfc8 <_ZN10SdBaseFile6removeEv>:
    bfc8:	cf 93       	push	r28
    bfca:	df 93       	push	r29
    bfcc:	ec 01       	movw	r28, r24
    bfce:	40 e0       	ldi	r20, 0x00	; 0
    bfd0:	50 e0       	ldi	r21, 0x00	; 0
    bfd2:	ba 01       	movw	r22, r20
    bfd4:	20 df       	rcall	.-448    	; 0xbe16 <_ZN10SdBaseFile8truncateEm>
    bfd6:	88 23       	and	r24, r24
    bfd8:	59 f0       	breq	.+22     	; 0xbff0 <_ZN10SdBaseFile6removeEv+0x28>
    bfda:	61 e0       	ldi	r22, 0x01	; 1
    bfdc:	ce 01       	movw	r24, r28
    bfde:	02 db       	rcall	.-2556   	; 0xb5e4 <_ZN10SdBaseFile13cacheDirEntryEh>
    bfe0:	00 97       	sbiw	r24, 0x00	; 0
    bfe2:	41 f0       	breq	.+16     	; 0xbff4 <_ZN10SdBaseFile6removeEv+0x2c>
    bfe4:	25 ee       	ldi	r18, 0xE5	; 229
    bfe6:	fc 01       	movw	r30, r24
    bfe8:	20 83       	st	Z, r18
    bfea:	1b 82       	std	Y+3, r1	; 0x03
    bfec:	63 d4       	rcall	.+2246   	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    bfee:	03 c0       	rjmp	.+6      	; 0xbff6 <_ZN10SdBaseFile6removeEv+0x2e>
    bff0:	80 e0       	ldi	r24, 0x00	; 0
    bff2:	01 c0       	rjmp	.+2      	; 0xbff6 <_ZN10SdBaseFile6removeEv+0x2e>
    bff4:	80 e0       	ldi	r24, 0x00	; 0
    bff6:	df 91       	pop	r29
    bff8:	cf 91       	pop	r28
    bffa:	08 95       	ret

0000bffc <_ZN10SdBaseFile15openCachedEntryEhh>:
    bffc:	ff 92       	push	r15
    bffe:	0f 93       	push	r16
    c000:	1f 93       	push	r17
    c002:	cf 93       	push	r28
    c004:	df 93       	push	r29
    c006:	ec 01       	movw	r28, r24
    c008:	f4 2e       	mov	r15, r20
    c00a:	80 e2       	ldi	r24, 0x20	; 32
    c00c:	68 9f       	mul	r22, r24
    c00e:	f0 01       	movw	r30, r0
    c010:	11 24       	eor	r1, r1
    c012:	e5 54       	subi	r30, 0x45	; 69
    c014:	f1 4f       	sbci	r31, 0xF1	; 241
    c016:	83 85       	ldd	r24, Z+11	; 0x0b
    c018:	81 71       	andi	r24, 0x11	; 17
    c01a:	21 f0       	breq	.+8      	; 0xc024 <_ZN10SdBaseFile15openCachedEntryEhh+0x28>
    c01c:	84 2f       	mov	r24, r20
    c01e:	82 71       	andi	r24, 0x12	; 18
    c020:	09 f0       	breq	.+2      	; 0xc024 <_ZN10SdBaseFile15openCachedEntryEhh+0x28>
    c022:	5b c0       	rjmp	.+182    	; 0xc0da <_ZN10SdBaseFile15openCachedEntryEhh+0xde>
    c024:	80 91 bb 10 	lds	r24, 0x10BB
    c028:	90 91 bc 10 	lds	r25, 0x10BC
    c02c:	a0 91 bd 10 	lds	r26, 0x10BD
    c030:	b0 91 be 10 	lds	r27, 0x10BE
    c034:	8c 87       	std	Y+12, r24	; 0x0c
    c036:	9d 87       	std	Y+13, r25	; 0x0d
    c038:	ae 87       	std	Y+14, r26	; 0x0e
    c03a:	bf 87       	std	Y+15, r27	; 0x0f
    c03c:	68 8b       	std	Y+16, r22	; 0x10
    c03e:	04 89       	ldd	r16, Z+20	; 0x14
    c040:	15 89       	ldd	r17, Z+21	; 0x15
    c042:	20 e0       	ldi	r18, 0x00	; 0
    c044:	30 e0       	ldi	r19, 0x00	; 0
    c046:	98 01       	movw	r18, r16
    c048:	11 27       	eor	r17, r17
    c04a:	00 27       	eor	r16, r16
    c04c:	0d 8b       	std	Y+21, r16	; 0x15
    c04e:	1e 8b       	std	Y+22, r17	; 0x16
    c050:	2f 8b       	std	Y+23, r18	; 0x17
    c052:	38 8f       	std	Y+24, r19	; 0x18
    c054:	42 8d       	ldd	r20, Z+26	; 0x1a
    c056:	53 8d       	ldd	r21, Z+27	; 0x1b
    c058:	60 e0       	ldi	r22, 0x00	; 0
    c05a:	70 e0       	ldi	r23, 0x00	; 0
    c05c:	40 2b       	or	r20, r16
    c05e:	51 2b       	or	r21, r17
    c060:	62 2b       	or	r22, r18
    c062:	73 2b       	or	r23, r19
    c064:	4d 8b       	std	Y+21, r20	; 0x15
    c066:	5e 8b       	std	Y+22, r21	; 0x16
    c068:	6f 8b       	std	Y+23, r22	; 0x17
    c06a:	78 8f       	std	Y+24, r23	; 0x18
    c06c:	83 85       	ldd	r24, Z+11	; 0x0b
    c06e:	88 71       	andi	r24, 0x18	; 24
    c070:	59 f4       	brne	.+22     	; 0xc088 <_ZN10SdBaseFile15openCachedEntryEhh+0x8c>
    c072:	84 8d       	ldd	r24, Z+28	; 0x1c
    c074:	95 8d       	ldd	r25, Z+29	; 0x1d
    c076:	a6 8d       	ldd	r26, Z+30	; 0x1e
    c078:	b7 8d       	ldd	r27, Z+31	; 0x1f
    c07a:	89 8b       	std	Y+17, r24	; 0x11
    c07c:	9a 8b       	std	Y+18, r25	; 0x12
    c07e:	ab 8b       	std	Y+19, r26	; 0x13
    c080:	bc 8b       	std	Y+20, r27	; 0x14
    c082:	81 e0       	ldi	r24, 0x01	; 1
    c084:	8b 83       	std	Y+3, r24	; 0x03
    c086:	0c c0       	rjmp	.+24     	; 0xc0a0 <_ZN10SdBaseFile15openCachedEntryEhh+0xa4>
    c088:	80 31       	cpi	r24, 0x10	; 16
    c08a:	39 f5       	brne	.+78     	; 0xc0da <_ZN10SdBaseFile15openCachedEntryEhh+0xde>
    c08c:	9e 01       	movw	r18, r28
    c08e:	2f 5e       	subi	r18, 0xEF	; 239
    c090:	3f 4f       	sbci	r19, 0xFF	; 255
    c092:	89 8d       	ldd	r24, Y+25	; 0x19
    c094:	9a 8d       	ldd	r25, Y+26	; 0x1a
    c096:	25 d5       	rcall	.+2634   	; 0xcae2 <_ZN8SdVolume9chainSizeEmPm>
    c098:	88 23       	and	r24, r24
    c09a:	f9 f0       	breq	.+62     	; 0xc0da <_ZN10SdBaseFile15openCachedEntryEhh+0xde>
    c09c:	84 e0       	ldi	r24, 0x04	; 4
    c09e:	8b 83       	std	Y+3, r24	; 0x03
    c0a0:	8f 2d       	mov	r24, r15
    c0a2:	8f 70       	andi	r24, 0x0F	; 15
    c0a4:	89 83       	std	Y+1, r24	; 0x01
    c0a6:	1c 82       	std	Y+4, r1	; 0x04
    c0a8:	1d 82       	std	Y+5, r1	; 0x05
    c0aa:	1e 82       	std	Y+6, r1	; 0x06
    c0ac:	1f 82       	std	Y+7, r1	; 0x07
    c0ae:	18 86       	std	Y+8, r1	; 0x08
    c0b0:	19 86       	std	Y+9, r1	; 0x09
    c0b2:	1a 86       	std	Y+10, r1	; 0x0a
    c0b4:	1b 86       	std	Y+11, r1	; 0x0b
    c0b6:	f4 fe       	sbrs	r15, 4
    c0b8:	07 c0       	rjmp	.+14     	; 0xc0c8 <_ZN10SdBaseFile15openCachedEntryEhh+0xcc>
    c0ba:	40 e0       	ldi	r20, 0x00	; 0
    c0bc:	50 e0       	ldi	r21, 0x00	; 0
    c0be:	ba 01       	movw	r22, r20
    c0c0:	ce 01       	movw	r24, r28
    c0c2:	a9 de       	rcall	.-686    	; 0xbe16 <_ZN10SdBaseFile8truncateEm>
    c0c4:	88 23       	and	r24, r24
    c0c6:	61 f0       	breq	.+24     	; 0xc0e0 <_ZN10SdBaseFile15openCachedEntryEhh+0xe4>
    c0c8:	f5 fe       	sbrs	r15, 5
    c0ca:	0c c0       	rjmp	.+24     	; 0xc0e4 <_ZN10SdBaseFile15openCachedEntryEhh+0xe8>
    c0cc:	49 89       	ldd	r20, Y+17	; 0x11
    c0ce:	5a 89       	ldd	r21, Y+18	; 0x12
    c0d0:	6b 89       	ldd	r22, Y+19	; 0x13
    c0d2:	7c 89       	ldd	r23, Y+20	; 0x14
    c0d4:	ce 01       	movw	r24, r28
    c0d6:	a3 dd       	rcall	.-1210   	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    c0d8:	06 c0       	rjmp	.+12     	; 0xc0e6 <_ZN10SdBaseFile15openCachedEntryEhh+0xea>
    c0da:	1b 82       	std	Y+3, r1	; 0x03
    c0dc:	80 e0       	ldi	r24, 0x00	; 0
    c0de:	03 c0       	rjmp	.+6      	; 0xc0e6 <_ZN10SdBaseFile15openCachedEntryEhh+0xea>
    c0e0:	80 e0       	ldi	r24, 0x00	; 0
    c0e2:	01 c0       	rjmp	.+2      	; 0xc0e6 <_ZN10SdBaseFile15openCachedEntryEhh+0xea>
    c0e4:	81 e0       	ldi	r24, 0x01	; 1
    c0e6:	df 91       	pop	r29
    c0e8:	cf 91       	pop	r28
    c0ea:	1f 91       	pop	r17
    c0ec:	0f 91       	pop	r16
    c0ee:	ff 90       	pop	r15
    c0f0:	08 95       	ret

0000c0f2 <_ZN10SdBaseFile4openEPS_PKhh>:
    c0f2:	9f 92       	push	r9
    c0f4:	af 92       	push	r10
    c0f6:	bf 92       	push	r11
    c0f8:	cf 92       	push	r12
    c0fa:	df 92       	push	r13
    c0fc:	ef 92       	push	r14
    c0fe:	ff 92       	push	r15
    c100:	0f 93       	push	r16
    c102:	1f 93       	push	r17
    c104:	cf 93       	push	r28
    c106:	df 93       	push	r29
    c108:	7c 01       	movw	r14, r24
    c10a:	eb 01       	movw	r28, r22
    c10c:	6a 01       	movw	r12, r20
    c10e:	92 2e       	mov	r9, r18
    c110:	89 8d       	ldd	r24, Y+25	; 0x19
    c112:	9a 8d       	ldd	r25, Y+26	; 0x1a
    c114:	f7 01       	movw	r30, r14
    c116:	92 8f       	std	Z+26, r25	; 0x1a
    c118:	81 8f       	std	Z+25, r24	; 0x19
    c11a:	40 e0       	ldi	r20, 0x00	; 0
    c11c:	50 e0       	ldi	r21, 0x00	; 0
    c11e:	ba 01       	movw	r22, r20
    c120:	ce 01       	movw	r24, r28
    c122:	7d dd       	rcall	.-1286   	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    c124:	b1 2c       	mov	r11, r1
    c126:	aa 24       	eor	r10, r10
    c128:	a3 94       	inc	r10
    c12a:	35 c0       	rjmp	.+106    	; 0xc196 <_ZN10SdBaseFile4openEPS_PKhh+0xa4>
    c12c:	68 94       	set
    c12e:	14 f8       	bld	r1, 4
    c130:	36 95       	lsr	r19
    c132:	27 95       	ror	r18
    c134:	17 95       	ror	r17
    c136:	07 95       	ror	r16
    c138:	16 94       	lsr	r1
    c13a:	d1 f7       	brne	.-12     	; 0xc130 <_ZN10SdBaseFile4openEPS_PKhh+0x3e>
    c13c:	0f 70       	andi	r16, 0x0F	; 15
    c13e:	ce 01       	movw	r24, r28
    c140:	30 dd       	rcall	.-1440   	; 0xbba2 <_ZN10SdBaseFile12readDirCacheEv>
    c142:	00 97       	sbiw	r24, 0x00	; 0
    c144:	09 f4       	brne	.+2      	; 0xc148 <_ZN10SdBaseFile4openEPS_PKhh+0x56>
    c146:	82 c0       	rjmp	.+260    	; 0xc24c <_ZN10SdBaseFile4openEPS_PKhh+0x15a>
    c148:	fc 01       	movw	r30, r24
    c14a:	20 81       	ld	r18, Z
    c14c:	22 23       	and	r18, r18
    c14e:	11 f0       	breq	.+4      	; 0xc154 <_ZN10SdBaseFile4openEPS_PKhh+0x62>
    c150:	25 3e       	cpi	r18, 0xE5	; 229
    c152:	b1 f4       	brne	.+44     	; 0xc180 <_ZN10SdBaseFile4openEPS_PKhh+0x8e>
    c154:	b1 10       	cpse	r11, r1
    c156:	0f c0       	rjmp	.+30     	; 0xc176 <_ZN10SdBaseFile4openEPS_PKhh+0x84>
    c158:	40 91 bb 10 	lds	r20, 0x10BB
    c15c:	50 91 bc 10 	lds	r21, 0x10BC
    c160:	60 91 bd 10 	lds	r22, 0x10BD
    c164:	70 91 be 10 	lds	r23, 0x10BE
    c168:	f7 01       	movw	r30, r14
    c16a:	44 87       	std	Z+12, r20	; 0x0c
    c16c:	55 87       	std	Z+13, r21	; 0x0d
    c16e:	66 87       	std	Z+14, r22	; 0x0e
    c170:	77 87       	std	Z+15, r23	; 0x0f
    c172:	00 8b       	std	Z+16, r16	; 0x10
    c174:	ba 2c       	mov	r11, r10
    c176:	fc 01       	movw	r30, r24
    c178:	80 81       	ld	r24, Z
    c17a:	81 11       	cpse	r24, r1
    c17c:	0c c0       	rjmp	.+24     	; 0xc196 <_ZN10SdBaseFile4openEPS_PKhh+0xa4>
    c17e:	76 c0       	rjmp	.+236    	; 0xc26c <_ZN10SdBaseFile4openEPS_PKhh+0x17a>
    c180:	4b e0       	ldi	r20, 0x0B	; 11
    c182:	50 e0       	ldi	r21, 0x00	; 0
    c184:	bc 01       	movw	r22, r24
    c186:	c6 01       	movw	r24, r12
    c188:	0e 94 00 c4 	call	0x18800	; 0x18800 <memcmp>
    c18c:	28 2f       	mov	r18, r24
    c18e:	39 2f       	mov	r19, r25
    c190:	23 2b       	or	r18, r19
    c192:	09 f4       	brne	.+2      	; 0xc196 <_ZN10SdBaseFile4openEPS_PKhh+0xa4>
    c194:	6e c0       	rjmp	.+220    	; 0xc272 <_ZN10SdBaseFile4openEPS_PKhh+0x180>
    c196:	08 85       	ldd	r16, Y+8	; 0x08
    c198:	19 85       	ldd	r17, Y+9	; 0x09
    c19a:	2a 85       	ldd	r18, Y+10	; 0x0a
    c19c:	3b 85       	ldd	r19, Y+11	; 0x0b
    c19e:	89 89       	ldd	r24, Y+17	; 0x11
    c1a0:	9a 89       	ldd	r25, Y+18	; 0x12
    c1a2:	ab 89       	ldd	r26, Y+19	; 0x13
    c1a4:	bc 89       	ldd	r27, Y+20	; 0x14
    c1a6:	08 17       	cp	r16, r24
    c1a8:	19 07       	cpc	r17, r25
    c1aa:	2a 07       	cpc	r18, r26
    c1ac:	3b 07       	cpc	r19, r27
    c1ae:	08 f4       	brcc	.+2      	; 0xc1b2 <_ZN10SdBaseFile4openEPS_PKhh+0xc0>
    c1b0:	bd cf       	rjmp	.-134    	; 0xc12c <_ZN10SdBaseFile4openEPS_PKhh+0x3a>
    c1b2:	5c c0       	rjmp	.+184    	; 0xc26c <_ZN10SdBaseFile4openEPS_PKhh+0x17a>
    c1b4:	91 fe       	sbrs	r9, 1
    c1b6:	4c c0       	rjmp	.+152    	; 0xc250 <_ZN10SdBaseFile4openEPS_PKhh+0x15e>
    c1b8:	bb 20       	and	r11, r11
    c1ba:	49 f0       	breq	.+18     	; 0xc1ce <_ZN10SdBaseFile4openEPS_PKhh+0xdc>
    c1bc:	f7 01       	movw	r30, r14
    c1be:	00 89       	ldd	r16, Z+16	; 0x10
    c1c0:	61 e0       	ldi	r22, 0x01	; 1
    c1c2:	c7 01       	movw	r24, r14
    c1c4:	0f da       	rcall	.-3042   	; 0xb5e4 <_ZN10SdBaseFile13cacheDirEntryEh>
    c1c6:	ec 01       	movw	r28, r24
    c1c8:	00 97       	sbiw	r24, 0x00	; 0
    c1ca:	69 f4       	brne	.+26     	; 0xc1e6 <_ZN10SdBaseFile4openEPS_PKhh+0xf4>
    c1cc:	43 c0       	rjmp	.+134    	; 0xc254 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
    c1ce:	8b 81       	ldd	r24, Y+3	; 0x03
    c1d0:	82 30       	cpi	r24, 0x02	; 2
    c1d2:	09 f4       	brne	.+2      	; 0xc1d6 <_ZN10SdBaseFile4openEPS_PKhh+0xe4>
    c1d4:	41 c0       	rjmp	.+130    	; 0xc258 <_ZN10SdBaseFile4openEPS_PKhh+0x166>
    c1d6:	ce 01       	movw	r24, r28
    c1d8:	76 d9       	rcall	.-3348   	; 0xb4c6 <_ZN10SdBaseFile13addDirClusterEv>
    c1da:	88 23       	and	r24, r24
    c1dc:	09 f4       	brne	.+2      	; 0xc1e0 <_ZN10SdBaseFile4openEPS_PKhh+0xee>
    c1de:	3e c0       	rjmp	.+124    	; 0xc25c <_ZN10SdBaseFile4openEPS_PKhh+0x16a>
    c1e0:	cb eb       	ldi	r28, 0xBB	; 187
    c1e2:	de e0       	ldi	r29, 0x0E	; 14
    c1e4:	00 e0       	ldi	r16, 0x00	; 0
    c1e6:	80 e2       	ldi	r24, 0x20	; 32
    c1e8:	fe 01       	movw	r30, r28
    c1ea:	11 92       	st	Z+, r1
    c1ec:	8a 95       	dec	r24
    c1ee:	e9 f7       	brne	.-6      	; 0xc1ea <_ZN10SdBaseFile4openEPS_PKhh+0xf8>
    c1f0:	8b e0       	ldi	r24, 0x0B	; 11
    c1f2:	f6 01       	movw	r30, r12
    c1f4:	de 01       	movw	r26, r28
    c1f6:	01 90       	ld	r0, Z+
    c1f8:	0d 92       	st	X+, r0
    c1fa:	8a 95       	dec	r24
    c1fc:	e1 f7       	brne	.-8      	; 0xc1f6 <_ZN10SdBaseFile4openEPS_PKhh+0x104>
    c1fe:	e0 91 b2 0e 	lds	r30, 0x0EB2
    c202:	f0 91 b3 0e 	lds	r31, 0x0EB3
    c206:	30 97       	sbiw	r30, 0x00	; 0
    c208:	39 f0       	breq	.+14     	; 0xc218 <_ZN10SdBaseFile4openEPS_PKhh+0x126>
    c20a:	be 01       	movw	r22, r28
    c20c:	62 5f       	subi	r22, 0xF2	; 242
    c20e:	7f 4f       	sbci	r23, 0xFF	; 255
    c210:	ce 01       	movw	r24, r28
    c212:	40 96       	adiw	r24, 0x10	; 16
    c214:	19 95       	eicall
    c216:	08 c0       	rjmp	.+16     	; 0xc228 <_ZN10SdBaseFile4openEPS_PKhh+0x136>
    c218:	81 e2       	ldi	r24, 0x21	; 33
    c21a:	98 e2       	ldi	r25, 0x28	; 40
    c21c:	99 8b       	std	Y+17, r25	; 0x11
    c21e:	88 8b       	std	Y+16, r24	; 0x10
    c220:	80 e0       	ldi	r24, 0x00	; 0
    c222:	98 e0       	ldi	r25, 0x08	; 8
    c224:	9f 87       	std	Y+15, r25	; 0x0f
    c226:	8e 87       	std	Y+14, r24	; 0x0e
    c228:	88 89       	ldd	r24, Y+16	; 0x10
    c22a:	99 89       	ldd	r25, Y+17	; 0x11
    c22c:	9b 8b       	std	Y+19, r25	; 0x13
    c22e:	8a 8b       	std	Y+18, r24	; 0x12
    c230:	99 8f       	std	Y+25, r25	; 0x19
    c232:	88 8f       	std	Y+24, r24	; 0x18
    c234:	8e 85       	ldd	r24, Y+14	; 0x0e
    c236:	9f 85       	ldd	r25, Y+15	; 0x0f
    c238:	9f 8b       	std	Y+23, r25	; 0x17
    c23a:	8e 8b       	std	Y+22, r24	; 0x16
    c23c:	3b d3       	rcall	.+1654   	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    c23e:	88 23       	and	r24, r24
    c240:	79 f0       	breq	.+30     	; 0xc260 <_ZN10SdBaseFile4openEPS_PKhh+0x16e>
    c242:	49 2d       	mov	r20, r9
    c244:	60 2f       	mov	r22, r16
    c246:	c7 01       	movw	r24, r14
    c248:	d9 de       	rcall	.-590    	; 0xbffc <_ZN10SdBaseFile15openCachedEntryEhh>
    c24a:	16 c0       	rjmp	.+44     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c24c:	80 e0       	ldi	r24, 0x00	; 0
    c24e:	14 c0       	rjmp	.+40     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c250:	80 e0       	ldi	r24, 0x00	; 0
    c252:	12 c0       	rjmp	.+36     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c254:	80 e0       	ldi	r24, 0x00	; 0
    c256:	10 c0       	rjmp	.+32     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c258:	80 e0       	ldi	r24, 0x00	; 0
    c25a:	0e c0       	rjmp	.+28     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c25c:	80 e0       	ldi	r24, 0x00	; 0
    c25e:	0c c0       	rjmp	.+24     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c260:	80 e0       	ldi	r24, 0x00	; 0
    c262:	0a c0       	rjmp	.+20     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c264:	80 e0       	ldi	r24, 0x00	; 0
    c266:	08 c0       	rjmp	.+16     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c268:	80 e0       	ldi	r24, 0x00	; 0
    c26a:	06 c0       	rjmp	.+12     	; 0xc278 <_ZN10SdBaseFile4openEPS_PKhh+0x186>
    c26c:	96 fc       	sbrc	r9, 6
    c26e:	a2 cf       	rjmp	.-188    	; 0xc1b4 <_ZN10SdBaseFile4openEPS_PKhh+0xc2>
    c270:	f9 cf       	rjmp	.-14     	; 0xc264 <_ZN10SdBaseFile4openEPS_PKhh+0x172>
    c272:	99 20       	and	r9, r9
    c274:	34 f7       	brge	.-52     	; 0xc242 <_ZN10SdBaseFile4openEPS_PKhh+0x150>
    c276:	f8 cf       	rjmp	.-16     	; 0xc268 <_ZN10SdBaseFile4openEPS_PKhh+0x176>
    c278:	df 91       	pop	r29
    c27a:	cf 91       	pop	r28
    c27c:	1f 91       	pop	r17
    c27e:	0f 91       	pop	r16
    c280:	ff 90       	pop	r15
    c282:	ef 90       	pop	r14
    c284:	df 90       	pop	r13
    c286:	cf 90       	pop	r12
    c288:	bf 90       	pop	r11
    c28a:	af 90       	pop	r10
    c28c:	9f 90       	pop	r9
    c28e:	08 95       	ret

0000c290 <_ZN10SdBaseFile4openEPS_PKch>:
    c290:	7f 92       	push	r7
    c292:	8f 92       	push	r8
    c294:	9f 92       	push	r9
    c296:	af 92       	push	r10
    c298:	bf 92       	push	r11
    c29a:	cf 92       	push	r12
    c29c:	df 92       	push	r13
    c29e:	ef 92       	push	r14
    c2a0:	ff 92       	push	r15
    c2a2:	0f 93       	push	r16
    c2a4:	1f 93       	push	r17
    c2a6:	cf 93       	push	r28
    c2a8:	df 93       	push	r29
    c2aa:	cd b7       	in	r28, 0x3d	; 61
    c2ac:	de b7       	in	r29, 0x3e	; 62
    c2ae:	c3 54       	subi	r28, 0x43	; 67
    c2b0:	d1 09       	sbc	r29, r1
    c2b2:	0f b6       	in	r0, 0x3f	; 63
    c2b4:	f8 94       	cli
    c2b6:	de bf       	out	0x3e, r29	; 62
    c2b8:	0f be       	out	0x3f, r0	; 63
    c2ba:	cd bf       	out	0x3d, r28	; 61
    c2bc:	4c 01       	movw	r8, r24
    c2be:	5b 01       	movw	r10, r22
    c2c0:	24 96       	adiw	r28, 0x04	; 4
    c2c2:	5f af       	std	Y+63, r21	; 0x3f
    c2c4:	4e af       	std	Y+62, r20	; 0x3e
    c2c6:	24 97       	sbiw	r28, 0x04	; 4
    c2c8:	72 2e       	mov	r7, r18
    c2ca:	1c 8e       	std	Y+28, r1	; 0x1c
    c2cc:	1f 8e       	std	Y+31, r1	; 0x1f
    c2ce:	19 82       	std	Y+1, r1	; 0x01
    c2d0:	1c 82       	std	Y+4, r1	; 0x04
    c2d2:	61 15       	cp	r22, r1
    c2d4:	71 05       	cpc	r23, r1
    c2d6:	09 f4       	brne	.+2      	; 0xc2da <_ZN10SdBaseFile4openEPS_PKch+0x4a>
    c2d8:	79 c0       	rjmp	.+242    	; 0xc3cc <_ZN10SdBaseFile4openEPS_PKch+0x13c>
    c2da:	fc 01       	movw	r30, r24
    c2dc:	83 81       	ldd	r24, Z+3	; 0x03
    c2de:	81 11       	cpse	r24, r1
    c2e0:	77 c0       	rjmp	.+238    	; 0xc3d0 <_ZN10SdBaseFile4openEPS_PKch+0x140>
    c2e2:	fa 01       	movw	r30, r20
    c2e4:	80 81       	ld	r24, Z
    c2e6:	8f 32       	cpi	r24, 0x2F	; 47
    c2e8:	91 f4       	brne	.+36     	; 0xc30e <_ZN10SdBaseFile4openEPS_PKch+0x7e>
    c2ea:	ca 01       	movw	r24, r20
    c2ec:	01 96       	adiw	r24, 0x01	; 1
    c2ee:	fc 01       	movw	r30, r24
    c2f0:	24 96       	adiw	r28, 0x04	; 4
    c2f2:	9f af       	std	Y+63, r25	; 0x3f
    c2f4:	8e af       	std	Y+62, r24	; 0x3e
    c2f6:	24 97       	sbiw	r28, 0x04	; 4
    c2f8:	01 96       	adiw	r24, 0x01	; 1
    c2fa:	20 81       	ld	r18, Z
    c2fc:	2f 32       	cpi	r18, 0x2F	; 47
    c2fe:	b9 f3       	breq	.-18     	; 0xc2ee <_ZN10SdBaseFile4openEPS_PKch+0x5e>
    c300:	f5 01       	movw	r30, r10
    c302:	83 81       	ldd	r24, Z+3	; 0x03
    c304:	82 50       	subi	r24, 0x02	; 2
    c306:	82 30       	cpi	r24, 0x02	; 2
    c308:	70 f4       	brcc	.+28     	; 0xc326 <_ZN10SdBaseFile4openEPS_PKch+0x96>
    c30a:	75 01       	movw	r14, r10
    c30c:	07 c0       	rjmp	.+14     	; 0xc31c <_ZN10SdBaseFile4openEPS_PKch+0x8c>
    c30e:	7b 01       	movw	r14, r22
    c310:	05 c0       	rjmp	.+10     	; 0xc31c <_ZN10SdBaseFile4openEPS_PKch+0x8c>
    c312:	ee 24       	eor	r14, r14
    c314:	e3 94       	inc	r14
    c316:	f1 2c       	mov	r15, r1
    c318:	ec 0e       	add	r14, r28
    c31a:	fd 1e       	adc	r15, r29
    c31c:	8e 01       	movw	r16, r28
    c31e:	04 5e       	subi	r16, 0xE4	; 228
    c320:	1f 4f       	sbci	r17, 0xFF	; 255
    c322:	68 01       	movw	r12, r16
    c324:	0c c0       	rjmp	.+24     	; 0xc33e <_ZN10SdBaseFile4openEPS_PKch+0xae>
    c326:	f5 01       	movw	r30, r10
    c328:	61 8d       	ldd	r22, Z+25	; 0x19
    c32a:	72 8d       	ldd	r23, Z+26	; 0x1a
    c32c:	ce 01       	movw	r24, r28
    c32e:	01 96       	adiw	r24, 0x01	; 1
    c330:	0f da       	rcall	.-3042   	; 0xb750 <_ZN10SdBaseFile8openRootEP8SdVolume>
    c332:	81 11       	cpse	r24, r1
    c334:	ee cf       	rjmp	.-36     	; 0xc312 <_ZN10SdBaseFile4openEPS_PKch+0x82>
    c336:	10 e0       	ldi	r17, 0x00	; 0
    c338:	42 c0       	rjmp	.+132    	; 0xc3be <_ZN10SdBaseFile4openEPS_PKch+0x12e>
    c33a:	78 01       	movw	r14, r16
    c33c:	86 01       	movw	r16, r12
    c33e:	ae 01       	movw	r20, r28
    c340:	4e 5b       	subi	r20, 0xBE	; 190
    c342:	5f 4f       	sbci	r21, 0xFF	; 255
    c344:	be 01       	movw	r22, r28
    c346:	69 5c       	subi	r22, 0xC9	; 201
    c348:	7f 4f       	sbci	r23, 0xFF	; 255
    c34a:	24 96       	adiw	r28, 0x04	; 4
    c34c:	8e ad       	ldd	r24, Y+62	; 0x3e
    c34e:	9f ad       	ldd	r25, Y+63	; 0x3f
    c350:	24 97       	sbiw	r28, 0x04	; 4
    c352:	a6 d9       	rcall	.-3252   	; 0xb6a0 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    c354:	88 23       	and	r24, r24
    c356:	81 f1       	breq	.+96     	; 0xc3b8 <_ZN10SdBaseFile4openEPS_PKch+0x128>
    c358:	24 96       	adiw	r28, 0x04	; 4
    c35a:	ee ad       	ldd	r30, Y+62	; 0x3e
    c35c:	ff ad       	ldd	r31, Y+63	; 0x3f
    c35e:	24 97       	sbiw	r28, 0x04	; 4
    c360:	80 81       	ld	r24, Z
    c362:	8f 32       	cpi	r24, 0x2F	; 47
    c364:	41 f4       	brne	.+16     	; 0xc376 <_ZN10SdBaseFile4openEPS_PKch+0xe6>
    c366:	31 96       	adiw	r30, 0x01	; 1
    c368:	24 96       	adiw	r28, 0x04	; 4
    c36a:	ff af       	std	Y+63, r31	; 0x3f
    c36c:	ee af       	std	Y+62, r30	; 0x3e
    c36e:	24 97       	sbiw	r28, 0x04	; 4
    c370:	81 91       	ld	r24, Z+
    c372:	8f 32       	cpi	r24, 0x2F	; 47
    c374:	c9 f3       	breq	.-14     	; 0xc368 <_ZN10SdBaseFile4openEPS_PKch+0xd8>
    c376:	88 23       	and	r24, r24
    c378:	b1 f0       	breq	.+44     	; 0xc3a6 <_ZN10SdBaseFile4openEPS_PKch+0x116>
    c37a:	21 e0       	ldi	r18, 0x01	; 1
    c37c:	ae 01       	movw	r20, r28
    c37e:	49 5c       	subi	r20, 0xC9	; 201
    c380:	5f 4f       	sbci	r21, 0xFF	; 255
    c382:	b7 01       	movw	r22, r14
    c384:	c8 01       	movw	r24, r16
    c386:	b5 de       	rcall	.-662    	; 0xc0f2 <_ZN10SdBaseFile4openEPS_PKhh>
    c388:	88 23       	and	r24, r24
    c38a:	c1 f0       	breq	.+48     	; 0xc3bc <_ZN10SdBaseFile4openEPS_PKch+0x12c>
    c38c:	ea 14       	cp	r14, r10
    c38e:	fb 04       	cpc	r15, r11
    c390:	11 f0       	breq	.+4      	; 0xc396 <_ZN10SdBaseFile4openEPS_PKch+0x106>
    c392:	c7 01       	movw	r24, r14
    c394:	38 dd       	rcall	.-1424   	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    c396:	0c 15       	cp	r16, r12
    c398:	1d 05       	cpc	r17, r13
    c39a:	79 f6       	brne	.-98     	; 0xc33a <_ZN10SdBaseFile4openEPS_PKch+0xaa>
    c39c:	8e 01       	movw	r16, r28
    c39e:	0f 5f       	subi	r16, 0xFF	; 255
    c3a0:	1f 4f       	sbci	r17, 0xFF	; 255
    c3a2:	76 01       	movw	r14, r12
    c3a4:	cc cf       	rjmp	.-104    	; 0xc33e <_ZN10SdBaseFile4openEPS_PKch+0xae>
    c3a6:	27 2d       	mov	r18, r7
    c3a8:	ae 01       	movw	r20, r28
    c3aa:	49 5c       	subi	r20, 0xC9	; 201
    c3ac:	5f 4f       	sbci	r21, 0xFF	; 255
    c3ae:	b7 01       	movw	r22, r14
    c3b0:	c4 01       	movw	r24, r8
    c3b2:	9f de       	rcall	.-706    	; 0xc0f2 <_ZN10SdBaseFile4openEPS_PKhh>
    c3b4:	18 2f       	mov	r17, r24
    c3b6:	03 c0       	rjmp	.+6      	; 0xc3be <_ZN10SdBaseFile4openEPS_PKch+0x12e>
    c3b8:	10 e0       	ldi	r17, 0x00	; 0
    c3ba:	01 c0       	rjmp	.+2      	; 0xc3be <_ZN10SdBaseFile4openEPS_PKch+0x12e>
    c3bc:	10 e0       	ldi	r17, 0x00	; 0
    c3be:	8c 81       	ldd	r24, Y+4	; 0x04
    c3c0:	88 23       	and	r24, r24
    c3c2:	39 f0       	breq	.+14     	; 0xc3d2 <_ZN10SdBaseFile4openEPS_PKch+0x142>
    c3c4:	ce 01       	movw	r24, r28
    c3c6:	01 96       	adiw	r24, 0x01	; 1
    c3c8:	1e dd       	rcall	.-1476   	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    c3ca:	03 c0       	rjmp	.+6      	; 0xc3d2 <_ZN10SdBaseFile4openEPS_PKch+0x142>
    c3cc:	10 e0       	ldi	r17, 0x00	; 0
    c3ce:	01 c0       	rjmp	.+2      	; 0xc3d2 <_ZN10SdBaseFile4openEPS_PKch+0x142>
    c3d0:	10 e0       	ldi	r17, 0x00	; 0
    c3d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    c3d4:	99 23       	and	r25, r25
    c3d6:	19 f0       	breq	.+6      	; 0xc3de <_ZN10SdBaseFile4openEPS_PKch+0x14e>
    c3d8:	ce 01       	movw	r24, r28
    c3da:	4c 96       	adiw	r24, 0x1c	; 28
    c3dc:	14 dd       	rcall	.-1496   	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    c3de:	81 2f       	mov	r24, r17
    c3e0:	cd 5b       	subi	r28, 0xBD	; 189
    c3e2:	df 4f       	sbci	r29, 0xFF	; 255
    c3e4:	0f b6       	in	r0, 0x3f	; 63
    c3e6:	f8 94       	cli
    c3e8:	de bf       	out	0x3e, r29	; 62
    c3ea:	0f be       	out	0x3f, r0	; 63
    c3ec:	cd bf       	out	0x3d, r28	; 61
    c3ee:	df 91       	pop	r29
    c3f0:	cf 91       	pop	r28
    c3f2:	1f 91       	pop	r17
    c3f4:	0f 91       	pop	r16
    c3f6:	ff 90       	pop	r15
    c3f8:	ef 90       	pop	r14
    c3fa:	df 90       	pop	r13
    c3fc:	cf 90       	pop	r12
    c3fe:	bf 90       	pop	r11
    c400:	af 90       	pop	r10
    c402:	9f 90       	pop	r9
    c404:	8f 90       	pop	r8
    c406:	7f 90       	pop	r7
    c408:	08 95       	ret

0000c40a <_ZN10SdBaseFile6removeEPS_PKc>:
    c40a:	1f 93       	push	r17
    c40c:	cf 93       	push	r28
    c40e:	df 93       	push	r29
    c410:	cd b7       	in	r28, 0x3d	; 61
    c412:	de b7       	in	r29, 0x3e	; 62
    c414:	6b 97       	sbiw	r28, 0x1b	; 27
    c416:	0f b6       	in	r0, 0x3f	; 63
    c418:	f8 94       	cli
    c41a:	de bf       	out	0x3e, r29	; 62
    c41c:	0f be       	out	0x3f, r0	; 63
    c41e:	cd bf       	out	0x3d, r28	; 61
    c420:	ab 01       	movw	r20, r22
    c422:	19 82       	std	Y+1, r1	; 0x01
    c424:	1c 82       	std	Y+4, r1	; 0x04
    c426:	22 e0       	ldi	r18, 0x02	; 2
    c428:	bc 01       	movw	r22, r24
    c42a:	ce 01       	movw	r24, r28
    c42c:	01 96       	adiw	r24, 0x01	; 1
    c42e:	30 df       	rcall	.-416    	; 0xc290 <_ZN10SdBaseFile4openEPS_PKch>
    c430:	88 23       	and	r24, r24
    c432:	29 f0       	breq	.+10     	; 0xc43e <_ZN10SdBaseFile6removeEPS_PKc+0x34>
    c434:	ce 01       	movw	r24, r28
    c436:	01 96       	adiw	r24, 0x01	; 1
    c438:	c7 dd       	rcall	.-1138   	; 0xbfc8 <_ZN10SdBaseFile6removeEv>
    c43a:	18 2f       	mov	r17, r24
    c43c:	01 c0       	rjmp	.+2      	; 0xc440 <_ZN10SdBaseFile6removeEPS_PKc+0x36>
    c43e:	10 e0       	ldi	r17, 0x00	; 0
    c440:	9c 81       	ldd	r25, Y+4	; 0x04
    c442:	99 23       	and	r25, r25
    c444:	19 f0       	breq	.+6      	; 0xc44c <_ZN10SdBaseFile6removeEPS_PKc+0x42>
    c446:	ce 01       	movw	r24, r28
    c448:	01 96       	adiw	r24, 0x01	; 1
    c44a:	dd dc       	rcall	.-1606   	; 0xbe06 <_ZN10SdBaseFile5closeEv>
    c44c:	81 2f       	mov	r24, r17
    c44e:	6b 96       	adiw	r28, 0x1b	; 27
    c450:	0f b6       	in	r0, 0x3f	; 63
    c452:	f8 94       	cli
    c454:	de bf       	out	0x3e, r29	; 62
    c456:	0f be       	out	0x3f, r0	; 63
    c458:	cd bf       	out	0x3d, r28	; 61
    c45a:	df 91       	pop	r29
    c45c:	cf 91       	pop	r28
    c45e:	1f 91       	pop	r17
    c460:	08 95       	ret

0000c462 <_ZN10SdBaseFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int16_t SdBaseFile::write(const void* buf, uint16_t nbyte) {
    c462:	2f 92       	push	r2
    c464:	3f 92       	push	r3
    c466:	4f 92       	push	r4
    c468:	5f 92       	push	r5
    c46a:	6f 92       	push	r6
    c46c:	7f 92       	push	r7
    c46e:	8f 92       	push	r8
    c470:	9f 92       	push	r9
    c472:	af 92       	push	r10
    c474:	bf 92       	push	r11
    c476:	cf 92       	push	r12
    c478:	df 92       	push	r13
    c47a:	ef 92       	push	r14
    c47c:	ff 92       	push	r15
    c47e:	0f 93       	push	r16
    c480:	1f 93       	push	r17
    c482:	cf 93       	push	r28
    c484:	df 93       	push	r29
    c486:	cd b7       	in	r28, 0x3d	; 61
    c488:	de b7       	in	r29, 0x3e	; 62
    c48a:	28 97       	sbiw	r28, 0x08	; 8
    c48c:	0f b6       	in	r0, 0x3f	; 63
    c48e:	f8 94       	cli
    c490:	de bf       	out	0x3e, r29	; 62
    c492:	0f be       	out	0x3f, r0	; 63
    c494:	cd bf       	out	0x3d, r28	; 61
    c496:	8c 01       	movw	r16, r24
    c498:	e6 2e       	mov	r14, r22
    c49a:	f7 2e       	mov	r15, r23
    c49c:	5e 83       	std	Y+6, r21	; 0x06
    c49e:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto fail;
    c4a0:	dc 01       	movw	r26, r24
    c4a2:	13 96       	adiw	r26, 0x03	; 3
    c4a4:	8c 91       	ld	r24, X
    c4a6:	13 97       	sbiw	r26, 0x03	; 3
    c4a8:	81 30       	cpi	r24, 0x01	; 1
    c4aa:	09 f0       	breq	.+2      	; 0xc4ae <_ZN10SdBaseFile5writeEPKvj+0x4c>
    c4ac:	6c c1       	rjmp	.+728    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
    c4ae:	11 96       	adiw	r26, 0x01	; 1
    c4b0:	8c 91       	ld	r24, X
    c4b2:	11 97       	sbiw	r26, 0x01	; 1
    c4b4:	81 ff       	sbrs	r24, 1
    c4b6:	67 c1       	rjmp	.+718    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    c4b8:	82 ff       	sbrs	r24, 2
    c4ba:	16 c0       	rjmp	.+44     	; 0xc4e8 <_ZN10SdBaseFile5writeEPKvj+0x86>
    c4bc:	51 96       	adiw	r26, 0x11	; 17
    c4be:	4d 91       	ld	r20, X+
    c4c0:	5d 91       	ld	r21, X+
    c4c2:	6d 91       	ld	r22, X+
    c4c4:	7c 91       	ld	r23, X
    c4c6:	54 97       	sbiw	r26, 0x14	; 20
    c4c8:	18 96       	adiw	r26, 0x08	; 8
    c4ca:	8d 91       	ld	r24, X+
    c4cc:	9d 91       	ld	r25, X+
    c4ce:	0d 90       	ld	r0, X+
    c4d0:	bc 91       	ld	r27, X
    c4d2:	a0 2d       	mov	r26, r0
    c4d4:	84 17       	cp	r24, r20
    c4d6:	95 07       	cpc	r25, r21
    c4d8:	a6 07       	cpc	r26, r22
    c4da:	b7 07       	cpc	r27, r23
    c4dc:	29 f0       	breq	.+10     	; 0xc4e8 <_ZN10SdBaseFile5writeEPKvj+0x86>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}
    c4de:	c8 01       	movw	r24, r16
    c4e0:	9e db       	rcall	.-2244   	; 0xbc1e <_ZN10SdBaseFile7seekSetEm>
    if (!seekEnd()) goto fail;
    c4e2:	88 23       	and	r24, r24
    c4e4:	09 f4       	brne	.+2      	; 0xc4e8 <_ZN10SdBaseFile5writeEPKvj+0x86>
    c4e6:	4f c1       	rjmp	.+670    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
  }

  while (nToWrite > 0) {
    c4e8:	ed 81       	ldd	r30, Y+5	; 0x05
    c4ea:	fe 81       	ldd	r31, Y+6	; 0x06
    c4ec:	30 97       	sbiw	r30, 0x00	; 0
    c4ee:	09 f4       	brne	.+2      	; 0xc4f2 <_ZN10SdBaseFile5writeEPKvj+0x90>
    c4f0:	1c c1       	rjmp	.+568    	; 0xc72a <_ZN10SdBaseFile5writeEPKvj+0x2c8>
    c4f2:	6f 01       	movw	r12, r30
    c4f4:	8e 2c       	mov	r8, r14
    c4f6:	9f 2c       	mov	r9, r15
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    c4f8:	21 2c       	mov	r2, r1
    c4fa:	68 94       	set
    c4fc:	33 24       	eor	r3, r3
    c4fe:	31 f8       	bld	r3, 1
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto fail;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    c500:	f8 01       	movw	r30, r16
    c502:	80 85       	ldd	r24, Z+8	; 0x08
    c504:	91 85       	ldd	r25, Z+9	; 0x09
    c506:	a2 85       	ldd	r26, Z+10	; 0x0a
    c508:	b3 85       	ldd	r27, Z+11	; 0x0b
    c50a:	01 8c       	ldd	r0, Z+25	; 0x19
    c50c:	f2 8d       	ldd	r31, Z+26	; 0x1a
    c50e:	e0 2d       	mov	r30, r0
    c510:	f8 87       	std	Y+8, r31	; 0x08
    c512:	ef 83       	std	Y+7, r30	; 0x07
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    c514:	ac 01       	movw	r20, r24
    c516:	bd 01       	movw	r22, r26
    c518:	03 2e       	mov	r0, r19
    c51a:	39 e0       	ldi	r19, 0x09	; 9
    c51c:	76 95       	lsr	r23
    c51e:	67 95       	ror	r22
    c520:	57 95       	ror	r21
    c522:	47 95       	ror	r20
    c524:	3a 95       	dec	r19
    c526:	d1 f7       	brne	.-12     	; 0xc51c <_ZN10SdBaseFile5writeEPKvj+0xba>
    c528:	30 2d       	mov	r19, r0
    c52a:	24 81       	ldd	r18, Z+4	; 0x04
    c52c:	21 50       	subi	r18, 0x01	; 1
    c52e:	42 23       	and	r20, r18
    uint16_t blockOffset = curPosition_ & 0X1FF;
    c530:	91 70       	andi	r25, 0x01	; 1
    c532:	aa 27       	eor	r26, r26
    c534:	bb 27       	eor	r27, r27
    c536:	5c 01       	movw	r10, r24
    if (blockOfCluster == 0 && blockOffset == 0) {
    c538:	41 11       	cpse	r20, r1
    c53a:	59 c0       	rjmp	.+178    	; 0xc5ee <_ZN10SdBaseFile5writeEPKvj+0x18c>
    c53c:	00 97       	sbiw	r24, 0x00	; 0
    c53e:	09 f0       	breq	.+2      	; 0xc542 <_ZN10SdBaseFile5writeEPKvj+0xe0>
    c540:	57 c1       	rjmp	.+686    	; 0xc7f0 <_ZN10SdBaseFile5writeEPKvj+0x38e>
      // start of new cluster
      if (curCluster_ == 0) {
    c542:	d8 01       	movw	r26, r16
    c544:	14 96       	adiw	r26, 0x04	; 4
    c546:	4d 91       	ld	r20, X+
    c548:	5d 91       	ld	r21, X+
    c54a:	6d 91       	ld	r22, X+
    c54c:	7c 91       	ld	r23, X
    c54e:	17 97       	sbiw	r26, 0x07	; 7
    c550:	41 15       	cp	r20, r1
    c552:	51 05       	cpc	r21, r1
    c554:	61 05       	cpc	r22, r1
    c556:	71 05       	cpc	r23, r1
    c558:	b1 f4       	brne	.+44     	; 0xc586 <_ZN10SdBaseFile5writeEPKvj+0x124>
        if (firstCluster_ == 0) {
    c55a:	55 96       	adiw	r26, 0x15	; 21
    c55c:	8d 91       	ld	r24, X+
    c55e:	9d 91       	ld	r25, X+
    c560:	0d 90       	ld	r0, X+
    c562:	bc 91       	ld	r27, X
    c564:	a0 2d       	mov	r26, r0
    c566:	00 97       	sbiw	r24, 0x00	; 0
    c568:	a1 05       	cpc	r26, r1
    c56a:	b1 05       	cpc	r27, r1
    c56c:	31 f4       	brne	.+12     	; 0xc57a <_ZN10SdBaseFile5writeEPKvj+0x118>
          // allocate first cluster of file
          if (!addCluster()) goto fail;
    c56e:	c8 01       	movw	r24, r16
    c570:	0e 94 38 5a 	call	0xb470	; 0xb470 <_ZN10SdBaseFile10addClusterEv>
    c574:	81 11       	cpse	r24, r1
    c576:	0f c1       	rjmp	.+542    	; 0xc796 <_ZN10SdBaseFile5writeEPKvj+0x334>
    c578:	06 c1       	rjmp	.+524    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
        } else {
          curCluster_ = firstCluster_;
    c57a:	f8 01       	movw	r30, r16
    c57c:	84 83       	std	Z+4, r24	; 0x04
    c57e:	95 83       	std	Z+5, r25	; 0x05
    c580:	a6 83       	std	Z+6, r26	; 0x06
    c582:	b7 83       	std	Z+7, r27	; 0x07
    c584:	08 c1       	rjmp	.+528    	; 0xc796 <_ZN10SdBaseFile5writeEPKvj+0x334>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) goto fail;
    c586:	9e 01       	movw	r18, r28
    c588:	2f 5f       	subi	r18, 0xFF	; 255
    c58a:	3f 4f       	sbci	r19, 0xFF	; 255
    c58c:	8f 81       	ldd	r24, Y+7	; 0x07
    c58e:	98 85       	ldd	r25, Y+8	; 0x08
    c590:	0d d2       	rcall	.+1050   	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    c592:	88 23       	and	r24, r24
    c594:	09 f4       	brne	.+2      	; 0xc598 <_ZN10SdBaseFile5writeEPKvj+0x136>
    c596:	f7 c0       	rjmp	.+494    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
        if (vol_->isEOC(next)) {
    c598:	89 81       	ldd	r24, Y+1	; 0x01
    c59a:	9a 81       	ldd	r25, Y+2	; 0x02
    c59c:	ab 81       	ldd	r26, Y+3	; 0x03
    c59e:	bc 81       	ldd	r27, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    c5a0:	f8 01       	movw	r30, r16
    c5a2:	21 8d       	ldd	r18, Z+25	; 0x19
    c5a4:	32 8d       	ldd	r19, Z+26	; 0x1a
    c5a6:	f9 01       	movw	r30, r18
    c5a8:	27 89       	ldd	r18, Z+23	; 0x17
    c5aa:	20 31       	cpi	r18, 0x10	; 16
    c5ac:	49 f4       	brne	.+18     	; 0xc5c0 <_ZN10SdBaseFile5writeEPKvj+0x15e>
    c5ae:	21 e0       	ldi	r18, 0x01	; 1
    c5b0:	88 3f       	cpi	r24, 0xF8	; 248
    c5b2:	ff ef       	ldi	r31, 0xFF	; 255
    c5b4:	9f 07       	cpc	r25, r31
    c5b6:	a1 05       	cpc	r26, r1
    c5b8:	b1 05       	cpc	r27, r1
    c5ba:	58 f4       	brcc	.+22     	; 0xc5d2 <_ZN10SdBaseFile5writeEPKvj+0x170>
    c5bc:	20 e0       	ldi	r18, 0x00	; 0
    c5be:	09 c0       	rjmp	.+18     	; 0xc5d2 <_ZN10SdBaseFile5writeEPKvj+0x170>
    return  cluster >= FAT32EOC_MIN;
    c5c0:	21 e0       	ldi	r18, 0x01	; 1
    c5c2:	88 3f       	cpi	r24, 0xF8	; 248
    c5c4:	3f ef       	ldi	r19, 0xFF	; 255
    c5c6:	93 07       	cpc	r25, r19
    c5c8:	a3 07       	cpc	r26, r19
    c5ca:	3f e0       	ldi	r19, 0x0F	; 15
    c5cc:	b3 07       	cpc	r27, r19
    c5ce:	08 f4       	brcc	.+2      	; 0xc5d2 <_ZN10SdBaseFile5writeEPKvj+0x170>
    c5d0:	20 e0       	ldi	r18, 0x00	; 0
    c5d2:	22 23       	and	r18, r18
    c5d4:	31 f0       	breq	.+12     	; 0xc5e2 <_ZN10SdBaseFile5writeEPKvj+0x180>
          // add cluster if at end of chain
          if (!addCluster()) goto fail;
    c5d6:	c8 01       	movw	r24, r16
    c5d8:	0e 94 38 5a 	call	0xb470	; 0xb470 <_ZN10SdBaseFile10addClusterEv>
    c5dc:	81 11       	cpse	r24, r1
    c5de:	db c0       	rjmp	.+438    	; 0xc796 <_ZN10SdBaseFile5writeEPKvj+0x334>
    c5e0:	d2 c0       	rjmp	.+420    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
        } else {
          curCluster_ = next;
    c5e2:	f8 01       	movw	r30, r16
    c5e4:	84 83       	std	Z+4, r24	; 0x04
    c5e6:	95 83       	std	Z+5, r25	; 0x05
    c5e8:	a6 83       	std	Z+6, r26	; 0x06
    c5ea:	b7 83       	std	Z+7, r27	; 0x07
    c5ec:	d4 c0       	rjmp	.+424    	; 0xc796 <_ZN10SdBaseFile5writeEPKvj+0x334>
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    c5ee:	c1 01       	movw	r24, r2
    c5f0:	8a 19       	sub	r24, r10
    c5f2:	9b 09       	sbc	r25, r11
    c5f4:	76 01       	movw	r14, r12
    c5f6:	8c 15       	cp	r24, r12
    c5f8:	9d 05       	cpc	r25, r13
    c5fa:	08 f4       	brcc	.+2      	; 0xc5fe <_ZN10SdBaseFile5writeEPKvj+0x19c>
    c5fc:	7c 01       	movw	r14, r24
  //----------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    c5fe:	d8 01       	movw	r26, r16
    c600:	14 96       	adiw	r26, 0x04	; 4
    c602:	4d 90       	ld	r4, X+
    c604:	5d 90       	ld	r5, X+
    c606:	6d 90       	ld	r6, X+
    c608:	7c 90       	ld	r7, X
    c60a:	17 97       	sbiw	r26, 0x07	; 7
    c60c:	b2 e0       	ldi	r27, 0x02	; 2
    c60e:	4b 1a       	sub	r4, r27
    c610:	51 08       	sbc	r5, r1
    c612:	61 08       	sbc	r6, r1
    c614:	71 08       	sbc	r7, r1
    c616:	ef 81       	ldd	r30, Y+7	; 0x07
    c618:	f8 85       	ldd	r31, Y+8	; 0x08
    c61a:	05 84       	ldd	r0, Z+13	; 0x0d
    c61c:	04 c0       	rjmp	.+8      	; 0xc626 <_ZN10SdBaseFile5writeEPKvj+0x1c4>
    c61e:	44 0c       	add	r4, r4
    c620:	55 1c       	adc	r5, r5
    c622:	66 1c       	adc	r6, r6
    c624:	77 1c       	adc	r7, r7
    c626:	0a 94       	dec	r0
    c628:	d2 f7       	brpl	.-12     	; 0xc61e <_ZN10SdBaseFile5writeEPKvj+0x1bc>
    c62a:	86 85       	ldd	r24, Z+14	; 0x0e
    c62c:	97 85       	ldd	r25, Z+15	; 0x0f
    c62e:	a0 89       	ldd	r26, Z+16	; 0x10
    c630:	b1 89       	ldd	r27, Z+17	; 0x11
    c632:	48 0e       	add	r4, r24
    c634:	59 1e       	adc	r5, r25
    c636:	6a 1e       	adc	r6, r26
    c638:	7b 1e       	adc	r7, r27

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    c63a:	44 0e       	add	r4, r20
    c63c:	51 1c       	adc	r5, r1
    c63e:	61 1c       	adc	r6, r1
    c640:	71 1c       	adc	r7, r1
    if (n == 512) {
    c642:	e1 14       	cp	r14, r1
    c644:	f2 e0       	ldi	r31, 0x02	; 2
    c646:	ff 06       	cpc	r15, r31
    c648:	31 f5       	brne	.+76     	; 0xc696 <_ZN10SdBaseFile5writeEPKvj+0x234>
      // full block - don't need to use cache
      if (vol_->cacheBlockNumber() == block) {
    c64a:	80 91 bb 10 	lds	r24, 0x10BB
    c64e:	90 91 bc 10 	lds	r25, 0x10BC
    c652:	a0 91 bd 10 	lds	r26, 0x10BD
    c656:	b0 91 be 10 	lds	r27, 0x10BE
    c65a:	48 16       	cp	r4, r24
    c65c:	59 06       	cpc	r5, r25
    c65e:	6a 06       	cpc	r6, r26
    c660:	7b 06       	cpc	r7, r27
    c662:	69 f4       	brne	.+26     	; 0xc67e <_ZN10SdBaseFile5writeEPKvj+0x21c>
  static bool cacheFlush();
  static bool cacheRawBlock(uint32_t blockNumber, bool dirty);
#endif  // USE_MULTIPLE_CARDS
  // used by SdBaseFile write to assign cache to SD location
  void cacheSetBlockNumber(uint32_t blockNumber, bool dirty) {
    cacheDirty_ = dirty;
    c664:	10 92 b8 0e 	sts	0x0EB8, r1
    cacheBlockNumber_  = blockNumber;
    c668:	8f ef       	ldi	r24, 0xFF	; 255
    c66a:	9f ef       	ldi	r25, 0xFF	; 255
    c66c:	dc 01       	movw	r26, r24
    c66e:	80 93 bb 10 	sts	0x10BB, r24
    c672:	90 93 bc 10 	sts	0x10BC, r25
    c676:	a0 93 bd 10 	sts	0x10BD, r26
    c67a:	b0 93 be 10 	sts	0x10BE, r27
    return  cluster >= FAT32EOC_MIN;
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  bool writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    c67e:	94 01       	movw	r18, r8
    c680:	b3 01       	movw	r22, r6
    c682:	a2 01       	movw	r20, r4
    c684:	80 91 b9 0e 	lds	r24, 0x0EB9
    c688:	90 91 ba 0e 	lds	r25, 0x0EBA
    c68c:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <_ZN7Sd2Card10writeBlockEmPKh>
        // invalidate cache if block is in cache
        vol_->cacheSetBlockNumber(0XFFFFFFFF, false);
      }
      if (!vol_->writeBlock(block, src)) goto fail;
    c690:	81 11       	cpse	r24, r1
    c692:	38 c0       	rjmp	.+112    	; 0xc704 <_ZN10SdBaseFile5writeEPKvj+0x2a2>
    c694:	78 c0       	rjmp	.+240    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    c696:	a1 14       	cp	r10, r1
    c698:	b1 04       	cpc	r11, r1
    c69a:	11 f5       	brne	.+68     	; 0xc6e0 <_ZN10SdBaseFile5writeEPKvj+0x27e>
    c69c:	d8 01       	movw	r26, r16
    c69e:	18 96       	adiw	r26, 0x08	; 8
    c6a0:	4d 91       	ld	r20, X+
    c6a2:	5d 91       	ld	r21, X+
    c6a4:	6d 91       	ld	r22, X+
    c6a6:	7c 91       	ld	r23, X
    c6a8:	1b 97       	sbiw	r26, 0x0b	; 11
    c6aa:	51 96       	adiw	r26, 0x11	; 17
    c6ac:	8d 91       	ld	r24, X+
    c6ae:	9d 91       	ld	r25, X+
    c6b0:	0d 90       	ld	r0, X+
    c6b2:	bc 91       	ld	r27, X
    c6b4:	a0 2d       	mov	r26, r0
    c6b6:	48 17       	cp	r20, r24
    c6b8:	59 07       	cpc	r21, r25
    c6ba:	6a 07       	cpc	r22, r26
    c6bc:	7b 07       	cpc	r23, r27
    c6be:	80 f0       	brcs	.+32     	; 0xc6e0 <_ZN10SdBaseFile5writeEPKvj+0x27e>
        // start of new block don't need to read into cache
        if (!vol_->cacheFlush()) goto fail;
    c6c0:	f9 d0       	rcall	.+498    	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    c6c2:	88 23       	and	r24, r24
    c6c4:	09 f4       	brne	.+2      	; 0xc6c8 <_ZN10SdBaseFile5writeEPKvj+0x266>
    c6c6:	5f c0       	rjmp	.+190    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
  static bool cacheFlush();
  static bool cacheRawBlock(uint32_t blockNumber, bool dirty);
#endif  // USE_MULTIPLE_CARDS
  // used by SdBaseFile write to assign cache to SD location
  void cacheSetBlockNumber(uint32_t blockNumber, bool dirty) {
    cacheDirty_ = dirty;
    c6c8:	81 e0       	ldi	r24, 0x01	; 1
    c6ca:	80 93 b8 0e 	sts	0x0EB8, r24
    cacheBlockNumber_  = blockNumber;
    c6ce:	40 92 bb 10 	sts	0x10BB, r4
    c6d2:	50 92 bc 10 	sts	0x10BC, r5
    c6d6:	60 92 bd 10 	sts	0x10BD, r6
    c6da:	70 92 be 10 	sts	0x10BE, r7
    c6de:	07 c0       	rjmp	.+14     	; 0xc6ee <_ZN10SdBaseFile5writeEPKvj+0x28c>
        // set cache dirty and SD address of block
        vol_->cacheSetBlockNumber(block, true);
      } else {
        // rewrite part of block
        if (!vol_->cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) goto fail;
    c6e0:	41 e0       	ldi	r20, 0x01	; 1
    c6e2:	c3 01       	movw	r24, r6
    c6e4:	b2 01       	movw	r22, r4
    c6e6:	25 d1       	rcall	.+586    	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    c6e8:	88 23       	and	r24, r24
    c6ea:	09 f4       	brne	.+2      	; 0xc6ee <_ZN10SdBaseFile5writeEPKvj+0x28c>
    c6ec:	4c c0       	rjmp	.+152    	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
      }
      uint8_t* dst = vol_->cache()->data + blockOffset;
    c6ee:	95 01       	movw	r18, r10
    c6f0:	25 54       	subi	r18, 0x45	; 69
    c6f2:	31 4f       	sbci	r19, 0xF1	; 241
      memcpy(dst, src, n);
    c6f4:	4e 2d       	mov	r20, r14
    c6f6:	5f 2d       	mov	r21, r15
    c6f8:	68 2d       	mov	r22, r8
    c6fa:	79 2d       	mov	r23, r9
    c6fc:	82 2f       	mov	r24, r18
    c6fe:	93 2f       	mov	r25, r19
    c700:	0e 94 0d c4 	call	0x1881a	; 0x1881a <memcpy>
    }
    curPosition_ += n;
    c704:	f8 01       	movw	r30, r16
    c706:	80 85       	ldd	r24, Z+8	; 0x08
    c708:	91 85       	ldd	r25, Z+9	; 0x09
    c70a:	a2 85       	ldd	r26, Z+10	; 0x0a
    c70c:	b3 85       	ldd	r27, Z+11	; 0x0b
    c70e:	8e 0d       	add	r24, r14
    c710:	9f 1d       	adc	r25, r15
    c712:	a1 1d       	adc	r26, r1
    c714:	b1 1d       	adc	r27, r1
    c716:	80 87       	std	Z+8, r24	; 0x08
    c718:	91 87       	std	Z+9, r25	; 0x09
    c71a:	a2 87       	std	Z+10, r26	; 0x0a
    c71c:	b3 87       	std	Z+11, r27	; 0x0b
    src += n;
    c71e:	8e 0c       	add	r8, r14
    c720:	9f 1c       	adc	r9, r15
    nToWrite -= n;
    c722:	ce 18       	sub	r12, r14
    c724:	df 08       	sbc	r13, r15
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto fail;
  }

  while (nToWrite > 0) {
    c726:	09 f0       	breq	.+2      	; 0xc72a <_ZN10SdBaseFile5writeEPKvj+0x2c8>
    c728:	eb ce       	rjmp	.-554    	; 0xc500 <_ZN10SdBaseFile5writeEPKvj+0x9e>
    }
    curPosition_ += n;
    src += n;
    nToWrite -= n;
  }
  if (curPosition_ > fileSize_) {
    c72a:	f8 01       	movw	r30, r16
    c72c:	80 85       	ldd	r24, Z+8	; 0x08
    c72e:	91 85       	ldd	r25, Z+9	; 0x09
    c730:	a2 85       	ldd	r26, Z+10	; 0x0a
    c732:	b3 85       	ldd	r27, Z+11	; 0x0b
    c734:	41 89       	ldd	r20, Z+17	; 0x11
    c736:	52 89       	ldd	r21, Z+18	; 0x12
    c738:	63 89       	ldd	r22, Z+19	; 0x13
    c73a:	74 89       	ldd	r23, Z+20	; 0x14
    c73c:	48 17       	cp	r20, r24
    c73e:	59 07       	cpc	r21, r25
    c740:	6a 07       	cpc	r22, r26
    c742:	7b 07       	cpc	r23, r27
    c744:	40 f4       	brcc	.+16     	; 0xc756 <_ZN10SdBaseFile5writeEPKvj+0x2f4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    c746:	81 8b       	std	Z+17, r24	; 0x11
    c748:	92 8b       	std	Z+18, r25	; 0x12
    c74a:	a3 8b       	std	Z+19, r26	; 0x13
    c74c:	b4 8b       	std	Z+20, r27	; 0x14
    flags_ |= F_FILE_DIR_DIRTY;
    c74e:	81 81       	ldd	r24, Z+1	; 0x01
    c750:	80 68       	ori	r24, 0x80	; 128
    c752:	81 83       	std	Z+1, r24	; 0x01
    c754:	0d c0       	rjmp	.+26     	; 0xc770 <_ZN10SdBaseFile5writeEPKvj+0x30e>
  } else if (dateTime_ && nbyte) {
    c756:	80 91 b2 0e 	lds	r24, 0x0EB2
    c75a:	90 91 b3 0e 	lds	r25, 0x0EB3
    c75e:	89 2b       	or	r24, r25
    c760:	39 f0       	breq	.+14     	; 0xc770 <_ZN10SdBaseFile5writeEPKvj+0x30e>
    c762:	2d 81       	ldd	r18, Y+5	; 0x05
    c764:	3e 81       	ldd	r19, Y+6	; 0x06
    c766:	23 2b       	or	r18, r19
    c768:	19 f0       	breq	.+6      	; 0xc770 <_ZN10SdBaseFile5writeEPKvj+0x30e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    c76a:	81 81       	ldd	r24, Z+1	; 0x01
    c76c:	80 68       	ori	r24, 0x80	; 128
    c76e:	81 83       	std	Z+1, r24	; 0x01
  }

  if (flags_ & O_SYNC) {
    c770:	f8 01       	movw	r30, r16
    c772:	81 81       	ldd	r24, Z+1	; 0x01
    c774:	83 ff       	sbrs	r24, 3
    c776:	04 c0       	rjmp	.+8      	; 0xc780 <_ZN10SdBaseFile5writeEPKvj+0x31e>
    if (!sync()) goto fail;
    c778:	c8 01       	movw	r24, r16
    c77a:	fc da       	rcall	.-2568   	; 0xbd74 <_ZN10SdBaseFile4syncEv>
    c77c:	88 23       	and	r24, r24
    c77e:	19 f0       	breq	.+6      	; 0xc786 <_ZN10SdBaseFile5writeEPKvj+0x324>
  }
  return nbyte;
    c780:	2d 81       	ldd	r18, Y+5	; 0x05
    c782:	3e 81       	ldd	r19, Y+6	; 0x06
    c784:	05 c0       	rjmp	.+10     	; 0xc790 <_ZN10SdBaseFile5writeEPKvj+0x32e>

 fail:
  // return for write error
  writeError = true;
    c786:	81 e0       	ldi	r24, 0x01	; 1
    c788:	d8 01       	movw	r26, r16
    c78a:	8c 93       	st	X, r24
  return -1;
    c78c:	2f ef       	ldi	r18, 0xFF	; 255
    c78e:	3f ef       	ldi	r19, 0xFF	; 255
    c790:	82 2f       	mov	r24, r18
    c792:	93 2f       	mov	r25, r19
    c794:	59 c0       	rjmp	.+178    	; 0xc848 <_ZN10SdBaseFile5writeEPKvj+0x3e6>
    c796:	76 01       	movw	r14, r12
    c798:	b1 e0       	ldi	r27, 0x01	; 1
    c79a:	cb 16       	cp	r12, r27
    c79c:	b2 e0       	ldi	r27, 0x02	; 2
    c79e:	db 06       	cpc	r13, r27
    c7a0:	08 f0       	brcs	.+2      	; 0xc7a4 <_ZN10SdBaseFile5writeEPKvj+0x342>
    c7a2:	71 01       	movw	r14, r2

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    c7a4:	d8 01       	movw	r26, r16
    c7a6:	59 96       	adiw	r26, 0x19	; 25
    c7a8:	ed 91       	ld	r30, X+
    c7aa:	fc 91       	ld	r31, X
    c7ac:	5a 97       	sbiw	r26, 0x1a	; 26
  //----------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    c7ae:	14 96       	adiw	r26, 0x04	; 4
    c7b0:	4d 90       	ld	r4, X+
    c7b2:	5d 90       	ld	r5, X+
    c7b4:	6d 90       	ld	r6, X+
    c7b6:	7c 90       	ld	r7, X
    c7b8:	17 97       	sbiw	r26, 0x07	; 7
    c7ba:	b2 e0       	ldi	r27, 0x02	; 2
    c7bc:	4b 1a       	sub	r4, r27
    c7be:	51 08       	sbc	r5, r1
    c7c0:	61 08       	sbc	r6, r1
    c7c2:	71 08       	sbc	r7, r1
    c7c4:	05 84       	ldd	r0, Z+13	; 0x0d
    c7c6:	04 c0       	rjmp	.+8      	; 0xc7d0 <_ZN10SdBaseFile5writeEPKvj+0x36e>
    c7c8:	44 0c       	add	r4, r4
    c7ca:	55 1c       	adc	r5, r5
    c7cc:	66 1c       	adc	r6, r6
    c7ce:	77 1c       	adc	r7, r7
    c7d0:	0a 94       	dec	r0
    c7d2:	d2 f7       	brpl	.-12     	; 0xc7c8 <_ZN10SdBaseFile5writeEPKvj+0x366>
    c7d4:	86 85       	ldd	r24, Z+14	; 0x0e
    c7d6:	97 85       	ldd	r25, Z+15	; 0x0f
    c7d8:	a0 89       	ldd	r26, Z+16	; 0x10
    c7da:	b1 89       	ldd	r27, Z+17	; 0x11
    c7dc:	48 0e       	add	r4, r24
    c7de:	59 1e       	adc	r5, r25
    c7e0:	6a 1e       	adc	r6, r26
    c7e2:	7b 1e       	adc	r7, r27
    if (n == 512) {
    c7e4:	e1 14       	cp	r14, r1
    c7e6:	e2 e0       	ldi	r30, 0x02	; 2
    c7e8:	fe 06       	cpc	r15, r30
    c7ea:	09 f0       	breq	.+2      	; 0xc7ee <_ZN10SdBaseFile5writeEPKvj+0x38c>
    c7ec:	57 cf       	rjmp	.-338    	; 0xc69c <_ZN10SdBaseFile5writeEPKvj+0x23a>
    c7ee:	2d cf       	rjmp	.-422    	; 0xc64a <_ZN10SdBaseFile5writeEPKvj+0x1e8>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    c7f0:	c1 01       	movw	r24, r2
    c7f2:	8a 19       	sub	r24, r10
    c7f4:	9b 09       	sbc	r25, r11
    c7f6:	76 01       	movw	r14, r12
    c7f8:	8c 15       	cp	r24, r12
    c7fa:	9d 05       	cpc	r25, r13
    c7fc:	08 f4       	brcc	.+2      	; 0xc800 <_ZN10SdBaseFile5writeEPKvj+0x39e>
    c7fe:	7c 01       	movw	r14, r24
    c800:	d8 01       	movw	r26, r16
    c802:	14 96       	adiw	r26, 0x04	; 4
    c804:	4d 90       	ld	r4, X+
    c806:	5d 90       	ld	r5, X+
    c808:	6d 90       	ld	r6, X+
    c80a:	7c 90       	ld	r7, X
    c80c:	17 97       	sbiw	r26, 0x07	; 7
    c80e:	b2 e0       	ldi	r27, 0x02	; 2
    c810:	4b 1a       	sub	r4, r27
    c812:	51 08       	sbc	r5, r1
    c814:	61 08       	sbc	r6, r1
    c816:	71 08       	sbc	r7, r1
    c818:	ef 81       	ldd	r30, Y+7	; 0x07
    c81a:	f8 85       	ldd	r31, Y+8	; 0x08
    c81c:	05 84       	ldd	r0, Z+13	; 0x0d
    c81e:	04 c0       	rjmp	.+8      	; 0xc828 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
    c820:	44 0c       	add	r4, r4
    c822:	55 1c       	adc	r5, r5
    c824:	66 1c       	adc	r6, r6
    c826:	77 1c       	adc	r7, r7
    c828:	0a 94       	dec	r0
    c82a:	d2 f7       	brpl	.-12     	; 0xc820 <_ZN10SdBaseFile5writeEPKvj+0x3be>
    c82c:	86 85       	ldd	r24, Z+14	; 0x0e
    c82e:	97 85       	ldd	r25, Z+15	; 0x0f
    c830:	a0 89       	ldd	r26, Z+16	; 0x10
    c832:	b1 89       	ldd	r27, Z+17	; 0x11
    c834:	48 0e       	add	r4, r24
    c836:	59 1e       	adc	r5, r25
    c838:	6a 1e       	adc	r6, r26
    c83a:	7b 1e       	adc	r7, r27
    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
    c83c:	e1 14       	cp	r14, r1
    c83e:	f2 e0       	ldi	r31, 0x02	; 2
    c840:	ff 06       	cpc	r15, r31
    c842:	09 f0       	breq	.+2      	; 0xc846 <_ZN10SdBaseFile5writeEPKvj+0x3e4>
    c844:	4d cf       	rjmp	.-358    	; 0xc6e0 <_ZN10SdBaseFile5writeEPKvj+0x27e>
    c846:	01 cf       	rjmp	.-510    	; 0xc64a <_ZN10SdBaseFile5writeEPKvj+0x1e8>

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    c848:	28 96       	adiw	r28, 0x08	; 8
    c84a:	0f b6       	in	r0, 0x3f	; 63
    c84c:	f8 94       	cli
    c84e:	de bf       	out	0x3e, r29	; 62
    c850:	0f be       	out	0x3f, r0	; 63
    c852:	cd bf       	out	0x3d, r28	; 61
    c854:	df 91       	pop	r29
    c856:	cf 91       	pop	r28
    c858:	1f 91       	pop	r17
    c85a:	0f 91       	pop	r16
    c85c:	ff 90       	pop	r15
    c85e:	ef 90       	pop	r14
    c860:	df 90       	pop	r13
    c862:	cf 90       	pop	r12
    c864:	bf 90       	pop	r11
    c866:	af 90       	pop	r10
    c868:	9f 90       	pop	r9
    c86a:	8f 90       	pop	r8
    c86c:	7f 90       	pop	r7
    c86e:	6f 90       	pop	r6
    c870:	5f 90       	pop	r5
    c872:	4f 90       	pop	r4
    c874:	3f 90       	pop	r3
    c876:	2f 90       	pop	r2
    c878:	08 95       	ret

0000c87a <_ZN6SdFile5writeEh>:
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int16_t SdFile::write(const void* buf, uint16_t nbyte) {
  return SdBaseFile::write(buf, nbyte);
}
    c87a:	cf 93       	push	r28
    c87c:	df 93       	push	r29
    c87e:	1f 92       	push	r1
    c880:	cd b7       	in	r28, 0x3d	; 61
    c882:	de b7       	in	r29, 0x3e	; 62
    c884:	69 83       	std	Y+1, r22	; 0x01
    c886:	41 e0       	ldi	r20, 0x01	; 1
    c888:	50 e0       	ldi	r21, 0x00	; 0
    c88a:	be 01       	movw	r22, r28
    c88c:	6f 5f       	subi	r22, 0xFF	; 255
    c88e:	7f 4f       	sbci	r23, 0xFF	; 255
    c890:	04 96       	adiw	r24, 0x04	; 4
    c892:	e7 dd       	rcall	.-1074   	; 0xc462 <_ZN10SdBaseFile5writeEPKvj>
    c894:	0f 90       	pop	r0
    c896:	df 91       	pop	r29
    c898:	cf 91       	pop	r28
    c89a:	08 95       	ret

0000c89c <_ZN6SdFile5writeEPKc>:
/** Write a string to a file. Used by the Arduino Print class.
 * \param[in] str Pointer to the string.
 * Use writeError to check for errors.
 */
void SdFile::write(const char* str) {
  SdBaseFile::write(str, strlen(str));
    c89c:	e6 2f       	mov	r30, r22
    c89e:	f7 2f       	mov	r31, r23
    c8a0:	df 01       	movw	r26, r30
    c8a2:	0d 90       	ld	r0, X+
    c8a4:	00 20       	and	r0, r0
    c8a6:	e9 f7       	brne	.-6      	; 0xc8a2 <_ZN6SdFile5writeEPKc+0x6>
    c8a8:	11 97       	sbiw	r26, 0x01	; 1
    c8aa:	ad 01       	movw	r20, r26
    c8ac:	4e 1b       	sub	r20, r30
    c8ae:	5f 0b       	sbc	r21, r31
    c8b0:	04 96       	adiw	r24, 0x04	; 4
    c8b2:	d7 cd       	rjmp	.-1106   	; 0xc462 <_ZN10SdBaseFile5writeEPKvj>

0000c8b4 <_ZN8SdVolume10cacheFlushEv>:
        if (cacheBuffer_.fat32[i] == 0) free++;
      }
    }
  }
  return free;
}
    c8b4:	80 91 b8 0e 	lds	r24, 0x0EB8
    c8b8:	88 23       	and	r24, r24
    c8ba:	a9 f1       	breq	.+106    	; 0xc926 <_ZN8SdVolume10cacheFlushEv+0x72>
    c8bc:	40 91 bb 10 	lds	r20, 0x10BB
    c8c0:	50 91 bc 10 	lds	r21, 0x10BC
    c8c4:	60 91 bd 10 	lds	r22, 0x10BD
    c8c8:	70 91 be 10 	lds	r23, 0x10BE
    c8cc:	2b eb       	ldi	r18, 0xBB	; 187
    c8ce:	3e e0       	ldi	r19, 0x0E	; 14
    c8d0:	80 91 b9 0e 	lds	r24, 0x0EB9
    c8d4:	90 91 ba 0e 	lds	r25, 0x0EBA
    c8d8:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <_ZN7Sd2Card10writeBlockEmPKh>
    c8dc:	88 23       	and	r24, r24
    c8de:	29 f1       	breq	.+74     	; 0xc92a <_ZN8SdVolume10cacheFlushEv+0x76>
    c8e0:	40 91 b4 0e 	lds	r20, 0x0EB4
    c8e4:	50 91 b5 0e 	lds	r21, 0x0EB5
    c8e8:	60 91 b6 0e 	lds	r22, 0x0EB6
    c8ec:	70 91 b7 0e 	lds	r23, 0x0EB7
    c8f0:	41 15       	cp	r20, r1
    c8f2:	51 05       	cpc	r21, r1
    c8f4:	61 05       	cpc	r22, r1
    c8f6:	71 05       	cpc	r23, r1
    c8f8:	91 f0       	breq	.+36     	; 0xc91e <_ZN8SdVolume10cacheFlushEv+0x6a>
    c8fa:	2b eb       	ldi	r18, 0xBB	; 187
    c8fc:	3e e0       	ldi	r19, 0x0E	; 14
    c8fe:	80 91 b9 0e 	lds	r24, 0x0EB9
    c902:	90 91 ba 0e 	lds	r25, 0x0EBA
    c906:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <_ZN7Sd2Card10writeBlockEmPKh>
    c90a:	88 23       	and	r24, r24
    c90c:	81 f0       	breq	.+32     	; 0xc92e <_ZN8SdVolume10cacheFlushEv+0x7a>
    c90e:	10 92 b4 0e 	sts	0x0EB4, r1
    c912:	10 92 b5 0e 	sts	0x0EB5, r1
    c916:	10 92 b6 0e 	sts	0x0EB6, r1
    c91a:	10 92 b7 0e 	sts	0x0EB7, r1
    c91e:	10 92 b8 0e 	sts	0x0EB8, r1
    c922:	81 e0       	ldi	r24, 0x01	; 1
    c924:	08 95       	ret
    c926:	81 e0       	ldi	r24, 0x01	; 1
    c928:	08 95       	ret
    c92a:	80 e0       	ldi	r24, 0x00	; 0
    c92c:	08 95       	ret
    c92e:	80 e0       	ldi	r24, 0x00	; 0
    c930:	08 95       	ret

0000c932 <_ZN8SdVolume13cacheRawBlockEmb>:
    c932:	cf 92       	push	r12
    c934:	df 92       	push	r13
    c936:	ef 92       	push	r14
    c938:	ff 92       	push	r15
    c93a:	cf 93       	push	r28
    c93c:	6b 01       	movw	r12, r22
    c93e:	7c 01       	movw	r14, r24
    c940:	c4 2f       	mov	r28, r20
    c942:	80 91 bb 10 	lds	r24, 0x10BB
    c946:	90 91 bc 10 	lds	r25, 0x10BC
    c94a:	a0 91 bd 10 	lds	r26, 0x10BD
    c94e:	b0 91 be 10 	lds	r27, 0x10BE
    c952:	8c 15       	cp	r24, r12
    c954:	9d 05       	cpc	r25, r13
    c956:	ae 05       	cpc	r26, r14
    c958:	bf 05       	cpc	r27, r15
    c95a:	b9 f0       	breq	.+46     	; 0xc98a <_ZN8SdVolume13cacheRawBlockEmb+0x58>
    c95c:	ab df       	rcall	.-170    	; 0xc8b4 <_ZN8SdVolume10cacheFlushEv>
    c95e:	88 23       	and	r24, r24
    c960:	d1 f0       	breq	.+52     	; 0xc996 <_ZN8SdVolume13cacheRawBlockEmb+0x64>
    c962:	2b eb       	ldi	r18, 0xBB	; 187
    c964:	3e e0       	ldi	r19, 0x0E	; 14
    c966:	b7 01       	movw	r22, r14
    c968:	a6 01       	movw	r20, r12
    c96a:	80 91 b9 0e 	lds	r24, 0x0EB9
    c96e:	90 91 ba 0e 	lds	r25, 0x0EBA
    c972:	0e 94 e3 58 	call	0xb1c6	; 0xb1c6 <_ZN7Sd2Card9readBlockEmPh>
    c976:	88 23       	and	r24, r24
    c978:	81 f0       	breq	.+32     	; 0xc99a <_ZN8SdVolume13cacheRawBlockEmb+0x68>
    c97a:	c0 92 bb 10 	sts	0x10BB, r12
    c97e:	d0 92 bc 10 	sts	0x10BC, r13
    c982:	e0 92 bd 10 	sts	0x10BD, r14
    c986:	f0 92 be 10 	sts	0x10BE, r15
    c98a:	cc 23       	and	r28, r28
    c98c:	41 f0       	breq	.+16     	; 0xc99e <_ZN8SdVolume13cacheRawBlockEmb+0x6c>
    c98e:	81 e0       	ldi	r24, 0x01	; 1
    c990:	80 93 b8 0e 	sts	0x0EB8, r24
    c994:	05 c0       	rjmp	.+10     	; 0xc9a0 <_ZN8SdVolume13cacheRawBlockEmb+0x6e>
    c996:	80 e0       	ldi	r24, 0x00	; 0
    c998:	03 c0       	rjmp	.+6      	; 0xc9a0 <_ZN8SdVolume13cacheRawBlockEmb+0x6e>
    c99a:	80 e0       	ldi	r24, 0x00	; 0
    c99c:	01 c0       	rjmp	.+2      	; 0xc9a0 <_ZN8SdVolume13cacheRawBlockEmb+0x6e>
    c99e:	81 e0       	ldi	r24, 0x01	; 1
    c9a0:	cf 91       	pop	r28
    c9a2:	ff 90       	pop	r15
    c9a4:	ef 90       	pop	r14
    c9a6:	df 90       	pop	r13
    c9a8:	cf 90       	pop	r12
    c9aa:	08 95       	ret

0000c9ac <_ZN8SdVolume6fatGetEmPm>:
    c9ac:	8f 92       	push	r8
    c9ae:	9f 92       	push	r9
    c9b0:	af 92       	push	r10
    c9b2:	bf 92       	push	r11
    c9b4:	cf 92       	push	r12
    c9b6:	df 92       	push	r13
    c9b8:	ef 92       	push	r14
    c9ba:	ff 92       	push	r15
    c9bc:	0f 93       	push	r16
    c9be:	1f 93       	push	r17
    c9c0:	cf 93       	push	r28
    c9c2:	df 93       	push	r29
    c9c4:	ec 01       	movw	r28, r24
    c9c6:	6a 01       	movw	r12, r20
    c9c8:	7b 01       	movw	r14, r22
    c9ca:	89 01       	movw	r16, r18
    c9cc:	89 85       	ldd	r24, Y+9	; 0x09
    c9ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    c9d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    c9d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    c9d4:	01 96       	adiw	r24, 0x01	; 1
    c9d6:	a1 1d       	adc	r26, r1
    c9d8:	b1 1d       	adc	r27, r1
    c9da:	84 17       	cp	r24, r20
    c9dc:	95 07       	cpc	r25, r21
    c9de:	a6 07       	cpc	r26, r22
    c9e0:	b7 07       	cpc	r27, r23
    c9e2:	08 f4       	brcc	.+2      	; 0xc9e6 <_ZN8SdVolume6fatGetEmPm+0x3a>
    c9e4:	6c c0       	rjmp	.+216    	; 0xcabe <_ZN8SdVolume6fatGetEmPm+0x112>
    c9e6:	8f 89       	ldd	r24, Y+23	; 0x17
    c9e8:	80 31       	cpi	r24, 0x10	; 16
    c9ea:	89 f4       	brne	.+34     	; 0xca0e <_ZN8SdVolume6fatGetEmPm+0x62>
    c9ec:	45 2f       	mov	r20, r21
    c9ee:	56 2f       	mov	r21, r22
    c9f0:	67 2f       	mov	r22, r23
    c9f2:	77 27       	eor	r23, r23
    c9f4:	8b 89       	ldd	r24, Y+19	; 0x13
    c9f6:	9c 89       	ldd	r25, Y+20	; 0x14
    c9f8:	ad 89       	ldd	r26, Y+21	; 0x15
    c9fa:	be 89       	ldd	r27, Y+22	; 0x16
    c9fc:	4a 01       	movw	r8, r20
    c9fe:	5b 01       	movw	r10, r22
    ca00:	88 0e       	add	r8, r24
    ca02:	99 1e       	adc	r9, r25
    ca04:	aa 1e       	adc	r10, r26
    ca06:	bb 1e       	adc	r11, r27
    ca08:	c5 01       	movw	r24, r10
    ca0a:	b4 01       	movw	r22, r8
    ca0c:	17 c0       	rjmp	.+46     	; 0xca3c <_ZN8SdVolume6fatGetEmPm+0x90>
    ca0e:	80 32       	cpi	r24, 0x20	; 32
    ca10:	09 f0       	breq	.+2      	; 0xca14 <_ZN8SdVolume6fatGetEmPm+0x68>
    ca12:	57 c0       	rjmp	.+174    	; 0xcac2 <_ZN8SdVolume6fatGetEmPm+0x116>
    ca14:	68 94       	set
    ca16:	16 f8       	bld	r1, 6
    ca18:	76 95       	lsr	r23
    ca1a:	67 95       	ror	r22
    ca1c:	57 95       	ror	r21
    ca1e:	47 95       	ror	r20
    ca20:	16 94       	lsr	r1
    ca22:	d1 f7       	brne	.-12     	; 0xca18 <_ZN8SdVolume6fatGetEmPm+0x6c>
    ca24:	8b 89       	ldd	r24, Y+19	; 0x13
    ca26:	9c 89       	ldd	r25, Y+20	; 0x14
    ca28:	ad 89       	ldd	r26, Y+21	; 0x15
    ca2a:	be 89       	ldd	r27, Y+22	; 0x16
    ca2c:	4a 01       	movw	r8, r20
    ca2e:	5b 01       	movw	r10, r22
    ca30:	88 0e       	add	r8, r24
    ca32:	99 1e       	adc	r9, r25
    ca34:	aa 1e       	adc	r10, r26
    ca36:	bb 1e       	adc	r11, r27
    ca38:	c5 01       	movw	r24, r10
    ca3a:	b4 01       	movw	r22, r8
    ca3c:	80 90 bb 10 	lds	r8, 0x10BB
    ca40:	90 90 bc 10 	lds	r9, 0x10BC
    ca44:	a0 90 bd 10 	lds	r10, 0x10BD
    ca48:	b0 90 be 10 	lds	r11, 0x10BE
    ca4c:	68 15       	cp	r22, r8
    ca4e:	79 05       	cpc	r23, r9
    ca50:	8a 05       	cpc	r24, r10
    ca52:	9b 05       	cpc	r25, r11
    ca54:	21 f0       	breq	.+8      	; 0xca5e <_ZN8SdVolume6fatGetEmPm+0xb2>
    ca56:	40 e0       	ldi	r20, 0x00	; 0
    ca58:	6c df       	rcall	.-296    	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    ca5a:	88 23       	and	r24, r24
    ca5c:	a1 f1       	breq	.+104    	; 0xcac6 <_ZN8SdVolume6fatGetEmPm+0x11a>
    ca5e:	8f 89       	ldd	r24, Y+23	; 0x17
    ca60:	80 31       	cpi	r24, 0x10	; 16
    ca62:	a1 f4       	brne	.+40     	; 0xca8c <_ZN8SdVolume6fatGetEmPm+0xe0>
    ca64:	dd 24       	eor	r13, r13
    ca66:	ee 24       	eor	r14, r14
    ca68:	ff 24       	eor	r15, r15
    ca6a:	c6 01       	movw	r24, r12
    ca6c:	88 0f       	add	r24, r24
    ca6e:	99 1f       	adc	r25, r25
    ca70:	fc 01       	movw	r30, r24
    ca72:	e5 54       	subi	r30, 0x45	; 69
    ca74:	f1 4f       	sbci	r31, 0xF1	; 241
    ca76:	80 81       	ld	r24, Z
    ca78:	91 81       	ldd	r25, Z+1	; 0x01
    ca7a:	a0 e0       	ldi	r26, 0x00	; 0
    ca7c:	b0 e0       	ldi	r27, 0x00	; 0
    ca7e:	f8 01       	movw	r30, r16
    ca80:	80 83       	st	Z, r24
    ca82:	91 83       	std	Z+1, r25	; 0x01
    ca84:	a2 83       	std	Z+2, r26	; 0x02
    ca86:	b3 83       	std	Z+3, r27	; 0x03
    ca88:	81 e0       	ldi	r24, 0x01	; 1
    ca8a:	1e c0       	rjmp	.+60     	; 0xcac8 <_ZN8SdVolume6fatGetEmPm+0x11c>
    ca8c:	e8 94       	clt
    ca8e:	c7 f8       	bld	r12, 7
    ca90:	dd 24       	eor	r13, r13
    ca92:	ee 24       	eor	r14, r14
    ca94:	ff 24       	eor	r15, r15
    ca96:	c6 01       	movw	r24, r12
    ca98:	88 0f       	add	r24, r24
    ca9a:	99 1f       	adc	r25, r25
    ca9c:	88 0f       	add	r24, r24
    ca9e:	99 1f       	adc	r25, r25
    caa0:	fc 01       	movw	r30, r24
    caa2:	e5 54       	subi	r30, 0x45	; 69
    caa4:	f1 4f       	sbci	r31, 0xF1	; 241
    caa6:	80 81       	ld	r24, Z
    caa8:	91 81       	ldd	r25, Z+1	; 0x01
    caaa:	a2 81       	ldd	r26, Z+2	; 0x02
    caac:	b3 81       	ldd	r27, Z+3	; 0x03
    caae:	bf 70       	andi	r27, 0x0F	; 15
    cab0:	f8 01       	movw	r30, r16
    cab2:	80 83       	st	Z, r24
    cab4:	91 83       	std	Z+1, r25	; 0x01
    cab6:	a2 83       	std	Z+2, r26	; 0x02
    cab8:	b3 83       	std	Z+3, r27	; 0x03
    caba:	81 e0       	ldi	r24, 0x01	; 1
    cabc:	05 c0       	rjmp	.+10     	; 0xcac8 <_ZN8SdVolume6fatGetEmPm+0x11c>
    cabe:	80 e0       	ldi	r24, 0x00	; 0
    cac0:	03 c0       	rjmp	.+6      	; 0xcac8 <_ZN8SdVolume6fatGetEmPm+0x11c>
    cac2:	80 e0       	ldi	r24, 0x00	; 0
    cac4:	01 c0       	rjmp	.+2      	; 0xcac8 <_ZN8SdVolume6fatGetEmPm+0x11c>
    cac6:	80 e0       	ldi	r24, 0x00	; 0
    cac8:	df 91       	pop	r29
    caca:	cf 91       	pop	r28
    cacc:	1f 91       	pop	r17
    cace:	0f 91       	pop	r16
    cad0:	ff 90       	pop	r15
    cad2:	ef 90       	pop	r14
    cad4:	df 90       	pop	r13
    cad6:	cf 90       	pop	r12
    cad8:	bf 90       	pop	r11
    cada:	af 90       	pop	r10
    cadc:	9f 90       	pop	r9
    cade:	8f 90       	pop	r8
    cae0:	08 95       	ret

0000cae2 <_ZN8SdVolume9chainSizeEmPm>:
    cae2:	4f 92       	push	r4
    cae4:	5f 92       	push	r5
    cae6:	6f 92       	push	r6
    cae8:	7f 92       	push	r7
    caea:	8f 92       	push	r8
    caec:	9f 92       	push	r9
    caee:	af 92       	push	r10
    caf0:	bf 92       	push	r11
    caf2:	cf 92       	push	r12
    caf4:	df 92       	push	r13
    caf6:	ef 92       	push	r14
    caf8:	ff 92       	push	r15
    cafa:	0f 93       	push	r16
    cafc:	1f 93       	push	r17
    cafe:	cf 93       	push	r28
    cb00:	df 93       	push	r29
    cb02:	00 d0       	rcall	.+0      	; 0xcb04 <_ZN8SdVolume9chainSizeEmPm+0x22>
    cb04:	1f 92       	push	r1
    cb06:	cd b7       	in	r28, 0x3d	; 61
    cb08:	de b7       	in	r29, 0x3e	; 62
    cb0a:	8c 01       	movw	r16, r24
    cb0c:	49 83       	std	Y+1, r20	; 0x01
    cb0e:	5a 83       	std	Y+2, r21	; 0x02
    cb10:	6b 83       	std	Y+3, r22	; 0x03
    cb12:	7c 83       	std	Y+4, r23	; 0x04
    cb14:	59 01       	movw	r10, r18
    cb16:	c1 2c       	mov	r12, r1
    cb18:	d1 2c       	mov	r13, r1
    cb1a:	76 01       	movw	r14, r12
    cb1c:	41 2c       	mov	r4, r1
    cb1e:	51 2c       	mov	r5, r1
    cb20:	32 01       	movw	r6, r4
    cb22:	68 94       	set
    cb24:	51 f8       	bld	r5, 1
    cb26:	99 24       	eor	r9, r9
    cb28:	93 94       	inc	r9
    cb2a:	81 2c       	mov	r8, r1
    cb2c:	49 81       	ldd	r20, Y+1	; 0x01
    cb2e:	5a 81       	ldd	r21, Y+2	; 0x02
    cb30:	6b 81       	ldd	r22, Y+3	; 0x03
    cb32:	7c 81       	ldd	r23, Y+4	; 0x04
    cb34:	9e 01       	movw	r18, r28
    cb36:	2f 5f       	subi	r18, 0xFF	; 255
    cb38:	3f 4f       	sbci	r19, 0xFF	; 255
    cb3a:	c8 01       	movw	r24, r16
    cb3c:	37 df       	rcall	.-402    	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    cb3e:	88 23       	and	r24, r24
    cb40:	71 f1       	breq	.+92     	; 0xcb9e <_ZN8SdVolume9chainSizeEmPm+0xbc>
    cb42:	d3 01       	movw	r26, r6
    cb44:	c2 01       	movw	r24, r4
    cb46:	f8 01       	movw	r30, r16
    cb48:	05 84       	ldd	r0, Z+13	; 0x0d
    cb4a:	04 c0       	rjmp	.+8      	; 0xcb54 <_ZN8SdVolume9chainSizeEmPm+0x72>
    cb4c:	88 0f       	add	r24, r24
    cb4e:	99 1f       	adc	r25, r25
    cb50:	aa 1f       	adc	r26, r26
    cb52:	bb 1f       	adc	r27, r27
    cb54:	0a 94       	dec	r0
    cb56:	d2 f7       	brpl	.-12     	; 0xcb4c <_ZN8SdVolume9chainSizeEmPm+0x6a>
    cb58:	c8 0e       	add	r12, r24
    cb5a:	d9 1e       	adc	r13, r25
    cb5c:	ea 1e       	adc	r14, r26
    cb5e:	fb 1e       	adc	r15, r27
    cb60:	89 81       	ldd	r24, Y+1	; 0x01
    cb62:	9a 81       	ldd	r25, Y+2	; 0x02
    cb64:	ab 81       	ldd	r26, Y+3	; 0x03
    cb66:	bc 81       	ldd	r27, Y+4	; 0x04
    cb68:	27 89       	ldd	r18, Z+23	; 0x17
    cb6a:	20 31       	cpi	r18, 0x10	; 16
    cb6c:	41 f4       	brne	.+16     	; 0xcb7e <_ZN8SdVolume9chainSizeEmPm+0x9c>
    cb6e:	29 2d       	mov	r18, r9
    cb70:	88 3f       	cpi	r24, 0xF8	; 248
    cb72:	9f 4f       	sbci	r25, 0xFF	; 255
    cb74:	a1 05       	cpc	r26, r1
    cb76:	b1 05       	cpc	r27, r1
    cb78:	48 f4       	brcc	.+18     	; 0xcb8c <_ZN8SdVolume9chainSizeEmPm+0xaa>
    cb7a:	28 2d       	mov	r18, r8
    cb7c:	07 c0       	rjmp	.+14     	; 0xcb8c <_ZN8SdVolume9chainSizeEmPm+0xaa>
    cb7e:	29 2d       	mov	r18, r9
    cb80:	88 3f       	cpi	r24, 0xF8	; 248
    cb82:	9f 4f       	sbci	r25, 0xFF	; 255
    cb84:	af 4f       	sbci	r26, 0xFF	; 255
    cb86:	bf 40       	sbci	r27, 0x0F	; 15
    cb88:	08 f4       	brcc	.+2      	; 0xcb8c <_ZN8SdVolume9chainSizeEmPm+0xaa>
    cb8a:	28 2d       	mov	r18, r8
    cb8c:	22 23       	and	r18, r18
    cb8e:	71 f2       	breq	.-100    	; 0xcb2c <_ZN8SdVolume9chainSizeEmPm+0x4a>
    cb90:	f5 01       	movw	r30, r10
    cb92:	c0 82       	st	Z, r12
    cb94:	d1 82       	std	Z+1, r13	; 0x01
    cb96:	e2 82       	std	Z+2, r14	; 0x02
    cb98:	f3 82       	std	Z+3, r15	; 0x03
    cb9a:	81 e0       	ldi	r24, 0x01	; 1
    cb9c:	01 c0       	rjmp	.+2      	; 0xcba0 <_ZN8SdVolume9chainSizeEmPm+0xbe>
    cb9e:	80 e0       	ldi	r24, 0x00	; 0
    cba0:	0f 90       	pop	r0
    cba2:	0f 90       	pop	r0
    cba4:	0f 90       	pop	r0
    cba6:	0f 90       	pop	r0
    cba8:	df 91       	pop	r29
    cbaa:	cf 91       	pop	r28
    cbac:	1f 91       	pop	r17
    cbae:	0f 91       	pop	r16
    cbb0:	ff 90       	pop	r15
    cbb2:	ef 90       	pop	r14
    cbb4:	df 90       	pop	r13
    cbb6:	cf 90       	pop	r12
    cbb8:	bf 90       	pop	r11
    cbba:	af 90       	pop	r10
    cbbc:	9f 90       	pop	r9
    cbbe:	8f 90       	pop	r8
    cbc0:	7f 90       	pop	r7
    cbc2:	6f 90       	pop	r6
    cbc4:	5f 90       	pop	r5
    cbc6:	4f 90       	pop	r4
    cbc8:	08 95       	ret

0000cbca <_ZN8SdVolume6fatPutEmm>:
    cbca:	4f 92       	push	r4
    cbcc:	5f 92       	push	r5
    cbce:	6f 92       	push	r6
    cbd0:	7f 92       	push	r7
    cbd2:	8f 92       	push	r8
    cbd4:	9f 92       	push	r9
    cbd6:	af 92       	push	r10
    cbd8:	bf 92       	push	r11
    cbda:	cf 92       	push	r12
    cbdc:	df 92       	push	r13
    cbde:	ef 92       	push	r14
    cbe0:	ff 92       	push	r15
    cbe2:	0f 93       	push	r16
    cbe4:	1f 93       	push	r17
    cbe6:	cf 93       	push	r28
    cbe8:	df 93       	push	r29
    cbea:	ec 01       	movw	r28, r24
    cbec:	6a 01       	movw	r12, r20
    cbee:	7b 01       	movw	r14, r22
    cbf0:	48 01       	movw	r8, r16
    cbf2:	59 01       	movw	r10, r18
    cbf4:	42 30       	cpi	r20, 0x02	; 2
    cbf6:	51 05       	cpc	r21, r1
    cbf8:	61 05       	cpc	r22, r1
    cbfa:	71 05       	cpc	r23, r1
    cbfc:	08 f4       	brcc	.+2      	; 0xcc00 <_ZN8SdVolume6fatPutEmm+0x36>
    cbfe:	6d c0       	rjmp	.+218    	; 0xccda <_ZN8SdVolume6fatPutEmm+0x110>
    cc00:	89 85       	ldd	r24, Y+9	; 0x09
    cc02:	9a 85       	ldd	r25, Y+10	; 0x0a
    cc04:	ab 85       	ldd	r26, Y+11	; 0x0b
    cc06:	bc 85       	ldd	r27, Y+12	; 0x0c
    cc08:	01 96       	adiw	r24, 0x01	; 1
    cc0a:	a1 1d       	adc	r26, r1
    cc0c:	b1 1d       	adc	r27, r1
    cc0e:	84 17       	cp	r24, r20
    cc10:	95 07       	cpc	r25, r21
    cc12:	a6 07       	cpc	r26, r22
    cc14:	b7 07       	cpc	r27, r23
    cc16:	08 f4       	brcc	.+2      	; 0xcc1a <_ZN8SdVolume6fatPutEmm+0x50>
    cc18:	62 c0       	rjmp	.+196    	; 0xccde <_ZN8SdVolume6fatPutEmm+0x114>
    cc1a:	8f 89       	ldd	r24, Y+23	; 0x17
    cc1c:	80 31       	cpi	r24, 0x10	; 16
    cc1e:	69 f4       	brne	.+26     	; 0xcc3a <_ZN8SdVolume6fatPutEmm+0x70>
    cc20:	45 2e       	mov	r4, r21
    cc22:	56 2e       	mov	r5, r22
    cc24:	67 2e       	mov	r6, r23
    cc26:	77 24       	eor	r7, r7
    cc28:	8b 89       	ldd	r24, Y+19	; 0x13
    cc2a:	9c 89       	ldd	r25, Y+20	; 0x14
    cc2c:	ad 89       	ldd	r26, Y+21	; 0x15
    cc2e:	be 89       	ldd	r27, Y+22	; 0x16
    cc30:	48 0e       	add	r4, r24
    cc32:	59 1e       	adc	r5, r25
    cc34:	6a 1e       	adc	r6, r26
    cc36:	7b 1e       	adc	r7, r27
    cc38:	15 c0       	rjmp	.+42     	; 0xcc64 <_ZN8SdVolume6fatPutEmm+0x9a>
    cc3a:	80 32       	cpi	r24, 0x20	; 32
    cc3c:	09 f0       	breq	.+2      	; 0xcc40 <_ZN8SdVolume6fatPutEmm+0x76>
    cc3e:	51 c0       	rjmp	.+162    	; 0xcce2 <_ZN8SdVolume6fatPutEmm+0x118>
    cc40:	2a 01       	movw	r4, r20
    cc42:	3b 01       	movw	r6, r22
    cc44:	68 94       	set
    cc46:	16 f8       	bld	r1, 6
    cc48:	76 94       	lsr	r7
    cc4a:	67 94       	ror	r6
    cc4c:	57 94       	ror	r5
    cc4e:	47 94       	ror	r4
    cc50:	16 94       	lsr	r1
    cc52:	d1 f7       	brne	.-12     	; 0xcc48 <_ZN8SdVolume6fatPutEmm+0x7e>
    cc54:	8b 89       	ldd	r24, Y+19	; 0x13
    cc56:	9c 89       	ldd	r25, Y+20	; 0x14
    cc58:	ad 89       	ldd	r26, Y+21	; 0x15
    cc5a:	be 89       	ldd	r27, Y+22	; 0x16
    cc5c:	48 0e       	add	r4, r24
    cc5e:	59 1e       	adc	r5, r25
    cc60:	6a 1e       	adc	r6, r26
    cc62:	7b 1e       	adc	r7, r27
    cc64:	41 e0       	ldi	r20, 0x01	; 1
    cc66:	c3 01       	movw	r24, r6
    cc68:	b2 01       	movw	r22, r4
    cc6a:	63 de       	rcall	.-826    	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    cc6c:	88 23       	and	r24, r24
    cc6e:	d9 f1       	breq	.+118    	; 0xcce6 <_ZN8SdVolume6fatPutEmm+0x11c>
    cc70:	8f 89       	ldd	r24, Y+23	; 0x17
    cc72:	80 31       	cpi	r24, 0x10	; 16
    cc74:	61 f4       	brne	.+24     	; 0xcc8e <_ZN8SdVolume6fatPutEmm+0xc4>
    cc76:	dd 24       	eor	r13, r13
    cc78:	ee 24       	eor	r14, r14
    cc7a:	ff 24       	eor	r15, r15
    cc7c:	c6 01       	movw	r24, r12
    cc7e:	88 0f       	add	r24, r24
    cc80:	99 1f       	adc	r25, r25
    cc82:	fc 01       	movw	r30, r24
    cc84:	e5 54       	subi	r30, 0x45	; 69
    cc86:	f1 4f       	sbci	r31, 0xF1	; 241
    cc88:	91 82       	std	Z+1, r9	; 0x01
    cc8a:	80 82       	st	Z, r8
    cc8c:	11 c0       	rjmp	.+34     	; 0xccb0 <_ZN8SdVolume6fatPutEmm+0xe6>
    cc8e:	e8 94       	clt
    cc90:	c7 f8       	bld	r12, 7
    cc92:	dd 24       	eor	r13, r13
    cc94:	ee 24       	eor	r14, r14
    cc96:	ff 24       	eor	r15, r15
    cc98:	c6 01       	movw	r24, r12
    cc9a:	88 0f       	add	r24, r24
    cc9c:	99 1f       	adc	r25, r25
    cc9e:	88 0f       	add	r24, r24
    cca0:	99 1f       	adc	r25, r25
    cca2:	fc 01       	movw	r30, r24
    cca4:	e5 54       	subi	r30, 0x45	; 69
    cca6:	f1 4f       	sbci	r31, 0xF1	; 241
    cca8:	80 82       	st	Z, r8
    ccaa:	91 82       	std	Z+1, r9	; 0x01
    ccac:	a2 82       	std	Z+2, r10	; 0x02
    ccae:	b3 82       	std	Z+3, r11	; 0x03
    ccb0:	8a 89       	ldd	r24, Y+18	; 0x12
    ccb2:	82 30       	cpi	r24, 0x02	; 2
    ccb4:	d0 f0       	brcs	.+52     	; 0xccea <_ZN8SdVolume6fatPutEmm+0x120>
    ccb6:	8d 81       	ldd	r24, Y+5	; 0x05
    ccb8:	9e 81       	ldd	r25, Y+6	; 0x06
    ccba:	af 81       	ldd	r26, Y+7	; 0x07
    ccbc:	b8 85       	ldd	r27, Y+8	; 0x08
    ccbe:	48 0e       	add	r4, r24
    ccc0:	59 1e       	adc	r5, r25
    ccc2:	6a 1e       	adc	r6, r26
    ccc4:	7b 1e       	adc	r7, r27
    ccc6:	40 92 b4 0e 	sts	0x0EB4, r4
    ccca:	50 92 b5 0e 	sts	0x0EB5, r5
    ccce:	60 92 b6 0e 	sts	0x0EB6, r6
    ccd2:	70 92 b7 0e 	sts	0x0EB7, r7
    ccd6:	81 e0       	ldi	r24, 0x01	; 1
    ccd8:	09 c0       	rjmp	.+18     	; 0xccec <_ZN8SdVolume6fatPutEmm+0x122>
    ccda:	80 e0       	ldi	r24, 0x00	; 0
    ccdc:	07 c0       	rjmp	.+14     	; 0xccec <_ZN8SdVolume6fatPutEmm+0x122>
    ccde:	80 e0       	ldi	r24, 0x00	; 0
    cce0:	05 c0       	rjmp	.+10     	; 0xccec <_ZN8SdVolume6fatPutEmm+0x122>
    cce2:	80 e0       	ldi	r24, 0x00	; 0
    cce4:	03 c0       	rjmp	.+6      	; 0xccec <_ZN8SdVolume6fatPutEmm+0x122>
    cce6:	80 e0       	ldi	r24, 0x00	; 0
    cce8:	01 c0       	rjmp	.+2      	; 0xccec <_ZN8SdVolume6fatPutEmm+0x122>
    ccea:	81 e0       	ldi	r24, 0x01	; 1
    ccec:	df 91       	pop	r29
    ccee:	cf 91       	pop	r28
    ccf0:	1f 91       	pop	r17
    ccf2:	0f 91       	pop	r16
    ccf4:	ff 90       	pop	r15
    ccf6:	ef 90       	pop	r14
    ccf8:	df 90       	pop	r13
    ccfa:	cf 90       	pop	r12
    ccfc:	bf 90       	pop	r11
    ccfe:	af 90       	pop	r10
    cd00:	9f 90       	pop	r9
    cd02:	8f 90       	pop	r8
    cd04:	7f 90       	pop	r7
    cd06:	6f 90       	pop	r6
    cd08:	5f 90       	pop	r5
    cd0a:	4f 90       	pop	r4
    cd0c:	08 95       	ret

0000cd0e <_ZN8SdVolume15allocContiguousEmPm>:
    cd0e:	2f 92       	push	r2
    cd10:	3f 92       	push	r3
    cd12:	4f 92       	push	r4
    cd14:	5f 92       	push	r5
    cd16:	6f 92       	push	r6
    cd18:	7f 92       	push	r7
    cd1a:	8f 92       	push	r8
    cd1c:	9f 92       	push	r9
    cd1e:	af 92       	push	r10
    cd20:	bf 92       	push	r11
    cd22:	cf 92       	push	r12
    cd24:	df 92       	push	r13
    cd26:	ef 92       	push	r14
    cd28:	ff 92       	push	r15
    cd2a:	0f 93       	push	r16
    cd2c:	1f 93       	push	r17
    cd2e:	cf 93       	push	r28
    cd30:	df 93       	push	r29
    cd32:	cd b7       	in	r28, 0x3d	; 61
    cd34:	de b7       	in	r29, 0x3e	; 62
    cd36:	2f 97       	sbiw	r28, 0x0f	; 15
    cd38:	0f b6       	in	r0, 0x3f	; 63
    cd3a:	f8 94       	cli
    cd3c:	de bf       	out	0x3e, r29	; 62
    cd3e:	0f be       	out	0x3f, r0	; 63
    cd40:	cd bf       	out	0x3d, r28	; 61
    cd42:	1c 01       	movw	r2, r24
    cd44:	49 87       	std	Y+9, r20	; 0x09
    cd46:	5a 87       	std	Y+10, r21	; 0x0a
    cd48:	6b 87       	std	Y+11, r22	; 0x0b
    cd4a:	7c 87       	std	Y+12, r23	; 0x0c
    cd4c:	3e 87       	std	Y+14, r19	; 0x0e
    cd4e:	2d 87       	std	Y+13, r18	; 0x0d
    cd50:	fc 01       	movw	r30, r24
    cd52:	81 85       	ldd	r24, Z+9	; 0x09
    cd54:	92 85       	ldd	r25, Z+10	; 0x0a
    cd56:	a3 85       	ldd	r26, Z+11	; 0x0b
    cd58:	b4 85       	ldd	r27, Z+12	; 0x0c
    cd5a:	9c 01       	movw	r18, r24
    cd5c:	ad 01       	movw	r20, r26
    cd5e:	2f 5f       	subi	r18, 0xFF	; 255
    cd60:	3f 4f       	sbci	r19, 0xFF	; 255
    cd62:	4f 4f       	sbci	r20, 0xFF	; 255
    cd64:	5f 4f       	sbci	r21, 0xFF	; 255
    cd66:	2d 83       	std	Y+5, r18	; 0x05
    cd68:	3e 83       	std	Y+6, r19	; 0x06
    cd6a:	4f 83       	std	Y+7, r20	; 0x07
    cd6c:	58 87       	std	Y+8, r21	; 0x08
    cd6e:	ed 85       	ldd	r30, Y+13	; 0x0d
    cd70:	fe 85       	ldd	r31, Y+14	; 0x0e
    cd72:	40 81       	ld	r20, Z
    cd74:	51 81       	ldd	r21, Z+1	; 0x01
    cd76:	62 81       	ldd	r22, Z+2	; 0x02
    cd78:	73 81       	ldd	r23, Z+3	; 0x03
    cd7a:	41 15       	cp	r20, r1
    cd7c:	51 05       	cpc	r21, r1
    cd7e:	61 05       	cpc	r22, r1
    cd80:	71 05       	cpc	r23, r1
    cd82:	51 f0       	breq	.+20     	; 0xcd98 <_ZN8SdVolume15allocContiguousEmPm+0x8a>
    cd84:	41 2c       	mov	r4, r1
    cd86:	51 2c       	mov	r5, r1
    cd88:	32 01       	movw	r6, r4
    cd8a:	43 94       	inc	r4
    cd8c:	44 0e       	add	r4, r20
    cd8e:	55 1e       	adc	r5, r21
    cd90:	66 1e       	adc	r6, r22
    cd92:	77 1e       	adc	r7, r23
    cd94:	1f 86       	std	Y+15, r1	; 0x0f
    cd96:	11 c0       	rjmp	.+34     	; 0xcdba <_ZN8SdVolume15allocContiguousEmPm+0xac>
    cd98:	f1 01       	movw	r30, r2
    cd9a:	40 80       	ld	r4, Z
    cd9c:	51 80       	ldd	r5, Z+1	; 0x01
    cd9e:	62 80       	ldd	r6, Z+2	; 0x02
    cda0:	73 80       	ldd	r7, Z+3	; 0x03
    cda2:	f1 e0       	ldi	r31, 0x01	; 1
    cda4:	ff 87       	std	Y+15, r31	; 0x0f
    cda6:	29 85       	ldd	r18, Y+9	; 0x09
    cda8:	3a 85       	ldd	r19, Y+10	; 0x0a
    cdaa:	4b 85       	ldd	r20, Y+11	; 0x0b
    cdac:	5c 85       	ldd	r21, Y+12	; 0x0c
    cdae:	21 30       	cpi	r18, 0x01	; 1
    cdb0:	31 05       	cpc	r19, r1
    cdb2:	41 05       	cpc	r20, r1
    cdb4:	51 05       	cpc	r21, r1
    cdb6:	09 f0       	breq	.+2      	; 0xcdba <_ZN8SdVolume15allocContiguousEmPm+0xac>
    cdb8:	1f 86       	std	Y+15, r1	; 0x0f
    cdba:	89 2b       	or	r24, r25
    cdbc:	8a 2b       	or	r24, r26
    cdbe:	8b 2b       	or	r24, r27
    cdc0:	09 f4       	brne	.+2      	; 0xcdc4 <_ZN8SdVolume15allocContiguousEmPm+0xb6>
    cdc2:	59 c0       	rjmp	.+178    	; 0xce76 <_ZN8SdVolume15allocContiguousEmPm+0x168>
    cdc4:	73 01       	movw	r14, r6
    cdc6:	62 01       	movw	r12, r4
    cdc8:	81 2c       	mov	r8, r1
    cdca:	91 2c       	mov	r9, r1
    cdcc:	54 01       	movw	r10, r8
    cdce:	8d 81       	ldd	r24, Y+5	; 0x05
    cdd0:	9e 81       	ldd	r25, Y+6	; 0x06
    cdd2:	af 81       	ldd	r26, Y+7	; 0x07
    cdd4:	b8 85       	ldd	r27, Y+8	; 0x08
    cdd6:	8c 15       	cp	r24, r12
    cdd8:	9d 05       	cpc	r25, r13
    cdda:	ae 05       	cpc	r26, r14
    cddc:	bf 05       	cpc	r27, r15
    cdde:	50 f4       	brcc	.+20     	; 0xcdf4 <_ZN8SdVolume15allocContiguousEmPm+0xe6>
    cde0:	c1 2c       	mov	r12, r1
    cde2:	d1 2c       	mov	r13, r1
    cde4:	76 01       	movw	r14, r12
    cde6:	68 94       	set
    cde8:	c1 f8       	bld	r12, 1
    cdea:	41 2c       	mov	r4, r1
    cdec:	51 2c       	mov	r5, r1
    cdee:	32 01       	movw	r6, r4
    cdf0:	68 94       	set
    cdf2:	41 f8       	bld	r4, 1
    cdf4:	9e 01       	movw	r18, r28
    cdf6:	2f 5f       	subi	r18, 0xFF	; 255
    cdf8:	3f 4f       	sbci	r19, 0xFF	; 255
    cdfa:	b7 01       	movw	r22, r14
    cdfc:	a6 01       	movw	r20, r12
    cdfe:	c1 01       	movw	r24, r2
    ce00:	d5 dd       	rcall	.-1110   	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    ce02:	88 23       	and	r24, r24
    ce04:	c1 f1       	breq	.+112    	; 0xce76 <_ZN8SdVolume15allocContiguousEmPm+0x168>
    ce06:	89 81       	ldd	r24, Y+1	; 0x01
    ce08:	9a 81       	ldd	r25, Y+2	; 0x02
    ce0a:	ab 81       	ldd	r26, Y+3	; 0x03
    ce0c:	bc 81       	ldd	r27, Y+4	; 0x04
    ce0e:	89 2b       	or	r24, r25
    ce10:	8a 2b       	or	r24, r26
    ce12:	8b 2b       	or	r24, r27
    ce14:	49 f0       	breq	.+18     	; 0xce28 <_ZN8SdVolume15allocContiguousEmPm+0x11a>
    ce16:	41 2c       	mov	r4, r1
    ce18:	51 2c       	mov	r5, r1
    ce1a:	32 01       	movw	r6, r4
    ce1c:	43 94       	inc	r4
    ce1e:	4c 0c       	add	r4, r12
    ce20:	5d 1c       	adc	r5, r13
    ce22:	6e 1c       	adc	r6, r14
    ce24:	7f 1c       	adc	r7, r15
    ce26:	12 c0       	rjmp	.+36     	; 0xce4c <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    ce28:	d7 01       	movw	r26, r14
    ce2a:	c6 01       	movw	r24, r12
    ce2c:	01 96       	adiw	r24, 0x01	; 1
    ce2e:	a1 1d       	adc	r26, r1
    ce30:	b1 1d       	adc	r27, r1
    ce32:	84 19       	sub	r24, r4
    ce34:	95 09       	sbc	r25, r5
    ce36:	a6 09       	sbc	r26, r6
    ce38:	b7 09       	sbc	r27, r7
    ce3a:	29 85       	ldd	r18, Y+9	; 0x09
    ce3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    ce3e:	4b 85       	ldd	r20, Y+11	; 0x0b
    ce40:	5c 85       	ldd	r21, Y+12	; 0x0c
    ce42:	82 17       	cp	r24, r18
    ce44:	93 07       	cpc	r25, r19
    ce46:	a4 07       	cpc	r26, r20
    ce48:	b5 07       	cpc	r27, r21
    ce4a:	b9 f0       	breq	.+46     	; 0xce7a <_ZN8SdVolume15allocContiguousEmPm+0x16c>
    ce4c:	3f ef       	ldi	r19, 0xFF	; 255
    ce4e:	83 1a       	sub	r8, r19
    ce50:	93 0a       	sbc	r9, r19
    ce52:	a3 0a       	sbc	r10, r19
    ce54:	b3 0a       	sbc	r11, r19
    ce56:	4f ef       	ldi	r20, 0xFF	; 255
    ce58:	c4 1a       	sub	r12, r20
    ce5a:	d4 0a       	sbc	r13, r20
    ce5c:	e4 0a       	sbc	r14, r20
    ce5e:	f4 0a       	sbc	r15, r20
    ce60:	f1 01       	movw	r30, r2
    ce62:	81 85       	ldd	r24, Z+9	; 0x09
    ce64:	92 85       	ldd	r25, Z+10	; 0x0a
    ce66:	a3 85       	ldd	r26, Z+11	; 0x0b
    ce68:	b4 85       	ldd	r27, Z+12	; 0x0c
    ce6a:	88 16       	cp	r8, r24
    ce6c:	99 06       	cpc	r9, r25
    ce6e:	aa 06       	cpc	r10, r26
    ce70:	bb 06       	cpc	r11, r27
    ce72:	08 f4       	brcc	.+2      	; 0xce76 <_ZN8SdVolume15allocContiguousEmPm+0x168>
    ce74:	ac cf       	rjmp	.-168    	; 0xcdce <_ZN8SdVolume15allocContiguousEmPm+0xc0>
    ce76:	80 e0       	ldi	r24, 0x00	; 0
    ce78:	53 c0       	rjmp	.+166    	; 0xcf20 <_ZN8SdVolume15allocContiguousEmPm+0x212>
    ce7a:	0f ef       	ldi	r16, 0xFF	; 255
    ce7c:	1f ef       	ldi	r17, 0xFF	; 255
    ce7e:	2f ef       	ldi	r18, 0xFF	; 255
    ce80:	3f e0       	ldi	r19, 0x0F	; 15
    ce82:	b7 01       	movw	r22, r14
    ce84:	a6 01       	movw	r20, r12
    ce86:	c1 01       	movw	r24, r2
    ce88:	a0 de       	rcall	.-704    	; 0xcbca <_ZN8SdVolume6fatPutEmm>
    ce8a:	88 23       	and	r24, r24
    ce8c:	09 f4       	brne	.+2      	; 0xce90 <_ZN8SdVolume15allocContiguousEmPm+0x182>
    ce8e:	41 c0       	rjmp	.+130    	; 0xcf12 <_ZN8SdVolume15allocContiguousEmPm+0x204>
    ce90:	4c 14       	cp	r4, r12
    ce92:	5d 04       	cpc	r5, r13
    ce94:	6e 04       	cpc	r6, r14
    ce96:	7f 04       	cpc	r7, r15
    ce98:	b0 f4       	brcc	.+44     	; 0xcec6 <_ZN8SdVolume15allocContiguousEmPm+0x1b8>
    ce9a:	b7 01       	movw	r22, r14
    ce9c:	a6 01       	movw	r20, r12
    ce9e:	41 50       	subi	r20, 0x01	; 1
    cea0:	51 09       	sbc	r21, r1
    cea2:	61 09       	sbc	r22, r1
    cea4:	71 09       	sbc	r23, r1
    cea6:	97 01       	movw	r18, r14
    cea8:	86 01       	movw	r16, r12
    ceaa:	c1 01       	movw	r24, r2
    ceac:	8e de       	rcall	.-740    	; 0xcbca <_ZN8SdVolume6fatPutEmm>
    ceae:	88 23       	and	r24, r24
    ceb0:	91 f1       	breq	.+100    	; 0xcf16 <_ZN8SdVolume15allocContiguousEmPm+0x208>
    ceb2:	f1 e0       	ldi	r31, 0x01	; 1
    ceb4:	cf 1a       	sub	r12, r31
    ceb6:	d1 08       	sbc	r13, r1
    ceb8:	e1 08       	sbc	r14, r1
    ceba:	f1 08       	sbc	r15, r1
    cebc:	4c 14       	cp	r4, r12
    cebe:	5d 04       	cpc	r5, r13
    cec0:	6e 04       	cpc	r6, r14
    cec2:	7f 04       	cpc	r7, r15
    cec4:	50 f3       	brcs	.-44     	; 0xce9a <_ZN8SdVolume15allocContiguousEmPm+0x18c>
    cec6:	ad 85       	ldd	r26, Y+13	; 0x0d
    cec8:	be 85       	ldd	r27, Y+14	; 0x0e
    ceca:	4d 91       	ld	r20, X+
    cecc:	5d 91       	ld	r21, X+
    cece:	6d 91       	ld	r22, X+
    ced0:	7c 91       	ld	r23, X
    ced2:	41 15       	cp	r20, r1
    ced4:	51 05       	cpc	r21, r1
    ced6:	61 05       	cpc	r22, r1
    ced8:	71 05       	cpc	r23, r1
    ceda:	31 f0       	breq	.+12     	; 0xcee8 <_ZN8SdVolume15allocContiguousEmPm+0x1da>
    cedc:	93 01       	movw	r18, r6
    cede:	82 01       	movw	r16, r4
    cee0:	c1 01       	movw	r24, r2
    cee2:	73 de       	rcall	.-794    	; 0xcbca <_ZN8SdVolume6fatPutEmm>
    cee4:	88 23       	and	r24, r24
    cee6:	c9 f0       	breq	.+50     	; 0xcf1a <_ZN8SdVolume15allocContiguousEmPm+0x20c>
    cee8:	ed 85       	ldd	r30, Y+13	; 0x0d
    ceea:	fe 85       	ldd	r31, Y+14	; 0x0e
    ceec:	40 82       	st	Z, r4
    ceee:	51 82       	std	Z+1, r5	; 0x01
    cef0:	62 82       	std	Z+2, r6	; 0x02
    cef2:	73 82       	std	Z+3, r7	; 0x03
    cef4:	ff 85       	ldd	r31, Y+15	; 0x0f
    cef6:	ff 23       	and	r31, r31
    cef8:	91 f0       	breq	.+36     	; 0xcf1e <_ZN8SdVolume15allocContiguousEmPm+0x210>
    cefa:	d3 01       	movw	r26, r6
    cefc:	c2 01       	movw	r24, r4
    cefe:	01 96       	adiw	r24, 0x01	; 1
    cf00:	a1 1d       	adc	r26, r1
    cf02:	b1 1d       	adc	r27, r1
    cf04:	f1 01       	movw	r30, r2
    cf06:	80 83       	st	Z, r24
    cf08:	91 83       	std	Z+1, r25	; 0x01
    cf0a:	a2 83       	std	Z+2, r26	; 0x02
    cf0c:	b3 83       	std	Z+3, r27	; 0x03
    cf0e:	81 e0       	ldi	r24, 0x01	; 1
    cf10:	07 c0       	rjmp	.+14     	; 0xcf20 <_ZN8SdVolume15allocContiguousEmPm+0x212>
    cf12:	80 e0       	ldi	r24, 0x00	; 0
    cf14:	05 c0       	rjmp	.+10     	; 0xcf20 <_ZN8SdVolume15allocContiguousEmPm+0x212>
    cf16:	80 e0       	ldi	r24, 0x00	; 0
    cf18:	03 c0       	rjmp	.+6      	; 0xcf20 <_ZN8SdVolume15allocContiguousEmPm+0x212>
    cf1a:	80 e0       	ldi	r24, 0x00	; 0
    cf1c:	01 c0       	rjmp	.+2      	; 0xcf20 <_ZN8SdVolume15allocContiguousEmPm+0x212>
    cf1e:	81 e0       	ldi	r24, 0x01	; 1
    cf20:	2f 96       	adiw	r28, 0x0f	; 15
    cf22:	0f b6       	in	r0, 0x3f	; 63
    cf24:	f8 94       	cli
    cf26:	de bf       	out	0x3e, r29	; 62
    cf28:	0f be       	out	0x3f, r0	; 63
    cf2a:	cd bf       	out	0x3d, r28	; 61
    cf2c:	df 91       	pop	r29
    cf2e:	cf 91       	pop	r28
    cf30:	1f 91       	pop	r17
    cf32:	0f 91       	pop	r16
    cf34:	ff 90       	pop	r15
    cf36:	ef 90       	pop	r14
    cf38:	df 90       	pop	r13
    cf3a:	cf 90       	pop	r12
    cf3c:	bf 90       	pop	r11
    cf3e:	af 90       	pop	r10
    cf40:	9f 90       	pop	r9
    cf42:	8f 90       	pop	r8
    cf44:	7f 90       	pop	r7
    cf46:	6f 90       	pop	r6
    cf48:	5f 90       	pop	r5
    cf4a:	4f 90       	pop	r4
    cf4c:	3f 90       	pop	r3
    cf4e:	2f 90       	pop	r2
    cf50:	08 95       	ret

0000cf52 <_ZN8SdVolume9freeChainEm>:
    cf52:	8f 92       	push	r8
    cf54:	9f 92       	push	r9
    cf56:	af 92       	push	r10
    cf58:	bf 92       	push	r11
    cf5a:	cf 92       	push	r12
    cf5c:	df 92       	push	r13
    cf5e:	ef 92       	push	r14
    cf60:	ff 92       	push	r15
    cf62:	0f 93       	push	r16
    cf64:	1f 93       	push	r17
    cf66:	cf 93       	push	r28
    cf68:	df 93       	push	r29
    cf6a:	00 d0       	rcall	.+0      	; 0xcf6c <_ZN8SdVolume9freeChainEm+0x1a>
    cf6c:	1f 92       	push	r1
    cf6e:	cd b7       	in	r28, 0x3d	; 61
    cf70:	de b7       	in	r29, 0x3e	; 62
    cf72:	5c 01       	movw	r10, r24
    cf74:	6a 01       	movw	r12, r20
    cf76:	7b 01       	movw	r14, r22
    cf78:	82 e0       	ldi	r24, 0x02	; 2
    cf7a:	90 e0       	ldi	r25, 0x00	; 0
    cf7c:	a0 e0       	ldi	r26, 0x00	; 0
    cf7e:	b0 e0       	ldi	r27, 0x00	; 0
    cf80:	f5 01       	movw	r30, r10
    cf82:	80 83       	st	Z, r24
    cf84:	91 83       	std	Z+1, r25	; 0x01
    cf86:	a2 83       	std	Z+2, r26	; 0x02
    cf88:	b3 83       	std	Z+3, r27	; 0x03
    cf8a:	99 24       	eor	r9, r9
    cf8c:	93 94       	inc	r9
    cf8e:	81 2c       	mov	r8, r1
    cf90:	9e 01       	movw	r18, r28
    cf92:	2f 5f       	subi	r18, 0xFF	; 255
    cf94:	3f 4f       	sbci	r19, 0xFF	; 255
    cf96:	b7 01       	movw	r22, r14
    cf98:	a6 01       	movw	r20, r12
    cf9a:	c5 01       	movw	r24, r10
    cf9c:	07 dd       	rcall	.-1522   	; 0xc9ac <_ZN8SdVolume6fatGetEmPm>
    cf9e:	88 23       	and	r24, r24
    cfa0:	49 f1       	breq	.+82     	; 0xcff4 <_ZN8SdVolume9freeChainEm+0xa2>
    cfa2:	00 e0       	ldi	r16, 0x00	; 0
    cfa4:	10 e0       	ldi	r17, 0x00	; 0
    cfa6:	98 01       	movw	r18, r16
    cfa8:	b7 01       	movw	r22, r14
    cfaa:	a6 01       	movw	r20, r12
    cfac:	c5 01       	movw	r24, r10
    cfae:	0d de       	rcall	.-998    	; 0xcbca <_ZN8SdVolume6fatPutEmm>
    cfb0:	88 23       	and	r24, r24
    cfb2:	11 f1       	breq	.+68     	; 0xcff8 <_ZN8SdVolume9freeChainEm+0xa6>
    cfb4:	c9 80       	ldd	r12, Y+1	; 0x01
    cfb6:	da 80       	ldd	r13, Y+2	; 0x02
    cfb8:	eb 80       	ldd	r14, Y+3	; 0x03
    cfba:	fc 80       	ldd	r15, Y+4	; 0x04
    cfbc:	f5 01       	movw	r30, r10
    cfbe:	87 89       	ldd	r24, Z+23	; 0x17
    cfc0:	80 31       	cpi	r24, 0x10	; 16
    cfc2:	51 f4       	brne	.+20     	; 0xcfd8 <_ZN8SdVolume9freeChainEm+0x86>
    cfc4:	89 2d       	mov	r24, r9
    cfc6:	f8 ef       	ldi	r31, 0xF8	; 248
    cfc8:	cf 16       	cp	r12, r31
    cfca:	ff ef       	ldi	r31, 0xFF	; 255
    cfcc:	df 06       	cpc	r13, r31
    cfce:	e1 04       	cpc	r14, r1
    cfd0:	f1 04       	cpc	r15, r1
    cfd2:	60 f4       	brcc	.+24     	; 0xcfec <_ZN8SdVolume9freeChainEm+0x9a>
    cfd4:	88 2d       	mov	r24, r8
    cfd6:	0a c0       	rjmp	.+20     	; 0xcfec <_ZN8SdVolume9freeChainEm+0x9a>
    cfd8:	89 2d       	mov	r24, r9
    cfda:	98 ef       	ldi	r25, 0xF8	; 248
    cfdc:	c9 16       	cp	r12, r25
    cfde:	9f ef       	ldi	r25, 0xFF	; 255
    cfe0:	d9 06       	cpc	r13, r25
    cfe2:	e9 06       	cpc	r14, r25
    cfe4:	9f e0       	ldi	r25, 0x0F	; 15
    cfe6:	f9 06       	cpc	r15, r25
    cfe8:	08 f4       	brcc	.+2      	; 0xcfec <_ZN8SdVolume9freeChainEm+0x9a>
    cfea:	88 2d       	mov	r24, r8
    cfec:	88 23       	and	r24, r24
    cfee:	81 f2       	breq	.-96     	; 0xcf90 <_ZN8SdVolume9freeChainEm+0x3e>
    cff0:	81 e0       	ldi	r24, 0x01	; 1
    cff2:	03 c0       	rjmp	.+6      	; 0xcffa <_ZN8SdVolume9freeChainEm+0xa8>
    cff4:	80 e0       	ldi	r24, 0x00	; 0
    cff6:	01 c0       	rjmp	.+2      	; 0xcffa <_ZN8SdVolume9freeChainEm+0xa8>
    cff8:	80 e0       	ldi	r24, 0x00	; 0
    cffa:	0f 90       	pop	r0
    cffc:	0f 90       	pop	r0
    cffe:	0f 90       	pop	r0
    d000:	0f 90       	pop	r0
    d002:	df 91       	pop	r29
    d004:	cf 91       	pop	r28
    d006:	1f 91       	pop	r17
    d008:	0f 91       	pop	r16
    d00a:	ff 90       	pop	r15
    d00c:	ef 90       	pop	r14
    d00e:	df 90       	pop	r13
    d010:	cf 90       	pop	r12
    d012:	bf 90       	pop	r11
    d014:	af 90       	pop	r10
    d016:	9f 90       	pop	r9
    d018:	8f 90       	pop	r8
    d01a:	08 95       	ret

0000d01c <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
    d01c:	8f 92       	push	r8
    d01e:	9f 92       	push	r9
    d020:	af 92       	push	r10
    d022:	bf 92       	push	r11
    d024:	cf 92       	push	r12
    d026:	df 92       	push	r13
    d028:	ef 92       	push	r14
    d02a:	ff 92       	push	r15
    d02c:	0f 93       	push	r16
    d02e:	1f 93       	push	r17
    d030:	cf 93       	push	r28
    d032:	df 93       	push	r29
    d034:	ec 01       	movw	r28, r24
    d036:	f4 2e       	mov	r15, r20
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;

  sdCard_ = dev;
    d038:	70 93 ba 0e 	sts	0x0EBA, r23
    d03c:	60 93 b9 0e 	sts	0x0EB9, r22
  fatType_ = 0;
    d040:	1f 8a       	std	Y+23, r1	; 0x17
  allocSearchStart_ = 2;
    d042:	02 e0       	ldi	r16, 0x02	; 2
    d044:	10 e0       	ldi	r17, 0x00	; 0
    d046:	20 e0       	ldi	r18, 0x00	; 0
    d048:	30 e0       	ldi	r19, 0x00	; 0
    d04a:	08 83       	st	Y, r16
    d04c:	19 83       	std	Y+1, r17	; 0x01
    d04e:	2a 83       	std	Y+2, r18	; 0x02
    d050:	3b 83       	std	Y+3, r19	; 0x03
  cacheDirty_ = 0;  // cacheFlush() will write block if true
    d052:	10 92 b8 0e 	sts	0x0EB8, r1
  cacheMirrorBlock_ = 0;
    d056:	10 92 b4 0e 	sts	0x0EB4, r1
    d05a:	10 92 b5 0e 	sts	0x0EB5, r1
    d05e:	10 92 b6 0e 	sts	0x0EB6, r1
    d062:	10 92 b7 0e 	sts	0x0EB7, r1
  cacheBlockNumber_ = 0XFFFFFFFF;
    d066:	0f ef       	ldi	r16, 0xFF	; 255
    d068:	1f ef       	ldi	r17, 0xFF	; 255
    d06a:	98 01       	movw	r18, r16
    d06c:	00 93 bb 10 	sts	0x10BB, r16
    d070:	10 93 bc 10 	sts	0x10BC, r17
    d074:	20 93 bd 10 	sts	0x10BD, r18
    d078:	30 93 be 10 	sts	0x10BE, r19

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    d07c:	44 23       	and	r20, r20
    d07e:	51 f1       	breq	.+84     	; 0xd0d4 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    if (part > 4)goto fail;
    d080:	24 e0       	ldi	r18, 0x04	; 4
    d082:	24 17       	cp	r18, r20
    d084:	08 f4       	brcc	.+2      	; 0xd088 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    d086:	f9 c0       	rjmp	.+498    	; 0xd27a <_ZN8SdVolume4initEP7Sd2Cardh+0x25e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) goto fail;
    d088:	40 e0       	ldi	r20, 0x00	; 0
    d08a:	60 e0       	ldi	r22, 0x00	; 0
    d08c:	70 e0       	ldi	r23, 0x00	; 0
    d08e:	cb 01       	movw	r24, r22
    d090:	50 dc       	rcall	.-1888   	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    d092:	88 23       	and	r24, r24
    d094:	09 f4       	brne	.+2      	; 0xd098 <_ZN8SdVolume4initEP7Sd2Cardh+0x7c>
    d096:	f3 c0       	rjmp	.+486    	; 0xd27e <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    d098:	80 e1       	ldi	r24, 0x10	; 16
    d09a:	f8 9e       	mul	r15, r24
    d09c:	f0 01       	movw	r30, r0
    d09e:	11 24       	eor	r1, r1
    d0a0:	e7 59       	subi	r30, 0x97	; 151
    d0a2:	ff 4e       	sbci	r31, 0xEF	; 239
    if ((p->boot & 0X7F) !=0  ||
    d0a4:	80 81       	ld	r24, Z
    d0a6:	8f 77       	andi	r24, 0x7F	; 127
    d0a8:	09 f0       	breq	.+2      	; 0xd0ac <_ZN8SdVolume4initEP7Sd2Cardh+0x90>
    d0aa:	eb c0       	rjmp	.+470    	; 0xd282 <_ZN8SdVolume4initEP7Sd2Cardh+0x266>
    d0ac:	84 85       	ldd	r24, Z+12	; 0x0c
    d0ae:	95 85       	ldd	r25, Z+13	; 0x0d
    d0b0:	a6 85       	ldd	r26, Z+14	; 0x0e
    d0b2:	b7 85       	ldd	r27, Z+15	; 0x0f
    d0b4:	84 36       	cpi	r24, 0x64	; 100
    d0b6:	91 05       	cpc	r25, r1
    d0b8:	a1 05       	cpc	r26, r1
    d0ba:	b1 05       	cpc	r27, r1
    d0bc:	08 f4       	brcc	.+2      	; 0xd0c0 <_ZN8SdVolume4initEP7Sd2Cardh+0xa4>
    d0be:	e3 c0       	rjmp	.+454    	; 0xd286 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    d0c0:	c0 84       	ldd	r12, Z+8	; 0x08
    d0c2:	d1 84       	ldd	r13, Z+9	; 0x09
    d0c4:	e2 84       	ldd	r14, Z+10	; 0x0a
    d0c6:	f3 84       	ldd	r15, Z+11	; 0x0b
    d0c8:	c1 14       	cp	r12, r1
    d0ca:	d1 04       	cpc	r13, r1
    d0cc:	e1 04       	cpc	r14, r1
    d0ce:	f1 04       	cpc	r15, r1
    d0d0:	21 f4       	brne	.+8      	; 0xd0da <_ZN8SdVolume4initEP7Sd2Cardh+0xbe>
    d0d2:	db c0       	rjmp	.+438    	; 0xd28a <_ZN8SdVolume4initEP7Sd2Cardh+0x26e>
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
    d0d4:	c1 2c       	mov	r12, r1
    d0d6:	d1 2c       	mov	r13, r1
    d0d8:	76 01       	movw	r14, r12
      // not a valid partition
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) goto fail;
    d0da:	40 e0       	ldi	r20, 0x00	; 0
    d0dc:	c7 01       	movw	r24, r14
    d0de:	b6 01       	movw	r22, r12
    d0e0:	28 dc       	rcall	.-1968   	; 0xc932 <_ZN8SdVolume13cacheRawBlockEmb>
    d0e2:	88 23       	and	r24, r24
    d0e4:	09 f4       	brne	.+2      	; 0xd0e8 <_ZN8SdVolume4initEP7Sd2Cardh+0xcc>
    d0e6:	d3 c0       	rjmp	.+422    	; 0xd28e <_ZN8SdVolume4initEP7Sd2Cardh+0x272>
  fbs = &cacheBuffer_.fbs32;
  if (fbs->bytesPerSector != 512 ||
    d0e8:	80 91 c6 0e 	lds	r24, 0x0EC6
    d0ec:	90 91 c7 0e 	lds	r25, 0x0EC7
    d0f0:	81 15       	cp	r24, r1
    d0f2:	92 40       	sbci	r25, 0x02	; 2
    d0f4:	09 f0       	breq	.+2      	; 0xd0f8 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    d0f6:	cd c0       	rjmp	.+410    	; 0xd292 <_ZN8SdVolume4initEP7Sd2Cardh+0x276>
    d0f8:	20 91 cb 0e 	lds	r18, 0x0ECB
    d0fc:	22 23       	and	r18, r18
    d0fe:	09 f4       	brne	.+2      	; 0xd102 <_ZN8SdVolume4initEP7Sd2Cardh+0xe6>
    d100:	ca c0       	rjmp	.+404    	; 0xd296 <_ZN8SdVolume4initEP7Sd2Cardh+0x27a>
    d102:	80 91 c9 0e 	lds	r24, 0x0EC9
    d106:	90 91 ca 0e 	lds	r25, 0x0ECA
    d10a:	89 2b       	or	r24, r25
    d10c:	09 f4       	brne	.+2      	; 0xd110 <_ZN8SdVolume4initEP7Sd2Cardh+0xf4>
    d10e:	c5 c0       	rjmp	.+394    	; 0xd29a <_ZN8SdVolume4initEP7Sd2Cardh+0x27e>
    d110:	40 91 c8 0e 	lds	r20, 0x0EC8
    d114:	44 23       	and	r20, r20
    d116:	09 f4       	brne	.+2      	; 0xd11a <_ZN8SdVolume4initEP7Sd2Cardh+0xfe>
    d118:	c2 c0       	rjmp	.+388    	; 0xd29e <_ZN8SdVolume4initEP7Sd2Cardh+0x282>
    fbs->reservedSectorCount == 0 ||
    fbs->sectorsPerCluster == 0) {
       // not valid FAT volume
      goto fail;
  }
  fatCount_ = fbs->fatCount;
    d11a:	2a 8b       	std	Y+18, r18	; 0x12
  blocksPerCluster_ = fbs->sectorsPerCluster;
    d11c:	4c 83       	std	Y+4, r20	; 0x04
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    d11e:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    d120:	50 e0       	ldi	r21, 0x00	; 0
    d122:	21 e0       	ldi	r18, 0x01	; 1
    d124:	30 e0       	ldi	r19, 0x00	; 0
    d126:	06 c0       	rjmp	.+12     	; 0xd134 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) goto fail;
    d128:	86 2f       	mov	r24, r22
    d12a:	8f 5f       	subi	r24, 0xFF	; 255
    d12c:	8d 87       	std	Y+13, r24	; 0x0d
    d12e:	68 30       	cpi	r22, 0x08	; 8
    d130:	08 f0       	brcs	.+2      	; 0xd134 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    d132:	b7 c0       	rjmp	.+366    	; 0xd2a2 <_ZN8SdVolume4initEP7Sd2Cardh+0x286>
  }
  fatCount_ = fbs->fatCount;
  blocksPerCluster_ = fbs->sectorsPerCluster;
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    d134:	6d 85       	ldd	r22, Y+13	; 0x0d
    d136:	16 2f       	mov	r17, r22
    d138:	c9 01       	movw	r24, r18
    d13a:	06 2e       	mov	r0, r22
    d13c:	02 c0       	rjmp	.+4      	; 0xd142 <_ZN8SdVolume4initEP7Sd2Cardh+0x126>
    d13e:	88 0f       	add	r24, r24
    d140:	99 1f       	adc	r25, r25
    d142:	0a 94       	dec	r0
    d144:	e2 f7       	brpl	.-8      	; 0xd13e <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    d146:	48 17       	cp	r20, r24
    d148:	59 07       	cpc	r21, r25
    d14a:	71 f7       	brne	.-36     	; 0xd128 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) goto fail;
  }
  blocksPerFat_ = fbs->sectorsPerFat16 ?
                    fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
    d14c:	20 91 d1 0e 	lds	r18, 0x0ED1
    d150:	30 91 d2 0e 	lds	r19, 0x0ED2
    d154:	21 15       	cp	r18, r1
    d156:	31 05       	cpc	r19, r1
    d158:	19 f0       	breq	.+6      	; 0xd160 <_ZN8SdVolume4initEP7Sd2Cardh+0x144>
    d15a:	40 e0       	ldi	r20, 0x00	; 0
    d15c:	50 e0       	ldi	r21, 0x00	; 0
    d15e:	08 c0       	rjmp	.+16     	; 0xd170 <_ZN8SdVolume4initEP7Sd2Cardh+0x154>
    d160:	20 91 df 0e 	lds	r18, 0x0EDF
    d164:	30 91 e0 0e 	lds	r19, 0x0EE0
    d168:	40 91 e1 0e 	lds	r20, 0x0EE1
    d16c:	50 91 e2 0e 	lds	r21, 0x0EE2
    d170:	2d 83       	std	Y+5, r18	; 0x05
    d172:	3e 83       	std	Y+6, r19	; 0x06
    d174:	4f 83       	std	Y+7, r20	; 0x07
    d176:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + fbs->reservedSectorCount;
    d178:	80 91 c9 0e 	lds	r24, 0x0EC9
    d17c:	90 91 ca 0e 	lds	r25, 0x0ECA
    d180:	46 01       	movw	r8, r12
    d182:	57 01       	movw	r10, r14
    d184:	88 0e       	add	r8, r24
    d186:	99 1e       	adc	r9, r25
    d188:	a1 1c       	adc	r10, r1
    d18a:	b1 1c       	adc	r11, r1
    d18c:	8b 8a       	std	Y+19, r8	; 0x13
    d18e:	9c 8a       	std	Y+20, r9	; 0x14
    d190:	ad 8a       	std	Y+21, r10	; 0x15
    d192:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = fbs->rootDirEntryCount;
    d194:	e0 91 cc 0e 	lds	r30, 0x0ECC
    d198:	f0 91 cd 0e 	lds	r31, 0x0ECD
    d19c:	f9 8f       	std	Y+25, r31	; 0x19
    d19e:	e8 8f       	std	Y+24, r30	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + fbs->fatCount * blocksPerFat_;
    d1a0:	a0 91 cb 0e 	lds	r26, 0x0ECB
    d1a4:	b0 e0       	ldi	r27, 0x00	; 0
    d1a6:	0e 94 f8 c0 	call	0x181f0	; 0x181f0 <__muluhisi3>
    d1aa:	86 0e       	add	r8, r22
    d1ac:	97 1e       	adc	r9, r23
    d1ae:	a8 1e       	adc	r10, r24
    d1b0:	b9 1e       	adc	r11, r25
    d1b2:	8a 8e       	std	Y+26, r8	; 0x1a
    d1b4:	9b 8e       	std	Y+27, r9	; 0x1b
    d1b6:	ac 8e       	std	Y+28, r10	; 0x1c
    d1b8:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * fbs->rootDirEntryCount + 511)/512);
    d1ba:	cf 01       	movw	r24, r30
    d1bc:	88 0f       	add	r24, r24
    d1be:	99 1f       	adc	r25, r25
    d1c0:	82 95       	swap	r24
    d1c2:	92 95       	swap	r25
    d1c4:	90 7f       	andi	r25, 0xF0	; 240
    d1c6:	98 27       	eor	r25, r24
    d1c8:	80 7f       	andi	r24, 0xF0	; 240
    d1ca:	98 27       	eor	r25, r24
    d1cc:	81 50       	subi	r24, 0x01	; 1
    d1ce:	9e 4f       	sbci	r25, 0xFE	; 254
    d1d0:	89 2f       	mov	r24, r25
    d1d2:	99 27       	eor	r25, r25
    d1d4:	86 95       	lsr	r24
    d1d6:	88 0e       	add	r8, r24
    d1d8:	99 1e       	adc	r9, r25
    d1da:	a1 1c       	adc	r10, r1
    d1dc:	b1 1c       	adc	r11, r1
    d1de:	8e 86       	std	Y+14, r8	; 0x0e
    d1e0:	9f 86       	std	Y+15, r9	; 0x0f
    d1e2:	a8 8a       	std	Y+16, r10	; 0x10
    d1e4:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
                           fbs->totalSectors16 : fbs->totalSectors32;
    d1e6:	80 91 ce 0e 	lds	r24, 0x0ECE
    d1ea:	90 91 cf 0e 	lds	r25, 0x0ECF
    d1ee:	00 97       	sbiw	r24, 0x00	; 0
    d1f0:	19 f0       	breq	.+6      	; 0xd1f8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1dc>
    d1f2:	a0 e0       	ldi	r26, 0x00	; 0
    d1f4:	b0 e0       	ldi	r27, 0x00	; 0
    d1f6:	08 c0       	rjmp	.+16     	; 0xd208 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ec>
    d1f8:	80 91 db 0e 	lds	r24, 0x0EDB
    d1fc:	90 91 dc 0e 	lds	r25, 0x0EDC
    d200:	a0 91 dd 0e 	lds	r26, 0x0EDD
    d204:	b0 91 de 0e 	lds	r27, 0x0EDE
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    d208:	c8 18       	sub	r12, r8
    d20a:	d9 08       	sbc	r13, r9
    d20c:	ea 08       	sbc	r14, r10
    d20e:	fb 08       	sbc	r15, r11
    d210:	c8 0e       	add	r12, r24
    d212:	d9 1e       	adc	r13, r25
    d214:	ea 1e       	adc	r14, r26
    d216:	fb 1e       	adc	r15, r27

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    d218:	04 c0       	rjmp	.+8      	; 0xd222 <_ZN8SdVolume4initEP7Sd2Cardh+0x206>
    d21a:	f6 94       	lsr	r15
    d21c:	e7 94       	ror	r14
    d21e:	d7 94       	ror	r13
    d220:	c7 94       	ror	r12
    d222:	1a 95       	dec	r17
    d224:	d2 f7       	brpl	.-12     	; 0xd21a <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    d226:	c9 86       	std	Y+9, r12	; 0x09
    d228:	da 86       	std	Y+10, r13	; 0x0a
    d22a:	eb 86       	std	Y+11, r14	; 0x0b
    d22c:	fc 86       	std	Y+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    d22e:	85 ef       	ldi	r24, 0xF5	; 245
    d230:	c8 16       	cp	r12, r24
    d232:	8f e0       	ldi	r24, 0x0F	; 15
    d234:	d8 06       	cpc	r13, r24
    d236:	e1 04       	cpc	r14, r1
    d238:	f1 04       	cpc	r15, r1
    d23a:	20 f4       	brcc	.+8      	; 0xd244 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    fatType_ = 12;
    d23c:	8c e0       	ldi	r24, 0x0C	; 12
    d23e:	8f 8b       	std	Y+23, r24	; 0x17
    fatType_ = 32;
  }
  return true;

 fail:
  return false;
    d240:	80 e0       	ldi	r24, 0x00	; 0
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    if (!FAT12_SUPPORT) goto fail;
    d242:	30 c0       	rjmp	.+96     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
  } else if (clusterCount_ < 65525) {
    d244:	25 ef       	ldi	r18, 0xF5	; 245
    d246:	c2 16       	cp	r12, r18
    d248:	2f ef       	ldi	r18, 0xFF	; 255
    d24a:	d2 06       	cpc	r13, r18
    d24c:	e1 04       	cpc	r14, r1
    d24e:	f1 04       	cpc	r15, r1
    d250:	20 f4       	brcc	.+8      	; 0xd25a <_ZN8SdVolume4initEP7Sd2Cardh+0x23e>
    fatType_ = 16;
    d252:	80 e1       	ldi	r24, 0x10	; 16
    d254:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = fbs->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    d256:	81 e0       	ldi	r24, 0x01	; 1
    d258:	25 c0       	rjmp	.+74     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    fatType_ = 12;
    if (!FAT12_SUPPORT) goto fail;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = fbs->fat32RootCluster;
    d25a:	80 91 e7 0e 	lds	r24, 0x0EE7
    d25e:	90 91 e8 0e 	lds	r25, 0x0EE8
    d262:	a0 91 e9 0e 	lds	r26, 0x0EE9
    d266:	b0 91 ea 0e 	lds	r27, 0x0EEA
    d26a:	8a 8f       	std	Y+26, r24	; 0x1a
    d26c:	9b 8f       	std	Y+27, r25	; 0x1b
    d26e:	ac 8f       	std	Y+28, r26	; 0x1c
    d270:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    d272:	80 e2       	ldi	r24, 0x20	; 32
    d274:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    d276:	81 e0       	ldi	r24, 0x01	; 1
    d278:	15 c0       	rjmp	.+42     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>

 fail:
  return false;
    d27a:	80 e0       	ldi	r24, 0x00	; 0
    d27c:	13 c0       	rjmp	.+38     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d27e:	80 e0       	ldi	r24, 0x00	; 0
    d280:	11 c0       	rjmp	.+34     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d282:	80 e0       	ldi	r24, 0x00	; 0
    d284:	0f c0       	rjmp	.+30     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d286:	80 e0       	ldi	r24, 0x00	; 0
    d288:	0d c0       	rjmp	.+26     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d28a:	80 e0       	ldi	r24, 0x00	; 0
    d28c:	0b c0       	rjmp	.+22     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d28e:	80 e0       	ldi	r24, 0x00	; 0
    d290:	09 c0       	rjmp	.+18     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d292:	80 e0       	ldi	r24, 0x00	; 0
    d294:	07 c0       	rjmp	.+14     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d296:	80 e0       	ldi	r24, 0x00	; 0
    d298:	05 c0       	rjmp	.+10     	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d29a:	80 e0       	ldi	r24, 0x00	; 0
    d29c:	03 c0       	rjmp	.+6      	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d29e:	80 e0       	ldi	r24, 0x00	; 0
    d2a0:	01 c0       	rjmp	.+2      	; 0xd2a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    d2a2:	80 e0       	ldi	r24, 0x00	; 0
}
    d2a4:	df 91       	pop	r29
    d2a6:	cf 91       	pop	r28
    d2a8:	1f 91       	pop	r17
    d2aa:	0f 91       	pop	r16
    d2ac:	ff 90       	pop	r15
    d2ae:	ef 90       	pop	r14
    d2b0:	df 90       	pop	r13
    d2b2:	cf 90       	pop	r12
    d2b4:	bf 90       	pop	r11
    d2b6:	af 90       	pop	r10
    d2b8:	9f 90       	pop	r9
    d2ba:	8f 90       	pop	r8
    d2bc:	08 95       	ret

0000d2be <_Z16checkHitEndstopsv>:
void st_wake_up() {
  //  TCNT1 = 0;
  ENABLE_STEPPER_DRIVER_INTERRUPT();
}

void step_wait(){
    d2be:	cf 93       	push	r28
    d2c0:	df 93       	push	r29
    d2c2:	80 91 d1 10 	lds	r24, 0x10D1
    d2c6:	81 11       	cpse	r24, r1
    d2c8:	09 c0       	rjmp	.+18     	; 0xd2dc <_Z16checkHitEndstopsv+0x1e>
    d2ca:	80 91 d0 10 	lds	r24, 0x10D0
    d2ce:	81 11       	cpse	r24, r1
    d2d0:	05 c0       	rjmp	.+10     	; 0xd2dc <_Z16checkHitEndstopsv+0x1e>
    d2d2:	80 91 cf 10 	lds	r24, 0x10CF
    d2d6:	88 23       	and	r24, r24
    d2d8:	09 f4       	brne	.+2      	; 0xd2dc <_Z16checkHitEndstopsv+0x1e>
    d2da:	96 c0       	rjmp	.+300    	; 0xd408 <_Z16checkHitEndstopsv+0x14a>
    d2dc:	e5 e6       	ldi	r30, 0x65	; 101
    d2de:	f8 e0       	ldi	r31, 0x08	; 8
    d2e0:	94 91       	lpm	r25, Z
    d2e2:	99 23       	and	r25, r25
    d2e4:	61 f0       	breq	.+24     	; 0xd2fe <_Z16checkHitEndstopsv+0x40>
    d2e6:	a0 ec       	ldi	r26, 0xC0	; 192
    d2e8:	b0 e0       	ldi	r27, 0x00	; 0
    d2ea:	c6 ec       	ldi	r28, 0xC6	; 198
    d2ec:	d0 e0       	ldi	r29, 0x00	; 0
    d2ee:	8c 91       	ld	r24, X
    d2f0:	85 ff       	sbrs	r24, 5
    d2f2:	fd cf       	rjmp	.-6      	; 0xd2ee <_Z16checkHitEndstopsv+0x30>
    d2f4:	98 83       	st	Y, r25
    d2f6:	31 96       	adiw	r30, 0x01	; 1
    d2f8:	94 91       	lpm	r25, Z
    d2fa:	91 11       	cpse	r25, r1
    d2fc:	f8 cf       	rjmp	.-16     	; 0xd2ee <_Z16checkHitEndstopsv+0x30>
    d2fe:	eb e6       	ldi	r30, 0x6B	; 107
    d300:	f8 e0       	ldi	r31, 0x08	; 8
    d302:	94 91       	lpm	r25, Z
    d304:	99 23       	and	r25, r25
    d306:	61 f0       	breq	.+24     	; 0xd320 <_Z16checkHitEndstopsv+0x62>
    d308:	a0 ec       	ldi	r26, 0xC0	; 192
    d30a:	b0 e0       	ldi	r27, 0x00	; 0
    d30c:	c6 ec       	ldi	r28, 0xC6	; 198
    d30e:	d0 e0       	ldi	r29, 0x00	; 0
    d310:	8c 91       	ld	r24, X
    d312:	85 ff       	sbrs	r24, 5
    d314:	fd cf       	rjmp	.-6      	; 0xd310 <_Z16checkHitEndstopsv+0x52>
    d316:	98 83       	st	Y, r25
    d318:	31 96       	adiw	r30, 0x01	; 1
    d31a:	94 91       	lpm	r25, Z
    d31c:	91 11       	cpse	r25, r1
    d31e:	f8 cf       	rjmp	.-16     	; 0xd310 <_Z16checkHitEndstopsv+0x52>
    d320:	80 91 d1 10 	lds	r24, 0x10D1
    d324:	88 23       	and	r24, r24
    d326:	f1 f0       	breq	.+60     	; 0xd364 <_Z16checkHitEndstopsv+0xa6>
    d328:	60 91 d2 10 	lds	r22, 0x10D2
    d32c:	70 91 d3 10 	lds	r23, 0x10D3
    d330:	80 91 d4 10 	lds	r24, 0x10D4
    d334:	90 91 d5 10 	lds	r25, 0x10D5
    d338:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    d33c:	20 91 76 0e 	lds	r18, 0x0E76
    d340:	30 91 77 0e 	lds	r19, 0x0E77
    d344:	40 91 78 0e 	lds	r20, 0x0E78
    d348:	50 91 79 0e 	lds	r21, 0x0E79
    d34c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    d350:	ab 01       	movw	r20, r22
    d352:	bc 01       	movw	r22, r24
    d354:	8a e7       	ldi	r24, 0x7A	; 122
    d356:	98 e0       	ldi	r25, 0x08	; 8
    d358:	0e 94 25 22 	call	0x444a	; 0x444a <_Z17serial_echopair_PPKcf>
    d35c:	8e e7       	ldi	r24, 0x7E	; 126
    d35e:	98 e0       	ldi	r25, 0x08	; 8
    d360:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
    d364:	80 91 d0 10 	lds	r24, 0x10D0
    d368:	88 23       	and	r24, r24
    d36a:	f1 f0       	breq	.+60     	; 0xd3a8 <_Z16checkHitEndstopsv+0xea>
    d36c:	60 91 d6 10 	lds	r22, 0x10D6
    d370:	70 91 d7 10 	lds	r23, 0x10D7
    d374:	80 91 d8 10 	lds	r24, 0x10D8
    d378:	90 91 d9 10 	lds	r25, 0x10D9
    d37c:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    d380:	20 91 7a 0e 	lds	r18, 0x0E7A
    d384:	30 91 7b 0e 	lds	r19, 0x0E7B
    d388:	40 91 7c 0e 	lds	r20, 0x0E7C
    d38c:	50 91 7d 0e 	lds	r21, 0x0E7D
    d390:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    d394:	ab 01       	movw	r20, r22
    d396:	bc 01       	movw	r22, r24
    d398:	8e e8       	ldi	r24, 0x8E	; 142
    d39a:	98 e0       	ldi	r25, 0x08	; 8
    d39c:	0e 94 25 22 	call	0x444a	; 0x444a <_Z17serial_echopair_PPKcf>
    d3a0:	82 e9       	ldi	r24, 0x92	; 146
    d3a2:	98 e0       	ldi	r25, 0x08	; 8
    d3a4:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
    d3a8:	80 91 cf 10 	lds	r24, 0x10CF
    d3ac:	88 23       	and	r24, r24
    d3ae:	f1 f0       	breq	.+60     	; 0xd3ec <_Z16checkHitEndstopsv+0x12e>
    d3b0:	60 91 da 10 	lds	r22, 0x10DA
    d3b4:	70 91 db 10 	lds	r23, 0x10DB
    d3b8:	80 91 dc 10 	lds	r24, 0x10DC
    d3bc:	90 91 dd 10 	lds	r25, 0x10DD
    d3c0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    d3c4:	20 91 7e 0e 	lds	r18, 0x0E7E
    d3c8:	30 91 7f 0e 	lds	r19, 0x0E7F
    d3cc:	40 91 80 0e 	lds	r20, 0x0E80
    d3d0:	50 91 81 0e 	lds	r21, 0x0E81
    d3d4:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    d3d8:	ab 01       	movw	r20, r22
    d3da:	bc 01       	movw	r22, r24
    d3dc:	82 ea       	ldi	r24, 0xA2	; 162
    d3de:	98 e0       	ldi	r25, 0x08	; 8
    d3e0:	0e 94 25 22 	call	0x444a	; 0x444a <_Z17serial_echopair_PPKcf>
    d3e4:	86 ea       	ldi	r24, 0xA6	; 166
    d3e6:	98 e0       	ldi	r25, 0x08	; 8
    d3e8:	0e 94 37 94 	call	0x1286e	; 0x1286e <_Z16lcd_setstatuspgmPKc>
    d3ec:	e0 ec       	ldi	r30, 0xC0	; 192
    d3ee:	f0 e0       	ldi	r31, 0x00	; 0
    d3f0:	80 81       	ld	r24, Z
    d3f2:	85 ff       	sbrs	r24, 5
    d3f4:	fd cf       	rjmp	.-6      	; 0xd3f0 <_Z16checkHitEndstopsv+0x132>
    d3f6:	8a e0       	ldi	r24, 0x0A	; 10
    d3f8:	80 93 c6 00 	sts	0x00C6, r24
    d3fc:	10 92 d1 10 	sts	0x10D1, r1
    d400:	10 92 d0 10 	sts	0x10D0, r1
    d404:	10 92 cf 10 	sts	0x10CF, r1
    d408:	df 91       	pop	r29
    d40a:	cf 91       	pop	r28
    d40c:	08 95       	ret

0000d40e <_Z23endstops_hit_on_purposev>:
    d40e:	10 92 d1 10 	sts	0x10D1, r1
    d412:	10 92 d0 10 	sts	0x10D0, r1
    d416:	10 92 cf 10 	sts	0x10CF, r1
    d41a:	08 95       	ret

0000d41c <_Z15enable_endstopsb>:
    d41c:	80 93 4e 02 	sts	0x024E, r24
    d420:	08 95       	ret

0000d422 <_Z10st_wake_upv>:
    d422:	ef e6       	ldi	r30, 0x6F	; 111
    d424:	f0 e0       	ldi	r31, 0x00	; 0
    d426:	80 81       	ld	r24, Z
    d428:	82 60       	ori	r24, 0x02	; 2
    d42a:	80 83       	st	Z, r24
    d42c:	08 95       	ret

0000d42e <__vector_17>:
}

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse.
// It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately.
ISR(TIMER1_COMPA_vect)
{
    d42e:	1f 92       	push	r1
    d430:	0f 92       	push	r0
    d432:	0f b6       	in	r0, 0x3f	; 63
    d434:	0f 92       	push	r0
    d436:	11 24       	eor	r1, r1
    d438:	0b b6       	in	r0, 0x3b	; 59
    d43a:	0f 92       	push	r0
    d43c:	2f 92       	push	r2
    d43e:	3f 92       	push	r3
    d440:	4f 92       	push	r4
    d442:	5f 92       	push	r5
    d444:	6f 92       	push	r6
    d446:	7f 92       	push	r7
    d448:	8f 92       	push	r8
    d44a:	9f 92       	push	r9
    d44c:	bf 92       	push	r11
    d44e:	cf 92       	push	r12
    d450:	df 92       	push	r13
    d452:	ef 92       	push	r14
    d454:	ff 92       	push	r15
    d456:	0f 93       	push	r16
    d458:	1f 93       	push	r17
    d45a:	2f 93       	push	r18
    d45c:	3f 93       	push	r19
    d45e:	4f 93       	push	r20
    d460:	5f 93       	push	r21
    d462:	6f 93       	push	r22
    d464:	7f 93       	push	r23
    d466:	8f 93       	push	r24
    d468:	9f 93       	push	r25
    d46a:	af 93       	push	r26
    d46c:	bf 93       	push	r27
    d46e:	cf 93       	push	r28
    d470:	df 93       	push	r29
    d472:	ef 93       	push	r30
    d474:	ff 93       	push	r31
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    d476:	e0 91 e2 10 	lds	r30, 0x10E2
    d47a:	f0 91 e3 10 	lds	r31, 0x10E3
    d47e:	30 97       	sbiw	r30, 0x00	; 0
    d480:	09 f0       	breq	.+2      	; 0xd484 <__vector_17+0x56>
    d482:	98 c1       	rjmp	.+816    	; 0xd7b4 <__vector_17+0x386>
}

// Gets the current block. Returns NULL if buffer empty
FORCE_INLINE block_t *plan_get_current_block() 
{
  if (block_buffer_head == block_buffer_tail) { 
    d484:	90 91 58 09 	lds	r25, 0x0958
    d488:	80 91 57 09 	lds	r24, 0x0957
    d48c:	98 17       	cp	r25, r24
    d48e:	09 f4       	brne	.+2      	; 0xd492 <__vector_17+0x64>
    d490:	84 c1       	rjmp	.+776    	; 0xd79a <__vector_17+0x36c>
    return(NULL); 
  }
  block_t *block = &block_buffer[block_buffer_tail];
    d492:	e0 91 57 09 	lds	r30, 0x0957
    d496:	2d e4       	ldi	r18, 0x4D	; 77
    d498:	e2 9f       	mul	r30, r18
    d49a:	f0 01       	movw	r30, r0
    d49c:	11 24       	eor	r1, r1
    d49e:	e7 5a       	subi	r30, 0xA7	; 167
    d4a0:	f6 4f       	sbci	r31, 0xF6	; 246
  block->busy = true;
    d4a2:	df 01       	movw	r26, r30
    d4a4:	a4 5b       	subi	r26, 0xB4	; 180
    d4a6:	bf 4f       	sbci	r27, 0xFF	; 255
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	8c 93       	st	X, r24
    // Anything in the buffer?
    current_block = plan_get_current_block();
    d4ac:	f0 93 e3 10 	sts	0x10E3, r31
    d4b0:	e0 93 e2 10 	sts	0x10E2, r30
    if (current_block != NULL) {
    d4b4:	30 97       	sbiw	r30, 0x00	; 0
    d4b6:	09 f4       	brne	.+2      	; 0xd4ba <__vector_17+0x8c>
    d4b8:	70 c1       	rjmp	.+736    	; 0xd79a <__vector_17+0x36c>
      current_block->busy = true;
    d4ba:	df 01       	movw	r26, r30
    d4bc:	a4 5b       	subi	r26, 0xB4	; 180
    d4be:	bf 4f       	sbci	r27, 0xFF	; 255
    d4c0:	8c 93       	st	X, r24
    final_advance = current_block->final_advance;
    // Do E steps + advance steps
    e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);
    old_advance = advance >>8;
  #endif
  deceleration_time = 0;
    d4c2:	10 92 e4 10 	sts	0x10E4, r1
    d4c6:	10 92 e5 10 	sts	0x10E5, r1
    d4ca:	10 92 e6 10 	sts	0x10E6, r1
    d4ce:	10 92 e7 10 	sts	0x10E7, r1
    d4d2:	80 ad       	ldd	r24, Z+56	; 0x38
    d4d4:	91 ad       	ldd	r25, Z+57	; 0x39
    d4d6:	81 34       	cpi	r24, 0x41	; 65
    d4d8:	ac e9       	ldi	r26, 0x9C	; 156
    d4da:	9a 07       	cpc	r25, r26
    d4dc:	10 f0       	brcs	.+4      	; 0xd4e2 <__vector_17+0xb4>
    d4de:	80 e4       	ldi	r24, 0x40	; 64
    d4e0:	9c e9       	ldi	r25, 0x9C	; 156

FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {
  unsigned short timer;
  if(step_rate > MAX_STEP_FREQUENCY) step_rate = MAX_STEP_FREQUENCY;

  if(step_rate > 20000) { // If steprate > 20kHz >> step 4 times
    d4e2:	81 32       	cpi	r24, 0x21	; 33
    d4e4:	be e4       	ldi	r27, 0x4E	; 78
    d4e6:	9b 07       	cpc	r25, r27
    d4e8:	40 f0       	brcs	.+16     	; 0xd4fa <__vector_17+0xcc>
    step_rate = (step_rate >> 2)&0x3fff;
    d4ea:	96 95       	lsr	r25
    d4ec:	87 95       	ror	r24
    d4ee:	96 95       	lsr	r25
    d4f0:	87 95       	ror	r24
    step_loops = 4;
    d4f2:	24 e0       	ldi	r18, 0x04	; 4
    d4f4:	20 93 e8 10 	sts	0x10E8, r18
    d4f8:	0d c0       	rjmp	.+26     	; 0xd514 <__vector_17+0xe6>
  }
  else if(step_rate > 10000) { // If steprate > 10kHz >> step 2 times
    d4fa:	81 31       	cpi	r24, 0x11	; 17
    d4fc:	27 e2       	ldi	r18, 0x27	; 39
    d4fe:	92 07       	cpc	r25, r18
    d500:	30 f0       	brcs	.+12     	; 0xd50e <__vector_17+0xe0>
    step_rate = (step_rate >> 1)&0x7fff;
    d502:	96 95       	lsr	r25
    d504:	87 95       	ror	r24
    step_loops = 2;
    d506:	22 e0       	ldi	r18, 0x02	; 2
    d508:	20 93 e8 10 	sts	0x10E8, r18
    d50c:	03 c0       	rjmp	.+6      	; 0xd514 <__vector_17+0xe6>
  }
  else {
    step_loops = 1;
    d50e:	21 e0       	ldi	r18, 0x01	; 1
    d510:	20 93 e8 10 	sts	0x10E8, r18
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
    d514:	80 32       	cpi	r24, 0x20	; 32
    d516:	91 05       	cpc	r25, r1
    d518:	18 f1       	brcs	.+70     	; 0xd560 <__vector_17+0x132>
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    d51a:	bc 01       	movw	r22, r24
    d51c:	60 52       	subi	r22, 0x20	; 32
    d51e:	71 09       	sbc	r23, r1
  if(step_rate >= (8*256)){ // higher step rate
    d520:	61 15       	cp	r22, r1
    d522:	88 e0       	ldi	r24, 0x08	; 8
    d524:	78 07       	cpc	r23, r24
    d526:	f0 f0       	brcs	.+60     	; 0xd564 <__vector_17+0x136>
      SERIAL_PROTOCOL(   digitalRead(E0_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E0_MS2_PIN));
      SERIAL_PROTOCOLPGM("E1: ");
      SERIAL_PROTOCOL(   digitalRead(E1_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E1_MS2_PIN));
}
    d528:	87 2f       	mov	r24, r23
    d52a:	99 27       	eor	r25, r25
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
  if(step_rate >= (8*256)){ // higher step rate
    unsigned short table_address = (unsigned short)&speed_lookuptable_fast[(unsigned char)(step_rate>>8)][0];
    d52c:	88 0f       	add	r24, r24
    d52e:	99 1f       	adc	r25, r25
    d530:	88 0f       	add	r24, r24
    d532:	99 1f       	adc	r25, r25
    d534:	8a 54       	subi	r24, 0x4A	; 74
    d536:	97 4f       	sbci	r25, 0xF7	; 247
    unsigned char tmp_step_rate = (step_rate & 0x00ff);
    unsigned short gain = (unsigned short)pgm_read_word_near(table_address+2);
    d538:	fc 01       	movw	r30, r24
    d53a:	32 96       	adiw	r30, 0x02	; 2
    d53c:	45 91       	lpm	r20, Z+
    d53e:	54 91       	lpm	r21, Z
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    d540:	aa 27       	eor	r26, r26
    d542:	65 9f       	mul	r22, r21
    d544:	90 01       	movw	r18, r0
    d546:	64 9f       	mul	r22, r20
    d548:	21 0d       	add	r18, r1
    d54a:	3a 1f       	adc	r19, r26
    d54c:	06 94       	lsr	r0
    d54e:	2a 1f       	adc	r18, r26
    d550:	3a 1f       	adc	r19, r26
    d552:	11 24       	eor	r1, r1
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
    d554:	fc 01       	movw	r30, r24
    d556:	85 91       	lpm	r24, Z+
    d558:	94 91       	lpm	r25, Z
    d55a:	82 1b       	sub	r24, r18
    d55c:	93 0b       	sbc	r25, r19
    d55e:	23 c0       	rjmp	.+70     	; 0xd5a6 <__vector_17+0x178>
  else {
    step_loops = 1;
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    d560:	60 e0       	ldi	r22, 0x00	; 0
    d562:	70 e0       	ldi	r23, 0x00	; 0
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
  }
  else { // lower step rates
    unsigned short table_address = (unsigned short)&speed_lookuptable_slow[0][0];
    table_address += ((step_rate)>>1) & 0xfffc;
    d564:	9b 01       	movw	r18, r22
    d566:	36 95       	lsr	r19
    d568:	27 95       	ror	r18
    d56a:	2c 7f       	andi	r18, 0xFC	; 252
    d56c:	2a 54       	subi	r18, 0x4A	; 74
    d56e:	33 4f       	sbci	r19, 0xF3	; 243
    timer = (unsigned short)pgm_read_word_near(table_address);
    d570:	f9 01       	movw	r30, r18
    d572:	85 91       	lpm	r24, Z+
    d574:	94 91       	lpm	r25, Z
    timer -= (((unsigned short)pgm_read_word_near(table_address+2) * (unsigned char)(step_rate & 0x0007))>>3);
    d576:	2e 5f       	subi	r18, 0xFE	; 254
    d578:	3f 4f       	sbci	r19, 0xFF	; 255
    d57a:	f9 01       	movw	r30, r18
    d57c:	25 91       	lpm	r18, Z+
    d57e:	34 91       	lpm	r19, Z
    d580:	fb 01       	movw	r30, r22
    d582:	e7 70       	andi	r30, 0x07	; 7
    d584:	ff 27       	eor	r31, r31
    d586:	e2 9f       	mul	r30, r18
    d588:	a0 01       	movw	r20, r0
    d58a:	e3 9f       	mul	r30, r19
    d58c:	50 0d       	add	r21, r0
    d58e:	f2 9f       	mul	r31, r18
    d590:	50 0d       	add	r21, r0
    d592:	11 24       	eor	r1, r1
    d594:	9a 01       	movw	r18, r20
    d596:	36 95       	lsr	r19
    d598:	27 95       	ror	r18
    d59a:	36 95       	lsr	r19
    d59c:	27 95       	ror	r18
    d59e:	36 95       	lsr	r19
    d5a0:	27 95       	ror	r18
    d5a2:	82 1b       	sub	r24, r18
    d5a4:	93 0b       	sbc	r25, r19
  }
  if(timer < 100) { timer = 100; MYSERIAL.print(MSG_STEPPER_TOO_HIGH); MYSERIAL.println(step_rate); }//(20kHz this should never happen)
    d5a6:	84 36       	cpi	r24, 0x64	; 100
    d5a8:	91 05       	cpc	r25, r1
    d5aa:	b0 f4       	brcc	.+44     	; 0xd5d8 <__vector_17+0x1aa>
    d5ac:	af e2       	ldi	r26, 0x2F	; 47
    d5ae:	b4 e0       	ldi	r27, 0x04	; 4
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    d5b0:	93 e5       	ldi	r25, 0x53	; 83
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    d5b2:	e0 ec       	ldi	r30, 0xC0	; 192
    d5b4:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    d5b6:	c6 ec       	ldi	r28, 0xC6	; 198
    d5b8:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    d5ba:	80 81       	ld	r24, Z
    d5bc:	85 ff       	sbrs	r24, 5
    d5be:	fd cf       	rjmp	.-6      	; 0xd5ba <__vector_17+0x18c>
        ;

      M_UDRx = c;
    d5c0:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    d5c2:	9d 91       	ld	r25, X+
    d5c4:	91 11       	cpse	r25, r1
    d5c6:	f9 cf       	rjmp	.-14     	; 0xd5ba <__vector_17+0x18c>
    d5c8:	4a e0       	ldi	r20, 0x0A	; 10
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	82 ed       	ldi	r24, 0xD2	; 210
    d5ce:	94 e0       	ldi	r25, 0x04	; 4
    d5d0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_ZN12MarlinSerial7printlnEji>
    d5d4:	84 e6       	ldi	r24, 0x64	; 100
    d5d6:	90 e0       	ldi	r25, 0x00	; 0
    e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);
    old_advance = advance >>8;
  #endif
  deceleration_time = 0;
  // step_rate to timer interval
  OCR1A_nominal = calc_timer(current_block->nominal_rate);
    d5d8:	90 93 ea 10 	sts	0x10EA, r25
    d5dc:	80 93 e9 10 	sts	0x10E9, r24
  // make a note of the number of step loops required at nominal speed
  step_loops_nominal = step_loops;
    d5e0:	80 91 e8 10 	lds	r24, 0x10E8
    d5e4:	80 93 eb 10 	sts	0x10EB, r24
    d5e8:	10 92 ec 10 	sts	0x10EC, r1
  acc_step_rate = current_block->initial_rate;
    d5ec:	e0 91 e2 10 	lds	r30, 0x10E2
    d5f0:	f0 91 e3 10 	lds	r31, 0x10E3
    d5f4:	34 ad       	ldd	r19, Z+60	; 0x3c
    d5f6:	25 ad       	ldd	r18, Z+61	; 0x3d
    d5f8:	30 93 ed 10 	sts	0x10ED, r19
    d5fc:	20 93 ee 10 	sts	0x10EE, r18
    d600:	83 2f       	mov	r24, r19
    d602:	92 2f       	mov	r25, r18
    d604:	81 34       	cpi	r24, 0x41	; 65
    d606:	ac e9       	ldi	r26, 0x9C	; 156
    d608:	9a 07       	cpc	r25, r26
    d60a:	10 f0       	brcs	.+4      	; 0xd610 <__vector_17+0x1e2>
    d60c:	80 e4       	ldi	r24, 0x40	; 64
    d60e:	9c e9       	ldi	r25, 0x9C	; 156

FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {
  unsigned short timer;
  if(step_rate > MAX_STEP_FREQUENCY) step_rate = MAX_STEP_FREQUENCY;

  if(step_rate > 20000) { // If steprate > 20kHz >> step 4 times
    d610:	81 32       	cpi	r24, 0x21	; 33
    d612:	be e4       	ldi	r27, 0x4E	; 78
    d614:	9b 07       	cpc	r25, r27
    d616:	40 f0       	brcs	.+16     	; 0xd628 <__vector_17+0x1fa>
    step_rate = (step_rate >> 2)&0x3fff;
    d618:	96 95       	lsr	r25
    d61a:	87 95       	ror	r24
    d61c:	96 95       	lsr	r25
    d61e:	87 95       	ror	r24
    step_loops = 4;
    d620:	24 e0       	ldi	r18, 0x04	; 4
    d622:	20 93 e8 10 	sts	0x10E8, r18
    d626:	0d c0       	rjmp	.+26     	; 0xd642 <__vector_17+0x214>
  }
  else if(step_rate > 10000) { // If steprate > 10kHz >> step 2 times
    d628:	81 31       	cpi	r24, 0x11	; 17
    d62a:	27 e2       	ldi	r18, 0x27	; 39
    d62c:	92 07       	cpc	r25, r18
    d62e:	30 f0       	brcs	.+12     	; 0xd63c <__vector_17+0x20e>
    step_rate = (step_rate >> 1)&0x7fff;
    d630:	96 95       	lsr	r25
    d632:	87 95       	ror	r24
    step_loops = 2;
    d634:	22 e0       	ldi	r18, 0x02	; 2
    d636:	20 93 e8 10 	sts	0x10E8, r18
    d63a:	03 c0       	rjmp	.+6      	; 0xd642 <__vector_17+0x214>
  }
  else {
    step_loops = 1;
    d63c:	21 e0       	ldi	r18, 0x01	; 1
    d63e:	20 93 e8 10 	sts	0x10E8, r18
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
    d642:	80 32       	cpi	r24, 0x20	; 32
    d644:	91 05       	cpc	r25, r1
    d646:	18 f1       	brcs	.+70     	; 0xd68e <__vector_17+0x260>
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    d648:	bc 01       	movw	r22, r24
    d64a:	60 52       	subi	r22, 0x20	; 32
    d64c:	71 09       	sbc	r23, r1
  if(step_rate >= (8*256)){ // higher step rate
    d64e:	61 15       	cp	r22, r1
    d650:	88 e0       	ldi	r24, 0x08	; 8
    d652:	78 07       	cpc	r23, r24
    d654:	f0 f0       	brcs	.+60     	; 0xd692 <__vector_17+0x264>
      SERIAL_PROTOCOL(   digitalRead(E0_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E0_MS2_PIN));
      SERIAL_PROTOCOLPGM("E1: ");
      SERIAL_PROTOCOL(   digitalRead(E1_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E1_MS2_PIN));
}
    d656:	87 2f       	mov	r24, r23
    d658:	99 27       	eor	r25, r25
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
  if(step_rate >= (8*256)){ // higher step rate
    unsigned short table_address = (unsigned short)&speed_lookuptable_fast[(unsigned char)(step_rate>>8)][0];
    d65a:	88 0f       	add	r24, r24
    d65c:	99 1f       	adc	r25, r25
    d65e:	88 0f       	add	r24, r24
    d660:	99 1f       	adc	r25, r25
    d662:	8a 54       	subi	r24, 0x4A	; 74
    d664:	97 4f       	sbci	r25, 0xF7	; 247
    unsigned char tmp_step_rate = (step_rate & 0x00ff);
    unsigned short gain = (unsigned short)pgm_read_word_near(table_address+2);
    d666:	fc 01       	movw	r30, r24
    d668:	32 96       	adiw	r30, 0x02	; 2
    d66a:	25 91       	lpm	r18, Z+
    d66c:	34 91       	lpm	r19, Z
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    d66e:	aa 27       	eor	r26, r26
    d670:	63 9f       	mul	r22, r19
    d672:	a0 01       	movw	r20, r0
    d674:	62 9f       	mul	r22, r18
    d676:	41 0d       	add	r20, r1
    d678:	5a 1f       	adc	r21, r26
    d67a:	06 94       	lsr	r0
    d67c:	4a 1f       	adc	r20, r26
    d67e:	5a 1f       	adc	r21, r26
    d680:	11 24       	eor	r1, r1
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
    d682:	fc 01       	movw	r30, r24
    d684:	25 91       	lpm	r18, Z+
    d686:	34 91       	lpm	r19, Z
    d688:	24 1b       	sub	r18, r20
    d68a:	35 0b       	sbc	r19, r21
    d68c:	22 c0       	rjmp	.+68     	; 0xd6d2 <__vector_17+0x2a4>
  else {
    step_loops = 1;
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    d68e:	60 e0       	ldi	r22, 0x00	; 0
    d690:	70 e0       	ldi	r23, 0x00	; 0
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
  }
  else { // lower step rates
    unsigned short table_address = (unsigned short)&speed_lookuptable_slow[0][0];
    table_address += ((step_rate)>>1) & 0xfffc;
    d692:	cb 01       	movw	r24, r22
    d694:	96 95       	lsr	r25
    d696:	87 95       	ror	r24
    d698:	8c 7f       	andi	r24, 0xFC	; 252
    d69a:	8a 54       	subi	r24, 0x4A	; 74
    d69c:	93 4f       	sbci	r25, 0xF3	; 243
    timer = (unsigned short)pgm_read_word_near(table_address);
    d69e:	fc 01       	movw	r30, r24
    d6a0:	25 91       	lpm	r18, Z+
    d6a2:	34 91       	lpm	r19, Z
    timer -= (((unsigned short)pgm_read_word_near(table_address+2) * (unsigned char)(step_rate & 0x0007))>>3);
    d6a4:	02 96       	adiw	r24, 0x02	; 2
    d6a6:	fc 01       	movw	r30, r24
    d6a8:	85 91       	lpm	r24, Z+
    d6aa:	94 91       	lpm	r25, Z
    d6ac:	fb 01       	movw	r30, r22
    d6ae:	e7 70       	andi	r30, 0x07	; 7
    d6b0:	ff 27       	eor	r31, r31
    d6b2:	e8 9f       	mul	r30, r24
    d6b4:	a0 01       	movw	r20, r0
    d6b6:	e9 9f       	mul	r30, r25
    d6b8:	50 0d       	add	r21, r0
    d6ba:	f8 9f       	mul	r31, r24
    d6bc:	50 0d       	add	r21, r0
    d6be:	11 24       	eor	r1, r1
    d6c0:	ca 01       	movw	r24, r20
    d6c2:	96 95       	lsr	r25
    d6c4:	87 95       	ror	r24
    d6c6:	96 95       	lsr	r25
    d6c8:	87 95       	ror	r24
    d6ca:	96 95       	lsr	r25
    d6cc:	87 95       	ror	r24
    d6ce:	28 1b       	sub	r18, r24
    d6d0:	39 0b       	sbc	r19, r25
  }
  if(timer < 100) { timer = 100; MYSERIAL.print(MSG_STEPPER_TOO_HIGH); MYSERIAL.println(step_rate); }//(20kHz this should never happen)
    d6d2:	24 36       	cpi	r18, 0x64	; 100
    d6d4:	31 05       	cpc	r19, r1
    d6d6:	b0 f4       	brcc	.+44     	; 0xd704 <__vector_17+0x2d6>
    d6d8:	af e2       	ldi	r26, 0x2F	; 47
    d6da:	b4 e0       	ldi	r27, 0x04	; 4
    d6dc:	93 e5       	ldi	r25, 0x53	; 83
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    d6de:	e0 ec       	ldi	r30, 0xC0	; 192
    d6e0:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    d6e2:	c6 ec       	ldi	r28, 0xC6	; 198
    d6e4:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    d6e6:	80 81       	ld	r24, Z
    d6e8:	85 ff       	sbrs	r24, 5
    d6ea:	fd cf       	rjmp	.-6      	; 0xd6e6 <__vector_17+0x2b8>
        ;

      M_UDRx = c;
    d6ec:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    d6ee:	9d 91       	ld	r25, X+
    d6f0:	91 11       	cpse	r25, r1
    d6f2:	f9 cf       	rjmp	.-14     	; 0xd6e6 <__vector_17+0x2b8>
    d6f4:	4a e0       	ldi	r20, 0x0A	; 10
    d6f6:	50 e0       	ldi	r21, 0x00	; 0
    d6f8:	82 ed       	ldi	r24, 0xD2	; 210
    d6fa:	94 e0       	ldi	r25, 0x04	; 4
    d6fc:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_ZN12MarlinSerial7printlnEji>
    d700:	24 e6       	ldi	r18, 0x64	; 100
    d702:	30 e0       	ldi	r19, 0x00	; 0
  // step_rate to timer interval
  OCR1A_nominal = calc_timer(current_block->nominal_rate);
  // make a note of the number of step loops required at nominal speed
  step_loops_nominal = step_loops;
  acc_step_rate = current_block->initial_rate;
  acceleration_time = calc_timer(acc_step_rate);
    d704:	c9 01       	movw	r24, r18
    d706:	a0 e0       	ldi	r26, 0x00	; 0
    d708:	b0 e0       	ldi	r27, 0x00	; 0
    d70a:	80 93 ef 10 	sts	0x10EF, r24
    d70e:	90 93 f0 10 	sts	0x10F0, r25
    d712:	a0 93 f1 10 	sts	0x10F1, r26
    d716:	b0 93 f2 10 	sts	0x10F2, r27
  OCR1A = acceleration_time;
    d71a:	30 93 89 00 	sts	0x0089, r19
    d71e:	20 93 88 00 	sts	0x0088, r18
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      current_block->busy = true;
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    d722:	e0 91 e2 10 	lds	r30, 0x10E2
    d726:	f0 91 e3 10 	lds	r31, 0x10E3
    d72a:	80 89       	ldd	r24, Z+16	; 0x10
    d72c:	91 89       	ldd	r25, Z+17	; 0x11
    d72e:	a2 89       	ldd	r26, Z+18	; 0x12
    d730:	b3 89       	ldd	r27, Z+19	; 0x13
    d732:	b6 95       	lsr	r27
    d734:	a7 95       	ror	r26
    d736:	97 95       	ror	r25
    d738:	87 95       	ror	r24
    d73a:	b0 95       	com	r27
    d73c:	a0 95       	com	r26
    d73e:	90 95       	com	r25
    d740:	81 95       	neg	r24
    d742:	9f 4f       	sbci	r25, 0xFF	; 255
    d744:	af 4f       	sbci	r26, 0xFF	; 255
    d746:	bf 4f       	sbci	r27, 0xFF	; 255
    d748:	80 93 f3 10 	sts	0x10F3, r24
    d74c:	90 93 f4 10 	sts	0x10F4, r25
    d750:	a0 93 f5 10 	sts	0x10F5, r26
    d754:	b0 93 f6 10 	sts	0x10F6, r27
      counter_y = counter_x;
    d758:	80 93 f7 10 	sts	0x10F7, r24
    d75c:	90 93 f8 10 	sts	0x10F8, r25
    d760:	a0 93 f9 10 	sts	0x10F9, r26
    d764:	b0 93 fa 10 	sts	0x10FA, r27
      counter_z = counter_x;
    d768:	80 93 fb 10 	sts	0x10FB, r24
    d76c:	90 93 fc 10 	sts	0x10FC, r25
    d770:	a0 93 fd 10 	sts	0x10FD, r26
    d774:	b0 93 fe 10 	sts	0x10FE, r27
      counter_e = counter_x;
    d778:	80 93 ff 10 	sts	0x10FF, r24
    d77c:	90 93 00 11 	sts	0x1100, r25
    d780:	a0 93 01 11 	sts	0x1101, r26
    d784:	b0 93 02 11 	sts	0x1102, r27
      step_events_completed = 0;
    d788:	10 92 de 10 	sts	0x10DE, r1
    d78c:	10 92 df 10 	sts	0x10DF, r1
    d790:	10 92 e0 10 	sts	0x10E0, r1
    d794:	10 92 e1 10 	sts	0x10E1, r1
    d798:	06 c0       	rjmp	.+12     	; 0xd7a6 <__vector_17+0x378>
//      #ifdef ADVANCE
//      e_steps[current_block->active_extruder] = 0;
//      #endif
    }
    else {
        OCR1A=2000; // 1kHz.
    d79a:	80 ed       	ldi	r24, 0xD0	; 208
    d79c:	97 e0       	ldi	r25, 0x07	; 7
    d79e:	90 93 89 00 	sts	0x0089, r25
    d7a2:	80 93 88 00 	sts	0x0088, r24
    }
  }

  if (current_block != NULL) {
    d7a6:	e0 91 e2 10 	lds	r30, 0x10E2
    d7aa:	f0 91 e3 10 	lds	r31, 0x10E3
    d7ae:	30 97       	sbiw	r30, 0x00	; 0
    d7b0:	09 f4       	brne	.+2      	; 0xd7b4 <__vector_17+0x386>
    d7b2:	98 c5       	rjmp	.+2864   	; 0xe2e4 <__vector_17+0xeb6>
    // Set directions TO DO This should be done once during init of trapezoid. Endstops -> interrupt
    out_bits = current_block->direction_bits;
    d7b4:	80 a1       	ldd	r24, Z+32	; 0x20
    d7b6:	80 93 03 11 	sts	0x1103, r24


    // Set the direction bits (X_AXIS=A_AXIS and Y_AXIS=B_AXIS for COREXY)
    if((out_bits & (1<<X_AXIS))!=0){
    d7ba:	80 ff       	sbrs	r24, 0
    d7bc:	05 c0       	rjmp	.+10     	; 0xd7c8 <__vector_17+0x39a>
            WRITE(X2_DIR_PIN, INVERT_X_DIR);
          else
            WRITE(X_DIR_PIN, INVERT_X_DIR);
        }
      #else
        WRITE(X_DIR_PIN, INVERT_X_DIR);
    d7be:	11 9a       	sbi	0x02, 1	; 2
      #endif        
      count_direction[X_AXIS]=-1;
    d7c0:	8f ef       	ldi	r24, 0xFF	; 255
    d7c2:	80 93 4a 02 	sts	0x024A, r24
    d7c6:	04 c0       	rjmp	.+8      	; 0xd7d0 <__vector_17+0x3a2>
            WRITE(X2_DIR_PIN, !INVERT_X_DIR);
          else
            WRITE(X_DIR_PIN, !INVERT_X_DIR);
        }
      #else
        WRITE(X_DIR_PIN, !INVERT_X_DIR);
    d7c8:	11 98       	cbi	0x02, 1	; 2
      #endif        
      count_direction[X_AXIS]=1;
    d7ca:	81 e0       	ldi	r24, 0x01	; 1
    d7cc:	80 93 4a 02 	sts	0x024A, r24
    }
    if((out_bits & (1<<Y_AXIS))!=0){
    d7d0:	80 91 03 11 	lds	r24, 0x1103
    d7d4:	81 ff       	sbrs	r24, 1
    d7d6:	05 c0       	rjmp	.+10     	; 0xd7e2 <__vector_17+0x3b4>
      WRITE(Y_DIR_PIN, INVERT_Y_DIR);
    d7d8:	44 98       	cbi	0x08, 4	; 8
      count_direction[Y_AXIS]=-1;
    d7da:	8f ef       	ldi	r24, 0xFF	; 255
    d7dc:	80 93 4b 02 	sts	0x024B, r24
    d7e0:	04 c0       	rjmp	.+8      	; 0xd7ea <__vector_17+0x3bc>
    }
    else{
      WRITE(Y_DIR_PIN, !INVERT_Y_DIR);
    d7e2:	44 9a       	sbi	0x08, 4	; 8
      count_direction[Y_AXIS]=1;
    d7e4:	81 e0       	ldi	r24, 0x01	; 1
    d7e6:	80 93 4b 02 	sts	0x024B, r24
    }

    // Set direction en check limit switches
    #ifndef COREXY
    if ((out_bits & (1<<X_AXIS)) != 0) {   // stepping along -X axis
    d7ea:	20 91 03 11 	lds	r18, 0x1103
    d7ee:	20 ff       	sbrs	r18, 0
    d7f0:	3e c0       	rjmp	.+124    	; 0xd86e <__vector_17+0x440>
    #else
    if ((((out_bits & (1<<X_AXIS)) != 0)&&(out_bits & (1<<Y_AXIS)) != 0)) {   //-X occurs for -A and -B
    #endif
      CHECK_ENDSTOPS
    d7f2:	80 91 4e 02 	lds	r24, 0x024E
    d7f6:	88 23       	and	r24, r24
    d7f8:	09 f4       	brne	.+2      	; 0xd7fc <__vector_17+0x3ce>
    d7fa:	76 c0       	rjmp	.+236    	; 0xd8e8 <__vector_17+0x4ba>
        if ((current_block->active_extruder == 0 && X_HOME_DIR == -1) 
            || (current_block->active_extruder != 0 && X2_HOME_DIR == -1))
        #endif          
        {
          #if defined(X_MIN_PIN) && X_MIN_PIN > -1
            bool x_min_endstop=(READ(X_MIN_PIN) != X_MIN_ENDSTOP_INVERTING);
    d7fc:	80 b1       	in	r24, 0x00	; 0
    d7fe:	80 95       	com	r24
            if(x_min_endstop && old_x_min_endstop && (current_block->steps_x > 0)) {
    d800:	38 2f       	mov	r19, r24
    d802:	31 70       	andi	r19, 0x01	; 1
    d804:	80 ff       	sbrs	r24, 0
    d806:	30 c0       	rjmp	.+96     	; 0xd868 <__vector_17+0x43a>
    d808:	80 91 04 11 	lds	r24, 0x1104
    d80c:	88 23       	and	r24, r24
    d80e:	61 f1       	breq	.+88     	; 0xd868 <__vector_17+0x43a>
    d810:	e0 91 e2 10 	lds	r30, 0x10E2
    d814:	f0 91 e3 10 	lds	r31, 0x10E3
    d818:	80 81       	ld	r24, Z
    d81a:	91 81       	ldd	r25, Z+1	; 0x01
    d81c:	a2 81       	ldd	r26, Z+2	; 0x02
    d81e:	b3 81       	ldd	r27, Z+3	; 0x03
    d820:	18 16       	cp	r1, r24
    d822:	19 06       	cpc	r1, r25
    d824:	1a 06       	cpc	r1, r26
    d826:	1b 06       	cpc	r1, r27
    d828:	fc f4       	brge	.+62     	; 0xd868 <__vector_17+0x43a>
              endstops_trigsteps[X_AXIS] = count_position[X_AXIS];
    d82a:	80 91 bf 10 	lds	r24, 0x10BF
    d82e:	90 91 c0 10 	lds	r25, 0x10C0
    d832:	a0 91 c1 10 	lds	r26, 0x10C1
    d836:	b0 91 c2 10 	lds	r27, 0x10C2
    d83a:	80 93 d2 10 	sts	0x10D2, r24
    d83e:	90 93 d3 10 	sts	0x10D3, r25
    d842:	a0 93 d4 10 	sts	0x10D4, r26
    d846:	b0 93 d5 10 	sts	0x10D5, r27
              endstop_x_hit=true;
    d84a:	81 e0       	ldi	r24, 0x01	; 1
    d84c:	80 93 d1 10 	sts	0x10D1, r24
              step_events_completed = current_block->step_event_count;
    d850:	80 89       	ldd	r24, Z+16	; 0x10
    d852:	91 89       	ldd	r25, Z+17	; 0x11
    d854:	a2 89       	ldd	r26, Z+18	; 0x12
    d856:	b3 89       	ldd	r27, Z+19	; 0x13
    d858:	80 93 de 10 	sts	0x10DE, r24
    d85c:	90 93 df 10 	sts	0x10DF, r25
    d860:	a0 93 e0 10 	sts	0x10E0, r26
    d864:	b0 93 e1 10 	sts	0x10E1, r27
            }
            old_x_min_endstop = x_min_endstop;
    d868:	30 93 04 11 	sts	0x1104, r19
    d86c:	3d c0       	rjmp	.+122    	; 0xd8e8 <__vector_17+0x4ba>
          #endif
        }
      }
    }
    else { // +direction
      CHECK_ENDSTOPS
    d86e:	80 91 4e 02 	lds	r24, 0x024E
    d872:	88 23       	and	r24, r24
    d874:	c9 f1       	breq	.+114    	; 0xd8e8 <__vector_17+0x4ba>
        if ((current_block->active_extruder == 0 && X_HOME_DIR == 1) 
            || (current_block->active_extruder != 0 && X2_HOME_DIR == 1))
        #endif          
        {
          #if defined(X_MAX_PIN) && X_MAX_PIN > -1
            bool x_max_endstop=(READ(X_MAX_PIN) != X_MAX_ENDSTOP_INVERTING);
    d876:	30 b1       	in	r19, 0x00	; 0
    d878:	32 fb       	bst	r19, 2
    d87a:	33 27       	eor	r19, r19
    d87c:	30 f9       	bld	r19, 0
    d87e:	81 e0       	ldi	r24, 0x01	; 1
    d880:	38 27       	eor	r19, r24
            if(x_max_endstop && old_x_max_endstop && (current_block->steps_x > 0)){
    d882:	81 f1       	breq	.+96     	; 0xd8e4 <__vector_17+0x4b6>
    d884:	80 91 05 11 	lds	r24, 0x1105
    d888:	88 23       	and	r24, r24
    d88a:	61 f1       	breq	.+88     	; 0xd8e4 <__vector_17+0x4b6>
    d88c:	e0 91 e2 10 	lds	r30, 0x10E2
    d890:	f0 91 e3 10 	lds	r31, 0x10E3
    d894:	80 81       	ld	r24, Z
    d896:	91 81       	ldd	r25, Z+1	; 0x01
    d898:	a2 81       	ldd	r26, Z+2	; 0x02
    d89a:	b3 81       	ldd	r27, Z+3	; 0x03
    d89c:	18 16       	cp	r1, r24
    d89e:	19 06       	cpc	r1, r25
    d8a0:	1a 06       	cpc	r1, r26
    d8a2:	1b 06       	cpc	r1, r27
    d8a4:	fc f4       	brge	.+62     	; 0xd8e4 <__vector_17+0x4b6>
              endstops_trigsteps[X_AXIS] = count_position[X_AXIS];
    d8a6:	80 91 bf 10 	lds	r24, 0x10BF
    d8aa:	90 91 c0 10 	lds	r25, 0x10C0
    d8ae:	a0 91 c1 10 	lds	r26, 0x10C1
    d8b2:	b0 91 c2 10 	lds	r27, 0x10C2
    d8b6:	80 93 d2 10 	sts	0x10D2, r24
    d8ba:	90 93 d3 10 	sts	0x10D3, r25
    d8be:	a0 93 d4 10 	sts	0x10D4, r26
    d8c2:	b0 93 d5 10 	sts	0x10D5, r27
              endstop_x_hit=true;
    d8c6:	81 e0       	ldi	r24, 0x01	; 1
    d8c8:	80 93 d1 10 	sts	0x10D1, r24
              step_events_completed = current_block->step_event_count;
    d8cc:	80 89       	ldd	r24, Z+16	; 0x10
    d8ce:	91 89       	ldd	r25, Z+17	; 0x11
    d8d0:	a2 89       	ldd	r26, Z+18	; 0x12
    d8d2:	b3 89       	ldd	r27, Z+19	; 0x13
    d8d4:	80 93 de 10 	sts	0x10DE, r24
    d8d8:	90 93 df 10 	sts	0x10DF, r25
    d8dc:	a0 93 e0 10 	sts	0x10E0, r26
    d8e0:	b0 93 e1 10 	sts	0x10E1, r27
            }
            old_x_max_endstop = x_max_endstop;
    d8e4:	30 93 05 11 	sts	0x1105, r19
        }
      }
    }

    #ifndef COREXY
    if ((out_bits & (1<<Y_AXIS)) != 0) {   // -direction
    d8e8:	21 ff       	sbrs	r18, 1
    d8ea:	3e c0       	rjmp	.+124    	; 0xd968 <__vector_17+0x53a>
    #else
    if ((((out_bits & (1<<X_AXIS)) != 0)&&(out_bits & (1<<Y_AXIS)) == 0)) {   // -Y occurs for -A and +B
    #endif
      CHECK_ENDSTOPS
    d8ec:	80 91 4e 02 	lds	r24, 0x024E
    d8f0:	88 23       	and	r24, r24
    d8f2:	09 f4       	brne	.+2      	; 0xd8f6 <__vector_17+0x4c8>
    d8f4:	76 c0       	rjmp	.+236    	; 0xd9e2 <__vector_17+0x5b4>
      {
        #if defined(Y_MIN_PIN) && Y_MIN_PIN > -1
          bool y_min_endstop=(READ(Y_MIN_PIN) != Y_MIN_ENDSTOP_INVERTING);
    d8f6:	30 b1       	in	r19, 0x00	; 0
    d8f8:	32 95       	swap	r19
    d8fa:	31 70       	andi	r19, 0x01	; 1
    d8fc:	81 e0       	ldi	r24, 0x01	; 1
    d8fe:	38 27       	eor	r19, r24
          if(y_min_endstop && old_y_min_endstop && (current_block->steps_y > 0)) {
    d900:	81 f1       	breq	.+96     	; 0xd962 <__vector_17+0x534>
    d902:	80 91 06 11 	lds	r24, 0x1106
    d906:	88 23       	and	r24, r24
    d908:	61 f1       	breq	.+88     	; 0xd962 <__vector_17+0x534>
    d90a:	e0 91 e2 10 	lds	r30, 0x10E2
    d90e:	f0 91 e3 10 	lds	r31, 0x10E3
    d912:	84 81       	ldd	r24, Z+4	; 0x04
    d914:	95 81       	ldd	r25, Z+5	; 0x05
    d916:	a6 81       	ldd	r26, Z+6	; 0x06
    d918:	b7 81       	ldd	r27, Z+7	; 0x07
    d91a:	18 16       	cp	r1, r24
    d91c:	19 06       	cpc	r1, r25
    d91e:	1a 06       	cpc	r1, r26
    d920:	1b 06       	cpc	r1, r27
    d922:	fc f4       	brge	.+62     	; 0xd962 <__vector_17+0x534>
            endstops_trigsteps[Y_AXIS] = count_position[Y_AXIS];
    d924:	80 91 c3 10 	lds	r24, 0x10C3
    d928:	90 91 c4 10 	lds	r25, 0x10C4
    d92c:	a0 91 c5 10 	lds	r26, 0x10C5
    d930:	b0 91 c6 10 	lds	r27, 0x10C6
    d934:	80 93 d6 10 	sts	0x10D6, r24
    d938:	90 93 d7 10 	sts	0x10D7, r25
    d93c:	a0 93 d8 10 	sts	0x10D8, r26
    d940:	b0 93 d9 10 	sts	0x10D9, r27
            endstop_y_hit=true;
    d944:	81 e0       	ldi	r24, 0x01	; 1
    d946:	80 93 d0 10 	sts	0x10D0, r24
            step_events_completed = current_block->step_event_count;
    d94a:	80 89       	ldd	r24, Z+16	; 0x10
    d94c:	91 89       	ldd	r25, Z+17	; 0x11
    d94e:	a2 89       	ldd	r26, Z+18	; 0x12
    d950:	b3 89       	ldd	r27, Z+19	; 0x13
    d952:	80 93 de 10 	sts	0x10DE, r24
    d956:	90 93 df 10 	sts	0x10DF, r25
    d95a:	a0 93 e0 10 	sts	0x10E0, r26
    d95e:	b0 93 e1 10 	sts	0x10E1, r27
          }
          old_y_min_endstop = y_min_endstop;
    d962:	30 93 06 11 	sts	0x1106, r19
    d966:	3d c0       	rjmp	.+122    	; 0xd9e2 <__vector_17+0x5b4>
        #endif
      }
    }
    else { // +direction
      CHECK_ENDSTOPS
    d968:	80 91 4e 02 	lds	r24, 0x024E
    d96c:	88 23       	and	r24, r24
    d96e:	c9 f1       	breq	.+114    	; 0xd9e2 <__vector_17+0x5b4>
      {
        #if defined(Y_MAX_PIN) && Y_MAX_PIN > -1
          bool y_max_endstop=(READ(Y_MAX_PIN) != Y_MAX_ENDSTOP_INVERTING);
    d970:	30 b1       	in	r19, 0x00	; 0
    d972:	36 fb       	bst	r19, 6
    d974:	33 27       	eor	r19, r19
    d976:	30 f9       	bld	r19, 0
    d978:	81 e0       	ldi	r24, 0x01	; 1
    d97a:	38 27       	eor	r19, r24
          if(y_max_endstop && old_y_max_endstop && (current_block->steps_y > 0)){
    d97c:	81 f1       	breq	.+96     	; 0xd9de <__vector_17+0x5b0>
    d97e:	80 91 07 11 	lds	r24, 0x1107
    d982:	88 23       	and	r24, r24
    d984:	61 f1       	breq	.+88     	; 0xd9de <__vector_17+0x5b0>
    d986:	e0 91 e2 10 	lds	r30, 0x10E2
    d98a:	f0 91 e3 10 	lds	r31, 0x10E3
    d98e:	84 81       	ldd	r24, Z+4	; 0x04
    d990:	95 81       	ldd	r25, Z+5	; 0x05
    d992:	a6 81       	ldd	r26, Z+6	; 0x06
    d994:	b7 81       	ldd	r27, Z+7	; 0x07
    d996:	18 16       	cp	r1, r24
    d998:	19 06       	cpc	r1, r25
    d99a:	1a 06       	cpc	r1, r26
    d99c:	1b 06       	cpc	r1, r27
    d99e:	fc f4       	brge	.+62     	; 0xd9de <__vector_17+0x5b0>
            endstops_trigsteps[Y_AXIS] = count_position[Y_AXIS];
    d9a0:	80 91 c3 10 	lds	r24, 0x10C3
    d9a4:	90 91 c4 10 	lds	r25, 0x10C4
    d9a8:	a0 91 c5 10 	lds	r26, 0x10C5
    d9ac:	b0 91 c6 10 	lds	r27, 0x10C6
    d9b0:	80 93 d6 10 	sts	0x10D6, r24
    d9b4:	90 93 d7 10 	sts	0x10D7, r25
    d9b8:	a0 93 d8 10 	sts	0x10D8, r26
    d9bc:	b0 93 d9 10 	sts	0x10D9, r27
            endstop_y_hit=true;
    d9c0:	81 e0       	ldi	r24, 0x01	; 1
    d9c2:	80 93 d0 10 	sts	0x10D0, r24
            step_events_completed = current_block->step_event_count;
    d9c6:	80 89       	ldd	r24, Z+16	; 0x10
    d9c8:	91 89       	ldd	r25, Z+17	; 0x11
    d9ca:	a2 89       	ldd	r26, Z+18	; 0x12
    d9cc:	b3 89       	ldd	r27, Z+19	; 0x13
    d9ce:	80 93 de 10 	sts	0x10DE, r24
    d9d2:	90 93 df 10 	sts	0x10DF, r25
    d9d6:	a0 93 e0 10 	sts	0x10E0, r26
    d9da:	b0 93 e1 10 	sts	0x10E1, r27
          }
          old_y_max_endstop = y_max_endstop;
    d9de:	30 93 07 11 	sts	0x1107, r19
        #endif
      }
    }

    if ((out_bits & (1<<Z_AXIS)) != 0) {   // -direction
    d9e2:	22 ff       	sbrs	r18, 2
    d9e4:	42 c0       	rjmp	.+132    	; 0xda6a <__vector_17+0x63c>
      WRITE(Z_DIR_PIN,INVERT_Z_DIR);
    d9e6:	a2 9a       	sbi	0x14, 2	; 20
      
      #ifdef Z_DUAL_STEPPER_DRIVERS
        WRITE(Z2_DIR_PIN,INVERT_Z_DIR);
      #endif

      count_direction[Z_AXIS]=-1;
    d9e8:	8f ef       	ldi	r24, 0xFF	; 255
    d9ea:	80 93 4c 02 	sts	0x024C, r24
      CHECK_ENDSTOPS
    d9ee:	80 91 4e 02 	lds	r24, 0x024E
    d9f2:	88 23       	and	r24, r24
    d9f4:	09 f4       	brne	.+2      	; 0xd9f8 <__vector_17+0x5ca>
    d9f6:	7a c0       	rjmp	.+244    	; 0xdaec <__vector_17+0x6be>
      {
        #if defined(Z_MIN_PIN) && Z_MIN_PIN > -1
          bool z_min_endstop=(READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING);
    d9f8:	26 b1       	in	r18, 0x06	; 6
    d9fa:	20 95       	com	r18
    d9fc:	22 1f       	adc	r18, r18
    d9fe:	22 27       	eor	r18, r18
    da00:	22 1f       	adc	r18, r18
          if(z_min_endstop && old_z_min_endstop && (current_block->steps_z > 0)) {
    da02:	81 f1       	breq	.+96     	; 0xda64 <__vector_17+0x636>
    da04:	80 91 08 11 	lds	r24, 0x1108
    da08:	88 23       	and	r24, r24
    da0a:	61 f1       	breq	.+88     	; 0xda64 <__vector_17+0x636>
    da0c:	e0 91 e2 10 	lds	r30, 0x10E2
    da10:	f0 91 e3 10 	lds	r31, 0x10E3
    da14:	80 85       	ldd	r24, Z+8	; 0x08
    da16:	91 85       	ldd	r25, Z+9	; 0x09
    da18:	a2 85       	ldd	r26, Z+10	; 0x0a
    da1a:	b3 85       	ldd	r27, Z+11	; 0x0b
    da1c:	18 16       	cp	r1, r24
    da1e:	19 06       	cpc	r1, r25
    da20:	1a 06       	cpc	r1, r26
    da22:	1b 06       	cpc	r1, r27
    da24:	fc f4       	brge	.+62     	; 0xda64 <__vector_17+0x636>
            endstops_trigsteps[Z_AXIS] = count_position[Z_AXIS];
    da26:	80 91 c7 10 	lds	r24, 0x10C7
    da2a:	90 91 c8 10 	lds	r25, 0x10C8
    da2e:	a0 91 c9 10 	lds	r26, 0x10C9
    da32:	b0 91 ca 10 	lds	r27, 0x10CA
    da36:	80 93 da 10 	sts	0x10DA, r24
    da3a:	90 93 db 10 	sts	0x10DB, r25
    da3e:	a0 93 dc 10 	sts	0x10DC, r26
    da42:	b0 93 dd 10 	sts	0x10DD, r27
            endstop_z_hit=true;
    da46:	81 e0       	ldi	r24, 0x01	; 1
    da48:	80 93 cf 10 	sts	0x10CF, r24
            step_events_completed = current_block->step_event_count;
    da4c:	80 89       	ldd	r24, Z+16	; 0x10
    da4e:	91 89       	ldd	r25, Z+17	; 0x11
    da50:	a2 89       	ldd	r26, Z+18	; 0x12
    da52:	b3 89       	ldd	r27, Z+19	; 0x13
    da54:	80 93 de 10 	sts	0x10DE, r24
    da58:	90 93 df 10 	sts	0x10DF, r25
    da5c:	a0 93 e0 10 	sts	0x10E0, r26
    da60:	b0 93 e1 10 	sts	0x10E1, r27
          }
          old_z_min_endstop = z_min_endstop;
    da64:	20 93 08 11 	sts	0x1108, r18
    da68:	41 c0       	rjmp	.+130    	; 0xdaec <__vector_17+0x6be>
        #endif
      }
    }
    else { // +direction
      WRITE(Z_DIR_PIN,!INVERT_Z_DIR);
    da6a:	a2 98       	cbi	0x14, 2	; 20

      #ifdef Z_DUAL_STEPPER_DRIVERS
        WRITE(Z2_DIR_PIN,!INVERT_Z_DIR);
      #endif

      count_direction[Z_AXIS]=1;
    da6c:	81 e0       	ldi	r24, 0x01	; 1
    da6e:	80 93 4c 02 	sts	0x024C, r24
      CHECK_ENDSTOPS
    da72:	80 91 4e 02 	lds	r24, 0x024E
    da76:	88 23       	and	r24, r24
    da78:	c9 f1       	breq	.+114    	; 0xdaec <__vector_17+0x6be>
      {
        #if defined(Z_MAX_PIN) && Z_MAX_PIN > -1
          bool z_max_endstop=(READ(Z_MAX_PIN) != Z_MAX_ENDSTOP_INVERTING);
    da7a:	26 b1       	in	r18, 0x06	; 6
    da7c:	25 fb       	bst	r18, 5
    da7e:	22 27       	eor	r18, r18
    da80:	20 f9       	bld	r18, 0
    da82:	81 e0       	ldi	r24, 0x01	; 1
    da84:	28 27       	eor	r18, r24
          if(z_max_endstop && old_z_max_endstop && (current_block->steps_z > 0)) {
    da86:	81 f1       	breq	.+96     	; 0xdae8 <__vector_17+0x6ba>
    da88:	80 91 09 11 	lds	r24, 0x1109
    da8c:	88 23       	and	r24, r24
    da8e:	61 f1       	breq	.+88     	; 0xdae8 <__vector_17+0x6ba>
    da90:	e0 91 e2 10 	lds	r30, 0x10E2
    da94:	f0 91 e3 10 	lds	r31, 0x10E3
    da98:	80 85       	ldd	r24, Z+8	; 0x08
    da9a:	91 85       	ldd	r25, Z+9	; 0x09
    da9c:	a2 85       	ldd	r26, Z+10	; 0x0a
    da9e:	b3 85       	ldd	r27, Z+11	; 0x0b
    daa0:	18 16       	cp	r1, r24
    daa2:	19 06       	cpc	r1, r25
    daa4:	1a 06       	cpc	r1, r26
    daa6:	1b 06       	cpc	r1, r27
    daa8:	fc f4       	brge	.+62     	; 0xdae8 <__vector_17+0x6ba>
            endstops_trigsteps[Z_AXIS] = count_position[Z_AXIS];
    daaa:	80 91 c7 10 	lds	r24, 0x10C7
    daae:	90 91 c8 10 	lds	r25, 0x10C8
    dab2:	a0 91 c9 10 	lds	r26, 0x10C9
    dab6:	b0 91 ca 10 	lds	r27, 0x10CA
    daba:	80 93 da 10 	sts	0x10DA, r24
    dabe:	90 93 db 10 	sts	0x10DB, r25
    dac2:	a0 93 dc 10 	sts	0x10DC, r26
    dac6:	b0 93 dd 10 	sts	0x10DD, r27
            endstop_z_hit=true;
    daca:	81 e0       	ldi	r24, 0x01	; 1
    dacc:	80 93 cf 10 	sts	0x10CF, r24
            step_events_completed = current_block->step_event_count;
    dad0:	80 89       	ldd	r24, Z+16	; 0x10
    dad2:	91 89       	ldd	r25, Z+17	; 0x11
    dad4:	a2 89       	ldd	r26, Z+18	; 0x12
    dad6:	b3 89       	ldd	r27, Z+19	; 0x13
    dad8:	80 93 de 10 	sts	0x10DE, r24
    dadc:	90 93 df 10 	sts	0x10DF, r25
    dae0:	a0 93 e0 10 	sts	0x10E0, r26
    dae4:	b0 93 e1 10 	sts	0x10E1, r27
          }
          old_z_max_endstop = z_max_endstop;
    dae8:	20 93 09 11 	sts	0x1109, r18
        #endif
      }
    }

    #ifndef ADVANCE
      if ((out_bits & (1<<E_AXIS)) != 0) {  // -direction
    daec:	80 91 03 11 	lds	r24, 0x1103
    daf0:	83 ff       	sbrs	r24, 3
    daf2:	0c c0       	rjmp	.+24     	; 0xdb0c <__vector_17+0x6de>
        REV_E_DIR();
    daf4:	8f b7       	in	r24, 0x3f	; 63
    daf6:	f8 94       	cli
    daf8:	eb e0       	ldi	r30, 0x0B	; 11
    dafa:	f1 e0       	ldi	r31, 0x01	; 1
    dafc:	90 81       	ld	r25, Z
    dafe:	9f 7e       	andi	r25, 0xEF	; 239
    db00:	90 83       	st	Z, r25
    db02:	8f bf       	out	0x3f, r24	; 63
        count_direction[E_AXIS]=-1;
    db04:	8f ef       	ldi	r24, 0xFF	; 255
    db06:	80 93 4d 02 	sts	0x024D, r24
    db0a:	0b c0       	rjmp	.+22     	; 0xdb22 <__vector_17+0x6f4>
      }
      else { // +direction
        NORM_E_DIR();
    db0c:	8f b7       	in	r24, 0x3f	; 63
    db0e:	f8 94       	cli
    db10:	eb e0       	ldi	r30, 0x0B	; 11
    db12:	f1 e0       	ldi	r31, 0x01	; 1
    db14:	90 81       	ld	r25, Z
    db16:	90 61       	ori	r25, 0x10	; 16
    db18:	90 83       	st	Z, r25
    db1a:	8f bf       	out	0x3f, r24	; 63
        count_direction[E_AXIS]=1;
    db1c:	81 e0       	ldi	r24, 0x01	; 1
    db1e:	80 93 4d 02 	sts	0x024D, r24
      }
    #endif //!ADVANCE



    for(int8_t i=0; i < step_loops; i++) { // Take multiple steps per interrupt (For high speed moves)
    db22:	80 91 e8 10 	lds	r24, 0x10E8
    db26:	88 23       	and	r24, r24
    db28:	09 f4       	brne	.+2      	; 0xdb2c <__vector_17+0x6fe>
    db2a:	c4 c1       	rjmp	.+904    	; 0xdeb4 <__vector_17+0xa86>
    db2c:	b1 2c       	mov	r11, r1
    
    FORCE_INLINE void checkRx(void)
    {
      if((M_UCSRxA & (1<<M_RXCx)) != 0) {
        unsigned char c  =  M_UDRx;
        int i = (unsigned int)(rx_buffer.head + 1) % RX_BUFFER_SIZE;
    db2e:	0f 2e       	mov	r0, r31
    db30:	f3 e5       	ldi	r31, 0x53	; 83
    db32:	2f 2e       	mov	r2, r31
    db34:	f5 e0       	ldi	r31, 0x05	; 5
    db36:	3f 2e       	mov	r3, r31
    db38:	f0 2d       	mov	r31, r0
          }
        #else
          WRITE(X_STEP_PIN, !INVERT_X_STEP_PIN);
        #endif        
          counter_x -= current_block->step_event_count;
          count_position[X_AXIS]+=count_direction[X_AXIS];   
    db3a:	6f eb       	ldi	r22, 0xBF	; 191
    db3c:	70 e1       	ldi	r23, 0x10	; 16

        counter_y += current_block->steps_y;
        if (counter_y > 0) {
          WRITE(Y_STEP_PIN, !INVERT_Y_STEP_PIN);
          counter_y -= current_block->step_event_count;
          count_position[Y_AXIS]+=count_direction[Y_AXIS];
    db3e:	0f 2e       	mov	r0, r31
    db40:	fb e4       	ldi	r31, 0x4B	; 75
    db42:	8f 2e       	mov	r8, r31
    db44:	f2 e0       	ldi	r31, 0x02	; 2
    db46:	9f 2e       	mov	r9, r31
    db48:	f0 2d       	mov	r31, r0
    db4a:	43 ec       	ldi	r20, 0xC3	; 195
    db4c:	50 e1       	ldi	r21, 0x10	; 16
        #ifdef Z_DUAL_STEPPER_DRIVERS
          WRITE(Z2_STEP_PIN, !INVERT_Z_STEP_PIN);
        #endif

        counter_z -= current_block->step_event_count;
        count_position[Z_AXIS]+=count_direction[Z_AXIS];
    db4e:	0f 2e       	mov	r0, r31
    db50:	fc e4       	ldi	r31, 0x4C	; 76
    db52:	6f 2e       	mov	r6, r31
    db54:	f2 e0       	ldi	r31, 0x02	; 2
    db56:	7f 2e       	mov	r7, r31
    db58:	f0 2d       	mov	r31, r0
    db5a:	c7 ec       	ldi	r28, 0xC7	; 199
    db5c:	d0 e1       	ldi	r29, 0x10	; 16
      }

      #ifndef ADVANCE
        counter_e += current_block->steps_e;
        if (counter_e > 0) {
          WRITE_E_STEP(!INVERT_E_STEP_PIN);
    db5e:	eb e0       	ldi	r30, 0x0B	; 11
    db60:	f1 e0       	ldi	r31, 0x01	; 1
          counter_e -= current_block->step_event_count;
          count_position[E_AXIS]+=count_direction[E_AXIS];
    db62:	0f 2e       	mov	r0, r31
    db64:	fd e4       	ldi	r31, 0x4D	; 77
    db66:	4f 2e       	mov	r4, r31
    db68:	f2 e0       	ldi	r31, 0x02	; 2
    db6a:	5f 2e       	mov	r5, r31
    db6c:	f0 2d       	mov	r31, r0
    }
    
    
    FORCE_INLINE void checkRx(void)
    {
      if((M_UCSRxA & (1<<M_RXCx)) != 0) {
    db6e:	a0 ec       	ldi	r26, 0xC0	; 192
    db70:	b0 e0       	ldi	r27, 0x00	; 0
    db72:	8c 91       	ld	r24, X
    db74:	88 23       	and	r24, r24
    db76:	c4 f4       	brge	.+48     	; 0xdba8 <__vector_17+0x77a>
        unsigned char c  =  M_UDRx;
    db78:	a6 ec       	ldi	r26, 0xC6	; 198
    db7a:	b0 e0       	ldi	r27, 0x00	; 0
    db7c:	fc 90       	ld	r15, X
        int i = (unsigned int)(rx_buffer.head + 1) % RX_BUFFER_SIZE;
    db7e:	d1 01       	movw	r26, r2
    db80:	2d 91       	ld	r18, X+
    db82:	3c 91       	ld	r19, X
    db84:	c9 01       	movw	r24, r18
    db86:	01 96       	adiw	r24, 0x01	; 1
    db88:	8f 77       	andi	r24, 0x7F	; 127
    db8a:	99 27       	eor	r25, r25

        // if we should be storing the received character into the location
        // just before the tail (meaning that the head would advance to the
        // current location of the tail), we're about to overflow the buffer
        // and so we don't write the character or advance the head.
        if (i != rx_buffer.tail) {
    db8c:	a5 e5       	ldi	r26, 0x55	; 85
    db8e:	b5 e0       	ldi	r27, 0x05	; 5
    db90:	0d 91       	ld	r16, X+
    db92:	1c 91       	ld	r17, X
    db94:	80 17       	cp	r24, r16
    db96:	91 07       	cpc	r25, r17
    db98:	39 f0       	breq	.+14     	; 0xdba8 <__vector_17+0x77a>
          rx_buffer.buffer[rx_buffer.head] = c;
    db9a:	2d 52       	subi	r18, 0x2D	; 45
    db9c:	3b 4f       	sbci	r19, 0xFB	; 251
    db9e:	d9 01       	movw	r26, r18
    dba0:	fc 92       	st	X, r15
          rx_buffer.head = i;
    dba2:	d1 01       	movw	r26, r2
    dba4:	8d 93       	st	X+, r24
    dba6:	9c 93       	st	X, r25
          e_steps[current_block->active_extruder]++;
        }
      }
      #endif //ADVANCE

        counter_x += current_block->steps_x;
    dba8:	80 91 e2 10 	lds	r24, 0x10E2
    dbac:	90 91 e3 10 	lds	r25, 0x10E3
    dbb0:	dc 01       	movw	r26, r24
    dbb2:	cd 90       	ld	r12, X+
    dbb4:	dd 90       	ld	r13, X+
    dbb6:	ed 90       	ld	r14, X+
    dbb8:	fc 90       	ld	r15, X
    dbba:	13 97       	sbiw	r26, 0x03	; 3
    dbbc:	00 91 f3 10 	lds	r16, 0x10F3
    dbc0:	10 91 f4 10 	lds	r17, 0x10F4
    dbc4:	20 91 f5 10 	lds	r18, 0x10F5
    dbc8:	30 91 f6 10 	lds	r19, 0x10F6
    dbcc:	0c 0d       	add	r16, r12
    dbce:	1d 1d       	adc	r17, r13
    dbd0:	2e 1d       	adc	r18, r14
    dbd2:	3f 1d       	adc	r19, r15
    dbd4:	00 93 f3 10 	sts	0x10F3, r16
    dbd8:	10 93 f4 10 	sts	0x10F4, r17
    dbdc:	20 93 f5 10 	sts	0x10F5, r18
    dbe0:	30 93 f6 10 	sts	0x10F6, r19
        if (counter_x > 0) {
    dbe4:	10 16       	cp	r1, r16
    dbe6:	11 06       	cpc	r1, r17
    dbe8:	12 06       	cpc	r1, r18
    dbea:	13 06       	cpc	r1, r19
    dbec:	5c f5       	brge	.+86     	; 0xdc44 <__vector_17+0x816>
              WRITE(X2_STEP_PIN, !INVERT_X_STEP_PIN);
            else
              WRITE(X_STEP_PIN, !INVERT_X_STEP_PIN);
          }
        #else
          WRITE(X_STEP_PIN, !INVERT_X_STEP_PIN);
    dbee:	13 9a       	sbi	0x02, 3	; 2
        #endif        
          counter_x -= current_block->step_event_count;
    dbf0:	50 96       	adiw	r26, 0x10	; 16
    dbf2:	cd 90       	ld	r12, X+
    dbf4:	dd 90       	ld	r13, X+
    dbf6:	ed 90       	ld	r14, X+
    dbf8:	fc 90       	ld	r15, X
    dbfa:	53 97       	sbiw	r26, 0x13	; 19
    dbfc:	0c 19       	sub	r16, r12
    dbfe:	1d 09       	sbc	r17, r13
    dc00:	2e 09       	sbc	r18, r14
    dc02:	3f 09       	sbc	r19, r15
    dc04:	00 93 f3 10 	sts	0x10F3, r16
    dc08:	10 93 f4 10 	sts	0x10F4, r17
    dc0c:	20 93 f5 10 	sts	0x10F5, r18
    dc10:	30 93 f6 10 	sts	0x10F6, r19
          count_position[X_AXIS]+=count_direction[X_AXIS];   
    dc14:	aa e4       	ldi	r26, 0x4A	; 74
    dc16:	b2 e0       	ldi	r27, 0x02	; 2
    dc18:	0c 91       	ld	r16, X
    dc1a:	db 01       	movw	r26, r22
    dc1c:	cd 90       	ld	r12, X+
    dc1e:	dd 90       	ld	r13, X+
    dc20:	ed 90       	ld	r14, X+
    dc22:	fc 90       	ld	r15, X
    dc24:	13 97       	sbiw	r26, 0x03	; 3
    dc26:	11 27       	eor	r17, r17
    dc28:	07 fd       	sbrc	r16, 7
    dc2a:	10 95       	com	r17
    dc2c:	21 2f       	mov	r18, r17
    dc2e:	31 2f       	mov	r19, r17
    dc30:	0c 0d       	add	r16, r12
    dc32:	1d 1d       	adc	r17, r13
    dc34:	2e 1d       	adc	r18, r14
    dc36:	3f 1d       	adc	r19, r15
    dc38:	0d 93       	st	X+, r16
    dc3a:	1d 93       	st	X+, r17
    dc3c:	2d 93       	st	X+, r18
    dc3e:	3c 93       	st	X, r19
    dc40:	13 97       	sbiw	r26, 0x03	; 3
              WRITE(X2_STEP_PIN, INVERT_X_STEP_PIN);
            else
              WRITE(X_STEP_PIN, INVERT_X_STEP_PIN);
          }
        #else
          WRITE(X_STEP_PIN, INVERT_X_STEP_PIN);
    dc42:	13 98       	cbi	0x02, 3	; 2
        #endif
        }

        counter_y += current_block->steps_y;
    dc44:	80 91 e2 10 	lds	r24, 0x10E2
    dc48:	90 91 e3 10 	lds	r25, 0x10E3
    dc4c:	dc 01       	movw	r26, r24
    dc4e:	14 96       	adiw	r26, 0x04	; 4
    dc50:	cd 90       	ld	r12, X+
    dc52:	dd 90       	ld	r13, X+
    dc54:	ed 90       	ld	r14, X+
    dc56:	fc 90       	ld	r15, X
    dc58:	17 97       	sbiw	r26, 0x07	; 7
    dc5a:	00 91 f7 10 	lds	r16, 0x10F7
    dc5e:	10 91 f8 10 	lds	r17, 0x10F8
    dc62:	20 91 f9 10 	lds	r18, 0x10F9
    dc66:	30 91 fa 10 	lds	r19, 0x10FA
    dc6a:	0c 0d       	add	r16, r12
    dc6c:	1d 1d       	adc	r17, r13
    dc6e:	2e 1d       	adc	r18, r14
    dc70:	3f 1d       	adc	r19, r15
    dc72:	00 93 f7 10 	sts	0x10F7, r16
    dc76:	10 93 f8 10 	sts	0x10F8, r17
    dc7a:	20 93 f9 10 	sts	0x10F9, r18
    dc7e:	30 93 fa 10 	sts	0x10FA, r19
        if (counter_y > 0) {
    dc82:	10 16       	cp	r1, r16
    dc84:	11 06       	cpc	r1, r17
    dc86:	12 06       	cpc	r1, r18
    dc88:	13 06       	cpc	r1, r19
    dc8a:	54 f5       	brge	.+84     	; 0xdce0 <__vector_17+0x8b2>
          WRITE(Y_STEP_PIN, !INVERT_Y_STEP_PIN);
    dc8c:	46 9a       	sbi	0x08, 6	; 8
          counter_y -= current_block->step_event_count;
    dc8e:	50 96       	adiw	r26, 0x10	; 16
    dc90:	cd 90       	ld	r12, X+
    dc92:	dd 90       	ld	r13, X+
    dc94:	ed 90       	ld	r14, X+
    dc96:	fc 90       	ld	r15, X
    dc98:	53 97       	sbiw	r26, 0x13	; 19
    dc9a:	0c 19       	sub	r16, r12
    dc9c:	1d 09       	sbc	r17, r13
    dc9e:	2e 09       	sbc	r18, r14
    dca0:	3f 09       	sbc	r19, r15
    dca2:	00 93 f7 10 	sts	0x10F7, r16
    dca6:	10 93 f8 10 	sts	0x10F8, r17
    dcaa:	20 93 f9 10 	sts	0x10F9, r18
    dcae:	30 93 fa 10 	sts	0x10FA, r19
          count_position[Y_AXIS]+=count_direction[Y_AXIS];
    dcb2:	d4 01       	movw	r26, r8
    dcb4:	0c 91       	ld	r16, X
    dcb6:	da 01       	movw	r26, r20
    dcb8:	cd 90       	ld	r12, X+
    dcba:	dd 90       	ld	r13, X+
    dcbc:	ed 90       	ld	r14, X+
    dcbe:	fc 90       	ld	r15, X
    dcc0:	13 97       	sbiw	r26, 0x03	; 3
    dcc2:	11 27       	eor	r17, r17
    dcc4:	07 fd       	sbrc	r16, 7
    dcc6:	10 95       	com	r17
    dcc8:	21 2f       	mov	r18, r17
    dcca:	31 2f       	mov	r19, r17
    dccc:	0c 0d       	add	r16, r12
    dcce:	1d 1d       	adc	r17, r13
    dcd0:	2e 1d       	adc	r18, r14
    dcd2:	3f 1d       	adc	r19, r15
    dcd4:	0d 93       	st	X+, r16
    dcd6:	1d 93       	st	X+, r17
    dcd8:	2d 93       	st	X+, r18
    dcda:	3c 93       	st	X, r19
    dcdc:	13 97       	sbiw	r26, 0x03	; 3
          WRITE(Y_STEP_PIN, INVERT_Y_STEP_PIN);
    dcde:	46 98       	cbi	0x08, 6	; 8
        }

      counter_z += current_block->steps_z;
    dce0:	80 91 e2 10 	lds	r24, 0x10E2
    dce4:	90 91 e3 10 	lds	r25, 0x10E3
    dce8:	dc 01       	movw	r26, r24
    dcea:	18 96       	adiw	r26, 0x08	; 8
    dcec:	cd 90       	ld	r12, X+
    dcee:	dd 90       	ld	r13, X+
    dcf0:	ed 90       	ld	r14, X+
    dcf2:	fc 90       	ld	r15, X
    dcf4:	1b 97       	sbiw	r26, 0x0b	; 11
    dcf6:	00 91 fb 10 	lds	r16, 0x10FB
    dcfa:	10 91 fc 10 	lds	r17, 0x10FC
    dcfe:	20 91 fd 10 	lds	r18, 0x10FD
    dd02:	30 91 fe 10 	lds	r19, 0x10FE
    dd06:	0c 0d       	add	r16, r12
    dd08:	1d 1d       	adc	r17, r13
    dd0a:	2e 1d       	adc	r18, r14
    dd0c:	3f 1d       	adc	r19, r15
    dd0e:	00 93 fb 10 	sts	0x10FB, r16
    dd12:	10 93 fc 10 	sts	0x10FC, r17
    dd16:	20 93 fd 10 	sts	0x10FD, r18
    dd1a:	30 93 fe 10 	sts	0x10FE, r19
      if (counter_z > 0) {
    dd1e:	10 16       	cp	r1, r16
    dd20:	11 06       	cpc	r1, r17
    dd22:	12 06       	cpc	r1, r18
    dd24:	13 06       	cpc	r1, r19
    dd26:	3c f5       	brge	.+78     	; 0xdd76 <__vector_17+0x948>
        WRITE(Z_STEP_PIN, !INVERT_Z_STEP_PIN);
    dd28:	40 9a       	sbi	0x08, 0	; 8
        
        #ifdef Z_DUAL_STEPPER_DRIVERS
          WRITE(Z2_STEP_PIN, !INVERT_Z_STEP_PIN);
        #endif

        counter_z -= current_block->step_event_count;
    dd2a:	50 96       	adiw	r26, 0x10	; 16
    dd2c:	cd 90       	ld	r12, X+
    dd2e:	dd 90       	ld	r13, X+
    dd30:	ed 90       	ld	r14, X+
    dd32:	fc 90       	ld	r15, X
    dd34:	53 97       	sbiw	r26, 0x13	; 19
    dd36:	0c 19       	sub	r16, r12
    dd38:	1d 09       	sbc	r17, r13
    dd3a:	2e 09       	sbc	r18, r14
    dd3c:	3f 09       	sbc	r19, r15
    dd3e:	00 93 fb 10 	sts	0x10FB, r16
    dd42:	10 93 fc 10 	sts	0x10FC, r17
    dd46:	20 93 fd 10 	sts	0x10FD, r18
    dd4a:	30 93 fe 10 	sts	0x10FE, r19
        count_position[Z_AXIS]+=count_direction[Z_AXIS];
    dd4e:	d3 01       	movw	r26, r6
    dd50:	0c 91       	ld	r16, X
    dd52:	c8 80       	ld	r12, Y
    dd54:	d9 80       	ldd	r13, Y+1	; 0x01
    dd56:	ea 80       	ldd	r14, Y+2	; 0x02
    dd58:	fb 80       	ldd	r15, Y+3	; 0x03
    dd5a:	11 27       	eor	r17, r17
    dd5c:	07 fd       	sbrc	r16, 7
    dd5e:	10 95       	com	r17
    dd60:	21 2f       	mov	r18, r17
    dd62:	31 2f       	mov	r19, r17
    dd64:	0c 0d       	add	r16, r12
    dd66:	1d 1d       	adc	r17, r13
    dd68:	2e 1d       	adc	r18, r14
    dd6a:	3f 1d       	adc	r19, r15
    dd6c:	08 83       	st	Y, r16
    dd6e:	19 83       	std	Y+1, r17	; 0x01
    dd70:	2a 83       	std	Y+2, r18	; 0x02
    dd72:	3b 83       	std	Y+3, r19	; 0x03
        WRITE(Z_STEP_PIN, INVERT_Z_STEP_PIN);
    dd74:	40 98       	cbi	0x08, 0	; 8
          WRITE(Z2_STEP_PIN, INVERT_Z_STEP_PIN);
        #endif
      }

      #ifndef ADVANCE
        counter_e += current_block->steps_e;
    dd76:	80 91 e2 10 	lds	r24, 0x10E2
    dd7a:	90 91 e3 10 	lds	r25, 0x10E3
    dd7e:	dc 01       	movw	r26, r24
    dd80:	1c 96       	adiw	r26, 0x0c	; 12
    dd82:	cd 90       	ld	r12, X+
    dd84:	dd 90       	ld	r13, X+
    dd86:	ed 90       	ld	r14, X+
    dd88:	fc 90       	ld	r15, X
    dd8a:	1f 97       	sbiw	r26, 0x0f	; 15
    dd8c:	00 91 ff 10 	lds	r16, 0x10FF
    dd90:	10 91 00 11 	lds	r17, 0x1100
    dd94:	20 91 01 11 	lds	r18, 0x1101
    dd98:	30 91 02 11 	lds	r19, 0x1102
    dd9c:	0c 0d       	add	r16, r12
    dd9e:	1d 1d       	adc	r17, r13
    dda0:	2e 1d       	adc	r18, r14
    dda2:	3f 1d       	adc	r19, r15
    dda4:	00 93 ff 10 	sts	0x10FF, r16
    dda8:	10 93 00 11 	sts	0x1100, r17
    ddac:	20 93 01 11 	sts	0x1101, r18
    ddb0:	30 93 02 11 	sts	0x1102, r19
        if (counter_e > 0) {
    ddb4:	10 16       	cp	r1, r16
    ddb6:	11 06       	cpc	r1, r17
    ddb8:	12 06       	cpc	r1, r18
    ddba:	13 06       	cpc	r1, r19
    ddbc:	0c f0       	brlt	.+2      	; 0xddc0 <__vector_17+0x992>
    ddbe:	42 c0       	rjmp	.+132    	; 0xde44 <__vector_17+0xa16>
          WRITE_E_STEP(!INVERT_E_STEP_PIN);
    ddc0:	8f b7       	in	r24, 0x3f	; 63
    ddc2:	f8 94       	cli
    ddc4:	90 81       	ld	r25, Z
    ddc6:	90 64       	ori	r25, 0x40	; 64
    ddc8:	90 83       	st	Z, r25
    ddca:	8f bf       	out	0x3f, r24	; 63
          counter_e -= current_block->step_event_count;
    ddcc:	80 91 e2 10 	lds	r24, 0x10E2
    ddd0:	90 91 e3 10 	lds	r25, 0x10E3
    ddd4:	00 91 ff 10 	lds	r16, 0x10FF
    ddd8:	10 91 00 11 	lds	r17, 0x1100
    dddc:	20 91 01 11 	lds	r18, 0x1101
    dde0:	30 91 02 11 	lds	r19, 0x1102
    dde4:	dc 01       	movw	r26, r24
    dde6:	50 96       	adiw	r26, 0x10	; 16
    dde8:	cd 90       	ld	r12, X+
    ddea:	dd 90       	ld	r13, X+
    ddec:	ed 90       	ld	r14, X+
    ddee:	fc 90       	ld	r15, X
    ddf0:	53 97       	sbiw	r26, 0x13	; 19
    ddf2:	0c 19       	sub	r16, r12
    ddf4:	1d 09       	sbc	r17, r13
    ddf6:	2e 09       	sbc	r18, r14
    ddf8:	3f 09       	sbc	r19, r15
    ddfa:	00 93 ff 10 	sts	0x10FF, r16
    ddfe:	10 93 00 11 	sts	0x1100, r17
    de02:	20 93 01 11 	sts	0x1101, r18
    de06:	30 93 02 11 	sts	0x1102, r19
          count_position[E_AXIS]+=count_direction[E_AXIS];
    de0a:	d2 01       	movw	r26, r4
    de0c:	0c 91       	ld	r16, X
    de0e:	ab ec       	ldi	r26, 0xCB	; 203
    de10:	b0 e1       	ldi	r27, 0x10	; 16
    de12:	cd 90       	ld	r12, X+
    de14:	dd 90       	ld	r13, X+
    de16:	ed 90       	ld	r14, X+
    de18:	fc 90       	ld	r15, X
    de1a:	13 97       	sbiw	r26, 0x03	; 3
    de1c:	11 27       	eor	r17, r17
    de1e:	07 fd       	sbrc	r16, 7
    de20:	10 95       	com	r17
    de22:	21 2f       	mov	r18, r17
    de24:	31 2f       	mov	r19, r17
    de26:	0c 0d       	add	r16, r12
    de28:	1d 1d       	adc	r17, r13
    de2a:	2e 1d       	adc	r18, r14
    de2c:	3f 1d       	adc	r19, r15
    de2e:	0d 93       	st	X+, r16
    de30:	1d 93       	st	X+, r17
    de32:	2d 93       	st	X+, r18
    de34:	3c 93       	st	X, r19
    de36:	13 97       	sbiw	r26, 0x03	; 3
          WRITE_E_STEP(INVERT_E_STEP_PIN);
    de38:	8f b7       	in	r24, 0x3f	; 63
    de3a:	f8 94       	cli
    de3c:	90 81       	ld	r25, Z
    de3e:	9f 7b       	andi	r25, 0xBF	; 191
    de40:	90 83       	st	Z, r25
    de42:	8f bf       	out	0x3f, r24	; 63
        }
      #endif //!ADVANCE
      step_events_completed += 1;
    de44:	00 91 de 10 	lds	r16, 0x10DE
    de48:	10 91 df 10 	lds	r17, 0x10DF
    de4c:	20 91 e0 10 	lds	r18, 0x10E0
    de50:	30 91 e1 10 	lds	r19, 0x10E1
    de54:	0f 5f       	subi	r16, 0xFF	; 255
    de56:	1f 4f       	sbci	r17, 0xFF	; 255
    de58:	2f 4f       	sbci	r18, 0xFF	; 255
    de5a:	3f 4f       	sbci	r19, 0xFF	; 255
    de5c:	00 93 de 10 	sts	0x10DE, r16
    de60:	10 93 df 10 	sts	0x10DF, r17
    de64:	20 93 e0 10 	sts	0x10E0, r18
    de68:	30 93 e1 10 	sts	0x10E1, r19
      if(step_events_completed >= current_block->step_event_count) break;
    de6c:	00 91 de 10 	lds	r16, 0x10DE
    de70:	10 91 df 10 	lds	r17, 0x10DF
    de74:	20 91 e0 10 	lds	r18, 0x10E0
    de78:	30 91 e1 10 	lds	r19, 0x10E1
    de7c:	80 91 e2 10 	lds	r24, 0x10E2
    de80:	90 91 e3 10 	lds	r25, 0x10E3
    de84:	dc 01       	movw	r26, r24
    de86:	50 96       	adiw	r26, 0x10	; 16
    de88:	cd 90       	ld	r12, X+
    de8a:	dd 90       	ld	r13, X+
    de8c:	ed 90       	ld	r14, X+
    de8e:	fc 90       	ld	r15, X
    de90:	53 97       	sbiw	r26, 0x13	; 19
    de92:	0c 15       	cp	r16, r12
    de94:	1d 05       	cpc	r17, r13
    de96:	2e 05       	cpc	r18, r14
    de98:	3f 05       	cpc	r19, r15
    de9a:	60 f4       	brcc	.+24     	; 0xdeb4 <__vector_17+0xa86>
      }
    #endif //!ADVANCE



    for(int8_t i=0; i < step_loops; i++) { // Take multiple steps per interrupt (For high speed moves)
    de9c:	b3 94       	inc	r11
    de9e:	2b 2d       	mov	r18, r11
    dea0:	33 27       	eor	r19, r19
    dea2:	27 fd       	sbrc	r18, 7
    dea4:	30 95       	com	r19
    dea6:	80 91 e8 10 	lds	r24, 0x10E8
    deaa:	90 e0       	ldi	r25, 0x00	; 0
    deac:	28 17       	cp	r18, r24
    deae:	39 07       	cpc	r19, r25
    deb0:	0c f4       	brge	.+2      	; 0xdeb4 <__vector_17+0xa86>
    deb2:	5d ce       	rjmp	.-838    	; 0xdb6e <__vector_17+0x740>
      if(step_events_completed >= current_block->step_event_count) break;
    }
    // Calculare new timer value
    unsigned short timer;
    unsigned short step_rate;
    if (step_events_completed <= (unsigned long int)current_block->accelerate_until) {
    deb4:	e0 91 e2 10 	lds	r30, 0x10E2
    deb8:	f0 91 e3 10 	lds	r31, 0x10E3
    debc:	80 91 de 10 	lds	r24, 0x10DE
    dec0:	90 91 df 10 	lds	r25, 0x10DF
    dec4:	a0 91 e0 10 	lds	r26, 0x10E0
    dec8:	b0 91 e1 10 	lds	r27, 0x10E1
    decc:	44 89       	ldd	r20, Z+20	; 0x14
    dece:	55 89       	ldd	r21, Z+21	; 0x15
    ded0:	66 89       	ldd	r22, Z+22	; 0x16
    ded2:	77 89       	ldd	r23, Z+23	; 0x17
    ded4:	48 17       	cp	r20, r24
    ded6:	59 07       	cpc	r21, r25
    ded8:	6a 07       	cpc	r22, r26
    deda:	7b 07       	cpc	r23, r27
    dedc:	08 f4       	brcc	.+2      	; 0xdee0 <__vector_17+0xab2>
    dede:	dd c0       	rjmp	.+442    	; 0xe09a <__vector_17+0xc6c>

      MultiU24X24toH16(acc_step_rate, acceleration_time, current_block->acceleration_rate);
    dee0:	40 91 ef 10 	lds	r20, 0x10EF
    dee4:	50 91 f0 10 	lds	r21, 0x10F0
    dee8:	60 91 f1 10 	lds	r22, 0x10F1
    deec:	70 91 f2 10 	lds	r23, 0x10F2
    def0:	04 8d       	ldd	r16, Z+28	; 0x1c
    def2:	15 8d       	ldd	r17, Z+29	; 0x1d
    def4:	26 8d       	ldd	r18, Z+30	; 0x1e
    def6:	37 8d       	ldd	r19, Z+31	; 0x1f
    def8:	aa 27       	eor	r26, r26
    defa:	41 9f       	mul	r20, r17
    defc:	b1 2d       	mov	r27, r1
    defe:	52 9f       	mul	r21, r18
    df00:	c0 01       	movw	r24, r0
    df02:	62 9f       	mul	r22, r18
    df04:	90 0d       	add	r25, r0
    df06:	61 9f       	mul	r22, r17
    df08:	80 0d       	add	r24, r0
    df0a:	91 1d       	adc	r25, r1
    df0c:	42 9f       	mul	r20, r18
    df0e:	b0 0d       	add	r27, r0
    df10:	81 1d       	adc	r24, r1
    df12:	9a 1f       	adc	r25, r26
    df14:	51 9f       	mul	r21, r17
    df16:	b0 0d       	add	r27, r0
    df18:	81 1d       	adc	r24, r1
    df1a:	9a 1f       	adc	r25, r26
    df1c:	60 9f       	mul	r22, r16
    df1e:	b0 0d       	add	r27, r0
    df20:	81 1d       	adc	r24, r1
    df22:	9a 1f       	adc	r25, r26
    df24:	50 9f       	mul	r21, r16
    df26:	b1 0d       	add	r27, r1
    df28:	8a 1f       	adc	r24, r26
    df2a:	9a 1f       	adc	r25, r26
    df2c:	b6 95       	lsr	r27
    df2e:	8a 1f       	adc	r24, r26
    df30:	9a 1f       	adc	r25, r26
    df32:	11 24       	eor	r1, r1
      acc_step_rate += current_block->initial_rate;
    df34:	44 ad       	ldd	r20, Z+60	; 0x3c
    df36:	55 ad       	ldd	r21, Z+61	; 0x3d
    df38:	48 0f       	add	r20, r24
    df3a:	59 1f       	adc	r21, r25
    df3c:	50 93 ee 10 	sts	0x10EE, r21
    df40:	40 93 ed 10 	sts	0x10ED, r20

      // upper limit
      if(acc_step_rate > current_block->nominal_rate)
    df44:	80 ad       	ldd	r24, Z+56	; 0x38
    df46:	91 ad       	ldd	r25, Z+57	; 0x39
    df48:	a2 ad       	ldd	r26, Z+58	; 0x3a
    df4a:	b3 ad       	ldd	r27, Z+59	; 0x3b
    df4c:	60 e0       	ldi	r22, 0x00	; 0
    df4e:	70 e0       	ldi	r23, 0x00	; 0
    df50:	84 17       	cp	r24, r20
    df52:	95 07       	cpc	r25, r21
    df54:	a6 07       	cpc	r26, r22
    df56:	b7 07       	cpc	r27, r23
    df58:	20 f4       	brcc	.+8      	; 0xdf62 <__vector_17+0xb34>
        acc_step_rate = current_block->nominal_rate;
    df5a:	90 93 ee 10 	sts	0x10EE, r25
    df5e:	80 93 ed 10 	sts	0x10ED, r24
    df62:	60 91 ed 10 	lds	r22, 0x10ED
    df66:	70 91 ee 10 	lds	r23, 0x10EE
    df6a:	61 34       	cpi	r22, 0x41	; 65
    df6c:	bc e9       	ldi	r27, 0x9C	; 156
    df6e:	7b 07       	cpc	r23, r27
    df70:	10 f0       	brcs	.+4      	; 0xdf76 <__vector_17+0xb48>
    df72:	60 e4       	ldi	r22, 0x40	; 64
    df74:	7c e9       	ldi	r23, 0x9C	; 156

FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {
  unsigned short timer;
  if(step_rate > MAX_STEP_FREQUENCY) step_rate = MAX_STEP_FREQUENCY;

  if(step_rate > 20000) { // If steprate > 20kHz >> step 4 times
    df76:	61 32       	cpi	r22, 0x21	; 33
    df78:	2e e4       	ldi	r18, 0x4E	; 78
    df7a:	72 07       	cpc	r23, r18
    df7c:	40 f0       	brcs	.+16     	; 0xdf8e <__vector_17+0xb60>
    step_rate = (step_rate >> 2)&0x3fff;
    df7e:	76 95       	lsr	r23
    df80:	67 95       	ror	r22
    df82:	76 95       	lsr	r23
    df84:	67 95       	ror	r22
    step_loops = 4;
    df86:	84 e0       	ldi	r24, 0x04	; 4
    df88:	80 93 e8 10 	sts	0x10E8, r24
    df8c:	0d c0       	rjmp	.+26     	; 0xdfa8 <__vector_17+0xb7a>
  }
  else if(step_rate > 10000) { // If steprate > 10kHz >> step 2 times
    df8e:	61 31       	cpi	r22, 0x11	; 17
    df90:	87 e2       	ldi	r24, 0x27	; 39
    df92:	78 07       	cpc	r23, r24
    df94:	30 f0       	brcs	.+12     	; 0xdfa2 <__vector_17+0xb74>
    step_rate = (step_rate >> 1)&0x7fff;
    df96:	76 95       	lsr	r23
    df98:	67 95       	ror	r22
    step_loops = 2;
    df9a:	82 e0       	ldi	r24, 0x02	; 2
    df9c:	80 93 e8 10 	sts	0x10E8, r24
    dfa0:	03 c0       	rjmp	.+6      	; 0xdfa8 <__vector_17+0xb7a>
  }
  else {
    step_loops = 1;
    dfa2:	81 e0       	ldi	r24, 0x01	; 1
    dfa4:	80 93 e8 10 	sts	0x10E8, r24
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
    dfa8:	60 32       	cpi	r22, 0x20	; 32
    dfaa:	71 05       	cpc	r23, r1
    dfac:	10 f1       	brcs	.+68     	; 0xdff2 <__vector_17+0xbc4>
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    dfae:	60 52       	subi	r22, 0x20	; 32
    dfb0:	71 09       	sbc	r23, r1
  if(step_rate >= (8*256)){ // higher step rate
    dfb2:	61 15       	cp	r22, r1
    dfb4:	a8 e0       	ldi	r26, 0x08	; 8
    dfb6:	7a 07       	cpc	r23, r26
    dfb8:	f0 f0       	brcs	.+60     	; 0xdff6 <__vector_17+0xbc8>
      SERIAL_PROTOCOL(   digitalRead(E0_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E0_MS2_PIN));
      SERIAL_PROTOCOLPGM("E1: ");
      SERIAL_PROTOCOL(   digitalRead(E1_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E1_MS2_PIN));
}
    dfba:	87 2f       	mov	r24, r23
    dfbc:	99 27       	eor	r25, r25
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
  if(step_rate >= (8*256)){ // higher step rate
    unsigned short table_address = (unsigned short)&speed_lookuptable_fast[(unsigned char)(step_rate>>8)][0];
    dfbe:	88 0f       	add	r24, r24
    dfc0:	99 1f       	adc	r25, r25
    dfc2:	88 0f       	add	r24, r24
    dfc4:	99 1f       	adc	r25, r25
    dfc6:	8a 54       	subi	r24, 0x4A	; 74
    dfc8:	97 4f       	sbci	r25, 0xF7	; 247
    unsigned char tmp_step_rate = (step_rate & 0x00ff);
    unsigned short gain = (unsigned short)pgm_read_word_near(table_address+2);
    dfca:	fc 01       	movw	r30, r24
    dfcc:	32 96       	adiw	r30, 0x02	; 2
    dfce:	25 91       	lpm	r18, Z+
    dfd0:	34 91       	lpm	r19, Z
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    dfd2:	aa 27       	eor	r26, r26
    dfd4:	63 9f       	mul	r22, r19
    dfd6:	a0 01       	movw	r20, r0
    dfd8:	62 9f       	mul	r22, r18
    dfda:	41 0d       	add	r20, r1
    dfdc:	5a 1f       	adc	r21, r26
    dfde:	06 94       	lsr	r0
    dfe0:	4a 1f       	adc	r20, r26
    dfe2:	5a 1f       	adc	r21, r26
    dfe4:	11 24       	eor	r1, r1
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
    dfe6:	fc 01       	movw	r30, r24
    dfe8:	25 91       	lpm	r18, Z+
    dfea:	34 91       	lpm	r19, Z
    dfec:	24 1b       	sub	r18, r20
    dfee:	35 0b       	sbc	r19, r21
    dff0:	22 c0       	rjmp	.+68     	; 0xe036 <__vector_17+0xc08>
  else {
    step_loops = 1;
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    dff2:	60 e0       	ldi	r22, 0x00	; 0
    dff4:	70 e0       	ldi	r23, 0x00	; 0
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
  }
  else { // lower step rates
    unsigned short table_address = (unsigned short)&speed_lookuptable_slow[0][0];
    table_address += ((step_rate)>>1) & 0xfffc;
    dff6:	cb 01       	movw	r24, r22
    dff8:	96 95       	lsr	r25
    dffa:	87 95       	ror	r24
    dffc:	8c 7f       	andi	r24, 0xFC	; 252
    dffe:	8a 54       	subi	r24, 0x4A	; 74
    e000:	93 4f       	sbci	r25, 0xF3	; 243
    timer = (unsigned short)pgm_read_word_near(table_address);
    e002:	fc 01       	movw	r30, r24
    e004:	25 91       	lpm	r18, Z+
    e006:	34 91       	lpm	r19, Z
    timer -= (((unsigned short)pgm_read_word_near(table_address+2) * (unsigned char)(step_rate & 0x0007))>>3);
    e008:	fc 01       	movw	r30, r24
    e00a:	32 96       	adiw	r30, 0x02	; 2
    e00c:	85 91       	lpm	r24, Z+
    e00e:	94 91       	lpm	r25, Z
    e010:	fb 01       	movw	r30, r22
    e012:	e7 70       	andi	r30, 0x07	; 7
    e014:	ff 27       	eor	r31, r31
    e016:	e8 9f       	mul	r30, r24
    e018:	a0 01       	movw	r20, r0
    e01a:	e9 9f       	mul	r30, r25
    e01c:	50 0d       	add	r21, r0
    e01e:	f8 9f       	mul	r31, r24
    e020:	50 0d       	add	r21, r0
    e022:	11 24       	eor	r1, r1
    e024:	ca 01       	movw	r24, r20
    e026:	96 95       	lsr	r25
    e028:	87 95       	ror	r24
    e02a:	96 95       	lsr	r25
    e02c:	87 95       	ror	r24
    e02e:	96 95       	lsr	r25
    e030:	87 95       	ror	r24
    e032:	28 1b       	sub	r18, r24
    e034:	39 0b       	sbc	r19, r25
  }
  if(timer < 100) { timer = 100; MYSERIAL.print(MSG_STEPPER_TOO_HIGH); MYSERIAL.println(step_rate); }//(20kHz this should never happen)
    e036:	24 36       	cpi	r18, 0x64	; 100
    e038:	31 05       	cpc	r19, r1
    e03a:	b0 f4       	brcc	.+44     	; 0xe068 <__vector_17+0xc3a>
    e03c:	af e2       	ldi	r26, 0x2F	; 47
    e03e:	b4 e0       	ldi	r27, 0x04	; 4
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    e040:	93 e5       	ldi	r25, 0x53	; 83
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    e042:	e0 ec       	ldi	r30, 0xC0	; 192
    e044:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    e046:	c6 ec       	ldi	r28, 0xC6	; 198
    e048:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    e04a:	80 81       	ld	r24, Z
    e04c:	85 ff       	sbrs	r24, 5
    e04e:	fd cf       	rjmp	.-6      	; 0xe04a <__vector_17+0xc1c>
        ;

      M_UDRx = c;
    e050:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    e052:	9d 91       	ld	r25, X+
    e054:	91 11       	cpse	r25, r1
    e056:	f9 cf       	rjmp	.-14     	; 0xe04a <__vector_17+0xc1c>
    e058:	4a e0       	ldi	r20, 0x0A	; 10
    e05a:	50 e0       	ldi	r21, 0x00	; 0
    e05c:	82 ed       	ldi	r24, 0xD2	; 210
    e05e:	94 e0       	ldi	r25, 0x04	; 4
    e060:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_ZN12MarlinSerial7printlnEji>
    e064:	24 e6       	ldi	r18, 0x64	; 100
    e066:	30 e0       	ldi	r19, 0x00	; 0
      if(acc_step_rate > current_block->nominal_rate)
        acc_step_rate = current_block->nominal_rate;

      // step_rate to timer interval
      timer = calc_timer(acc_step_rate);
      OCR1A = timer;
    e068:	30 93 89 00 	sts	0x0089, r19
    e06c:	20 93 88 00 	sts	0x0088, r18
      acceleration_time += timer;
    e070:	80 91 ef 10 	lds	r24, 0x10EF
    e074:	90 91 f0 10 	lds	r25, 0x10F0
    e078:	a0 91 f1 10 	lds	r26, 0x10F1
    e07c:	b0 91 f2 10 	lds	r27, 0x10F2
    e080:	82 0f       	add	r24, r18
    e082:	93 1f       	adc	r25, r19
    e084:	a1 1d       	adc	r26, r1
    e086:	b1 1d       	adc	r27, r1
    e088:	80 93 ef 10 	sts	0x10EF, r24
    e08c:	90 93 f0 10 	sts	0x10F0, r25
    e090:	a0 93 f1 10 	sts	0x10F1, r26
    e094:	b0 93 f2 10 	sts	0x10F2, r27
    e098:	00 c1       	rjmp	.+512    	; 0xe29a <__vector_17+0xe6c>
        e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);
        old_advance = advance >>8;

      #endif
    }
    else if (step_events_completed > (unsigned long int)current_block->decelerate_after) {
    e09a:	80 91 de 10 	lds	r24, 0x10DE
    e09e:	90 91 df 10 	lds	r25, 0x10DF
    e0a2:	a0 91 e0 10 	lds	r26, 0x10E0
    e0a6:	b0 91 e1 10 	lds	r27, 0x10E1
    e0aa:	40 8d       	ldd	r20, Z+24	; 0x18
    e0ac:	51 8d       	ldd	r21, Z+25	; 0x19
    e0ae:	62 8d       	ldd	r22, Z+26	; 0x1a
    e0b0:	73 8d       	ldd	r23, Z+27	; 0x1b
    e0b2:	48 17       	cp	r20, r24
    e0b4:	59 07       	cpc	r21, r25
    e0b6:	6a 07       	cpc	r22, r26
    e0b8:	7b 07       	cpc	r23, r27
    e0ba:	08 f0       	brcs	.+2      	; 0xe0be <__vector_17+0xc90>
    e0bc:	e2 c0       	rjmp	.+452    	; 0xe282 <__vector_17+0xe54>
      MultiU24X24toH16(step_rate, deceleration_time, current_block->acceleration_rate);
    e0be:	40 91 e4 10 	lds	r20, 0x10E4
    e0c2:	50 91 e5 10 	lds	r21, 0x10E5
    e0c6:	60 91 e6 10 	lds	r22, 0x10E6
    e0ca:	70 91 e7 10 	lds	r23, 0x10E7
    e0ce:	04 8d       	ldd	r16, Z+28	; 0x1c
    e0d0:	15 8d       	ldd	r17, Z+29	; 0x1d
    e0d2:	26 8d       	ldd	r18, Z+30	; 0x1e
    e0d4:	37 8d       	ldd	r19, Z+31	; 0x1f
    e0d6:	aa 27       	eor	r26, r26
    e0d8:	41 9f       	mul	r20, r17
    e0da:	b1 2d       	mov	r27, r1
    e0dc:	52 9f       	mul	r21, r18
    e0de:	e0 01       	movw	r28, r0
    e0e0:	62 9f       	mul	r22, r18
    e0e2:	d0 0d       	add	r29, r0
    e0e4:	61 9f       	mul	r22, r17
    e0e6:	c0 0d       	add	r28, r0
    e0e8:	d1 1d       	adc	r29, r1
    e0ea:	42 9f       	mul	r20, r18
    e0ec:	b0 0d       	add	r27, r0
    e0ee:	c1 1d       	adc	r28, r1
    e0f0:	da 1f       	adc	r29, r26
    e0f2:	51 9f       	mul	r21, r17
    e0f4:	b0 0d       	add	r27, r0
    e0f6:	c1 1d       	adc	r28, r1
    e0f8:	da 1f       	adc	r29, r26
    e0fa:	60 9f       	mul	r22, r16
    e0fc:	b0 0d       	add	r27, r0
    e0fe:	c1 1d       	adc	r28, r1
    e100:	da 1f       	adc	r29, r26
    e102:	50 9f       	mul	r21, r16
    e104:	b1 0d       	add	r27, r1
    e106:	ca 1f       	adc	r28, r26
    e108:	da 1f       	adc	r29, r26
    e10a:	b6 95       	lsr	r27
    e10c:	ca 1f       	adc	r28, r26
    e10e:	da 1f       	adc	r29, r26
    e110:	11 24       	eor	r1, r1

      if(step_rate > acc_step_rate) { // Check step_rate stays positive
    e112:	20 91 ed 10 	lds	r18, 0x10ED
    e116:	30 91 ee 10 	lds	r19, 0x10EE
    e11a:	2c 17       	cp	r18, r28
    e11c:	3d 07       	cpc	r19, r29
    e11e:	30 f4       	brcc	.+12     	; 0xe12c <__vector_17+0xcfe>
        step_rate = current_block->final_rate;
    e120:	df 01       	movw	r26, r30
    e122:	a0 5c       	subi	r26, 0xC0	; 192
    e124:	bf 4f       	sbci	r27, 0xFF	; 255
    e126:	2d 91       	ld	r18, X+
    e128:	3c 91       	ld	r19, X
    e12a:	02 c0       	rjmp	.+4      	; 0xe130 <__vector_17+0xd02>
      }
      else {
        step_rate = acc_step_rate - step_rate; // Decelerate from aceleration end point.
    e12c:	2c 1b       	sub	r18, r28
    e12e:	3d 0b       	sbc	r19, r29
      }

      // lower limit
      if(step_rate < current_block->final_rate)
    e130:	e0 5c       	subi	r30, 0xC0	; 192
    e132:	ff 4f       	sbci	r31, 0xFF	; 255
    e134:	80 81       	ld	r24, Z
    e136:	91 81       	ldd	r25, Z+1	; 0x01
    e138:	a2 81       	ldd	r26, Z+2	; 0x02
    e13a:	b3 81       	ldd	r27, Z+3	; 0x03
    e13c:	a9 01       	movw	r20, r18
    e13e:	60 e0       	ldi	r22, 0x00	; 0
    e140:	70 e0       	ldi	r23, 0x00	; 0
    e142:	48 17       	cp	r20, r24
    e144:	59 07       	cpc	r21, r25
    e146:	6a 07       	cpc	r22, r26
    e148:	7b 07       	cpc	r23, r27
    e14a:	08 f4       	brcc	.+2      	; 0xe14e <__vector_17+0xd20>
        step_rate = current_block->final_rate;
    e14c:	9c 01       	movw	r18, r24
    e14e:	c9 01       	movw	r24, r18
    e150:	21 34       	cpi	r18, 0x41	; 65
    e152:	bc e9       	ldi	r27, 0x9C	; 156
    e154:	3b 07       	cpc	r19, r27
    e156:	10 f0       	brcs	.+4      	; 0xe15c <__vector_17+0xd2e>
    e158:	80 e4       	ldi	r24, 0x40	; 64
    e15a:	9c e9       	ldi	r25, 0x9C	; 156

FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {
  unsigned short timer;
  if(step_rate > MAX_STEP_FREQUENCY) step_rate = MAX_STEP_FREQUENCY;

  if(step_rate > 20000) { // If steprate > 20kHz >> step 4 times
    e15c:	81 32       	cpi	r24, 0x21	; 33
    e15e:	2e e4       	ldi	r18, 0x4E	; 78
    e160:	92 07       	cpc	r25, r18
    e162:	40 f0       	brcs	.+16     	; 0xe174 <__vector_17+0xd46>
    step_rate = (step_rate >> 2)&0x3fff;
    e164:	96 95       	lsr	r25
    e166:	87 95       	ror	r24
    e168:	96 95       	lsr	r25
    e16a:	87 95       	ror	r24
    step_loops = 4;
    e16c:	24 e0       	ldi	r18, 0x04	; 4
    e16e:	20 93 e8 10 	sts	0x10E8, r18
    e172:	0d c0       	rjmp	.+26     	; 0xe18e <__vector_17+0xd60>
  }
  else if(step_rate > 10000) { // If steprate > 10kHz >> step 2 times
    e174:	81 31       	cpi	r24, 0x11	; 17
    e176:	a7 e2       	ldi	r26, 0x27	; 39
    e178:	9a 07       	cpc	r25, r26
    e17a:	30 f0       	brcs	.+12     	; 0xe188 <__vector_17+0xd5a>
    step_rate = (step_rate >> 1)&0x7fff;
    e17c:	96 95       	lsr	r25
    e17e:	87 95       	ror	r24
    step_loops = 2;
    e180:	22 e0       	ldi	r18, 0x02	; 2
    e182:	20 93 e8 10 	sts	0x10E8, r18
    e186:	03 c0       	rjmp	.+6      	; 0xe18e <__vector_17+0xd60>
  }
  else {
    step_loops = 1;
    e188:	21 e0       	ldi	r18, 0x01	; 1
    e18a:	20 93 e8 10 	sts	0x10E8, r18
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
    e18e:	80 32       	cpi	r24, 0x20	; 32
    e190:	91 05       	cpc	r25, r1
    e192:	18 f1       	brcs	.+70     	; 0xe1da <__vector_17+0xdac>
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    e194:	bc 01       	movw	r22, r24
    e196:	60 52       	subi	r22, 0x20	; 32
    e198:	71 09       	sbc	r23, r1
  if(step_rate >= (8*256)){ // higher step rate
    e19a:	61 15       	cp	r22, r1
    e19c:	b8 e0       	ldi	r27, 0x08	; 8
    e19e:	7b 07       	cpc	r23, r27
    e1a0:	f0 f0       	brcs	.+60     	; 0xe1de <__vector_17+0xdb0>
      SERIAL_PROTOCOL(   digitalRead(E0_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E0_MS2_PIN));
      SERIAL_PROTOCOLPGM("E1: ");
      SERIAL_PROTOCOL(   digitalRead(E1_MS1_PIN));
      SERIAL_PROTOCOLLN( digitalRead(E1_MS2_PIN));
}
    e1a2:	87 2f       	mov	r24, r23
    e1a4:	99 27       	eor	r25, r25
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
  if(step_rate >= (8*256)){ // higher step rate
    unsigned short table_address = (unsigned short)&speed_lookuptable_fast[(unsigned char)(step_rate>>8)][0];
    e1a6:	88 0f       	add	r24, r24
    e1a8:	99 1f       	adc	r25, r25
    e1aa:	88 0f       	add	r24, r24
    e1ac:	99 1f       	adc	r25, r25
    e1ae:	8a 54       	subi	r24, 0x4A	; 74
    e1b0:	97 4f       	sbci	r25, 0xF7	; 247
    unsigned char tmp_step_rate = (step_rate & 0x00ff);
    unsigned short gain = (unsigned short)pgm_read_word_near(table_address+2);
    e1b2:	fc 01       	movw	r30, r24
    e1b4:	32 96       	adiw	r30, 0x02	; 2
    e1b6:	25 91       	lpm	r18, Z+
    e1b8:	34 91       	lpm	r19, Z
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    e1ba:	aa 27       	eor	r26, r26
    e1bc:	63 9f       	mul	r22, r19
    e1be:	a0 01       	movw	r20, r0
    e1c0:	62 9f       	mul	r22, r18
    e1c2:	41 0d       	add	r20, r1
    e1c4:	5a 1f       	adc	r21, r26
    e1c6:	06 94       	lsr	r0
    e1c8:	4a 1f       	adc	r20, r26
    e1ca:	5a 1f       	adc	r21, r26
    e1cc:	11 24       	eor	r1, r1
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
    e1ce:	fc 01       	movw	r30, r24
    e1d0:	25 91       	lpm	r18, Z+
    e1d2:	34 91       	lpm	r19, Z
    e1d4:	24 1b       	sub	r18, r20
    e1d6:	35 0b       	sbc	r19, r21
    e1d8:	22 c0       	rjmp	.+68     	; 0xe21e <__vector_17+0xdf0>
  else {
    step_loops = 1;
  }

  if(step_rate < (F_CPU/500000)) step_rate = (F_CPU/500000);
  step_rate -= (F_CPU/500000); // Correct for minimal speed
    e1da:	60 e0       	ldi	r22, 0x00	; 0
    e1dc:	70 e0       	ldi	r23, 0x00	; 0
    MultiU16X8toH16(timer, tmp_step_rate, gain);
    timer = (unsigned short)pgm_read_word_near(table_address) - timer;
  }
  else { // lower step rates
    unsigned short table_address = (unsigned short)&speed_lookuptable_slow[0][0];
    table_address += ((step_rate)>>1) & 0xfffc;
    e1de:	cb 01       	movw	r24, r22
    e1e0:	96 95       	lsr	r25
    e1e2:	87 95       	ror	r24
    e1e4:	8c 7f       	andi	r24, 0xFC	; 252
    e1e6:	8a 54       	subi	r24, 0x4A	; 74
    e1e8:	93 4f       	sbci	r25, 0xF3	; 243
    timer = (unsigned short)pgm_read_word_near(table_address);
    e1ea:	fc 01       	movw	r30, r24
    e1ec:	25 91       	lpm	r18, Z+
    e1ee:	34 91       	lpm	r19, Z
    timer -= (((unsigned short)pgm_read_word_near(table_address+2) * (unsigned char)(step_rate & 0x0007))>>3);
    e1f0:	02 96       	adiw	r24, 0x02	; 2
    e1f2:	fc 01       	movw	r30, r24
    e1f4:	85 91       	lpm	r24, Z+
    e1f6:	94 91       	lpm	r25, Z
    e1f8:	fb 01       	movw	r30, r22
    e1fa:	e7 70       	andi	r30, 0x07	; 7
    e1fc:	ff 27       	eor	r31, r31
    e1fe:	e8 9f       	mul	r30, r24
    e200:	a0 01       	movw	r20, r0
    e202:	e9 9f       	mul	r30, r25
    e204:	50 0d       	add	r21, r0
    e206:	f8 9f       	mul	r31, r24
    e208:	50 0d       	add	r21, r0
    e20a:	11 24       	eor	r1, r1
    e20c:	ca 01       	movw	r24, r20
    e20e:	96 95       	lsr	r25
    e210:	87 95       	ror	r24
    e212:	96 95       	lsr	r25
    e214:	87 95       	ror	r24
    e216:	96 95       	lsr	r25
    e218:	87 95       	ror	r24
    e21a:	28 1b       	sub	r18, r24
    e21c:	39 0b       	sbc	r19, r25
  }
  if(timer < 100) { timer = 100; MYSERIAL.print(MSG_STEPPER_TOO_HIGH); MYSERIAL.println(step_rate); }//(20kHz this should never happen)
    e21e:	24 36       	cpi	r18, 0x64	; 100
    e220:	31 05       	cpc	r19, r1
    e222:	b0 f4       	brcc	.+44     	; 0xe250 <__vector_17+0xe22>
    e224:	af e2       	ldi	r26, 0x2F	; 47
    e226:	b4 e0       	ldi	r27, 0x04	; 4
    e228:	93 e5       	ldi	r25, 0x53	; 83
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    e22a:	e0 ec       	ldi	r30, 0xC0	; 192
    e22c:	f0 e0       	ldi	r31, 0x00	; 0
        ;

      M_UDRx = c;
    e22e:	c6 ec       	ldi	r28, 0xC6	; 198
    e230:	d0 e0       	ldi	r29, 0x00	; 0
      return (unsigned int)(RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
    }
    
    FORCE_INLINE void write(uint8_t c)
    {
      while (!((M_UCSRxA) & (1 << M_UDREx)))
    e232:	80 81       	ld	r24, Z
    e234:	85 ff       	sbrs	r24, 5
    e236:	fd cf       	rjmp	.-6      	; 0xe232 <__vector_17+0xe04>
        ;

      M_UDRx = c;
    e238:	98 83       	st	Y, r25
    
  public:
    
    FORCE_INLINE void write(const char *str)
    {
      while (*str)
    e23a:	9d 91       	ld	r25, X+
    e23c:	91 11       	cpse	r25, r1
    e23e:	f9 cf       	rjmp	.-14     	; 0xe232 <__vector_17+0xe04>
    e240:	4a e0       	ldi	r20, 0x0A	; 10
    e242:	50 e0       	ldi	r21, 0x00	; 0
    e244:	82 ed       	ldi	r24, 0xD2	; 210
    e246:	94 e0       	ldi	r25, 0x04	; 4
    e248:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_ZN12MarlinSerial7printlnEji>
    e24c:	24 e6       	ldi	r18, 0x64	; 100
    e24e:	30 e0       	ldi	r19, 0x00	; 0
      if(step_rate < current_block->final_rate)
        step_rate = current_block->final_rate;

      // step_rate to timer interval
      timer = calc_timer(step_rate);
      OCR1A = timer;
    e250:	30 93 89 00 	sts	0x0089, r19
    e254:	20 93 88 00 	sts	0x0088, r18
      deceleration_time += timer;
    e258:	80 91 e4 10 	lds	r24, 0x10E4
    e25c:	90 91 e5 10 	lds	r25, 0x10E5
    e260:	a0 91 e6 10 	lds	r26, 0x10E6
    e264:	b0 91 e7 10 	lds	r27, 0x10E7
    e268:	82 0f       	add	r24, r18
    e26a:	93 1f       	adc	r25, r19
    e26c:	a1 1d       	adc	r26, r1
    e26e:	b1 1d       	adc	r27, r1
    e270:	80 93 e4 10 	sts	0x10E4, r24
    e274:	90 93 e5 10 	sts	0x10E5, r25
    e278:	a0 93 e6 10 	sts	0x10E6, r26
    e27c:	b0 93 e7 10 	sts	0x10E7, r27
    e280:	0c c0       	rjmp	.+24     	; 0xe29a <__vector_17+0xe6c>
        e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);
        old_advance = advance >>8;
      #endif //ADVANCE
    }
    else {
      OCR1A = OCR1A_nominal;
    e282:	80 91 e9 10 	lds	r24, 0x10E9
    e286:	90 91 ea 10 	lds	r25, 0x10EA
    e28a:	90 93 89 00 	sts	0x0089, r25
    e28e:	80 93 88 00 	sts	0x0088, r24
      // ensure we're running at the correct step rate, even if we just came off an acceleration
      step_loops = step_loops_nominal;
    e292:	80 91 eb 10 	lds	r24, 0x10EB
    e296:	80 93 e8 10 	sts	0x10E8, r24
    }

    // If current block is finished, reset pointer
    if (step_events_completed >= current_block->step_event_count) {
    e29a:	80 91 de 10 	lds	r24, 0x10DE
    e29e:	90 91 df 10 	lds	r25, 0x10DF
    e2a2:	a0 91 e0 10 	lds	r26, 0x10E0
    e2a6:	b0 91 e1 10 	lds	r27, 0x10E1
    e2aa:	e0 91 e2 10 	lds	r30, 0x10E2
    e2ae:	f0 91 e3 10 	lds	r31, 0x10E3
    e2b2:	40 89       	ldd	r20, Z+16	; 0x10
    e2b4:	51 89       	ldd	r21, Z+17	; 0x11
    e2b6:	62 89       	ldd	r22, Z+18	; 0x12
    e2b8:	73 89       	ldd	r23, Z+19	; 0x13
    e2ba:	84 17       	cp	r24, r20
    e2bc:	95 07       	cpc	r25, r21
    e2be:	a6 07       	cpc	r26, r22
    e2c0:	b7 07       	cpc	r27, r23
    e2c2:	80 f0       	brcs	.+32     	; 0xe2e4 <__vector_17+0xeb6>
      current_block = NULL;
    e2c4:	10 92 e3 10 	sts	0x10E3, r1
    e2c8:	10 92 e2 10 	sts	0x10E2, r1
extern volatile unsigned char block_buffer_tail; 
// Called when the current block is no longer needed. Discards the block and makes the memory
// availible for new blocks.    
FORCE_INLINE void plan_discard_current_block()  
{
  if (block_buffer_head != block_buffer_tail) {
    e2cc:	90 91 58 09 	lds	r25, 0x0958
    e2d0:	80 91 57 09 	lds	r24, 0x0957
    e2d4:	98 17       	cp	r25, r24
    e2d6:	31 f0       	breq	.+12     	; 0xe2e4 <__vector_17+0xeb6>
    block_buffer_tail = (block_buffer_tail + 1) & (BLOCK_BUFFER_SIZE - 1);  
    e2d8:	80 91 57 09 	lds	r24, 0x0957
    e2dc:	8f 5f       	subi	r24, 0xFF	; 255
    e2de:	8f 70       	andi	r24, 0x0F	; 15
    e2e0:	80 93 57 09 	sts	0x0957, r24
      plan_discard_current_block();
    }
  }
}
    e2e4:	ff 91       	pop	r31
    e2e6:	ef 91       	pop	r30
    e2e8:	df 91       	pop	r29
    e2ea:	cf 91       	pop	r28
    e2ec:	bf 91       	pop	r27
    e2ee:	af 91       	pop	r26
    e2f0:	9f 91       	pop	r25
    e2f2:	8f 91       	pop	r24
    e2f4:	7f 91       	pop	r23
    e2f6:	6f 91       	pop	r22
    e2f8:	5f 91       	pop	r21
    e2fa:	4f 91       	pop	r20
    e2fc:	3f 91       	pop	r19
    e2fe:	2f 91       	pop	r18
    e300:	1f 91       	pop	r17
    e302:	0f 91       	pop	r16
    e304:	ff 90       	pop	r15
    e306:	ef 90       	pop	r14
    e308:	df 90       	pop	r13
    e30a:	cf 90       	pop	r12
    e30c:	bf 90       	pop	r11
    e30e:	9f 90       	pop	r9
    e310:	8f 90       	pop	r8
    e312:	7f 90       	pop	r7
    e314:	6f 90       	pop	r6
    e316:	5f 90       	pop	r5
    e318:	4f 90       	pop	r4
    e31a:	3f 90       	pop	r3
    e31c:	2f 90       	pop	r2
    e31e:	0f 90       	pop	r0
    e320:	0b be       	out	0x3b, r0	; 59
    e322:	0f 90       	pop	r0
    e324:	0f be       	out	0x3f, r0	; 63
    e326:	0f 90       	pop	r0
    e328:	1f 90       	pop	r1
    e32a:	18 95       	reti

0000e32c <_Z7st_initv>:
  digipot_init(); //Initialize Digipot Motor Current
  microstep_init(); //Initialize Microstepping Pins

  //Initialize Dir Pins
  #if defined(X_DIR_PIN) && X_DIR_PIN > -1
    SET_OUTPUT(X_DIR_PIN);
    e32c:	09 9a       	sbi	0x01, 1	; 1
  #endif
  #if defined(X2_DIR_PIN) && X2_DIR_PIN > -1
    SET_OUTPUT(X2_DIR_PIN);
  #endif
  #if defined(Y_DIR_PIN) && Y_DIR_PIN > -1
    SET_OUTPUT(Y_DIR_PIN);
    e32e:	3c 9a       	sbi	0x07, 4	; 7
  #endif
  #if defined(Z_DIR_PIN) && Z_DIR_PIN > -1
    SET_OUTPUT(Z_DIR_PIN);
    e330:	9a 9a       	sbi	0x13, 2	; 19
    #if defined(Z_DUAL_STEPPER_DRIVERS) && defined(Z2_DIR_PIN) && (Z2_DIR_PIN > -1)
      SET_OUTPUT(Z2_DIR_PIN);
    #endif
  #endif
  #if defined(E0_DIR_PIN) && E0_DIR_PIN > -1
    SET_OUTPUT(E0_DIR_PIN);
    e332:	ea e0       	ldi	r30, 0x0A	; 10
    e334:	f1 e0       	ldi	r31, 0x01	; 1
    e336:	80 81       	ld	r24, Z
    e338:	80 61       	ori	r24, 0x10	; 16
    e33a:	80 83       	st	Z, r24
  #endif
  #if defined(E1_DIR_PIN) && (E1_DIR_PIN > -1)
    SET_OUTPUT(E1_DIR_PIN);
    e33c:	80 81       	ld	r24, Z
    e33e:	84 60       	ori	r24, 0x04	; 4
    e340:	80 83       	st	Z, r24
  #endif

  //Initialize Enable Pins - steppers default to disabled.

  #if defined(X_ENABLE_PIN) && X_ENABLE_PIN > -1
    SET_OUTPUT(X_ENABLE_PIN);
    e342:	0d 9a       	sbi	0x01, 5	; 1
    if(!X_ENABLE_ON) WRITE(X_ENABLE_PIN,HIGH);
    e344:	15 9a       	sbi	0x02, 5	; 2
  #if defined(X2_ENABLE_PIN) && X2_ENABLE_PIN > -1
    SET_OUTPUT(X2_ENABLE_PIN);
    if(!X_ENABLE_ON) WRITE(X2_ENABLE_PIN,HIGH);
  #endif
  #if defined(Y_ENABLE_PIN) && Y_ENABLE_PIN > -1
    SET_OUTPUT(Y_ENABLE_PIN);
    e346:	0f 9a       	sbi	0x01, 7	; 1
    if(!Y_ENABLE_ON) WRITE(Y_ENABLE_PIN,HIGH);
    e348:	17 9a       	sbi	0x02, 7	; 2
  #endif
  #if defined(Z_ENABLE_PIN) && Z_ENABLE_PIN > -1
    SET_OUTPUT(Z_ENABLE_PIN);
    e34a:	3a 9a       	sbi	0x07, 2	; 7
    if(!Z_ENABLE_ON) WRITE(Z_ENABLE_PIN,HIGH);
    e34c:	42 9a       	sbi	0x08, 2	; 8
      SET_OUTPUT(Z2_ENABLE_PIN);
      if(!Z_ENABLE_ON) WRITE(Z2_ENABLE_PIN,HIGH);
    #endif
  #endif
  #if defined(E0_ENABLE_PIN) && (E0_ENABLE_PIN > -1)
    SET_OUTPUT(E0_ENABLE_PIN);
    e34e:	98 9a       	sbi	0x13, 0	; 19
    if(!E_ENABLE_ON) WRITE(E0_ENABLE_PIN,HIGH);
    e350:	a0 9a       	sbi	0x14, 0	; 20
  #endif
  #if defined(E1_ENABLE_PIN) && (E1_ENABLE_PIN > -1)
    SET_OUTPUT(E1_ENABLE_PIN);
    e352:	80 81       	ld	r24, Z
    e354:	82 60       	ori	r24, 0x02	; 2
    e356:	80 83       	st	Z, r24
    if(!E_ENABLE_ON) WRITE(E1_ENABLE_PIN,HIGH);
    e358:	8f b7       	in	r24, 0x3f	; 63
    e35a:	f8 94       	cli
    e35c:	ab e0       	ldi	r26, 0x0B	; 11
    e35e:	b1 e0       	ldi	r27, 0x01	; 1
    e360:	9c 91       	ld	r25, X
    e362:	92 60       	ori	r25, 0x02	; 2
    e364:	9c 93       	st	X, r25
    e366:	8f bf       	out	0x3f, r24	; 63
  #endif

  //endstops and pullups

  #if defined(X_MIN_PIN) && X_MIN_PIN > -1
    SET_INPUT(X_MIN_PIN);
    e368:	08 98       	cbi	0x01, 0	; 1
    #ifdef ENDSTOPPULLUP_XMIN
      WRITE(X_MIN_PIN,HIGH);
    e36a:	10 9a       	sbi	0x02, 0	; 2
    #endif
  #endif

  #if defined(Y_MIN_PIN) && Y_MIN_PIN > -1
    SET_INPUT(Y_MIN_PIN);
    e36c:	0c 98       	cbi	0x01, 4	; 1
    #ifdef ENDSTOPPULLUP_YMIN
      WRITE(Y_MIN_PIN,HIGH);
    e36e:	14 9a       	sbi	0x02, 4	; 2
    #endif
  #endif

  #if defined(Z_MIN_PIN) && Z_MIN_PIN > -1
    SET_INPUT(Z_MIN_PIN);
    e370:	3f 98       	cbi	0x07, 7	; 7
    #ifdef ENDSTOPPULLUP_ZMIN
      WRITE(Z_MIN_PIN,HIGH);
    e372:	47 9a       	sbi	0x08, 7	; 8
    #endif
  #endif

  #if defined(X_MAX_PIN) && X_MAX_PIN > -1
    SET_INPUT(X_MAX_PIN);
    e374:	0a 98       	cbi	0x01, 2	; 1
    #ifdef ENDSTOPPULLUP_XMAX
      WRITE(X_MAX_PIN,HIGH);
    e376:	12 9a       	sbi	0x02, 2	; 2
    #endif
  #endif

  #if defined(Y_MAX_PIN) && Y_MAX_PIN > -1
    SET_INPUT(Y_MAX_PIN);
    e378:	0e 98       	cbi	0x01, 6	; 1
    #ifdef ENDSTOPPULLUP_YMAX
      WRITE(Y_MAX_PIN,HIGH);
    e37a:	16 9a       	sbi	0x02, 6	; 2
    #endif
  #endif

  #if defined(Z_MAX_PIN) && Z_MAX_PIN > -1
    SET_INPUT(Z_MAX_PIN);
    e37c:	3d 98       	cbi	0x07, 5	; 7
    #ifdef ENDSTOPPULLUP_ZMAX
      WRITE(Z_MAX_PIN,HIGH);
    e37e:	45 9a       	sbi	0x08, 5	; 8
  #endif


  //Initialize Step Pins
  #if defined(X_STEP_PIN) && (X_STEP_PIN > -1)
    SET_OUTPUT(X_STEP_PIN);
    e380:	0b 9a       	sbi	0x01, 3	; 1
    WRITE(X_STEP_PIN,INVERT_X_STEP_PIN);
    e382:	13 98       	cbi	0x02, 3	; 2
    disable_x();
    e384:	15 9a       	sbi	0x02, 5	; 2
    SET_OUTPUT(X2_STEP_PIN);
    WRITE(X2_STEP_PIN,INVERT_X_STEP_PIN);
    disable_x();
  #endif
  #if defined(Y_STEP_PIN) && (Y_STEP_PIN > -1)
    SET_OUTPUT(Y_STEP_PIN);
    e386:	3e 9a       	sbi	0x07, 6	; 7
    WRITE(Y_STEP_PIN,INVERT_Y_STEP_PIN);
    e388:	46 98       	cbi	0x08, 6	; 8
    disable_y();
    e38a:	17 9a       	sbi	0x02, 7	; 2
  #endif
  #if defined(Z_STEP_PIN) && (Z_STEP_PIN > -1)
    SET_OUTPUT(Z_STEP_PIN);
    e38c:	38 9a       	sbi	0x07, 0	; 7
    WRITE(Z_STEP_PIN,INVERT_Z_STEP_PIN);
    e38e:	40 98       	cbi	0x08, 0	; 8
    #if defined(Z_DUAL_STEPPER_DRIVERS) && defined(Z2_STEP_PIN) && (Z2_STEP_PIN > -1)
      SET_OUTPUT(Z2_STEP_PIN);
      WRITE(Z2_STEP_PIN,INVERT_Z_STEP_PIN);
    #endif
    disable_z();
    e390:	42 9a       	sbi	0x08, 2	; 8
  #endif
  #if defined(E0_STEP_PIN) && (E0_STEP_PIN > -1)
    SET_OUTPUT(E0_STEP_PIN);
    e392:	80 81       	ld	r24, Z
    e394:	80 64       	ori	r24, 0x40	; 64
    e396:	80 83       	st	Z, r24
    WRITE(E0_STEP_PIN,INVERT_E_STEP_PIN);
    e398:	8f b7       	in	r24, 0x3f	; 63
    e39a:	f8 94       	cli
    e39c:	9c 91       	ld	r25, X
    e39e:	9f 7b       	andi	r25, 0xBF	; 191
    e3a0:	9c 93       	st	X, r25
    e3a2:	8f bf       	out	0x3f, r24	; 63
    disable_e0();
    e3a4:	a0 9a       	sbi	0x14, 0	; 20
  #endif
  #if defined(E1_STEP_PIN) && (E1_STEP_PIN > -1)
    SET_OUTPUT(E1_STEP_PIN);
    e3a6:	80 81       	ld	r24, Z
    e3a8:	81 60       	ori	r24, 0x01	; 1
    e3aa:	80 83       	st	Z, r24
    WRITE(E1_STEP_PIN,INVERT_E_STEP_PIN);
    e3ac:	8f b7       	in	r24, 0x3f	; 63
    e3ae:	f8 94       	cli
    e3b0:	9c 91       	ld	r25, X
    e3b2:	9e 7f       	andi	r25, 0xFE	; 254
    e3b4:	9c 93       	st	X, r25
    e3b6:	8f bf       	out	0x3f, r24	; 63
    WRITE(E2_STEP_PIN,INVERT_E_STEP_PIN);
    disable_e2();
  #endif

  // waveform generation = 0100 = CTC
  TCCR1B &= ~(1<<WGM13);
    e3b8:	a1 e8       	ldi	r26, 0x81	; 129
    e3ba:	b0 e0       	ldi	r27, 0x00	; 0
    e3bc:	8c 91       	ld	r24, X
    e3be:	8f 7e       	andi	r24, 0xEF	; 239
    e3c0:	8c 93       	st	X, r24
  TCCR1B |=  (1<<WGM12);
    e3c2:	8c 91       	ld	r24, X
    e3c4:	88 60       	ori	r24, 0x08	; 8
    e3c6:	8c 93       	st	X, r24
  TCCR1A &= ~(1<<WGM11);
    e3c8:	e0 e8       	ldi	r30, 0x80	; 128
    e3ca:	f0 e0       	ldi	r31, 0x00	; 0
    e3cc:	80 81       	ld	r24, Z
    e3ce:	8d 7f       	andi	r24, 0xFD	; 253
    e3d0:	80 83       	st	Z, r24
  TCCR1A &= ~(1<<WGM10);
    e3d2:	80 81       	ld	r24, Z
    e3d4:	8e 7f       	andi	r24, 0xFE	; 254
    e3d6:	80 83       	st	Z, r24

  // output mode = 00 (disconnected)
  TCCR1A &= ~(3<<COM1A0);
    e3d8:	80 81       	ld	r24, Z
    e3da:	8f 73       	andi	r24, 0x3F	; 63
    e3dc:	80 83       	st	Z, r24
  TCCR1A &= ~(3<<COM1B0);
    e3de:	80 81       	ld	r24, Z
    e3e0:	8f 7c       	andi	r24, 0xCF	; 207
    e3e2:	80 83       	st	Z, r24
  // Set the timer pre-scaler
  // Generally we use a divider of 8, resulting in a 2MHz timer
  // frequency on a 16MHz MCU. If you are going to change this, be
  // sure to regenerate speed_lookuptable.h with
  // create_speed_lookuptable.py
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | (2<<CS10);
    e3e4:	8c 91       	ld	r24, X
    e3e6:	88 7f       	andi	r24, 0xF8	; 248
    e3e8:	82 60       	ori	r24, 0x02	; 2
    e3ea:	8c 93       	st	X, r24

  OCR1A = 0x4000;
    e3ec:	80 e0       	ldi	r24, 0x00	; 0
    e3ee:	90 e4       	ldi	r25, 0x40	; 64
    e3f0:	90 93 89 00 	sts	0x0089, r25
    e3f4:	80 93 88 00 	sts	0x0088, r24
  TCNT1 = 0;
    e3f8:	10 92 85 00 	sts	0x0085, r1
    e3fc:	10 92 84 00 	sts	0x0084, r1
  ENABLE_STEPPER_DRIVER_INTERRUPT();
    e400:	ef e6       	ldi	r30, 0x6F	; 111
    e402:	f0 e0       	ldi	r31, 0x00	; 0
    e404:	80 81       	ld	r24, Z
    e406:	82 60       	ori	r24, 0x02	; 2
    e408:	80 83       	st	Z, r24
    e_steps[1] = 0;
    e_steps[2] = 0;
    TIMSK0 |= (1<<OCIE0A);
  #endif //ADVANCE

  enable_endstops(true); // Start with endstops active. After homing they can be disabled
    e40a:	81 e0       	ldi	r24, 0x01	; 1
    e40c:	07 d8       	rcall	.-4082   	; 0xd41c <_Z15enable_endstopsb>
  sei();
    e40e:	78 94       	sei
    e410:	08 95       	ret

0000e412 <_Z14st_synchronizev>:
}

// Gets the current block. Returns NULL if buffer empty
FORCE_INLINE bool blocks_queued() 
{
  if (block_buffer_head == block_buffer_tail) { 
    e412:	90 91 58 09 	lds	r25, 0x0958
    e416:	80 91 57 09 	lds	r24, 0x0957


// Block until all buffered steps are executed
void st_synchronize()
{
    while( blocks_queued()) {
    e41a:	98 17       	cp	r25, r24
    e41c:	59 f0       	breq	.+22     	; 0xe434 <_Z14st_synchronizev+0x22>
    manage_heater();
    e41e:	2f d1       	rcall	.+606    	; 0xe67e <_Z13manage_heaterv>
    manage_inactivity();
    e420:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_Z17manage_inactivityv>
    lcd_update();
    e424:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
    e428:	90 91 58 09 	lds	r25, 0x0958
    e42c:	80 91 57 09 	lds	r24, 0x0957


// Block until all buffered steps are executed
void st_synchronize()
{
    while( blocks_queued()) {
    e430:	98 13       	cpse	r25, r24
    e432:	f5 cf       	rjmp	.-22     	; 0xe41e <_Z14st_synchronizev+0xc>
    e434:	08 95       	ret

0000e436 <_Z15st_set_positionRKlS0_S0_S0_>:
    lcd_update();
  }
}

void st_set_position(const long &x, const long &y, const long &z, const long &e)
{
    e436:	cf 93       	push	r28
    e438:	df 93       	push	r29
  CRITICAL_SECTION_START;
    e43a:	ef b7       	in	r30, 0x3f	; 63
    e43c:	f8 94       	cli
  count_position[X_AXIS] = x;
    e43e:	ec 01       	movw	r28, r24
    e440:	88 81       	ld	r24, Y
    e442:	99 81       	ldd	r25, Y+1	; 0x01
    e444:	aa 81       	ldd	r26, Y+2	; 0x02
    e446:	bb 81       	ldd	r27, Y+3	; 0x03
    e448:	80 93 bf 10 	sts	0x10BF, r24
    e44c:	90 93 c0 10 	sts	0x10C0, r25
    e450:	a0 93 c1 10 	sts	0x10C1, r26
    e454:	b0 93 c2 10 	sts	0x10C2, r27
  count_position[Y_AXIS] = y;
    e458:	eb 01       	movw	r28, r22
    e45a:	88 81       	ld	r24, Y
    e45c:	99 81       	ldd	r25, Y+1	; 0x01
    e45e:	aa 81       	ldd	r26, Y+2	; 0x02
    e460:	bb 81       	ldd	r27, Y+3	; 0x03
    e462:	80 93 c3 10 	sts	0x10C3, r24
    e466:	90 93 c4 10 	sts	0x10C4, r25
    e46a:	a0 93 c5 10 	sts	0x10C5, r26
    e46e:	b0 93 c6 10 	sts	0x10C6, r27
  count_position[Z_AXIS] = z;
    e472:	ea 01       	movw	r28, r20
    e474:	88 81       	ld	r24, Y
    e476:	99 81       	ldd	r25, Y+1	; 0x01
    e478:	aa 81       	ldd	r26, Y+2	; 0x02
    e47a:	bb 81       	ldd	r27, Y+3	; 0x03
    e47c:	80 93 c7 10 	sts	0x10C7, r24
    e480:	90 93 c8 10 	sts	0x10C8, r25
    e484:	a0 93 c9 10 	sts	0x10C9, r26
    e488:	b0 93 ca 10 	sts	0x10CA, r27
  count_position[E_AXIS] = e;
    e48c:	e9 01       	movw	r28, r18
    e48e:	88 81       	ld	r24, Y
    e490:	99 81       	ldd	r25, Y+1	; 0x01
    e492:	aa 81       	ldd	r26, Y+2	; 0x02
    e494:	bb 81       	ldd	r27, Y+3	; 0x03
    e496:	80 93 cb 10 	sts	0x10CB, r24
    e49a:	90 93 cc 10 	sts	0x10CC, r25
    e49e:	a0 93 cd 10 	sts	0x10CD, r26
    e4a2:	b0 93 ce 10 	sts	0x10CE, r27
  CRITICAL_SECTION_END;
    e4a6:	ef bf       	out	0x3f, r30	; 63
}
    e4a8:	df 91       	pop	r29
    e4aa:	cf 91       	pop	r28
    e4ac:	08 95       	ret

0000e4ae <_Z17st_set_e_positionRKl>:

void st_set_e_position(const long &e)
{
  CRITICAL_SECTION_START;
    e4ae:	2f b7       	in	r18, 0x3f	; 63
    e4b0:	f8 94       	cli
  count_position[E_AXIS] = e;
    e4b2:	fc 01       	movw	r30, r24
    e4b4:	80 81       	ld	r24, Z
    e4b6:	91 81       	ldd	r25, Z+1	; 0x01
    e4b8:	a2 81       	ldd	r26, Z+2	; 0x02
    e4ba:	b3 81       	ldd	r27, Z+3	; 0x03
    e4bc:	80 93 cb 10 	sts	0x10CB, r24
    e4c0:	90 93 cc 10 	sts	0x10CC, r25
    e4c4:	a0 93 cd 10 	sts	0x10CD, r26
    e4c8:	b0 93 ce 10 	sts	0x10CE, r27
  CRITICAL_SECTION_END;
    e4cc:	2f bf       	out	0x3f, r18	; 63
    e4ce:	08 95       	ret

0000e4d0 <_Z15st_get_positionh>:
}

long st_get_position(uint8_t axis)
{
    e4d0:	0f 93       	push	r16
    e4d2:	1f 93       	push	r17
  long count_pos;
  CRITICAL_SECTION_START;
    e4d4:	9f b7       	in	r25, 0x3f	; 63
    e4d6:	f8 94       	cli
  count_pos = count_position[axis];
    e4d8:	e8 2f       	mov	r30, r24
    e4da:	f0 e0       	ldi	r31, 0x00	; 0
    e4dc:	ee 0f       	add	r30, r30
    e4de:	ff 1f       	adc	r31, r31
    e4e0:	ee 0f       	add	r30, r30
    e4e2:	ff 1f       	adc	r31, r31
    e4e4:	e1 54       	subi	r30, 0x41	; 65
    e4e6:	ff 4e       	sbci	r31, 0xEF	; 239
    e4e8:	00 81       	ld	r16, Z
    e4ea:	11 81       	ldd	r17, Z+1	; 0x01
    e4ec:	22 81       	ldd	r18, Z+2	; 0x02
    e4ee:	33 81       	ldd	r19, Z+3	; 0x03
  CRITICAL_SECTION_END;
    e4f0:	9f bf       	out	0x3f, r25	; 63
  return count_pos;
}
    e4f2:	60 2f       	mov	r22, r16
    e4f4:	71 2f       	mov	r23, r17
    e4f6:	82 2f       	mov	r24, r18
    e4f8:	93 2f       	mov	r25, r19
    e4fa:	1f 91       	pop	r17
    e4fc:	0f 91       	pop	r16
    e4fe:	08 95       	ret

0000e500 <_Z24finishAndDisableSteppersv>:

void finishAndDisableSteppers()
{
  st_synchronize();
    e500:	88 df       	rcall	.-240    	; 0xe412 <_Z14st_synchronizev>
  disable_x();
    e502:	15 9a       	sbi	0x02, 5	; 2
  disable_y();
    e504:	17 9a       	sbi	0x02, 7	; 2
  disable_z();
    e506:	42 9a       	sbi	0x08, 2	; 8
  disable_e0();
    e508:	a0 9a       	sbi	0x14, 0	; 20
    e50a:	08 95       	ret

0000e50c <_Z9quickStopv>:
  disable_e2();
}

void quickStop()
{
  DISABLE_STEPPER_DRIVER_INTERRUPT();
    e50c:	ef e6       	ldi	r30, 0x6F	; 111
    e50e:	f0 e0       	ldi	r31, 0x00	; 0
    e510:	80 81       	ld	r24, Z
    e512:	8d 7f       	andi	r24, 0xFD	; 253
    e514:	80 83       	st	Z, r24
  while(blocks_queued())
    e516:	0c c0       	rjmp	.+24     	; 0xe530 <_Z9quickStopv+0x24>
extern volatile unsigned char block_buffer_tail; 
// Called when the current block is no longer needed. Discards the block and makes the memory
// availible for new blocks.    
FORCE_INLINE void plan_discard_current_block()  
{
  if (block_buffer_head != block_buffer_tail) {
    e518:	90 91 58 09 	lds	r25, 0x0958
    e51c:	80 91 57 09 	lds	r24, 0x0957
    e520:	98 17       	cp	r25, r24
    e522:	31 f0       	breq	.+12     	; 0xe530 <_Z9quickStopv+0x24>
    block_buffer_tail = (block_buffer_tail + 1) & (BLOCK_BUFFER_SIZE - 1);  
    e524:	80 91 57 09 	lds	r24, 0x0957
    e528:	8f 5f       	subi	r24, 0xFF	; 255
    e52a:	8f 70       	andi	r24, 0x0F	; 15
    e52c:	80 93 57 09 	sts	0x0957, r24
}

// Gets the current block. Returns NULL if buffer empty
FORCE_INLINE bool blocks_queued() 
{
  if (block_buffer_head == block_buffer_tail) { 
    e530:	90 91 58 09 	lds	r25, 0x0958
    e534:	80 91 57 09 	lds	r24, 0x0957
    e538:	98 13       	cpse	r25, r24
    e53a:	ee cf       	rjmp	.-36     	; 0xe518 <_Z9quickStopv+0xc>
    plan_discard_current_block();
  current_block = NULL;
    e53c:	10 92 e3 10 	sts	0x10E3, r1
    e540:	10 92 e2 10 	sts	0x10E2, r1
  ENABLE_STEPPER_DRIVER_INTERRUPT();
    e544:	ef e6       	ldi	r30, 0x6F	; 111
    e546:	f0 e0       	ldi	r31, 0x00	; 0
    e548:	80 81       	ld	r24, Z
    e54a:	82 60       	ori	r24, 0x02	; 2
    e54c:	80 83       	st	Z, r24
    e54e:	08 95       	ret

0000e550 <_ZL11analog2tempih>:
    LCD_ALERTMESSAGEPGM("Err: MAXTEMP BED");
  }
  #ifndef BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE
  Stop();
  #endif
}
    e550:	0f 93       	push	r16
    e552:	1f 93       	push	r17
    e554:	cf 93       	push	r28
    e556:	df 93       	push	r29
    e558:	8c 01       	movw	r16, r24
    e55a:	66 23       	and	r22, r22
    e55c:	09 f4       	brne	.+2      	; 0xe560 <_ZL11analog2tempih+0x10>
    e55e:	33 c0       	rjmp	.+102    	; 0xe5c6 <_ZL11analog2tempih+0x76>
    e560:	ef e9       	ldi	r30, 0x9F	; 159
    e562:	f1 e1       	ldi	r31, 0x11	; 17
    e564:	94 91       	lpm	r25, Z
    e566:	99 23       	and	r25, r25
    e568:	61 f0       	breq	.+24     	; 0xe582 <_ZL11analog2tempih+0x32>
    e56a:	a0 ec       	ldi	r26, 0xC0	; 192
    e56c:	b0 e0       	ldi	r27, 0x00	; 0
    e56e:	c6 ec       	ldi	r28, 0xC6	; 198
    e570:	d0 e0       	ldi	r29, 0x00	; 0
    e572:	8c 91       	ld	r24, X
    e574:	85 ff       	sbrs	r24, 5
    e576:	fd cf       	rjmp	.-6      	; 0xe572 <_ZL11analog2tempih+0x22>
    e578:	98 83       	st	Y, r25
    e57a:	31 96       	adiw	r30, 0x01	; 1
    e57c:	94 91       	lpm	r25, Z
    e57e:	91 11       	cpse	r25, r1
    e580:	f8 cf       	rjmp	.-16     	; 0xe572 <_ZL11analog2tempih+0x22>
    e582:	4a e0       	ldi	r20, 0x0A	; 10
    e584:	50 e0       	ldi	r21, 0x00	; 0
    e586:	70 e0       	ldi	r23, 0x00	; 0
    e588:	82 ed       	ldi	r24, 0xD2	; 210
    e58a:	94 e0       	ldi	r25, 0x04	; 4
    e58c:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
    e590:	e6 ea       	ldi	r30, 0xA6	; 166
    e592:	f1 e1       	ldi	r31, 0x11	; 17
    e594:	94 91       	lpm	r25, Z
    e596:	99 23       	and	r25, r25
    e598:	61 f0       	breq	.+24     	; 0xe5b2 <_ZL11analog2tempih+0x62>
    e59a:	a0 ec       	ldi	r26, 0xC0	; 192
    e59c:	b0 e0       	ldi	r27, 0x00	; 0
    e59e:	c6 ec       	ldi	r28, 0xC6	; 198
    e5a0:	d0 e0       	ldi	r29, 0x00	; 0
    e5a2:	8c 91       	ld	r24, X
    e5a4:	85 ff       	sbrs	r24, 5
    e5a6:	fd cf       	rjmp	.-6      	; 0xe5a2 <_ZL11analog2tempih+0x52>
    e5a8:	98 83       	st	Y, r25
    e5aa:	31 96       	adiw	r30, 0x01	; 1
    e5ac:	94 91       	lpm	r25, Z
    e5ae:	91 11       	cpse	r25, r1
    e5b0:	f8 cf       	rjmp	.-16     	; 0xe5a2 <_ZL11analog2tempih+0x52>
    e5b2:	e0 ec       	ldi	r30, 0xC0	; 192
    e5b4:	f0 e0       	ldi	r31, 0x00	; 0
    e5b6:	80 81       	ld	r24, Z
    e5b8:	85 ff       	sbrs	r24, 5
    e5ba:	fd cf       	rjmp	.-6      	; 0xe5b6 <_ZL11analog2tempih+0x66>
    e5bc:	8a e0       	ldi	r24, 0x0A	; 10
    e5be:	80 93 c6 00 	sts	0x00C6, r24
    e5c2:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_Z4killv>
    e5c6:	b8 01       	movw	r22, r16
    e5c8:	88 27       	eor	r24, r24
    e5ca:	77 fd       	sbrc	r23, 7
    e5cc:	80 95       	com	r24
    e5ce:	98 2f       	mov	r25, r24
    e5d0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    e5d4:	20 e0       	ldi	r18, 0x00	; 0
    e5d6:	30 e0       	ldi	r19, 0x00	; 0
    e5d8:	4a ef       	ldi	r20, 0xFA	; 250
    e5da:	5e e3       	ldi	r21, 0x3E	; 62
    e5dc:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e5e0:	20 e0       	ldi	r18, 0x00	; 0
    e5e2:	30 e0       	ldi	r19, 0x00	; 0
    e5e4:	40 e8       	ldi	r20, 0x80	; 128
    e5e6:	5d e3       	ldi	r21, 0x3D	; 61
    e5e8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e5ec:	20 e0       	ldi	r18, 0x00	; 0
    e5ee:	30 e0       	ldi	r19, 0x00	; 0
    e5f0:	a9 01       	movw	r20, r18
    e5f2:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    e5f6:	df 91       	pop	r29
    e5f8:	cf 91       	pop	r28
    e5fa:	1f 91       	pop	r17
    e5fc:	0f 91       	pop	r16
    e5fe:	08 95       	ret

0000e600 <_ZL31updateTemperaturesFromRawValuesv>:
    e600:	60 e0       	ldi	r22, 0x00	; 0
    e602:	80 91 15 11 	lds	r24, 0x1115
    e606:	90 91 16 11 	lds	r25, 0x1116
    e60a:	a2 df       	rcall	.-188    	; 0xe550 <_ZL11analog2tempih>
    e60c:	60 93 11 11 	sts	0x1111, r22
    e610:	70 93 12 11 	sts	0x1112, r23
    e614:	80 93 13 11 	sts	0x1113, r24
    e618:	90 93 14 11 	sts	0x1114, r25
    e61c:	10 92 0b 11 	sts	0x110B, r1
    e620:	10 92 0c 11 	sts	0x110C, r1
    e624:	10 92 0d 11 	sts	0x110D, r1
    e628:	10 92 0e 11 	sts	0x110E, r1
    e62c:	8f b7       	in	r24, 0x3f	; 63
    e62e:	f8 94       	cli
    e630:	10 92 0a 11 	sts	0x110A, r1
    e634:	8f bf       	out	0x3f, r24	; 63
    e636:	08 95       	ret

0000e638 <_Z9updatePIDv>:
    e638:	20 91 57 02 	lds	r18, 0x0257
    e63c:	30 91 58 02 	lds	r19, 0x0258
    e640:	40 91 59 02 	lds	r20, 0x0259
    e644:	50 91 5a 02 	lds	r21, 0x025A
    e648:	60 e0       	ldi	r22, 0x00	; 0
    e64a:	70 e0       	ldi	r23, 0x00	; 0
    e64c:	8f e7       	ldi	r24, 0x7F	; 127
    e64e:	93 e4       	ldi	r25, 0x43	; 67
    e650:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    e654:	60 93 1d 11 	sts	0x111D, r22
    e658:	70 93 1e 11 	sts	0x111E, r23
    e65c:	80 93 1f 11 	sts	0x111F, r24
    e660:	90 93 20 11 	sts	0x1120, r25
    e664:	08 95       	ret

0000e666 <_Z14getHeaterPoweri>:
    e666:	99 23       	and	r25, r25
    e668:	24 f4       	brge	.+8      	; 0xe672 <_Z14getHeaterPoweri+0xc>
    e66a:	80 91 1b 11 	lds	r24, 0x111B
    e66e:	90 e0       	ldi	r25, 0x00	; 0
    e670:	08 95       	ret
    e672:	fc 01       	movw	r30, r24
    e674:	e4 5e       	subi	r30, 0xE4	; 228
    e676:	fe 4e       	sbci	r31, 0xEE	; 238
    e678:	80 81       	ld	r24, Z
    e67a:	90 e0       	ldi	r25, 0x00	; 0
    e67c:	08 95       	ret

0000e67e <_Z13manage_heaterv>:
    e67e:	2f 92       	push	r2
    e680:	3f 92       	push	r3
    e682:	4f 92       	push	r4
    e684:	5f 92       	push	r5
    e686:	6f 92       	push	r6
    e688:	7f 92       	push	r7
    e68a:	8f 92       	push	r8
    e68c:	9f 92       	push	r9
    e68e:	af 92       	push	r10
    e690:	bf 92       	push	r11
    e692:	cf 92       	push	r12
    e694:	df 92       	push	r13
    e696:	ef 92       	push	r14
    e698:	ff 92       	push	r15
    e69a:	0f 93       	push	r16
    e69c:	1f 93       	push	r17
    e69e:	cf 93       	push	r28
    e6a0:	df 93       	push	r29
    e6a2:	1f 92       	push	r1
    e6a4:	1f 92       	push	r1
    e6a6:	cd b7       	in	r28, 0x3d	; 61
    e6a8:	de b7       	in	r29, 0x3e	; 62
    e6aa:	80 91 0a 11 	lds	r24, 0x110A
    e6ae:	88 23       	and	r24, r24
    e6b0:	09 f4       	brne	.+2      	; 0xe6b4 <_Z13manage_heaterv+0x36>
    e6b2:	c4 c1       	rjmp	.+904    	; 0xea3c <_Z13manage_heaterv+0x3be>
    e6b4:	a5 df       	rcall	.-182    	; 0xe600 <_ZL31updateTemperaturesFromRawValuesv>
    e6b6:	80 90 11 11 	lds	r8, 0x1111
    e6ba:	90 90 12 11 	lds	r9, 0x1112
    e6be:	a0 90 13 11 	lds	r10, 0x1113
    e6c2:	b0 90 14 11 	lds	r11, 0x1114
    e6c6:	e0 90 19 11 	lds	r14, 0x1119
    e6ca:	f0 90 1a 11 	lds	r15, 0x111A
    e6ce:	b7 01       	movw	r22, r14
    e6d0:	88 27       	eor	r24, r24
    e6d2:	77 fd       	sbrc	r23, 7
    e6d4:	80 95       	com	r24
    e6d6:	98 2f       	mov	r25, r24
    e6d8:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    e6dc:	a5 01       	movw	r20, r10
    e6de:	94 01       	movw	r18, r8
    e6e0:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    e6e4:	66 2e       	mov	r6, r22
    e6e6:	77 2e       	mov	r7, r23
    e6e8:	08 2f       	mov	r16, r24
    e6ea:	19 2f       	mov	r17, r25
    e6ec:	98 2f       	mov	r25, r24
    e6ee:	46 2d       	mov	r20, r6
    e6f0:	57 2d       	mov	r21, r7
    e6f2:	69 2f       	mov	r22, r25
    e6f4:	71 2f       	mov	r23, r17
    e6f6:	40 93 21 11 	sts	0x1121, r20
    e6fa:	50 93 22 11 	sts	0x1122, r21
    e6fe:	60 93 23 11 	sts	0x1123, r22
    e702:	70 93 24 11 	sts	0x1124, r23
    e706:	20 e0       	ldi	r18, 0x00	; 0
    e708:	30 e0       	ldi	r19, 0x00	; 0
    e70a:	40 e2       	ldi	r20, 0x20	; 32
    e70c:	51 e4       	ldi	r21, 0x41	; 65
    e70e:	66 2d       	mov	r22, r6
    e710:	77 2d       	mov	r23, r7
    e712:	80 2f       	mov	r24, r16
    e714:	91 2f       	mov	r25, r17
    e716:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    e71a:	18 16       	cp	r1, r24
    e71c:	74 f4       	brge	.+28     	; 0xe73a <_Z13manage_heaterv+0xbc>
    e71e:	81 e0       	ldi	r24, 0x01	; 1
    e720:	80 93 25 11 	sts	0x1125, r24
    e724:	00 e0       	ldi	r16, 0x00	; 0
    e726:	10 e0       	ldi	r17, 0x00	; 0
    e728:	0f 2e       	mov	r0, r31
    e72a:	ff e7       	ldi	r31, 0x7F	; 127
    e72c:	6f 2e       	mov	r6, r31
    e72e:	f0 2d       	mov	r31, r0
    e730:	0f 2e       	mov	r0, r31
    e732:	f3 e4       	ldi	r31, 0x43	; 67
    e734:	7f 2e       	mov	r7, r31
    e736:	f0 2d       	mov	r31, r0
    e738:	29 c1       	rjmp	.+594    	; 0xe98c <_Z13manage_heaterv+0x30e>
    e73a:	20 e0       	ldi	r18, 0x00	; 0
    e73c:	30 e0       	ldi	r19, 0x00	; 0
    e73e:	40 e2       	ldi	r20, 0x20	; 32
    e740:	51 ec       	ldi	r21, 0xC1	; 193
    e742:	66 2d       	mov	r22, r6
    e744:	77 2d       	mov	r23, r7
    e746:	80 2f       	mov	r24, r16
    e748:	91 2f       	mov	r25, r17
    e74a:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    e74e:	88 23       	and	r24, r24
    e750:	14 f0       	brlt	.+4      	; 0xe756 <_Z13manage_heaterv+0xd8>
    e752:	ef 28       	or	r14, r15
    e754:	41 f4       	brne	.+16     	; 0xe766 <_Z13manage_heaterv+0xe8>
    e756:	81 e0       	ldi	r24, 0x01	; 1
    e758:	80 93 25 11 	sts	0x1125, r24
    e75c:	00 e0       	ldi	r16, 0x00	; 0
    e75e:	10 e0       	ldi	r17, 0x00	; 0
    e760:	61 2c       	mov	r6, r1
    e762:	71 2c       	mov	r7, r1
    e764:	13 c1       	rjmp	.+550    	; 0xe98c <_Z13manage_heaterv+0x30e>
    e766:	80 91 25 11 	lds	r24, 0x1125
    e76a:	88 23       	and	r24, r24
    e76c:	51 f0       	breq	.+20     	; 0xe782 <_Z13manage_heaterv+0x104>
    e76e:	10 92 26 11 	sts	0x1126, r1
    e772:	10 92 27 11 	sts	0x1127, r1
    e776:	10 92 28 11 	sts	0x1128, r1
    e77a:	10 92 29 11 	sts	0x1129, r1
    e77e:	10 92 25 11 	sts	0x1125, r1
    e782:	20 91 5b 02 	lds	r18, 0x025B
    e786:	30 91 5c 02 	lds	r19, 0x025C
    e78a:	40 91 5d 02 	lds	r20, 0x025D
    e78e:	50 91 5e 02 	lds	r21, 0x025E
    e792:	66 2d       	mov	r22, r6
    e794:	77 2d       	mov	r23, r7
    e796:	80 2f       	mov	r24, r16
    e798:	91 2f       	mov	r25, r17
    e79a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e79e:	c6 2e       	mov	r12, r22
    e7a0:	d7 2e       	mov	r13, r23
    e7a2:	e8 2e       	mov	r14, r24
    e7a4:	f9 2e       	mov	r15, r25
    e7a6:	86 2f       	mov	r24, r22
    e7a8:	9d 2d       	mov	r25, r13
    e7aa:	ae 2d       	mov	r26, r14
    e7ac:	bf 2d       	mov	r27, r15
    e7ae:	80 93 2a 11 	sts	0x112A, r24
    e7b2:	90 93 2b 11 	sts	0x112B, r25
    e7b6:	a0 93 2c 11 	sts	0x112C, r26
    e7ba:	b0 93 2d 11 	sts	0x112D, r27
    e7be:	20 91 26 11 	lds	r18, 0x1126
    e7c2:	30 91 27 11 	lds	r19, 0x1127
    e7c6:	40 91 28 11 	lds	r20, 0x1128
    e7ca:	50 91 29 11 	lds	r21, 0x1129
    e7ce:	66 2d       	mov	r22, r6
    e7d0:	77 2d       	mov	r23, r7
    e7d2:	80 2f       	mov	r24, r16
    e7d4:	91 2f       	mov	r25, r17
    e7d6:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    e7da:	46 2e       	mov	r4, r22
    e7dc:	57 2e       	mov	r5, r23
    e7de:	68 2e       	mov	r6, r24
    e7e0:	79 2e       	mov	r7, r25
    e7e2:	00 91 2e 11 	lds	r16, 0x112E
    e7e6:	10 91 2f 11 	lds	r17, 0x112F
    e7ea:	20 90 30 11 	lds	r2, 0x1130
    e7ee:	30 90 31 11 	lds	r3, 0x1131
    e7f2:	20 2f       	mov	r18, r16
    e7f4:	31 2f       	mov	r19, r17
    e7f6:	42 2d       	mov	r20, r2
    e7f8:	53 2d       	mov	r21, r3
    e7fa:	64 2d       	mov	r22, r4
    e7fc:	75 2d       	mov	r23, r5
    e7fe:	86 2d       	mov	r24, r6
    e800:	97 2d       	mov	r25, r7
    e802:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    e806:	88 23       	and	r24, r24
    e808:	c4 f0       	brlt	.+48     	; 0xe83a <_Z13manage_heaterv+0x1bc>
    e80a:	00 91 1d 11 	lds	r16, 0x111D
    e80e:	10 91 1e 11 	lds	r17, 0x111E
    e812:	20 90 1f 11 	lds	r2, 0x111F
    e816:	30 90 20 11 	lds	r3, 0x1120
    e81a:	20 2f       	mov	r18, r16
    e81c:	31 2f       	mov	r19, r17
    e81e:	42 2d       	mov	r20, r2
    e820:	53 2d       	mov	r21, r3
    e822:	64 2d       	mov	r22, r4
    e824:	75 2d       	mov	r23, r5
    e826:	86 2d       	mov	r24, r6
    e828:	97 2d       	mov	r25, r7
    e82a:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    e82e:	18 16       	cp	r1, r24
    e830:	24 f0       	brlt	.+8      	; 0xe83a <_Z13manage_heaterv+0x1bc>
    e832:	04 2d       	mov	r16, r4
    e834:	15 2d       	mov	r17, r5
    e836:	26 2c       	mov	r2, r6
    e838:	37 2c       	mov	r3, r7
    e83a:	80 2f       	mov	r24, r16
    e83c:	91 2f       	mov	r25, r17
    e83e:	a2 2d       	mov	r26, r2
    e840:	b3 2d       	mov	r27, r3
    e842:	80 93 26 11 	sts	0x1126, r24
    e846:	90 93 27 11 	sts	0x1127, r25
    e84a:	a0 93 28 11 	sts	0x1128, r26
    e84e:	b0 93 29 11 	sts	0x1129, r27
    e852:	20 91 57 02 	lds	r18, 0x0257
    e856:	30 91 58 02 	lds	r19, 0x0258
    e85a:	40 91 59 02 	lds	r20, 0x0259
    e85e:	50 91 5a 02 	lds	r21, 0x025A
    e862:	60 2f       	mov	r22, r16
    e864:	71 2f       	mov	r23, r17
    e866:	82 2d       	mov	r24, r2
    e868:	93 2d       	mov	r25, r3
    e86a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e86e:	69 83       	std	Y+1, r22	; 0x01
    e870:	7a 83       	std	Y+2, r23	; 0x02
    e872:	68 2e       	mov	r6, r24
    e874:	79 2e       	mov	r7, r25
    e876:	47 2f       	mov	r20, r23
    e878:	86 2f       	mov	r24, r22
    e87a:	94 2f       	mov	r25, r20
    e87c:	a6 2d       	mov	r26, r6
    e87e:	b7 2d       	mov	r27, r7
    e880:	80 93 32 11 	sts	0x1132, r24
    e884:	90 93 33 11 	sts	0x1133, r25
    e888:	a0 93 34 11 	sts	0x1134, r26
    e88c:	b0 93 35 11 	sts	0x1135, r27
    e890:	20 91 36 11 	lds	r18, 0x1136
    e894:	30 91 37 11 	lds	r19, 0x1137
    e898:	40 91 38 11 	lds	r20, 0x1138
    e89c:	50 91 39 11 	lds	r21, 0x1139
    e8a0:	c5 01       	movw	r24, r10
    e8a2:	b4 01       	movw	r22, r8
    e8a4:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    e8a8:	20 91 53 02 	lds	r18, 0x0253
    e8ac:	30 91 54 02 	lds	r19, 0x0254
    e8b0:	40 91 55 02 	lds	r20, 0x0255
    e8b4:	50 91 56 02 	lds	r21, 0x0256
    e8b8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e8bc:	20 ed       	ldi	r18, 0xD0	; 208
    e8be:	3c ec       	ldi	r19, 0xCC	; 204
    e8c0:	4c e4       	ldi	r20, 0x4C	; 76
    e8c2:	5d e3       	ldi	r21, 0x3D	; 61
    e8c4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e8c8:	1b 01       	movw	r2, r22
    e8ca:	2c 01       	movw	r4, r24
    e8cc:	23 e3       	ldi	r18, 0x33	; 51
    e8ce:	33 e3       	ldi	r19, 0x33	; 51
    e8d0:	43 e7       	ldi	r20, 0x73	; 115
    e8d2:	5f e3       	ldi	r21, 0x3F	; 63
    e8d4:	60 91 3a 11 	lds	r22, 0x113A
    e8d8:	70 91 3b 11 	lds	r23, 0x113B
    e8dc:	80 91 3c 11 	lds	r24, 0x113C
    e8e0:	90 91 3d 11 	lds	r25, 0x113D
    e8e4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    e8e8:	9b 01       	movw	r18, r22
    e8ea:	ac 01       	movw	r20, r24
    e8ec:	c2 01       	movw	r24, r4
    e8ee:	b1 01       	movw	r22, r2
    e8f0:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    e8f4:	06 2f       	mov	r16, r22
    e8f6:	17 2f       	mov	r17, r23
    e8f8:	48 2e       	mov	r4, r24
    e8fa:	59 2e       	mov	r5, r25
    e8fc:	86 2f       	mov	r24, r22
    e8fe:	91 2f       	mov	r25, r17
    e900:	a4 2d       	mov	r26, r4
    e902:	b5 2d       	mov	r27, r5
    e904:	80 93 3a 11 	sts	0x113A, r24
    e908:	90 93 3b 11 	sts	0x113B, r25
    e90c:	a0 93 3c 11 	sts	0x113C, r26
    e910:	b0 93 3d 11 	sts	0x113D, r27
    e914:	79 81       	ldd	r23, Y+1	; 0x01
    e916:	6a 81       	ldd	r22, Y+2	; 0x02
    e918:	27 2f       	mov	r18, r23
    e91a:	36 2f       	mov	r19, r22
    e91c:	46 2d       	mov	r20, r6
    e91e:	57 2d       	mov	r21, r7
    e920:	6c 2d       	mov	r22, r12
    e922:	7d 2d       	mov	r23, r13
    e924:	8e 2d       	mov	r24, r14
    e926:	9f 2d       	mov	r25, r15
    e928:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    e92c:	20 2f       	mov	r18, r16
    e92e:	31 2f       	mov	r19, r17
    e930:	44 2d       	mov	r20, r4
    e932:	55 2d       	mov	r21, r5
    e934:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    e938:	c6 2e       	mov	r12, r22
    e93a:	d7 2e       	mov	r13, r23
    e93c:	e8 2e       	mov	r14, r24
    e93e:	f9 2e       	mov	r15, r25
    e940:	06 2f       	mov	r16, r22
    e942:	17 2f       	mov	r17, r23
    e944:	68 2e       	mov	r6, r24
    e946:	79 2e       	mov	r7, r25
    e948:	20 e0       	ldi	r18, 0x00	; 0
    e94a:	30 e0       	ldi	r19, 0x00	; 0
    e94c:	a9 01       	movw	r20, r18
    e94e:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    e952:	88 23       	and	r24, r24
    e954:	bc f0       	brlt	.+46     	; 0xe984 <_Z13manage_heaterv+0x306>
    e956:	20 e0       	ldi	r18, 0x00	; 0
    e958:	30 e0       	ldi	r19, 0x00	; 0
    e95a:	4f e7       	ldi	r20, 0x7F	; 127
    e95c:	53 e4       	ldi	r21, 0x43	; 67
    e95e:	6c 2d       	mov	r22, r12
    e960:	7d 2d       	mov	r23, r13
    e962:	8e 2d       	mov	r24, r14
    e964:	9f 2d       	mov	r25, r15
    e966:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    e96a:	18 16       	cp	r1, r24
    e96c:	7c f4       	brge	.+30     	; 0xe98c <_Z13manage_heaterv+0x30e>
    e96e:	00 e0       	ldi	r16, 0x00	; 0
    e970:	10 e0       	ldi	r17, 0x00	; 0
    e972:	0f 2e       	mov	r0, r31
    e974:	ff e7       	ldi	r31, 0x7F	; 127
    e976:	6f 2e       	mov	r6, r31
    e978:	f0 2d       	mov	r31, r0
    e97a:	0f 2e       	mov	r0, r31
    e97c:	f3 e4       	ldi	r31, 0x43	; 67
    e97e:	7f 2e       	mov	r7, r31
    e980:	f0 2d       	mov	r31, r0
    e982:	04 c0       	rjmp	.+8      	; 0xe98c <_Z13manage_heaterv+0x30e>
    e984:	00 e0       	ldi	r16, 0x00	; 0
    e986:	10 e0       	ldi	r17, 0x00	; 0
    e988:	61 2c       	mov	r6, r1
    e98a:	71 2c       	mov	r7, r1
    e98c:	80 92 36 11 	sts	0x1136, r8
    e990:	90 92 37 11 	sts	0x1137, r9
    e994:	a0 92 38 11 	sts	0x1138, r10
    e998:	b0 92 39 11 	sts	0x1139, r11
    e99c:	60 91 3e 11 	lds	r22, 0x113E
    e9a0:	70 91 3f 11 	lds	r23, 0x113F
    e9a4:	88 27       	eor	r24, r24
    e9a6:	77 fd       	sbrc	r23, 7
    e9a8:	80 95       	com	r24
    e9aa:	98 2f       	mov	r25, r24
    e9ac:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    e9b0:	9b 01       	movw	r18, r22
    e9b2:	ac 01       	movw	r20, r24
    e9b4:	c5 01       	movw	r24, r10
    e9b6:	b4 01       	movw	r22, r8
    e9b8:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    e9bc:	18 16       	cp	r1, r24
    e9be:	ec f4       	brge	.+58     	; 0xe9fa <_Z13manage_heaterv+0x37c>
    e9c0:	60 91 5f 02 	lds	r22, 0x025F
    e9c4:	70 91 60 02 	lds	r23, 0x0260
    e9c8:	88 27       	eor	r24, r24
    e9ca:	77 fd       	sbrc	r23, 7
    e9cc:	80 95       	com	r24
    e9ce:	98 2f       	mov	r25, r24
    e9d0:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    e9d4:	9b 01       	movw	r18, r22
    e9d6:	ac 01       	movw	r20, r24
    e9d8:	c5 01       	movw	r24, r10
    e9da:	b4 01       	movw	r22, r8
    e9dc:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    e9e0:	88 23       	and	r24, r24
    e9e2:	5c f4       	brge	.+22     	; 0xe9fa <_Z13manage_heaterv+0x37c>
    e9e4:	60 2f       	mov	r22, r16
    e9e6:	71 2f       	mov	r23, r17
    e9e8:	86 2d       	mov	r24, r6
    e9ea:	97 2d       	mov	r25, r7
    e9ec:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
    e9f0:	75 95       	asr	r23
    e9f2:	67 95       	ror	r22
    e9f4:	60 93 1c 11 	sts	0x111C, r22
    e9f8:	02 c0       	rjmp	.+4      	; 0xe9fe <_Z13manage_heaterv+0x380>
    e9fa:	10 92 1c 11 	sts	0x111C, r1
    e9fe:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    ea02:	00 91 40 11 	lds	r16, 0x1140
    ea06:	10 91 41 11 	lds	r17, 0x1141
    ea0a:	20 91 42 11 	lds	r18, 0x1142
    ea0e:	30 91 43 11 	lds	r19, 0x1143
    ea12:	dc 01       	movw	r26, r24
    ea14:	cb 01       	movw	r24, r22
    ea16:	80 1b       	sub	r24, r16
    ea18:	91 0b       	sbc	r25, r17
    ea1a:	a2 0b       	sbc	r26, r18
    ea1c:	b3 0b       	sbc	r27, r19
    ea1e:	88 38       	cpi	r24, 0x88	; 136
    ea20:	93 41       	sbci	r25, 0x13	; 19
    ea22:	a1 05       	cpc	r26, r1
    ea24:	b1 05       	cpc	r27, r1
    ea26:	50 f0       	brcs	.+20     	; 0xea3c <_Z13manage_heaterv+0x3be>
    ea28:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    ea2c:	60 93 40 11 	sts	0x1140, r22
    ea30:	70 93 41 11 	sts	0x1141, r23
    ea34:	80 93 42 11 	sts	0x1142, r24
    ea38:	90 93 43 11 	sts	0x1143, r25
    ea3c:	0f 90       	pop	r0
    ea3e:	0f 90       	pop	r0
    ea40:	df 91       	pop	r29
    ea42:	cf 91       	pop	r28
    ea44:	1f 91       	pop	r17
    ea46:	0f 91       	pop	r16
    ea48:	ff 90       	pop	r15
    ea4a:	ef 90       	pop	r14
    ea4c:	df 90       	pop	r13
    ea4e:	cf 90       	pop	r12
    ea50:	bf 90       	pop	r11
    ea52:	af 90       	pop	r10
    ea54:	9f 90       	pop	r9
    ea56:	8f 90       	pop	r8
    ea58:	7f 90       	pop	r7
    ea5a:	6f 90       	pop	r6
    ea5c:	5f 90       	pop	r5
    ea5e:	4f 90       	pop	r4
    ea60:	3f 90       	pop	r3
    ea62:	2f 90       	pop	r2
    ea64:	08 95       	ret

0000ea66 <_Z7tp_initv>:
    ea66:	10 92 2e 11 	sts	0x112E, r1
    ea6a:	10 92 2f 11 	sts	0x112F, r1
    ea6e:	10 92 30 11 	sts	0x1130, r1
    ea72:	10 92 31 11 	sts	0x1131, r1
    ea76:	20 91 57 02 	lds	r18, 0x0257
    ea7a:	30 91 58 02 	lds	r19, 0x0258
    ea7e:	40 91 59 02 	lds	r20, 0x0259
    ea82:	50 91 5a 02 	lds	r21, 0x025A
    ea86:	60 e0       	ldi	r22, 0x00	; 0
    ea88:	70 e0       	ldi	r23, 0x00	; 0
    ea8a:	8f e7       	ldi	r24, 0x7F	; 127
    ea8c:	93 e4       	ldi	r25, 0x43	; 67
    ea8e:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    ea92:	60 93 1d 11 	sts	0x111D, r22
    ea96:	70 93 1e 11 	sts	0x111E, r23
    ea9a:	80 93 1f 11 	sts	0x111F, r24
    ea9e:	90 93 20 11 	sts	0x1120, r25
    eaa2:	6c 9a       	sbi	0x0d, 4	; 13
    eaa4:	6d 9a       	sbi	0x0d, 5	; 13
    eaa6:	9d 9a       	sbi	0x13, 5	; 19
    eaa8:	e1 e0       	ldi	r30, 0x01	; 1
    eaaa:	f1 e0       	ldi	r31, 0x01	; 1
    eaac:	80 81       	ld	r24, Z
    eaae:	80 61       	ori	r24, 0x10	; 16
    eab0:	80 83       	st	Z, r24
    eab2:	87 ed       	ldi	r24, 0xD7	; 215
    eab4:	80 93 7a 00 	sts	0x007A, r24
    eab8:	10 92 7e 00 	sts	0x007E, r1
    eabc:	ed e7       	ldi	r30, 0x7D	; 125
    eabe:	f0 e0       	ldi	r31, 0x00	; 0
    eac0:	10 82       	st	Z, r1
    eac2:	80 81       	ld	r24, Z
    eac4:	81 60       	ori	r24, 0x01	; 1
    eac6:	80 83       	st	Z, r24
    eac8:	80 81       	ld	r24, Z
    eaca:	82 60       	ori	r24, 0x02	; 2
    eacc:	80 83       	st	Z, r24
    eace:	80 81       	ld	r24, Z
    ead0:	84 60       	ori	r24, 0x04	; 4
    ead2:	80 83       	st	Z, r24
    ead4:	80 e8       	ldi	r24, 0x80	; 128
    ead6:	88 bd       	out	0x28, r24	; 40
    ead8:	ee e6       	ldi	r30, 0x6E	; 110
    eada:	f0 e0       	ldi	r31, 0x00	; 0
    eadc:	80 81       	ld	r24, Z
    eade:	84 60       	ori	r24, 0x04	; 4
    eae0:	80 83       	st	Z, r24
    eae2:	61 e0       	ldi	r22, 0x01	; 1
    eae4:	70 e0       	ldi	r23, 0x00	; 0
    eae6:	80 e0       	ldi	r24, 0x00	; 0
    eae8:	90 e0       	ldi	r25, 0x00	; 0
    eaea:	0e 94 11 ba 	call	0x17422	; 0x17422 <delay>
    eaee:	85 e0       	ldi	r24, 0x05	; 5
    eaf0:	90 e0       	ldi	r25, 0x00	; 0
    eaf2:	90 93 3f 11 	sts	0x113F, r25
    eaf6:	80 93 3e 11 	sts	0x113E, r24
    eafa:	09 c0       	rjmp	.+18     	; 0xeb0e <_Z7tp_initv+0xa8>
    eafc:	80 91 44 11 	lds	r24, 0x1144
    eb00:	90 91 45 11 	lds	r25, 0x1145
    eb04:	40 96       	adiw	r24, 0x10	; 16
    eb06:	90 93 45 11 	sts	0x1145, r25
    eb0a:	80 93 44 11 	sts	0x1144, r24
    eb0e:	60 e0       	ldi	r22, 0x00	; 0
    eb10:	80 91 44 11 	lds	r24, 0x1144
    eb14:	90 91 45 11 	lds	r25, 0x1145
    eb18:	1b dd       	rcall	.-1482   	; 0xe550 <_ZL11analog2tempih>
    eb1a:	20 e0       	ldi	r18, 0x00	; 0
    eb1c:	30 e0       	ldi	r19, 0x00	; 0
    eb1e:	40 ea       	ldi	r20, 0xA0	; 160
    eb20:	50 e4       	ldi	r21, 0x40	; 64
    eb22:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    eb26:	88 23       	and	r24, r24
    eb28:	4c f3       	brlt	.-46     	; 0xeafc <_Z7tp_initv+0x96>
    eb2a:	83 e1       	ldi	r24, 0x13	; 19
    eb2c:	91 e0       	ldi	r25, 0x01	; 1
    eb2e:	90 93 60 02 	sts	0x0260, r25
    eb32:	80 93 5f 02 	sts	0x025F, r24
    eb36:	09 c0       	rjmp	.+18     	; 0xeb4a <_Z7tp_initv+0xe4>
    eb38:	80 91 61 02 	lds	r24, 0x0261
    eb3c:	90 91 62 02 	lds	r25, 0x0262
    eb40:	40 97       	sbiw	r24, 0x10	; 16
    eb42:	90 93 62 02 	sts	0x0262, r25
    eb46:	80 93 61 02 	sts	0x0261, r24
    eb4a:	60 e0       	ldi	r22, 0x00	; 0
    eb4c:	80 91 61 02 	lds	r24, 0x0261
    eb50:	90 91 62 02 	lds	r25, 0x0262
    eb54:	fd dc       	rcall	.-1542   	; 0xe550 <_ZL11analog2tempih>
    eb56:	20 e0       	ldi	r18, 0x00	; 0
    eb58:	30 e8       	ldi	r19, 0x80	; 128
    eb5a:	49 e8       	ldi	r20, 0x89	; 137
    eb5c:	53 e4       	ldi	r21, 0x43	; 67
    eb5e:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    eb62:	18 16       	cp	r1, r24
    eb64:	4c f3       	brlt	.-46     	; 0xeb38 <_Z7tp_initv+0xd2>
    eb66:	08 95       	ret

0000eb68 <_Z8setWatchv>:
    eb68:	08 95       	ret

0000eb6a <_Z14disable_heaterv>:
    eb6a:	10 92 18 11 	sts	0x1118, r1
    eb6e:	10 92 17 11 	sts	0x1117, r1
    eb72:	10 92 1a 11 	sts	0x111A, r1
    eb76:	10 92 19 11 	sts	0x1119, r1
    eb7a:	10 92 1c 11 	sts	0x111C, r1
    eb7e:	74 98       	cbi	0x0e, 4	; 14
    eb80:	10 92 1c 11 	sts	0x111C, r1
    eb84:	10 92 1b 11 	sts	0x111B, r1
    eb88:	10 92 1d 11 	sts	0x111D, r1
    eb8c:	75 98       	cbi	0x0e, 5	; 14
    eb8e:	10 92 1b 11 	sts	0x111B, r1
    eb92:	a5 98       	cbi	0x14, 5	; 20
    eb94:	08 95       	ret

0000eb96 <_Z12PID_autotunefii>:
    eb96:	2f 92       	push	r2
    eb98:	3f 92       	push	r3
    eb9a:	4f 92       	push	r4
    eb9c:	5f 92       	push	r5
    eb9e:	6f 92       	push	r6
    eba0:	7f 92       	push	r7
    eba2:	8f 92       	push	r8
    eba4:	9f 92       	push	r9
    eba6:	af 92       	push	r10
    eba8:	bf 92       	push	r11
    ebaa:	cf 92       	push	r12
    ebac:	df 92       	push	r13
    ebae:	ef 92       	push	r14
    ebb0:	ff 92       	push	r15
    ebb2:	0f 93       	push	r16
    ebb4:	1f 93       	push	r17
    ebb6:	cf 93       	push	r28
    ebb8:	df 93       	push	r29
    ebba:	cd b7       	in	r28, 0x3d	; 61
    ebbc:	de b7       	in	r29, 0x3e	; 62
    ebbe:	e5 97       	sbiw	r28, 0x35	; 53
    ebc0:	0f b6       	in	r0, 0x3f	; 63
    ebc2:	f8 94       	cli
    ebc4:	de bf       	out	0x3e, r29	; 62
    ebc6:	0f be       	out	0x3f, r0	; 63
    ebc8:	cd bf       	out	0x3d, r28	; 61
    ebca:	69 83       	std	Y+1, r22	; 0x01
    ebcc:	7a 83       	std	Y+2, r23	; 0x02
    ebce:	8b 83       	std	Y+3, r24	; 0x03
    ebd0:	9c 83       	std	Y+4, r25	; 0x04
    ebd2:	1a 01       	movw	r2, r20
    ebd4:	89 01       	movw	r16, r18
    ebd6:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    ebda:	4b 01       	movw	r8, r22
    ebdc:	5c 01       	movw	r10, r24
    ebde:	22 e0       	ldi	r18, 0x02	; 2
    ebe0:	22 16       	cp	r2, r18
    ebe2:	31 04       	cpc	r3, r1
    ebe4:	dc f0       	brlt	.+54     	; 0xec1c <_Z12PID_autotunefii+0x86>
    ebe6:	a3 e4       	ldi	r26, 0x43	; 67
    ebe8:	b4 e0       	ldi	r27, 0x04	; 4
    ebea:	90 e5       	ldi	r25, 0x50	; 80
    ebec:	e0 ec       	ldi	r30, 0xC0	; 192
    ebee:	f0 e0       	ldi	r31, 0x00	; 0
    ebf0:	26 ec       	ldi	r18, 0xC6	; 198
    ebf2:	30 e0       	ldi	r19, 0x00	; 0
    ebf4:	ad 01       	movw	r20, r26
    ebf6:	80 81       	ld	r24, Z
    ebf8:	85 ff       	sbrs	r24, 5
    ebfa:	fd cf       	rjmp	.-6      	; 0xebf6 <_Z12PID_autotunefii+0x60>
    ebfc:	d9 01       	movw	r26, r18
    ebfe:	9c 93       	st	X, r25
    ec00:	da 01       	movw	r26, r20
    ec02:	9d 91       	ld	r25, X+
    ec04:	ad 01       	movw	r20, r26
    ec06:	91 11       	cpse	r25, r1
    ec08:	f6 cf       	rjmp	.-20     	; 0xebf6 <_Z12PID_autotunefii+0x60>
    ec0a:	e0 ec       	ldi	r30, 0xC0	; 192
    ec0c:	f0 e0       	ldi	r31, 0x00	; 0
    ec0e:	80 81       	ld	r24, Z
    ec10:	85 ff       	sbrs	r24, 5
    ec12:	fd cf       	rjmp	.-6      	; 0xec0e <_Z12PID_autotunefii+0x78>
    ec14:	8a e0       	ldi	r24, 0x0A	; 10
    ec16:	80 93 c6 00 	sts	0x00C6, r24
    ec1a:	7d c5       	rjmp	.+2810   	; 0xf716 <_Z12PID_autotunefii+0xb80>
    ec1c:	ad e6       	ldi	r26, 0x6D	; 109
    ec1e:	b4 e0       	ldi	r27, 0x04	; 4
    ec20:	90 e5       	ldi	r25, 0x50	; 80
    ec22:	e0 ec       	ldi	r30, 0xC0	; 192
    ec24:	f0 e0       	ldi	r31, 0x00	; 0
    ec26:	26 ec       	ldi	r18, 0xC6	; 198
    ec28:	30 e0       	ldi	r19, 0x00	; 0
    ec2a:	ad 01       	movw	r20, r26
    ec2c:	80 81       	ld	r24, Z
    ec2e:	85 ff       	sbrs	r24, 5
    ec30:	fd cf       	rjmp	.-6      	; 0xec2c <_Z12PID_autotunefii+0x96>
    ec32:	d9 01       	movw	r26, r18
    ec34:	9c 93       	st	X, r25
    ec36:	da 01       	movw	r26, r20
    ec38:	9d 91       	ld	r25, X+
    ec3a:	ad 01       	movw	r20, r26
    ec3c:	91 11       	cpse	r25, r1
    ec3e:	f6 cf       	rjmp	.-20     	; 0xec2c <_Z12PID_autotunefii+0x96>
    ec40:	e0 ec       	ldi	r30, 0xC0	; 192
    ec42:	f0 e0       	ldi	r31, 0x00	; 0
    ec44:	80 81       	ld	r24, Z
    ec46:	85 ff       	sbrs	r24, 5
    ec48:	fd cf       	rjmp	.-6      	; 0xec44 <_Z12PID_autotunefii+0xae>
    ec4a:	8a e0       	ldi	r24, 0x0A	; 10
    ec4c:	80 93 c6 00 	sts	0x00C6, r24
    ec50:	8c df       	rcall	.-232    	; 0xeb6a <_Z14disable_heaterv>
    ec52:	33 20       	and	r3, r3
    ec54:	0c f0       	brlt	.+2      	; 0xec58 <_Z12PID_autotunefii+0xc2>
    ec56:	5f c0       	rjmp	.+190    	; 0xed16 <_Z12PID_autotunefii+0x180>
    ec58:	8f e7       	ldi	r24, 0x7F	; 127
    ec5a:	80 93 1b 11 	sts	0x111B, r24
    ec5e:	8d 82       	std	Y+5, r8	; 0x05
    ec60:	9e 82       	std	Y+6, r9	; 0x06
    ec62:	af 82       	std	Y+7, r10	; 0x07
    ec64:	b8 86       	std	Y+8, r11	; 0x08
    ec66:	1f 86       	std	Y+15, r1	; 0x0f
    ec68:	b0 e4       	ldi	r27, 0x40	; 64
    ec6a:	b8 8b       	std	Y+16, r27	; 0x10
    ec6c:	ec e1       	ldi	r30, 0x1C	; 28
    ec6e:	e9 8b       	std	Y+17, r30	; 0x11
    ec70:	f6 e4       	ldi	r31, 0x46	; 70
    ec72:	fa 8b       	std	Y+18, r31	; 0x12
    ec74:	1f 8a       	std	Y+23, r1	; 0x17
    ec76:	18 8e       	std	Y+24, r1	; 0x18
    ec78:	19 8e       	std	Y+25, r1	; 0x19
    ec7a:	1a 8e       	std	Y+26, r1	; 0x1a
    ec7c:	2f e7       	ldi	r18, 0x7F	; 127
    ec7e:	30 e0       	ldi	r19, 0x00	; 0
    ec80:	40 e0       	ldi	r20, 0x00	; 0
    ec82:	50 e0       	ldi	r21, 0x00	; 0
    ec84:	29 a3       	std	Y+33, r18	; 0x21
    ec86:	3a a3       	std	Y+34, r19	; 0x22
    ec88:	4b a3       	std	Y+35, r20	; 0x23
    ec8a:	5c a3       	std	Y+36, r21	; 0x24
    ec8c:	8f e7       	ldi	r24, 0x7F	; 127
    ec8e:	90 e0       	ldi	r25, 0x00	; 0
    ec90:	a0 e0       	ldi	r26, 0x00	; 0
    ec92:	b0 e0       	ldi	r27, 0x00	; 0
    ec94:	8b 8f       	std	Y+27, r24	; 0x1b
    ec96:	9c 8f       	std	Y+28, r25	; 0x1c
    ec98:	ad 8f       	std	Y+29, r26	; 0x1d
    ec9a:	be 8f       	std	Y+30, r27	; 0x1e
    ec9c:	19 a6       	std	Y+41, r1	; 0x29
    ec9e:	1a a6       	std	Y+42, r1	; 0x2a
    eca0:	1b a6       	std	Y+43, r1	; 0x2b
    eca2:	1c a6       	std	Y+44, r1	; 0x2c
    eca4:	91 e0       	ldi	r25, 0x01	; 1
    eca6:	9b 8b       	std	Y+19, r25	; 0x13
    eca8:	41 2c       	mov	r4, r1
    ecaa:	51 2c       	mov	r5, r1
    ecac:	61 2c       	mov	r6, r1
    ecae:	71 2c       	mov	r7, r1
    ecb0:	1e a6       	std	Y+46, r1	; 0x2e
    ecb2:	1d a6       	std	Y+45, r1	; 0x2d
    ecb4:	d1 01       	movw	r26, r2
    ecb6:	a4 5e       	subi	r26, 0xE4	; 228
    ecb8:	be 4e       	sbci	r27, 0xEE	; 238
    ecba:	b8 a3       	std	Y+32, r27	; 0x20
    ecbc:	af 8f       	std	Y+31, r26	; 0x1f
    ecbe:	e6 eb       	ldi	r30, 0xB6	; 182
    ecc0:	f0 e1       	ldi	r31, 0x10	; 16
    ecc2:	f4 91       	lpm	r31, Z
    ecc4:	ff a7       	std	Y+47, r31	; 0x2f
    ecc6:	ee eb       	ldi	r30, 0xBE	; 190
    ecc8:	f0 e1       	ldi	r31, 0x10	; 16
    ecca:	f4 91       	lpm	r31, Z
    eccc:	f8 ab       	std	Y+48, r31	; 0x30
    ecce:	e3 ec       	ldi	r30, 0xC3	; 195
    ecd0:	f0 e1       	ldi	r31, 0x10	; 16
    ecd2:	f4 91       	lpm	r31, Z
    ecd4:	f9 ab       	std	Y+49, r31	; 0x31
    ecd6:	ea ec       	ldi	r30, 0xCA	; 202
    ecd8:	f0 e1       	ldi	r31, 0x10	; 16
    ecda:	f4 91       	lpm	r31, Z
    ecdc:	fa ab       	std	Y+50, r31	; 0x32
    ecde:	e1 ed       	ldi	r30, 0xD1	; 209
    ece0:	f0 e1       	ldi	r31, 0x10	; 16
    ece2:	f4 91       	lpm	r31, Z
    ece4:	fb ab       	std	Y+51, r31	; 0x33
    ece6:	c1 01       	movw	r24, r2
    ece8:	88 0f       	add	r24, r24
    ecea:	99 1f       	adc	r25, r25
    ecec:	88 0f       	add	r24, r24
    ecee:	99 1f       	adc	r25, r25
    ecf0:	9c 01       	movw	r18, r24
    ecf2:	2f 5e       	subi	r18, 0xEF	; 239
    ecf4:	3e 4e       	sbci	r19, 0xEE	; 238
    ecf6:	3c 87       	std	Y+12, r19	; 0x0c
    ecf8:	2b 87       	std	Y+11, r18	; 0x0b
    ecfa:	3e 86       	std	Y+14, r3	; 0x0e
    ecfc:	2d 86       	std	Y+13, r2	; 0x0d
    ecfe:	12 01       	movw	r2, r4
    ed00:	1a 87       	std	Y+10, r17	; 0x0a
    ed02:	09 87       	std	Y+9, r16	; 0x09
    ed04:	06 2d       	mov	r16, r6
    ed06:	17 2d       	mov	r17, r7
    ed08:	24 01       	movw	r4, r8
    ed0a:	35 01       	movw	r6, r10
    ed0c:	30 e0       	ldi	r19, 0x00	; 0
    ed0e:	3d ab       	std	Y+53, r19	; 0x35
    ed10:	40 e0       	ldi	r20, 0x00	; 0
    ed12:	4c ab       	std	Y+52, r20	; 0x34
    ed14:	06 c0       	rjmp	.+12     	; 0xed22 <_Z12PID_autotunefii+0x18c>
    ed16:	f1 01       	movw	r30, r2
    ed18:	e4 5e       	subi	r30, 0xE4	; 228
    ed1a:	fe 4e       	sbci	r31, 0xEE	; 238
    ed1c:	8f e7       	ldi	r24, 0x7F	; 127
    ed1e:	80 83       	st	Z, r24
    ed20:	9e cf       	rjmp	.-196    	; 0xec5e <_Z12PID_autotunefii+0xc8>
    ed22:	80 91 0a 11 	lds	r24, 0x110A
    ed26:	88 23       	and	r24, r24
    ed28:	09 f4       	brne	.+2      	; 0xed2c <_Z12PID_autotunefii+0x196>
    ed2a:	bd c3       	rjmp	.+1914   	; 0xf4a6 <_Z12PID_autotunefii+0x910>
    ed2c:	69 dc       	rcall	.-1838   	; 0xe600 <_ZL31updateTemperaturesFromRawValuesv>
    ed2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    ed30:	9e 85       	ldd	r25, Y+14	; 0x0e
    ed32:	99 23       	and	r25, r25
    ed34:	74 f0       	brlt	.+28     	; 0xed52 <_Z12PID_autotunefii+0x1bc>
    ed36:	ab 85       	ldd	r26, Y+11	; 0x0b
    ed38:	bc 85       	ldd	r27, Y+12	; 0x0c
    ed3a:	0c 91       	ld	r16, X
    ed3c:	11 96       	adiw	r26, 0x01	; 1
    ed3e:	1c 91       	ld	r17, X
    ed40:	11 97       	sbiw	r26, 0x01	; 1
    ed42:	12 96       	adiw	r26, 0x02	; 2
    ed44:	bc 91       	ld	r27, X
    ed46:	bd ab       	std	Y+53, r27	; 0x35
    ed48:	eb 85       	ldd	r30, Y+11	; 0x0b
    ed4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ed4c:	f3 81       	ldd	r31, Z+3	; 0x03
    ed4e:	fc ab       	std	Y+52, r31	; 0x34
    ed50:	0a c0       	rjmp	.+20     	; 0xed66 <_Z12PID_autotunefii+0x1d0>
    ed52:	00 91 0b 11 	lds	r16, 0x110B
    ed56:	10 91 0c 11 	lds	r17, 0x110C
    ed5a:	20 91 0d 11 	lds	r18, 0x110D
    ed5e:	2d ab       	std	Y+53, r18	; 0x35
    ed60:	30 91 0e 11 	lds	r19, 0x110E
    ed64:	3c ab       	std	Y+52, r19	; 0x34
    ed66:	9d a9       	ldd	r25, Y+53	; 0x35
    ed68:	8c a9       	ldd	r24, Y+52	; 0x34
    ed6a:	20 2f       	mov	r18, r16
    ed6c:	31 2f       	mov	r19, r17
    ed6e:	49 2f       	mov	r20, r25
    ed70:	58 2f       	mov	r21, r24
    ed72:	bf 89       	ldd	r27, Y+23	; 0x17
    ed74:	a8 8d       	ldd	r26, Y+24	; 0x18
    ed76:	f9 8c       	ldd	r15, Y+25	; 0x19
    ed78:	ea 8c       	ldd	r14, Y+26	; 0x1a
    ed7a:	6b 2f       	mov	r22, r27
    ed7c:	7a 2f       	mov	r23, r26
    ed7e:	8f 2d       	mov	r24, r15
    ed80:	9e 2d       	mov	r25, r14
    ed82:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    ed86:	18 16       	cp	r1, r24
    ed88:	34 f0       	brlt	.+12     	; 0xed96 <_Z12PID_autotunefii+0x200>
    ed8a:	0f 8b       	std	Y+23, r16	; 0x17
    ed8c:	18 8f       	std	Y+24, r17	; 0x18
    ed8e:	4d a9       	ldd	r20, Y+53	; 0x35
    ed90:	49 8f       	std	Y+25, r20	; 0x19
    ed92:	5c a9       	ldd	r21, Y+52	; 0x34
    ed94:	5a 8f       	std	Y+26, r21	; 0x1a
    ed96:	9d a9       	ldd	r25, Y+53	; 0x35
    ed98:	8c a9       	ldd	r24, Y+52	; 0x34
    ed9a:	20 2f       	mov	r18, r16
    ed9c:	31 2f       	mov	r19, r17
    ed9e:	49 2f       	mov	r20, r25
    eda0:	58 2f       	mov	r21, r24
    eda2:	bf 85       	ldd	r27, Y+15	; 0x0f
    eda4:	a8 89       	ldd	r26, Y+16	; 0x10
    eda6:	f9 88       	ldd	r15, Y+17	; 0x11
    eda8:	ea 88       	ldd	r14, Y+18	; 0x12
    edaa:	6b 2f       	mov	r22, r27
    edac:	7a 2f       	mov	r23, r26
    edae:	8f 2d       	mov	r24, r15
    edb0:	9e 2d       	mov	r25, r14
    edb2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    edb6:	88 23       	and	r24, r24
    edb8:	34 f0       	brlt	.+12     	; 0xedc6 <_Z12PID_autotunefii+0x230>
    edba:	0f 87       	std	Y+15, r16	; 0x0f
    edbc:	18 8b       	std	Y+16, r17	; 0x10
    edbe:	8d a9       	ldd	r24, Y+53	; 0x35
    edc0:	89 8b       	std	Y+17, r24	; 0x11
    edc2:	9c a9       	ldd	r25, Y+52	; 0x34
    edc4:	9a 8b       	std	Y+18, r25	; 0x12
    edc6:	ab 89       	ldd	r26, Y+19	; 0x13
    edc8:	aa 23       	and	r26, r26
    edca:	09 f4       	brne	.+2      	; 0xedce <_Z12PID_autotunefii+0x238>
    edcc:	8f c4       	rjmp	.+2334   	; 0xf6ec <_Z12PID_autotunefii+0xb56>
    edce:	79 81       	ldd	r23, Y+1	; 0x01
    edd0:	6a 81       	ldd	r22, Y+2	; 0x02
    edd2:	9b 81       	ldd	r25, Y+3	; 0x03
    edd4:	8c 81       	ldd	r24, Y+4	; 0x04
    edd6:	27 2f       	mov	r18, r23
    edd8:	36 2f       	mov	r19, r22
    edda:	49 2f       	mov	r20, r25
    eddc:	58 2f       	mov	r21, r24
    edde:	fd a9       	ldd	r31, Y+53	; 0x35
    ede0:	ec a9       	ldd	r30, Y+52	; 0x34
    ede2:	60 2f       	mov	r22, r16
    ede4:	71 2f       	mov	r23, r17
    ede6:	8f 2f       	mov	r24, r31
    ede8:	9e 2f       	mov	r25, r30
    edea:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    edee:	18 16       	cp	r1, r24
    edf0:	0c f0       	brlt	.+2      	; 0xedf4 <_Z12PID_autotunefii+0x25e>
    edf2:	59 c3       	rjmp	.+1714   	; 0xf4a6 <_Z12PID_autotunefii+0x910>
    edf4:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    edf8:	dc 01       	movw	r26, r24
    edfa:	cb 01       	movw	r24, r22
    edfc:	2d 81       	ldd	r18, Y+5	; 0x05
    edfe:	3e 81       	ldd	r19, Y+6	; 0x06
    ee00:	4f 81       	ldd	r20, Y+7	; 0x07
    ee02:	58 85       	ldd	r21, Y+8	; 0x08
    ee04:	82 1b       	sub	r24, r18
    ee06:	93 0b       	sbc	r25, r19
    ee08:	a4 0b       	sbc	r26, r20
    ee0a:	b5 0b       	sbc	r27, r21
    ee0c:	89 38       	cpi	r24, 0x89	; 137
    ee0e:	93 41       	sbci	r25, 0x13	; 19
    ee10:	a1 05       	cpc	r26, r1
    ee12:	b1 05       	cpc	r27, r1
    ee14:	08 f4       	brcc	.+2      	; 0xee18 <_Z12PID_autotunefii+0x282>
    ee16:	47 c3       	rjmp	.+1678   	; 0xf4a6 <_Z12PID_autotunefii+0x910>
    ee18:	4d 85       	ldd	r20, Y+13	; 0x0d
    ee1a:	5e 85       	ldd	r21, Y+14	; 0x0e
    ee1c:	55 23       	and	r21, r21
    ee1e:	9c f4       	brge	.+38     	; 0xee46 <_Z12PID_autotunefii+0x2b0>
    ee20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ee22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ee24:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ee26:	be 8d       	ldd	r27, Y+30	; 0x1e
    ee28:	29 a1       	ldd	r18, Y+33	; 0x21
    ee2a:	3a a1       	ldd	r19, Y+34	; 0x22
    ee2c:	4b a1       	ldd	r20, Y+35	; 0x23
    ee2e:	5c a1       	ldd	r21, Y+36	; 0x24
    ee30:	82 1b       	sub	r24, r18
    ee32:	93 0b       	sbc	r25, r19
    ee34:	a4 0b       	sbc	r26, r20
    ee36:	b5 0b       	sbc	r27, r21
    ee38:	b5 95       	asr	r27
    ee3a:	a7 95       	ror	r26
    ee3c:	97 95       	ror	r25
    ee3e:	87 95       	ror	r24
    ee40:	80 93 1b 11 	sts	0x111B, r24
    ee44:	13 c0       	rjmp	.+38     	; 0xee6c <_Z12PID_autotunefii+0x2d6>
    ee46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ee48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ee4a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ee4c:	be 8d       	ldd	r27, Y+30	; 0x1e
    ee4e:	29 a1       	ldd	r18, Y+33	; 0x21
    ee50:	3a a1       	ldd	r19, Y+34	; 0x22
    ee52:	4b a1       	ldd	r20, Y+35	; 0x23
    ee54:	5c a1       	ldd	r21, Y+36	; 0x24
    ee56:	82 1b       	sub	r24, r18
    ee58:	93 0b       	sbc	r25, r19
    ee5a:	a4 0b       	sbc	r26, r20
    ee5c:	b5 0b       	sbc	r27, r21
    ee5e:	b5 95       	asr	r27
    ee60:	a7 95       	ror	r26
    ee62:	97 95       	ror	r25
    ee64:	87 95       	ror	r24
    ee66:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee68:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee6a:	80 83       	st	Z, r24
    ee6c:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    ee70:	2b 01       	movw	r4, r22
    ee72:	3c 01       	movw	r6, r24
    ee74:	9b 01       	movw	r18, r22
    ee76:	ac 01       	movw	r20, r24
    ee78:	8d 81       	ldd	r24, Y+5	; 0x05
    ee7a:	9e 81       	ldd	r25, Y+6	; 0x06
    ee7c:	af 81       	ldd	r26, Y+7	; 0x07
    ee7e:	b8 85       	ldd	r27, Y+8	; 0x08
    ee80:	28 1b       	sub	r18, r24
    ee82:	39 0b       	sbc	r19, r25
    ee84:	4a 0b       	sbc	r20, r26
    ee86:	5b 0b       	sbc	r21, r27
    ee88:	29 a7       	std	Y+41, r18	; 0x29
    ee8a:	3a a7       	std	Y+42, r19	; 0x2a
    ee8c:	4b a7       	std	Y+43, r20	; 0x2b
    ee8e:	5c a7       	std	Y+44, r21	; 0x2c
    ee90:	99 81       	ldd	r25, Y+1	; 0x01
    ee92:	9f 8b       	std	Y+23, r25	; 0x17
    ee94:	aa 81       	ldd	r26, Y+2	; 0x02
    ee96:	a8 8f       	std	Y+24, r26	; 0x18
    ee98:	bb 81       	ldd	r27, Y+3	; 0x03
    ee9a:	b9 8f       	std	Y+25, r27	; 0x19
    ee9c:	ec 81       	ldd	r30, Y+4	; 0x04
    ee9e:	ea 8f       	std	Y+26, r30	; 0x1a
    eea0:	25 c4       	rjmp	.+2122   	; 0xf6ec <_Z12PID_autotunefii+0xb56>
    eea2:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    eea6:	dc 01       	movw	r26, r24
    eea8:	cb 01       	movw	r24, r22
    eeaa:	84 19       	sub	r24, r4
    eeac:	95 09       	sbc	r25, r5
    eeae:	a6 09       	sbc	r26, r6
    eeb0:	b7 09       	sbc	r27, r7
    eeb2:	89 38       	cpi	r24, 0x89	; 137
    eeb4:	93 41       	sbci	r25, 0x13	; 19
    eeb6:	a1 05       	cpc	r26, r1
    eeb8:	b1 05       	cpc	r27, r1
    eeba:	08 f4       	brcc	.+2      	; 0xeebe <_Z12PID_autotunefii+0x328>
    eebc:	f3 c2       	rjmp	.+1510   	; 0xf4a4 <_Z12PID_autotunefii+0x90e>
    eebe:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    eec2:	6d 83       	std	Y+5, r22	; 0x05
    eec4:	7e 83       	std	Y+6, r23	; 0x06
    eec6:	8f 83       	std	Y+7, r24	; 0x07
    eec8:	98 87       	std	Y+8, r25	; 0x08
    eeca:	dc 01       	movw	r26, r24
    eecc:	cb 01       	movw	r24, r22
    eece:	84 19       	sub	r24, r4
    eed0:	95 09       	sbc	r25, r5
    eed2:	a6 09       	sbc	r26, r6
    eed4:	b7 09       	sbc	r27, r7
    eed6:	12 14       	cp	r1, r2
    eed8:	13 04       	cpc	r1, r3
    eeda:	0c f0       	brlt	.+2      	; 0xeede <_Z12PID_autotunefii+0x348>
    eedc:	ab c2       	rjmp	.+1366   	; 0xf434 <_Z12PID_autotunefii+0x89e>
    eede:	c9 a4       	ldd	r12, Y+41	; 0x29
    eee0:	da a4       	ldd	r13, Y+42	; 0x2a
    eee2:	eb a4       	ldd	r14, Y+43	; 0x2b
    eee4:	fc a4       	ldd	r15, Y+44	; 0x2c
    eee6:	c8 0e       	add	r12, r24
    eee8:	d9 1e       	adc	r13, r25
    eeea:	ea 1e       	adc	r14, r26
    eeec:	fb 1e       	adc	r15, r27
    eeee:	29 a5       	ldd	r18, Y+41	; 0x29
    eef0:	3a a5       	ldd	r19, Y+42	; 0x2a
    eef2:	4b a5       	ldd	r20, Y+43	; 0x2b
    eef4:	5c a5       	ldd	r21, Y+44	; 0x2c
    eef6:	28 1b       	sub	r18, r24
    eef8:	39 0b       	sbc	r19, r25
    eefa:	4a 0b       	sbc	r20, r26
    eefc:	5b 0b       	sbc	r21, r27
    eefe:	69 a1       	ldd	r22, Y+33	; 0x21
    ef00:	7a a1       	ldd	r23, Y+34	; 0x22
    ef02:	8b a1       	ldd	r24, Y+35	; 0x23
    ef04:	9c a1       	ldd	r25, Y+36	; 0x24
    ef06:	0e 94 8d c0 	call	0x1811a	; 0x1811a <__mulsi3>
    ef0a:	a7 01       	movw	r20, r14
    ef0c:	96 01       	movw	r18, r12
    ef0e:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
    ef12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ef14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ef16:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ef18:	be 8d       	ldd	r27, Y+30	; 0x1e
    ef1a:	82 0f       	add	r24, r18
    ef1c:	93 1f       	adc	r25, r19
    ef1e:	a4 1f       	adc	r26, r20
    ef20:	b5 1f       	adc	r27, r21
    ef22:	84 31       	cpi	r24, 0x14	; 20
    ef24:	91 05       	cpc	r25, r1
    ef26:	a1 05       	cpc	r26, r1
    ef28:	b1 05       	cpc	r27, r1
    ef2a:	3c f1       	brlt	.+78     	; 0xef7a <_Z12PID_autotunefii+0x3e4>
    ef2c:	8b 8f       	std	Y+27, r24	; 0x1b
    ef2e:	9c 8f       	std	Y+28, r25	; 0x1c
    ef30:	ad 8f       	std	Y+29, r26	; 0x1d
    ef32:	be 8f       	std	Y+30, r27	; 0x1e
    ef34:	8c 3e       	cpi	r24, 0xEC	; 236
    ef36:	91 05       	cpc	r25, r1
    ef38:	a1 05       	cpc	r26, r1
    ef3a:	b1 05       	cpc	r27, r1
    ef3c:	44 f0       	brlt	.+16     	; 0xef4e <_Z12PID_autotunefii+0x3b8>
    ef3e:	2b ee       	ldi	r18, 0xEB	; 235
    ef40:	30 e0       	ldi	r19, 0x00	; 0
    ef42:	40 e0       	ldi	r20, 0x00	; 0
    ef44:	50 e0       	ldi	r21, 0x00	; 0
    ef46:	2b 8f       	std	Y+27, r18	; 0x1b
    ef48:	3c 8f       	std	Y+28, r19	; 0x1c
    ef4a:	4d 8f       	std	Y+29, r20	; 0x1d
    ef4c:	5e 8f       	std	Y+30, r21	; 0x1e
    ef4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ef50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ef52:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ef54:	be 8d       	ldd	r27, Y+30	; 0x1e
    ef56:	80 38       	cpi	r24, 0x80	; 128
    ef58:	91 05       	cpc	r25, r1
    ef5a:	a1 05       	cpc	r26, r1
    ef5c:	b1 05       	cpc	r27, r1
    ef5e:	f4 f0       	brlt	.+60     	; 0xef9c <_Z12PID_autotunefii+0x406>
    ef60:	2e ef       	ldi	r18, 0xFE	; 254
    ef62:	30 e0       	ldi	r19, 0x00	; 0
    ef64:	40 e0       	ldi	r20, 0x00	; 0
    ef66:	50 e0       	ldi	r21, 0x00	; 0
    ef68:	28 1b       	sub	r18, r24
    ef6a:	39 0b       	sbc	r19, r25
    ef6c:	4a 0b       	sbc	r20, r26
    ef6e:	5b 0b       	sbc	r21, r27
    ef70:	29 a3       	std	Y+33, r18	; 0x21
    ef72:	3a a3       	std	Y+34, r19	; 0x22
    ef74:	4b a3       	std	Y+35, r20	; 0x23
    ef76:	5c a3       	std	Y+36, r21	; 0x24
    ef78:	19 c0       	rjmp	.+50     	; 0xefac <_Z12PID_autotunefii+0x416>
    ef7a:	84 e1       	ldi	r24, 0x14	; 20
    ef7c:	90 e0       	ldi	r25, 0x00	; 0
    ef7e:	a0 e0       	ldi	r26, 0x00	; 0
    ef80:	b0 e0       	ldi	r27, 0x00	; 0
    ef82:	8b 8f       	std	Y+27, r24	; 0x1b
    ef84:	9c 8f       	std	Y+28, r25	; 0x1c
    ef86:	ad 8f       	std	Y+29, r26	; 0x1d
    ef88:	be 8f       	std	Y+30, r27	; 0x1e
    ef8a:	24 e1       	ldi	r18, 0x14	; 20
    ef8c:	30 e0       	ldi	r19, 0x00	; 0
    ef8e:	40 e0       	ldi	r20, 0x00	; 0
    ef90:	50 e0       	ldi	r21, 0x00	; 0
    ef92:	29 a3       	std	Y+33, r18	; 0x21
    ef94:	3a a3       	std	Y+34, r19	; 0x22
    ef96:	4b a3       	std	Y+35, r20	; 0x23
    ef98:	5c a3       	std	Y+36, r21	; 0x24
    ef9a:	08 c0       	rjmp	.+16     	; 0xefac <_Z12PID_autotunefii+0x416>
    ef9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ef9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    efa0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    efa2:	be 8d       	ldd	r27, Y+30	; 0x1e
    efa4:	89 a3       	std	Y+33, r24	; 0x21
    efa6:	9a a3       	std	Y+34, r25	; 0x22
    efa8:	ab a3       	std	Y+35, r26	; 0x23
    efaa:	bc a3       	std	Y+36, r27	; 0x24
    efac:	3f a5       	ldd	r19, Y+47	; 0x2f
    efae:	33 23       	and	r19, r19
    efb0:	b1 f0       	breq	.+44     	; 0xefde <_Z12PID_autotunefii+0x448>
    efb2:	e6 eb       	ldi	r30, 0xB6	; 182
    efb4:	f0 e1       	ldi	r31, 0x10	; 16
    efb6:	a0 ec       	ldi	r26, 0xC0	; 192
    efb8:	b0 e0       	ldi	r27, 0x00	; 0
    efba:	86 ec       	ldi	r24, 0xC6	; 198
    efbc:	90 e0       	ldi	r25, 0x00	; 0
    efbe:	af 01       	movw	r20, r30
    efc0:	7d a9       	ldd	r23, Y+53	; 0x35
    efc2:	6c a9       	ldd	r22, Y+52	; 0x34
    efc4:	2c 91       	ld	r18, X
    efc6:	25 ff       	sbrs	r18, 5
    efc8:	fd cf       	rjmp	.-6      	; 0xefc4 <_Z12PID_autotunefii+0x42e>
    efca:	fc 01       	movw	r30, r24
    efcc:	30 83       	st	Z, r19
    efce:	4f 5f       	subi	r20, 0xFF	; 255
    efd0:	5f 4f       	sbci	r21, 0xFF	; 255
    efd2:	fa 01       	movw	r30, r20
    efd4:	34 91       	lpm	r19, Z
    efd6:	31 11       	cpse	r19, r1
    efd8:	f5 cf       	rjmp	.-22     	; 0xefc4 <_Z12PID_autotunefii+0x42e>
    efda:	7d ab       	std	Y+53, r23	; 0x35
    efdc:	6c ab       	std	Y+52, r22	; 0x34
    efde:	2a e0       	ldi	r18, 0x0A	; 10
    efe0:	30 e0       	ldi	r19, 0x00	; 0
    efe2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    efe4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    efe6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    efe8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    efea:	82 ed       	ldi	r24, 0xD2	; 210
    efec:	94 e0       	ldi	r25, 0x04	; 4
    efee:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN12MarlinSerial5printEli>
    eff2:	38 a9       	ldd	r19, Y+48	; 0x30
    eff4:	33 23       	and	r19, r19
    eff6:	b1 f0       	breq	.+44     	; 0xf024 <_Z12PID_autotunefii+0x48e>
    eff8:	ee eb       	ldi	r30, 0xBE	; 190
    effa:	f0 e1       	ldi	r31, 0x10	; 16
    effc:	a0 ec       	ldi	r26, 0xC0	; 192
    effe:	b0 e0       	ldi	r27, 0x00	; 0
    f000:	86 ec       	ldi	r24, 0xC6	; 198
    f002:	90 e0       	ldi	r25, 0x00	; 0
    f004:	af 01       	movw	r20, r30
    f006:	7d a9       	ldd	r23, Y+53	; 0x35
    f008:	6c a9       	ldd	r22, Y+52	; 0x34
    f00a:	2c 91       	ld	r18, X
    f00c:	25 ff       	sbrs	r18, 5
    f00e:	fd cf       	rjmp	.-6      	; 0xf00a <_Z12PID_autotunefii+0x474>
    f010:	fc 01       	movw	r30, r24
    f012:	30 83       	st	Z, r19
    f014:	4f 5f       	subi	r20, 0xFF	; 255
    f016:	5f 4f       	sbci	r21, 0xFF	; 255
    f018:	fa 01       	movw	r30, r20
    f01a:	34 91       	lpm	r19, Z
    f01c:	31 11       	cpse	r19, r1
    f01e:	f5 cf       	rjmp	.-22     	; 0xf00a <_Z12PID_autotunefii+0x474>
    f020:	7d ab       	std	Y+53, r23	; 0x35
    f022:	6c ab       	std	Y+52, r22	; 0x34
    f024:	2a e0       	ldi	r18, 0x0A	; 10
    f026:	30 e0       	ldi	r19, 0x00	; 0
    f028:	49 a1       	ldd	r20, Y+33	; 0x21
    f02a:	5a a1       	ldd	r21, Y+34	; 0x22
    f02c:	6b a1       	ldd	r22, Y+35	; 0x23
    f02e:	7c a1       	ldd	r23, Y+36	; 0x24
    f030:	82 ed       	ldi	r24, 0xD2	; 210
    f032:	94 e0       	ldi	r25, 0x04	; 4
    f034:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN12MarlinSerial5printEli>
    f038:	39 a9       	ldd	r19, Y+49	; 0x31
    f03a:	33 23       	and	r19, r19
    f03c:	b1 f0       	breq	.+44     	; 0xf06a <_Z12PID_autotunefii+0x4d4>
    f03e:	e3 ec       	ldi	r30, 0xC3	; 195
    f040:	f0 e1       	ldi	r31, 0x10	; 16
    f042:	a0 ec       	ldi	r26, 0xC0	; 192
    f044:	b0 e0       	ldi	r27, 0x00	; 0
    f046:	86 ec       	ldi	r24, 0xC6	; 198
    f048:	90 e0       	ldi	r25, 0x00	; 0
    f04a:	af 01       	movw	r20, r30
    f04c:	7d a9       	ldd	r23, Y+53	; 0x35
    f04e:	6c a9       	ldd	r22, Y+52	; 0x34
    f050:	2c 91       	ld	r18, X
    f052:	25 ff       	sbrs	r18, 5
    f054:	fd cf       	rjmp	.-6      	; 0xf050 <_Z12PID_autotunefii+0x4ba>
    f056:	fc 01       	movw	r30, r24
    f058:	30 83       	st	Z, r19
    f05a:	4f 5f       	subi	r20, 0xFF	; 255
    f05c:	5f 4f       	sbci	r21, 0xFF	; 255
    f05e:	fa 01       	movw	r30, r20
    f060:	34 91       	lpm	r19, Z
    f062:	31 11       	cpse	r19, r1
    f064:	f5 cf       	rjmp	.-22     	; 0xf050 <_Z12PID_autotunefii+0x4ba>
    f066:	7d ab       	std	Y+53, r23	; 0x35
    f068:	6c ab       	std	Y+52, r22	; 0x34
    f06a:	22 e0       	ldi	r18, 0x02	; 2
    f06c:	30 e0       	ldi	r19, 0x00	; 0
    f06e:	ff 85       	ldd	r31, Y+15	; 0x0f
    f070:	e8 89       	ldd	r30, Y+16	; 0x10
    f072:	99 89       	ldd	r25, Y+17	; 0x11
    f074:	8a 89       	ldd	r24, Y+18	; 0x12
    f076:	4f 2f       	mov	r20, r31
    f078:	5e 2f       	mov	r21, r30
    f07a:	69 2f       	mov	r22, r25
    f07c:	78 2f       	mov	r23, r24
    f07e:	82 ed       	ldi	r24, 0xD2	; 210
    f080:	94 e0       	ldi	r25, 0x04	; 4
    f082:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f086:	3a a9       	ldd	r19, Y+50	; 0x32
    f088:	33 23       	and	r19, r19
    f08a:	b1 f0       	breq	.+44     	; 0xf0b8 <_Z12PID_autotunefii+0x522>
    f08c:	ea ec       	ldi	r30, 0xCA	; 202
    f08e:	f0 e1       	ldi	r31, 0x10	; 16
    f090:	a0 ec       	ldi	r26, 0xC0	; 192
    f092:	b0 e0       	ldi	r27, 0x00	; 0
    f094:	86 ec       	ldi	r24, 0xC6	; 198
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	af 01       	movw	r20, r30
    f09a:	7d a9       	ldd	r23, Y+53	; 0x35
    f09c:	6c a9       	ldd	r22, Y+52	; 0x34
    f09e:	2c 91       	ld	r18, X
    f0a0:	25 ff       	sbrs	r18, 5
    f0a2:	fd cf       	rjmp	.-6      	; 0xf09e <_Z12PID_autotunefii+0x508>
    f0a4:	fc 01       	movw	r30, r24
    f0a6:	30 83       	st	Z, r19
    f0a8:	4f 5f       	subi	r20, 0xFF	; 255
    f0aa:	5f 4f       	sbci	r21, 0xFF	; 255
    f0ac:	fa 01       	movw	r30, r20
    f0ae:	34 91       	lpm	r19, Z
    f0b0:	31 11       	cpse	r19, r1
    f0b2:	f5 cf       	rjmp	.-22     	; 0xf09e <_Z12PID_autotunefii+0x508>
    f0b4:	7d ab       	std	Y+53, r23	; 0x35
    f0b6:	6c ab       	std	Y+52, r22	; 0x34
    f0b8:	22 e0       	ldi	r18, 0x02	; 2
    f0ba:	30 e0       	ldi	r19, 0x00	; 0
    f0bc:	ff 89       	ldd	r31, Y+23	; 0x17
    f0be:	e8 8d       	ldd	r30, Y+24	; 0x18
    f0c0:	99 8d       	ldd	r25, Y+25	; 0x19
    f0c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f0c4:	4f 2f       	mov	r20, r31
    f0c6:	5e 2f       	mov	r21, r30
    f0c8:	69 2f       	mov	r22, r25
    f0ca:	78 2f       	mov	r23, r24
    f0cc:	82 ed       	ldi	r24, 0xD2	; 210
    f0ce:	94 e0       	ldi	r25, 0x04	; 4
    f0d0:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f0d4:	e0 ec       	ldi	r30, 0xC0	; 192
    f0d6:	f0 e0       	ldi	r31, 0x00	; 0
    f0d8:	2d a9       	ldd	r18, Y+53	; 0x35
    f0da:	9c a9       	ldd	r25, Y+52	; 0x34
    f0dc:	80 81       	ld	r24, Z
    f0de:	85 ff       	sbrs	r24, 5
    f0e0:	fd cf       	rjmp	.-6      	; 0xf0dc <_Z12PID_autotunefii+0x546>
    f0e2:	2d ab       	std	Y+53, r18	; 0x35
    f0e4:	9c ab       	std	Y+52, r25	; 0x34
    f0e6:	8a e0       	ldi	r24, 0x0A	; 10
    f0e8:	80 93 c6 00 	sts	0x00C6, r24
    f0ec:	f3 e0       	ldi	r31, 0x03	; 3
    f0ee:	2f 16       	cp	r2, r31
    f0f0:	31 04       	cpc	r3, r1
    f0f2:	0c f4       	brge	.+2      	; 0xf0f6 <_Z12PID_autotunefii+0x560>
    f0f4:	9f c1       	rjmp	.+830    	; 0xf434 <_Z12PID_autotunefii+0x89e>
    f0f6:	69 a1       	ldd	r22, Y+33	; 0x21
    f0f8:	7a a1       	ldd	r23, Y+34	; 0x22
    f0fa:	8b a1       	ldd	r24, Y+35	; 0x23
    f0fc:	9c a1       	ldd	r25, Y+36	; 0x24
    f0fe:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    f102:	20 e0       	ldi	r18, 0x00	; 0
    f104:	30 e0       	ldi	r19, 0x00	; 0
    f106:	40 e8       	ldi	r20, 0x80	; 128
    f108:	50 e4       	ldi	r21, 0x40	; 64
    f10a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f10e:	6b 8b       	std	Y+19, r22	; 0x13
    f110:	7c 8b       	std	Y+20, r23	; 0x14
    f112:	8d 8b       	std	Y+21, r24	; 0x15
    f114:	9e 8b       	std	Y+22, r25	; 0x16
    f116:	7f 85       	ldd	r23, Y+15	; 0x0f
    f118:	68 89       	ldd	r22, Y+16	; 0x10
    f11a:	99 89       	ldd	r25, Y+17	; 0x11
    f11c:	8a 89       	ldd	r24, Y+18	; 0x12
    f11e:	27 2f       	mov	r18, r23
    f120:	36 2f       	mov	r19, r22
    f122:	49 2f       	mov	r20, r25
    f124:	58 2f       	mov	r21, r24
    f126:	bf 89       	ldd	r27, Y+23	; 0x17
    f128:	a8 8d       	ldd	r26, Y+24	; 0x18
    f12a:	e9 8d       	ldd	r30, Y+25	; 0x19
    f12c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f12e:	6b 2f       	mov	r22, r27
    f130:	7a 2f       	mov	r23, r26
    f132:	8e 2f       	mov	r24, r30
    f134:	9f 2f       	mov	r25, r31
    f136:	0e 94 46 b5 	call	0x16a8c	; 0x16a8c <__subsf3>
    f13a:	20 ed       	ldi	r18, 0xD0	; 208
    f13c:	3f e0       	ldi	r19, 0x0F	; 15
    f13e:	49 e4       	ldi	r20, 0x49	; 73
    f140:	50 e4       	ldi	r21, 0x40	; 64
    f142:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f146:	20 e0       	ldi	r18, 0x00	; 0
    f148:	30 e0       	ldi	r19, 0x00	; 0
    f14a:	40 e0       	ldi	r20, 0x00	; 0
    f14c:	5f e3       	ldi	r21, 0x3F	; 63
    f14e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f152:	9b 01       	movw	r18, r22
    f154:	ac 01       	movw	r20, r24
    f156:	6b 89       	ldd	r22, Y+19	; 0x13
    f158:	7c 89       	ldd	r23, Y+20	; 0x14
    f15a:	8d 89       	ldd	r24, Y+21	; 0x15
    f15c:	9e 89       	ldd	r25, Y+22	; 0x16
    f15e:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    f162:	6b 8b       	std	Y+19, r22	; 0x13
    f164:	7d a3       	std	Y+37, r23	; 0x25
    f166:	8d a7       	std	Y+45, r24	; 0x2d
    f168:	9e a7       	std	Y+46, r25	; 0x2e
    f16a:	c7 01       	movw	r24, r14
    f16c:	b6 01       	movw	r22, r12
    f16e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
    f172:	20 e0       	ldi	r18, 0x00	; 0
    f174:	30 e0       	ldi	r19, 0x00	; 0
    f176:	4a e7       	ldi	r20, 0x7A	; 122
    f178:	54 e4       	ldi	r21, 0x44	; 68
    f17a:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    f17e:	6f 87       	std	Y+15, r22	; 0x0f
    f180:	78 8b       	std	Y+16, r23	; 0x10
    f182:	89 8b       	std	Y+17, r24	; 0x11
    f184:	9a 8b       	std	Y+18, r25	; 0x12
    f186:	3b a9       	ldd	r19, Y+51	; 0x33
    f188:	33 23       	and	r19, r19
    f18a:	b1 f0       	breq	.+44     	; 0xf1b8 <_Z12PID_autotunefii+0x622>
    f18c:	e1 ed       	ldi	r30, 0xD1	; 209
    f18e:	f0 e1       	ldi	r31, 0x10	; 16
    f190:	a0 ec       	ldi	r26, 0xC0	; 192
    f192:	b0 e0       	ldi	r27, 0x00	; 0
    f194:	86 ec       	ldi	r24, 0xC6	; 198
    f196:	90 e0       	ldi	r25, 0x00	; 0
    f198:	af 01       	movw	r20, r30
    f19a:	7d a9       	ldd	r23, Y+53	; 0x35
    f19c:	6c a9       	ldd	r22, Y+52	; 0x34
    f19e:	2c 91       	ld	r18, X
    f1a0:	25 ff       	sbrs	r18, 5
    f1a2:	fd cf       	rjmp	.-6      	; 0xf19e <_Z12PID_autotunefii+0x608>
    f1a4:	fc 01       	movw	r30, r24
    f1a6:	30 83       	st	Z, r19
    f1a8:	4f 5f       	subi	r20, 0xFF	; 255
    f1aa:	5f 4f       	sbci	r21, 0xFF	; 255
    f1ac:	fa 01       	movw	r30, r20
    f1ae:	34 91       	lpm	r19, Z
    f1b0:	31 11       	cpse	r19, r1
    f1b2:	f5 cf       	rjmp	.-22     	; 0xf19e <_Z12PID_autotunefii+0x608>
    f1b4:	7d ab       	std	Y+53, r23	; 0x35
    f1b6:	6c ab       	std	Y+52, r22	; 0x34
    f1b8:	22 e0       	ldi	r18, 0x02	; 2
    f1ba:	30 e0       	ldi	r19, 0x00	; 0
    f1bc:	fb 89       	ldd	r31, Y+19	; 0x13
    f1be:	ed a1       	ldd	r30, Y+37	; 0x25
    f1c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    f1c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    f1c4:	4f 2f       	mov	r20, r31
    f1c6:	5e 2f       	mov	r21, r30
    f1c8:	69 2f       	mov	r22, r25
    f1ca:	78 2f       	mov	r23, r24
    f1cc:	82 ed       	ldi	r24, 0xD2	; 210
    f1ce:	94 e0       	ldi	r25, 0x04	; 4
    f1d0:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f1d4:	e7 ed       	ldi	r30, 0xD7	; 215
    f1d6:	f0 e1       	ldi	r31, 0x10	; 16
    f1d8:	34 91       	lpm	r19, Z
    f1da:	33 23       	and	r19, r19
    f1dc:	a1 f0       	breq	.+40     	; 0xf206 <_Z12PID_autotunefii+0x670>
    f1de:	a0 ec       	ldi	r26, 0xC0	; 192
    f1e0:	b0 e0       	ldi	r27, 0x00	; 0
    f1e2:	86 ec       	ldi	r24, 0xC6	; 198
    f1e4:	90 e0       	ldi	r25, 0x00	; 0
    f1e6:	af 01       	movw	r20, r30
    f1e8:	7d a9       	ldd	r23, Y+53	; 0x35
    f1ea:	6c a9       	ldd	r22, Y+52	; 0x34
    f1ec:	2c 91       	ld	r18, X
    f1ee:	25 ff       	sbrs	r18, 5
    f1f0:	fd cf       	rjmp	.-6      	; 0xf1ec <_Z12PID_autotunefii+0x656>
    f1f2:	fc 01       	movw	r30, r24
    f1f4:	30 83       	st	Z, r19
    f1f6:	4f 5f       	subi	r20, 0xFF	; 255
    f1f8:	5f 4f       	sbci	r21, 0xFF	; 255
    f1fa:	fa 01       	movw	r30, r20
    f1fc:	34 91       	lpm	r19, Z
    f1fe:	31 11       	cpse	r19, r1
    f200:	f5 cf       	rjmp	.-22     	; 0xf1ec <_Z12PID_autotunefii+0x656>
    f202:	7d ab       	std	Y+53, r23	; 0x35
    f204:	6c ab       	std	Y+52, r22	; 0x34
    f206:	22 e0       	ldi	r18, 0x02	; 2
    f208:	30 e0       	ldi	r19, 0x00	; 0
    f20a:	ff 85       	ldd	r31, Y+15	; 0x0f
    f20c:	e8 89       	ldd	r30, Y+16	; 0x10
    f20e:	99 89       	ldd	r25, Y+17	; 0x11
    f210:	8a 89       	ldd	r24, Y+18	; 0x12
    f212:	4f 2f       	mov	r20, r31
    f214:	5e 2f       	mov	r21, r30
    f216:	69 2f       	mov	r22, r25
    f218:	78 2f       	mov	r23, r24
    f21a:	82 ed       	ldi	r24, 0xD2	; 210
    f21c:	94 e0       	ldi	r25, 0x04	; 4
    f21e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f222:	e0 ec       	ldi	r30, 0xC0	; 192
    f224:	f0 e0       	ldi	r31, 0x00	; 0
    f226:	2d a9       	ldd	r18, Y+53	; 0x35
    f228:	9c a9       	ldd	r25, Y+52	; 0x34
    f22a:	80 81       	ld	r24, Z
    f22c:	85 ff       	sbrs	r24, 5
    f22e:	fd cf       	rjmp	.-6      	; 0xf22a <_Z12PID_autotunefii+0x694>
    f230:	2d ab       	std	Y+53, r18	; 0x35
    f232:	9c ab       	std	Y+52, r25	; 0x34
    f234:	8a e0       	ldi	r24, 0x0A	; 10
    f236:	80 93 c6 00 	sts	0x00C6, r24
    f23a:	2a e9       	ldi	r18, 0x9A	; 154
    f23c:	39 e9       	ldi	r19, 0x99	; 153
    f23e:	49 e1       	ldi	r20, 0x19	; 25
    f240:	5f e3       	ldi	r21, 0x3F	; 63
    f242:	bb 89       	ldd	r27, Y+19	; 0x13
    f244:	ad a1       	ldd	r26, Y+37	; 0x25
    f246:	fd a4       	ldd	r15, Y+45	; 0x2d
    f248:	ee a4       	ldd	r14, Y+46	; 0x2e
    f24a:	6b 2f       	mov	r22, r27
    f24c:	7a 2f       	mov	r23, r26
    f24e:	8f 2d       	mov	r24, r15
    f250:	9e 2d       	mov	r25, r14
    f252:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f256:	f6 2e       	mov	r15, r22
    f258:	e7 2e       	mov	r14, r23
    f25a:	d8 2e       	mov	r13, r24
    f25c:	c9 2e       	mov	r12, r25
    f25e:	76 2f       	mov	r23, r22
    f260:	27 2f       	mov	r18, r23
    f262:	3e 2d       	mov	r19, r14
    f264:	4d 2d       	mov	r20, r13
    f266:	5c 2d       	mov	r21, r12
    f268:	6f 2d       	mov	r22, r15
    f26a:	7e 2d       	mov	r23, r14
    f26c:	8d 2d       	mov	r24, r13
    f26e:	9c 2d       	mov	r25, r12
    f270:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    f274:	bf 85       	ldd	r27, Y+15	; 0x0f
    f276:	a8 89       	ldd	r26, Y+16	; 0x10
    f278:	e9 89       	ldd	r30, Y+17	; 0x11
    f27a:	fa 89       	ldd	r31, Y+18	; 0x12
    f27c:	2b 2f       	mov	r18, r27
    f27e:	3a 2f       	mov	r19, r26
    f280:	4e 2f       	mov	r20, r30
    f282:	5f 2f       	mov	r21, r31
    f284:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
    f288:	6b 8b       	std	Y+19, r22	; 0x13
    f28a:	7d a3       	std	Y+37, r23	; 0x25
    f28c:	8d a7       	std	Y+45, r24	; 0x2d
    f28e:	9e a7       	std	Y+46, r25	; 0x2e
    f290:	7f 85       	ldd	r23, Y+15	; 0x0f
    f292:	68 89       	ldd	r22, Y+16	; 0x10
    f294:	99 89       	ldd	r25, Y+17	; 0x11
    f296:	8a 89       	ldd	r24, Y+18	; 0x12
    f298:	27 2f       	mov	r18, r23
    f29a:	36 2f       	mov	r19, r22
    f29c:	49 2f       	mov	r20, r25
    f29e:	58 2f       	mov	r21, r24
    f2a0:	6f 2d       	mov	r22, r15
    f2a2:	7e 2d       	mov	r23, r14
    f2a4:	8d 2d       	mov	r24, r13
    f2a6:	9c 2d       	mov	r25, r12
    f2a8:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f2ac:	20 e0       	ldi	r18, 0x00	; 0
    f2ae:	30 e0       	ldi	r19, 0x00	; 0
    f2b0:	40 e0       	ldi	r20, 0x00	; 0
    f2b2:	5e e3       	ldi	r21, 0x3E	; 62
    f2b4:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
    f2b8:	6f 87       	std	Y+15, r22	; 0x0f
    f2ba:	78 8b       	std	Y+16, r23	; 0x10
    f2bc:	89 8b       	std	Y+17, r24	; 0x11
    f2be:	9a 8b       	std	Y+18, r25	; 0x12
    f2c0:	ed ed       	ldi	r30, 0xDD	; 221
    f2c2:	f0 e1       	ldi	r31, 0x10	; 16
    f2c4:	34 91       	lpm	r19, Z
    f2c6:	33 23       	and	r19, r19
    f2c8:	a1 f0       	breq	.+40     	; 0xf2f2 <_Z12PID_autotunefii+0x75c>
    f2ca:	a0 ec       	ldi	r26, 0xC0	; 192
    f2cc:	b0 e0       	ldi	r27, 0x00	; 0
    f2ce:	86 ec       	ldi	r24, 0xC6	; 198
    f2d0:	90 e0       	ldi	r25, 0x00	; 0
    f2d2:	af 01       	movw	r20, r30
    f2d4:	7d a9       	ldd	r23, Y+53	; 0x35
    f2d6:	6c a9       	ldd	r22, Y+52	; 0x34
    f2d8:	2c 91       	ld	r18, X
    f2da:	25 ff       	sbrs	r18, 5
    f2dc:	fd cf       	rjmp	.-6      	; 0xf2d8 <_Z12PID_autotunefii+0x742>
    f2de:	fc 01       	movw	r30, r24
    f2e0:	30 83       	st	Z, r19
    f2e2:	4f 5f       	subi	r20, 0xFF	; 255
    f2e4:	5f 4f       	sbci	r21, 0xFF	; 255
    f2e6:	fa 01       	movw	r30, r20
    f2e8:	34 91       	lpm	r19, Z
    f2ea:	31 11       	cpse	r19, r1
    f2ec:	f5 cf       	rjmp	.-22     	; 0xf2d8 <_Z12PID_autotunefii+0x742>
    f2ee:	7d ab       	std	Y+53, r23	; 0x35
    f2f0:	6c ab       	std	Y+52, r22	; 0x34
    f2f2:	e0 ec       	ldi	r30, 0xC0	; 192
    f2f4:	f0 e0       	ldi	r31, 0x00	; 0
    f2f6:	2d a9       	ldd	r18, Y+53	; 0x35
    f2f8:	9c a9       	ldd	r25, Y+52	; 0x34
    f2fa:	80 81       	ld	r24, Z
    f2fc:	85 ff       	sbrs	r24, 5
    f2fe:	fd cf       	rjmp	.-6      	; 0xf2fa <_Z12PID_autotunefii+0x764>
    f300:	2d ab       	std	Y+53, r18	; 0x35
    f302:	9c ab       	std	Y+52, r25	; 0x34
    f304:	8a e0       	ldi	r24, 0x0A	; 10
    f306:	80 93 c6 00 	sts	0x00C6, r24
    f30a:	ea ee       	ldi	r30, 0xEA	; 234
    f30c:	f0 e1       	ldi	r31, 0x10	; 16
    f30e:	34 91       	lpm	r19, Z
    f310:	33 23       	and	r19, r19
    f312:	a1 f0       	breq	.+40     	; 0xf33c <_Z12PID_autotunefii+0x7a6>
    f314:	a0 ec       	ldi	r26, 0xC0	; 192
    f316:	b0 e0       	ldi	r27, 0x00	; 0
    f318:	86 ec       	ldi	r24, 0xC6	; 198
    f31a:	90 e0       	ldi	r25, 0x00	; 0
    f31c:	af 01       	movw	r20, r30
    f31e:	7d a9       	ldd	r23, Y+53	; 0x35
    f320:	6c a9       	ldd	r22, Y+52	; 0x34
    f322:	2c 91       	ld	r18, X
    f324:	25 ff       	sbrs	r18, 5
    f326:	fd cf       	rjmp	.-6      	; 0xf322 <_Z12PID_autotunefii+0x78c>
    f328:	fc 01       	movw	r30, r24
    f32a:	30 83       	st	Z, r19
    f32c:	4f 5f       	subi	r20, 0xFF	; 255
    f32e:	5f 4f       	sbci	r21, 0xFF	; 255
    f330:	fa 01       	movw	r30, r20
    f332:	34 91       	lpm	r19, Z
    f334:	31 11       	cpse	r19, r1
    f336:	f5 cf       	rjmp	.-22     	; 0xf322 <_Z12PID_autotunefii+0x78c>
    f338:	7d ab       	std	Y+53, r23	; 0x35
    f33a:	6c ab       	std	Y+52, r22	; 0x34
    f33c:	22 e0       	ldi	r18, 0x02	; 2
    f33e:	30 e0       	ldi	r19, 0x00	; 0
    f340:	4f 2d       	mov	r20, r15
    f342:	5e 2d       	mov	r21, r14
    f344:	6d 2d       	mov	r22, r13
    f346:	7c 2d       	mov	r23, r12
    f348:	82 ed       	ldi	r24, 0xD2	; 210
    f34a:	94 e0       	ldi	r25, 0x04	; 4
    f34c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f350:	e0 ec       	ldi	r30, 0xC0	; 192
    f352:	f0 e0       	ldi	r31, 0x00	; 0
    f354:	2d a9       	ldd	r18, Y+53	; 0x35
    f356:	9c a9       	ldd	r25, Y+52	; 0x34
    f358:	80 81       	ld	r24, Z
    f35a:	85 ff       	sbrs	r24, 5
    f35c:	fd cf       	rjmp	.-6      	; 0xf358 <_Z12PID_autotunefii+0x7c2>
    f35e:	2d ab       	std	Y+53, r18	; 0x35
    f360:	9c ab       	std	Y+52, r25	; 0x34
    f362:	8a e0       	ldi	r24, 0x0A	; 10
    f364:	80 93 c6 00 	sts	0x00C6, r24
    f368:	e0 ef       	ldi	r30, 0xF0	; 240
    f36a:	f0 e1       	ldi	r31, 0x10	; 16
    f36c:	34 91       	lpm	r19, Z
    f36e:	33 23       	and	r19, r19
    f370:	a1 f0       	breq	.+40     	; 0xf39a <_Z12PID_autotunefii+0x804>
    f372:	a0 ec       	ldi	r26, 0xC0	; 192
    f374:	b0 e0       	ldi	r27, 0x00	; 0
    f376:	86 ec       	ldi	r24, 0xC6	; 198
    f378:	90 e0       	ldi	r25, 0x00	; 0
    f37a:	af 01       	movw	r20, r30
    f37c:	7d a9       	ldd	r23, Y+53	; 0x35
    f37e:	6c a9       	ldd	r22, Y+52	; 0x34
    f380:	2c 91       	ld	r18, X
    f382:	25 ff       	sbrs	r18, 5
    f384:	fd cf       	rjmp	.-6      	; 0xf380 <_Z12PID_autotunefii+0x7ea>
    f386:	fc 01       	movw	r30, r24
    f388:	30 83       	st	Z, r19
    f38a:	4f 5f       	subi	r20, 0xFF	; 255
    f38c:	5f 4f       	sbci	r21, 0xFF	; 255
    f38e:	fa 01       	movw	r30, r20
    f390:	34 91       	lpm	r19, Z
    f392:	31 11       	cpse	r19, r1
    f394:	f5 cf       	rjmp	.-22     	; 0xf380 <_Z12PID_autotunefii+0x7ea>
    f396:	7d ab       	std	Y+53, r23	; 0x35
    f398:	6c ab       	std	Y+52, r22	; 0x34
    f39a:	22 e0       	ldi	r18, 0x02	; 2
    f39c:	30 e0       	ldi	r19, 0x00	; 0
    f39e:	fb 89       	ldd	r31, Y+19	; 0x13
    f3a0:	ed a1       	ldd	r30, Y+37	; 0x25
    f3a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    f3a4:	8e a5       	ldd	r24, Y+46	; 0x2e
    f3a6:	4f 2f       	mov	r20, r31
    f3a8:	5e 2f       	mov	r21, r30
    f3aa:	69 2f       	mov	r22, r25
    f3ac:	78 2f       	mov	r23, r24
    f3ae:	82 ed       	ldi	r24, 0xD2	; 210
    f3b0:	94 e0       	ldi	r25, 0x04	; 4
    f3b2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f3b6:	e0 ec       	ldi	r30, 0xC0	; 192
    f3b8:	f0 e0       	ldi	r31, 0x00	; 0
    f3ba:	2d a9       	ldd	r18, Y+53	; 0x35
    f3bc:	9c a9       	ldd	r25, Y+52	; 0x34
    f3be:	80 81       	ld	r24, Z
    f3c0:	85 ff       	sbrs	r24, 5
    f3c2:	fd cf       	rjmp	.-6      	; 0xf3be <_Z12PID_autotunefii+0x828>
    f3c4:	2d ab       	std	Y+53, r18	; 0x35
    f3c6:	9c ab       	std	Y+52, r25	; 0x34
    f3c8:	8a e0       	ldi	r24, 0x0A	; 10
    f3ca:	80 93 c6 00 	sts	0x00C6, r24
    f3ce:	e6 ef       	ldi	r30, 0xF6	; 246
    f3d0:	f0 e1       	ldi	r31, 0x10	; 16
    f3d2:	34 91       	lpm	r19, Z
    f3d4:	33 23       	and	r19, r19
    f3d6:	a1 f0       	breq	.+40     	; 0xf400 <_Z12PID_autotunefii+0x86a>
    f3d8:	a0 ec       	ldi	r26, 0xC0	; 192
    f3da:	b0 e0       	ldi	r27, 0x00	; 0
    f3dc:	86 ec       	ldi	r24, 0xC6	; 198
    f3de:	90 e0       	ldi	r25, 0x00	; 0
    f3e0:	af 01       	movw	r20, r30
    f3e2:	7d a9       	ldd	r23, Y+53	; 0x35
    f3e4:	6c a9       	ldd	r22, Y+52	; 0x34
    f3e6:	2c 91       	ld	r18, X
    f3e8:	25 ff       	sbrs	r18, 5
    f3ea:	fd cf       	rjmp	.-6      	; 0xf3e6 <_Z12PID_autotunefii+0x850>
    f3ec:	fc 01       	movw	r30, r24
    f3ee:	30 83       	st	Z, r19
    f3f0:	4f 5f       	subi	r20, 0xFF	; 255
    f3f2:	5f 4f       	sbci	r21, 0xFF	; 255
    f3f4:	fa 01       	movw	r30, r20
    f3f6:	34 91       	lpm	r19, Z
    f3f8:	31 11       	cpse	r19, r1
    f3fa:	f5 cf       	rjmp	.-22     	; 0xf3e6 <_Z12PID_autotunefii+0x850>
    f3fc:	7d ab       	std	Y+53, r23	; 0x35
    f3fe:	6c ab       	std	Y+52, r22	; 0x34
    f400:	22 e0       	ldi	r18, 0x02	; 2
    f402:	30 e0       	ldi	r19, 0x00	; 0
    f404:	ff 85       	ldd	r31, Y+15	; 0x0f
    f406:	e8 89       	ldd	r30, Y+16	; 0x10
    f408:	99 89       	ldd	r25, Y+17	; 0x11
    f40a:	8a 89       	ldd	r24, Y+18	; 0x12
    f40c:	4f 2f       	mov	r20, r31
    f40e:	5e 2f       	mov	r21, r30
    f410:	69 2f       	mov	r22, r25
    f412:	78 2f       	mov	r23, r24
    f414:	82 ed       	ldi	r24, 0xD2	; 210
    f416:	94 e0       	ldi	r25, 0x04	; 4
    f418:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f41c:	e0 ec       	ldi	r30, 0xC0	; 192
    f41e:	f0 e0       	ldi	r31, 0x00	; 0
    f420:	2d a9       	ldd	r18, Y+53	; 0x35
    f422:	9c a9       	ldd	r25, Y+52	; 0x34
    f424:	80 81       	ld	r24, Z
    f426:	85 ff       	sbrs	r24, 5
    f428:	fd cf       	rjmp	.-6      	; 0xf424 <_Z12PID_autotunefii+0x88e>
    f42a:	2d ab       	std	Y+53, r18	; 0x35
    f42c:	9c ab       	std	Y+52, r25	; 0x34
    f42e:	8a e0       	ldi	r24, 0x0A	; 10
    f430:	80 93 c6 00 	sts	0x00C6, r24
    f434:	2d 85       	ldd	r18, Y+13	; 0x0d
    f436:	3e 85       	ldd	r19, Y+14	; 0x0e
    f438:	33 23       	and	r19, r19
    f43a:	9c f4       	brge	.+38     	; 0xf462 <_Z12PID_autotunefii+0x8cc>
    f43c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f43e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    f440:	ad 8d       	ldd	r26, Y+29	; 0x1d
    f442:	be 8d       	ldd	r27, Y+30	; 0x1e
    f444:	29 a1       	ldd	r18, Y+33	; 0x21
    f446:	3a a1       	ldd	r19, Y+34	; 0x22
    f448:	4b a1       	ldd	r20, Y+35	; 0x23
    f44a:	5c a1       	ldd	r21, Y+36	; 0x24
    f44c:	82 0f       	add	r24, r18
    f44e:	93 1f       	adc	r25, r19
    f450:	a4 1f       	adc	r26, r20
    f452:	b5 1f       	adc	r27, r21
    f454:	b5 95       	asr	r27
    f456:	a7 95       	ror	r26
    f458:	97 95       	ror	r25
    f45a:	87 95       	ror	r24
    f45c:	80 93 1b 11 	sts	0x111B, r24
    f460:	13 c0       	rjmp	.+38     	; 0xf488 <_Z12PID_autotunefii+0x8f2>
    f462:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f464:	9c 8d       	ldd	r25, Y+28	; 0x1c
    f466:	ad 8d       	ldd	r26, Y+29	; 0x1d
    f468:	be 8d       	ldd	r27, Y+30	; 0x1e
    f46a:	29 a1       	ldd	r18, Y+33	; 0x21
    f46c:	3a a1       	ldd	r19, Y+34	; 0x22
    f46e:	4b a1       	ldd	r20, Y+35	; 0x23
    f470:	5c a1       	ldd	r21, Y+36	; 0x24
    f472:	82 0f       	add	r24, r18
    f474:	93 1f       	adc	r25, r19
    f476:	a4 1f       	adc	r26, r20
    f478:	b5 1f       	adc	r27, r21
    f47a:	b5 95       	asr	r27
    f47c:	a7 95       	ror	r26
    f47e:	97 95       	ror	r25
    f480:	87 95       	ror	r24
    f482:	ef 8d       	ldd	r30, Y+31	; 0x1f
    f484:	f8 a1       	ldd	r31, Y+32	; 0x20
    f486:	80 83       	st	Z, r24
    f488:	ff ef       	ldi	r31, 0xFF	; 255
    f48a:	2f 1a       	sub	r2, r31
    f48c:	3f 0a       	sbc	r3, r31
    f48e:	29 81       	ldd	r18, Y+1	; 0x01
    f490:	2f 87       	std	Y+15, r18	; 0x0f
    f492:	3a 81       	ldd	r19, Y+2	; 0x02
    f494:	38 8b       	std	Y+16, r19	; 0x10
    f496:	4b 81       	ldd	r20, Y+3	; 0x03
    f498:	49 8b       	std	Y+17, r20	; 0x11
    f49a:	5c 81       	ldd	r21, Y+4	; 0x04
    f49c:	5a 8b       	std	Y+18, r21	; 0x12
    f49e:	81 e0       	ldi	r24, 0x01	; 1
    f4a0:	8b 8b       	std	Y+19, r24	; 0x13
    f4a2:	01 c0       	rjmp	.+2      	; 0xf4a6 <_Z12PID_autotunefii+0x910>
    f4a4:	1b 8a       	std	Y+19, r1	; 0x13
    f4a6:	20 e0       	ldi	r18, 0x00	; 0
    f4a8:	30 e0       	ldi	r19, 0x00	; 0
    f4aa:	40 ea       	ldi	r20, 0xA0	; 160
    f4ac:	51 e4       	ldi	r21, 0x41	; 65
    f4ae:	b9 81       	ldd	r27, Y+1	; 0x01
    f4b0:	aa 81       	ldd	r26, Y+2	; 0x02
    f4b2:	fb 80       	ldd	r15, Y+3	; 0x03
    f4b4:	ec 80       	ldd	r14, Y+4	; 0x04
    f4b6:	6b 2f       	mov	r22, r27
    f4b8:	7a 2f       	mov	r23, r26
    f4ba:	8f 2d       	mov	r24, r15
    f4bc:	9e 2d       	mov	r25, r14
    f4be:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
    f4c2:	9b 01       	movw	r18, r22
    f4c4:	ac 01       	movw	r20, r24
    f4c6:	fd a9       	ldd	r31, Y+53	; 0x35
    f4c8:	ec a9       	ldd	r30, Y+52	; 0x34
    f4ca:	60 2f       	mov	r22, r16
    f4cc:	71 2f       	mov	r23, r17
    f4ce:	8f 2f       	mov	r24, r31
    f4d0:	9e 2f       	mov	r25, r30
    f4d2:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
    f4d6:	18 16       	cp	r1, r24
    f4d8:	f4 f4       	brge	.+60     	; 0xf516 <_Z12PID_autotunefii+0x980>
    f4da:	ec ef       	ldi	r30, 0xFC	; 252
    f4dc:	f0 e1       	ldi	r31, 0x10	; 16
    f4de:	94 91       	lpm	r25, Z
    f4e0:	99 23       	and	r25, r25
    f4e2:	81 f0       	breq	.+32     	; 0xf504 <_Z12PID_autotunefii+0x96e>
    f4e4:	a0 ec       	ldi	r26, 0xC0	; 192
    f4e6:	b0 e0       	ldi	r27, 0x00	; 0
    f4e8:	26 ec       	ldi	r18, 0xC6	; 198
    f4ea:	30 e0       	ldi	r19, 0x00	; 0
    f4ec:	af 01       	movw	r20, r30
    f4ee:	8c 91       	ld	r24, X
    f4f0:	85 ff       	sbrs	r24, 5
    f4f2:	fd cf       	rjmp	.-6      	; 0xf4ee <_Z12PID_autotunefii+0x958>
    f4f4:	f9 01       	movw	r30, r18
    f4f6:	90 83       	st	Z, r25
    f4f8:	4f 5f       	subi	r20, 0xFF	; 255
    f4fa:	5f 4f       	sbci	r21, 0xFF	; 255
    f4fc:	fa 01       	movw	r30, r20
    f4fe:	94 91       	lpm	r25, Z
    f500:	91 11       	cpse	r25, r1
    f502:	f5 cf       	rjmp	.-22     	; 0xf4ee <_Z12PID_autotunefii+0x958>
    f504:	e0 ec       	ldi	r30, 0xC0	; 192
    f506:	f0 e0       	ldi	r31, 0x00	; 0
    f508:	80 81       	ld	r24, Z
    f50a:	85 ff       	sbrs	r24, 5
    f50c:	fd cf       	rjmp	.-6      	; 0xf508 <_Z12PID_autotunefii+0x972>
    f50e:	8a e0       	ldi	r24, 0x0A	; 10
    f510:	80 93 c6 00 	sts	0x00C6, r24
    f514:	00 c1       	rjmp	.+512    	; 0xf716 <_Z12PID_autotunefii+0xb80>
    f516:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    f51a:	dc 01       	movw	r26, r24
    f51c:	cb 01       	movw	r24, r22
    f51e:	88 19       	sub	r24, r8
    f520:	99 09       	sbc	r25, r9
    f522:	aa 09       	sbc	r26, r10
    f524:	bb 09       	sbc	r27, r11
    f526:	81 3d       	cpi	r24, 0xD1	; 209
    f528:	97 40       	sbci	r25, 0x07	; 7
    f52a:	a1 05       	cpc	r26, r1
    f52c:	b1 05       	cpc	r27, r1
    f52e:	08 f4       	brcc	.+2      	; 0xf532 <_Z12PID_autotunefii+0x99c>
    f530:	7b c0       	rjmp	.+246    	; 0xf628 <_Z12PID_autotunefii+0xa92>
    f532:	2d 85       	ldd	r18, Y+13	; 0x0d
    f534:	3e 85       	ldd	r19, Y+14	; 0x0e
    f536:	33 23       	and	r19, r19
    f538:	ec f4       	brge	.+58     	; 0xf574 <_Z12PID_autotunefii+0x9de>
    f53a:	f0 90 1b 11 	lds	r15, 0x111B
    f53e:	e1 2c       	mov	r14, r1
    f540:	e6 e2       	ldi	r30, 0x26	; 38
    f542:	f1 e1       	ldi	r31, 0x11	; 17
    f544:	34 91       	lpm	r19, Z
    f546:	33 23       	and	r19, r19
    f548:	91 f1       	breq	.+100    	; 0xf5ae <_Z12PID_autotunefii+0xa18>
    f54a:	a0 ec       	ldi	r26, 0xC0	; 192
    f54c:	b0 e0       	ldi	r27, 0x00	; 0
    f54e:	86 ec       	ldi	r24, 0xC6	; 198
    f550:	90 e0       	ldi	r25, 0x00	; 0
    f552:	af 01       	movw	r20, r30
    f554:	7d a9       	ldd	r23, Y+53	; 0x35
    f556:	6c a9       	ldd	r22, Y+52	; 0x34
    f558:	2c 91       	ld	r18, X
    f55a:	25 ff       	sbrs	r18, 5
    f55c:	fd cf       	rjmp	.-6      	; 0xf558 <_Z12PID_autotunefii+0x9c2>
    f55e:	fc 01       	movw	r30, r24
    f560:	30 83       	st	Z, r19
    f562:	4f 5f       	subi	r20, 0xFF	; 255
    f564:	5f 4f       	sbci	r21, 0xFF	; 255
    f566:	fa 01       	movw	r30, r20
    f568:	34 91       	lpm	r19, Z
    f56a:	31 11       	cpse	r19, r1
    f56c:	f5 cf       	rjmp	.-22     	; 0xf558 <_Z12PID_autotunefii+0x9c2>
    f56e:	7d ab       	std	Y+53, r23	; 0x35
    f570:	6c ab       	std	Y+52, r22	; 0x34
    f572:	1d c0       	rjmp	.+58     	; 0xf5ae <_Z12PID_autotunefii+0xa18>
    f574:	af 8d       	ldd	r26, Y+31	; 0x1f
    f576:	b8 a1       	ldd	r27, Y+32	; 0x20
    f578:	fc 90       	ld	r15, X
    f57a:	e1 2c       	mov	r14, r1
    f57c:	ec e2       	ldi	r30, 0x2C	; 44
    f57e:	f1 e1       	ldi	r31, 0x11	; 17
    f580:	34 91       	lpm	r19, Z
    f582:	33 23       	and	r19, r19
    f584:	a1 f0       	breq	.+40     	; 0xf5ae <_Z12PID_autotunefii+0xa18>
    f586:	a0 ec       	ldi	r26, 0xC0	; 192
    f588:	b0 e0       	ldi	r27, 0x00	; 0
    f58a:	86 ec       	ldi	r24, 0xC6	; 198
    f58c:	90 e0       	ldi	r25, 0x00	; 0
    f58e:	af 01       	movw	r20, r30
    f590:	7d a9       	ldd	r23, Y+53	; 0x35
    f592:	6c a9       	ldd	r22, Y+52	; 0x34
    f594:	2c 91       	ld	r18, X
    f596:	25 ff       	sbrs	r18, 5
    f598:	fd cf       	rjmp	.-6      	; 0xf594 <_Z12PID_autotunefii+0x9fe>
    f59a:	fc 01       	movw	r30, r24
    f59c:	30 83       	st	Z, r19
    f59e:	4f 5f       	subi	r20, 0xFF	; 255
    f5a0:	5f 4f       	sbci	r21, 0xFF	; 255
    f5a2:	fa 01       	movw	r30, r20
    f5a4:	34 91       	lpm	r19, Z
    f5a6:	31 11       	cpse	r19, r1
    f5a8:	f5 cf       	rjmp	.-22     	; 0xf594 <_Z12PID_autotunefii+0x9fe>
    f5aa:	7d ab       	std	Y+53, r23	; 0x35
    f5ac:	6c ab       	std	Y+52, r22	; 0x34
    f5ae:	22 e0       	ldi	r18, 0x02	; 2
    f5b0:	30 e0       	ldi	r19, 0x00	; 0
    f5b2:	9d a9       	ldd	r25, Y+53	; 0x35
    f5b4:	8c a9       	ldd	r24, Y+52	; 0x34
    f5b6:	40 2f       	mov	r20, r16
    f5b8:	51 2f       	mov	r21, r17
    f5ba:	69 2f       	mov	r22, r25
    f5bc:	78 2f       	mov	r23, r24
    f5be:	82 ed       	ldi	r24, 0xD2	; 210
    f5c0:	94 e0       	ldi	r25, 0x04	; 4
    f5c2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN12MarlinSerial5printEdi>
    f5c6:	e2 e3       	ldi	r30, 0x32	; 50
    f5c8:	f1 e1       	ldi	r31, 0x11	; 17
    f5ca:	34 91       	lpm	r19, Z
    f5cc:	33 23       	and	r19, r19
    f5ce:	a1 f0       	breq	.+40     	; 0xf5f8 <_Z12PID_autotunefii+0xa62>
    f5d0:	a0 ec       	ldi	r26, 0xC0	; 192
    f5d2:	b0 e0       	ldi	r27, 0x00	; 0
    f5d4:	86 ec       	ldi	r24, 0xC6	; 198
    f5d6:	90 e0       	ldi	r25, 0x00	; 0
    f5d8:	af 01       	movw	r20, r30
    f5da:	7d a9       	ldd	r23, Y+53	; 0x35
    f5dc:	6c a9       	ldd	r22, Y+52	; 0x34
    f5de:	2c 91       	ld	r18, X
    f5e0:	25 ff       	sbrs	r18, 5
    f5e2:	fd cf       	rjmp	.-6      	; 0xf5de <_Z12PID_autotunefii+0xa48>
    f5e4:	fc 01       	movw	r30, r24
    f5e6:	30 83       	st	Z, r19
    f5e8:	4f 5f       	subi	r20, 0xFF	; 255
    f5ea:	5f 4f       	sbci	r21, 0xFF	; 255
    f5ec:	fa 01       	movw	r30, r20
    f5ee:	34 91       	lpm	r19, Z
    f5f0:	31 11       	cpse	r19, r1
    f5f2:	f5 cf       	rjmp	.-22     	; 0xf5de <_Z12PID_autotunefii+0xa48>
    f5f4:	7d ab       	std	Y+53, r23	; 0x35
    f5f6:	6c ab       	std	Y+52, r22	; 0x34
    f5f8:	4a e0       	ldi	r20, 0x0A	; 10
    f5fa:	50 e0       	ldi	r21, 0x00	; 0
    f5fc:	6f 2d       	mov	r22, r15
    f5fe:	7e 2d       	mov	r23, r14
    f600:	82 ed       	ldi	r24, 0xD2	; 210
    f602:	94 e0       	ldi	r25, 0x04	; 4
    f604:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
    f608:	e0 ec       	ldi	r30, 0xC0	; 192
    f60a:	f0 e0       	ldi	r31, 0x00	; 0
    f60c:	2d a9       	ldd	r18, Y+53	; 0x35
    f60e:	9c a9       	ldd	r25, Y+52	; 0x34
    f610:	80 81       	ld	r24, Z
    f612:	85 ff       	sbrs	r24, 5
    f614:	fd cf       	rjmp	.-6      	; 0xf610 <_Z12PID_autotunefii+0xa7a>
    f616:	2d ab       	std	Y+53, r18	; 0x35
    f618:	9c ab       	std	Y+52, r25	; 0x34
    f61a:	8a e0       	ldi	r24, 0x0A	; 10
    f61c:	80 93 c6 00 	sts	0x00C6, r24
    f620:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    f624:	4b 01       	movw	r8, r22
    f626:	5c 01       	movw	r10, r24
    f628:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    f62c:	6b 01       	movw	r12, r22
    f62e:	7c 01       	movw	r14, r24
    f630:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
    f634:	2d 81       	ldd	r18, Y+5	; 0x05
    f636:	3e 81       	ldd	r19, Y+6	; 0x06
    f638:	4f 81       	ldd	r20, Y+7	; 0x07
    f63a:	58 85       	ldd	r21, Y+8	; 0x08
    f63c:	24 0d       	add	r18, r4
    f63e:	35 1d       	adc	r19, r5
    f640:	46 1d       	adc	r20, r6
    f642:	57 1d       	adc	r21, r7
    f644:	c2 1a       	sub	r12, r18
    f646:	d3 0a       	sbc	r13, r19
    f648:	e4 0a       	sbc	r14, r20
    f64a:	f5 0a       	sbc	r15, r21
    f64c:	c6 0e       	add	r12, r22
    f64e:	d7 1e       	adc	r13, r23
    f650:	e8 1e       	adc	r14, r24
    f652:	f9 1e       	adc	r15, r25
    f654:	f1 e8       	ldi	r31, 0x81	; 129
    f656:	cf 16       	cp	r12, r31
    f658:	ff e4       	ldi	r31, 0x4F	; 79
    f65a:	df 06       	cpc	r13, r31
    f65c:	f2 e1       	ldi	r31, 0x12	; 18
    f65e:	ef 06       	cpc	r14, r31
    f660:	f1 04       	cpc	r15, r1
    f662:	f0 f0       	brcs	.+60     	; 0xf6a0 <_Z12PID_autotunefii+0xb0a>
    f664:	e6 e3       	ldi	r30, 0x36	; 54
    f666:	f1 e1       	ldi	r31, 0x11	; 17
    f668:	94 91       	lpm	r25, Z
    f66a:	99 23       	and	r25, r25
    f66c:	81 f0       	breq	.+32     	; 0xf68e <_Z12PID_autotunefii+0xaf8>
    f66e:	a0 ec       	ldi	r26, 0xC0	; 192
    f670:	b0 e0       	ldi	r27, 0x00	; 0
    f672:	26 ec       	ldi	r18, 0xC6	; 198
    f674:	30 e0       	ldi	r19, 0x00	; 0
    f676:	af 01       	movw	r20, r30
    f678:	8c 91       	ld	r24, X
    f67a:	85 ff       	sbrs	r24, 5
    f67c:	fd cf       	rjmp	.-6      	; 0xf678 <_Z12PID_autotunefii+0xae2>
    f67e:	f9 01       	movw	r30, r18
    f680:	90 83       	st	Z, r25
    f682:	4f 5f       	subi	r20, 0xFF	; 255
    f684:	5f 4f       	sbci	r21, 0xFF	; 255
    f686:	fa 01       	movw	r30, r20
    f688:	94 91       	lpm	r25, Z
    f68a:	91 11       	cpse	r25, r1
    f68c:	f5 cf       	rjmp	.-22     	; 0xf678 <_Z12PID_autotunefii+0xae2>
    f68e:	e0 ec       	ldi	r30, 0xC0	; 192
    f690:	f0 e0       	ldi	r31, 0x00	; 0
    f692:	80 81       	ld	r24, Z
    f694:	85 ff       	sbrs	r24, 5
    f696:	fd cf       	rjmp	.-6      	; 0xf692 <_Z12PID_autotunefii+0xafc>
    f698:	8a e0       	ldi	r24, 0x0A	; 10
    f69a:	80 93 c6 00 	sts	0x00C6, r24
    f69e:	3b c0       	rjmp	.+118    	; 0xf716 <_Z12PID_autotunefii+0xb80>
    f6a0:	29 85       	ldd	r18, Y+9	; 0x09
    f6a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    f6a4:	22 15       	cp	r18, r2
    f6a6:	33 05       	cpc	r19, r3
    f6a8:	f4 f4       	brge	.+60     	; 0xf6e6 <_Z12PID_autotunefii+0xb50>
    f6aa:	e3 e5       	ldi	r30, 0x53	; 83
    f6ac:	f1 e1       	ldi	r31, 0x11	; 17
    f6ae:	94 91       	lpm	r25, Z
    f6b0:	99 23       	and	r25, r25
    f6b2:	81 f0       	breq	.+32     	; 0xf6d4 <_Z12PID_autotunefii+0xb3e>
    f6b4:	a0 ec       	ldi	r26, 0xC0	; 192
    f6b6:	b0 e0       	ldi	r27, 0x00	; 0
    f6b8:	26 ec       	ldi	r18, 0xC6	; 198
    f6ba:	30 e0       	ldi	r19, 0x00	; 0
    f6bc:	af 01       	movw	r20, r30
    f6be:	8c 91       	ld	r24, X
    f6c0:	85 ff       	sbrs	r24, 5
    f6c2:	fd cf       	rjmp	.-6      	; 0xf6be <_Z12PID_autotunefii+0xb28>
    f6c4:	f9 01       	movw	r30, r18
    f6c6:	90 83       	st	Z, r25
    f6c8:	4f 5f       	subi	r20, 0xFF	; 255
    f6ca:	5f 4f       	sbci	r21, 0xFF	; 255
    f6cc:	fa 01       	movw	r30, r20
    f6ce:	94 91       	lpm	r25, Z
    f6d0:	91 11       	cpse	r25, r1
    f6d2:	f5 cf       	rjmp	.-22     	; 0xf6be <_Z12PID_autotunefii+0xb28>
    f6d4:	e0 ec       	ldi	r30, 0xC0	; 192
    f6d6:	f0 e0       	ldi	r31, 0x00	; 0
    f6d8:	80 81       	ld	r24, Z
    f6da:	85 ff       	sbrs	r24, 5
    f6dc:	fd cf       	rjmp	.-6      	; 0xf6d8 <_Z12PID_autotunefii+0xb42>
    f6de:	8a e0       	ldi	r24, 0x0A	; 10
    f6e0:	80 93 c6 00 	sts	0x00C6, r24
    f6e4:	18 c0       	rjmp	.+48     	; 0xf716 <_Z12PID_autotunefii+0xb80>
    f6e6:	0e 94 cc 94 	call	0x12998	; 0x12998 <_Z10lcd_updatev>
    f6ea:	1b cb       	rjmp	.-2506   	; 0xed22 <_Z12PID_autotunefii+0x18c>
    f6ec:	79 81       	ldd	r23, Y+1	; 0x01
    f6ee:	6a 81       	ldd	r22, Y+2	; 0x02
    f6f0:	9b 81       	ldd	r25, Y+3	; 0x03
    f6f2:	8c 81       	ldd	r24, Y+4	; 0x04
    f6f4:	27 2f       	mov	r18, r23
    f6f6:	36 2f       	mov	r19, r22
    f6f8:	49 2f       	mov	r20, r25
    f6fa:	58 2f       	mov	r21, r24
    f6fc:	fd a9       	ldd	r31, Y+53	; 0x35
    f6fe:	ec a9       	ldd	r30, Y+52	; 0x34
    f700:	60 2f       	mov	r22, r16
    f702:	71 2f       	mov	r23, r17
    f704:	8f 2f       	mov	r24, r31
    f706:	9e 2f       	mov	r25, r30
    f708:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
    f70c:	88 23       	and	r24, r24
    f70e:	0c f4       	brge	.+2      	; 0xf712 <_Z12PID_autotunefii+0xb7c>
    f710:	c8 cb       	rjmp	.-2160   	; 0xeea2 <_Z12PID_autotunefii+0x30c>
    f712:	1b 8a       	std	Y+19, r1	; 0x13
    f714:	c8 ce       	rjmp	.-624    	; 0xf4a6 <_Z12PID_autotunefii+0x910>
    f716:	e5 96       	adiw	r28, 0x35	; 53
    f718:	0f b6       	in	r0, 0x3f	; 63
    f71a:	f8 94       	cli
    f71c:	de bf       	out	0x3e, r29	; 62
    f71e:	0f be       	out	0x3f, r0	; 63
    f720:	cd bf       	out	0x3d, r28	; 61
    f722:	df 91       	pop	r29
    f724:	cf 91       	pop	r28
    f726:	1f 91       	pop	r17
    f728:	0f 91       	pop	r16
    f72a:	ff 90       	pop	r15
    f72c:	ef 90       	pop	r14
    f72e:	df 90       	pop	r13
    f730:	cf 90       	pop	r12
    f732:	bf 90       	pop	r11
    f734:	af 90       	pop	r10
    f736:	9f 90       	pop	r9
    f738:	8f 90       	pop	r8
    f73a:	7f 90       	pop	r7
    f73c:	6f 90       	pop	r6
    f73e:	5f 90       	pop	r5
    f740:	4f 90       	pop	r4
    f742:	3f 90       	pop	r3
    f744:	2f 90       	pop	r2
    f746:	08 95       	ret

0000f748 <_Z14max_temp_errorh>:
    f748:	1f 93       	push	r17
    f74a:	cf 93       	push	r28
    f74c:	df 93       	push	r29
    f74e:	18 2f       	mov	r17, r24
    f750:	0c da       	rcall	.-3048   	; 0xeb6a <_Z14disable_heaterv>
    f752:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_Z9IsStoppedv>
    f756:	81 11       	cpse	r24, r1
    f758:	3e c0       	rjmp	.+124    	; 0xf7d6 <_Z14max_temp_errorh+0x8e>
    f75a:	ef e9       	ldi	r30, 0x9F	; 159
    f75c:	f1 e1       	ldi	r31, 0x11	; 17
    f75e:	24 91       	lpm	r18, Z
    f760:	22 23       	and	r18, r18
    f762:	61 f0       	breq	.+24     	; 0xf77c <_Z14max_temp_errorh+0x34>
    f764:	a0 ec       	ldi	r26, 0xC0	; 192
    f766:	b0 e0       	ldi	r27, 0x00	; 0
    f768:	c6 ec       	ldi	r28, 0xC6	; 198
    f76a:	d0 e0       	ldi	r29, 0x00	; 0
    f76c:	9c 91       	ld	r25, X
    f76e:	95 ff       	sbrs	r25, 5
    f770:	fd cf       	rjmp	.-6      	; 0xf76c <_Z14max_temp_errorh+0x24>
    f772:	28 83       	st	Y, r18
    f774:	31 96       	adiw	r30, 0x01	; 1
    f776:	24 91       	lpm	r18, Z
    f778:	21 11       	cpse	r18, r1
    f77a:	f8 cf       	rjmp	.-16     	; 0xf76c <_Z14max_temp_errorh+0x24>
    f77c:	4a e0       	ldi	r20, 0x0A	; 10
    f77e:	50 e0       	ldi	r21, 0x00	; 0
    f780:	61 2f       	mov	r22, r17
    f782:	70 e0       	ldi	r23, 0x00	; 0
    f784:	82 ed       	ldi	r24, 0xD2	; 210
    f786:	94 e0       	ldi	r25, 0x04	; 4
    f788:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
    f78c:	e0 ec       	ldi	r30, 0xC0	; 192
    f78e:	f0 e0       	ldi	r31, 0x00	; 0
    f790:	80 81       	ld	r24, Z
    f792:	85 ff       	sbrs	r24, 5
    f794:	fd cf       	rjmp	.-6      	; 0xf790 <_Z14max_temp_errorh+0x48>
    f796:	8a e0       	ldi	r24, 0x0A	; 10
    f798:	80 93 c6 00 	sts	0x00C6, r24
    f79c:	e3 ec       	ldi	r30, 0xC3	; 195
    f79e:	f1 e1       	ldi	r31, 0x11	; 17
    f7a0:	94 91       	lpm	r25, Z
    f7a2:	99 23       	and	r25, r25
    f7a4:	61 f0       	breq	.+24     	; 0xf7be <_Z14max_temp_errorh+0x76>
    f7a6:	a0 ec       	ldi	r26, 0xC0	; 192
    f7a8:	b0 e0       	ldi	r27, 0x00	; 0
    f7aa:	c6 ec       	ldi	r28, 0xC6	; 198
    f7ac:	d0 e0       	ldi	r29, 0x00	; 0
    f7ae:	8c 91       	ld	r24, X
    f7b0:	85 ff       	sbrs	r24, 5
    f7b2:	fd cf       	rjmp	.-6      	; 0xf7ae <_Z14max_temp_errorh+0x66>
    f7b4:	98 83       	st	Y, r25
    f7b6:	31 96       	adiw	r30, 0x01	; 1
    f7b8:	94 91       	lpm	r25, Z
    f7ba:	91 11       	cpse	r25, r1
    f7bc:	f8 cf       	rjmp	.-16     	; 0xf7ae <_Z14max_temp_errorh+0x66>
    f7be:	e0 ec       	ldi	r30, 0xC0	; 192
    f7c0:	f0 e0       	ldi	r31, 0x00	; 0
    f7c2:	80 81       	ld	r24, Z
    f7c4:	85 ff       	sbrs	r24, 5
    f7c6:	fd cf       	rjmp	.-6      	; 0xf7c2 <_Z14max_temp_errorh+0x7a>
    f7c8:	8a e0       	ldi	r24, 0x0A	; 10
    f7ca:	80 93 c6 00 	sts	0x00C6, r24
    f7ce:	80 ef       	ldi	r24, 0xF0	; 240
    f7d0:	91 e1       	ldi	r25, 0x11	; 17
    f7d2:	0e 94 46 94 	call	0x1288c	; 0x1288c <_Z21lcd_setalertstatuspgmPKc>
    f7d6:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_Z4Stopv>
    f7da:	df 91       	pop	r29
    f7dc:	cf 91       	pop	r28
    f7de:	1f 91       	pop	r17
    f7e0:	08 95       	ret

0000f7e2 <_Z14min_temp_errorh>:
    f7e2:	1f 93       	push	r17
    f7e4:	cf 93       	push	r28
    f7e6:	df 93       	push	r29
    f7e8:	18 2f       	mov	r17, r24
    f7ea:	bf d9       	rcall	.-3202   	; 0xeb6a <_Z14disable_heaterv>
    f7ec:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_Z9IsStoppedv>
    f7f0:	81 11       	cpse	r24, r1
    f7f2:	3e c0       	rjmp	.+124    	; 0xf870 <_Z14min_temp_errorh+0x8e>
    f7f4:	ef e9       	ldi	r30, 0x9F	; 159
    f7f6:	f1 e1       	ldi	r31, 0x11	; 17
    f7f8:	24 91       	lpm	r18, Z
    f7fa:	22 23       	and	r18, r18
    f7fc:	61 f0       	breq	.+24     	; 0xf816 <_Z14min_temp_errorh+0x34>
    f7fe:	a0 ec       	ldi	r26, 0xC0	; 192
    f800:	b0 e0       	ldi	r27, 0x00	; 0
    f802:	c6 ec       	ldi	r28, 0xC6	; 198
    f804:	d0 e0       	ldi	r29, 0x00	; 0
    f806:	9c 91       	ld	r25, X
    f808:	95 ff       	sbrs	r25, 5
    f80a:	fd cf       	rjmp	.-6      	; 0xf806 <_Z14min_temp_errorh+0x24>
    f80c:	28 83       	st	Y, r18
    f80e:	31 96       	adiw	r30, 0x01	; 1
    f810:	24 91       	lpm	r18, Z
    f812:	21 11       	cpse	r18, r1
    f814:	f8 cf       	rjmp	.-16     	; 0xf806 <_Z14min_temp_errorh+0x24>
    f816:	4a e0       	ldi	r20, 0x0A	; 10
    f818:	50 e0       	ldi	r21, 0x00	; 0
    f81a:	61 2f       	mov	r22, r17
    f81c:	70 e0       	ldi	r23, 0x00	; 0
    f81e:	82 ed       	ldi	r24, 0xD2	; 210
    f820:	94 e0       	ldi	r25, 0x04	; 4
    f822:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN12MarlinSerial5printEii>
    f826:	e0 ec       	ldi	r30, 0xC0	; 192
    f828:	f0 e0       	ldi	r31, 0x00	; 0
    f82a:	80 81       	ld	r24, Z
    f82c:	85 ff       	sbrs	r24, 5
    f82e:	fd cf       	rjmp	.-6      	; 0xf82a <_Z14min_temp_errorh+0x48>
    f830:	8a e0       	ldi	r24, 0x0A	; 10
    f832:	80 93 c6 00 	sts	0x00C6, r24
    f836:	ed ef       	ldi	r30, 0xFD	; 253
    f838:	f1 e1       	ldi	r31, 0x11	; 17
    f83a:	94 91       	lpm	r25, Z
    f83c:	99 23       	and	r25, r25
    f83e:	61 f0       	breq	.+24     	; 0xf858 <_Z14min_temp_errorh+0x76>
    f840:	a0 ec       	ldi	r26, 0xC0	; 192
    f842:	b0 e0       	ldi	r27, 0x00	; 0
    f844:	c6 ec       	ldi	r28, 0xC6	; 198
    f846:	d0 e0       	ldi	r29, 0x00	; 0
    f848:	8c 91       	ld	r24, X
    f84a:	85 ff       	sbrs	r24, 5
    f84c:	fd cf       	rjmp	.-6      	; 0xf848 <_Z14min_temp_errorh+0x66>
    f84e:	98 83       	st	Y, r25
    f850:	31 96       	adiw	r30, 0x01	; 1
    f852:	94 91       	lpm	r25, Z
    f854:	91 11       	cpse	r25, r1
    f856:	f8 cf       	rjmp	.-16     	; 0xf848 <_Z14min_temp_errorh+0x66>
    f858:	e0 ec       	ldi	r30, 0xC0	; 192
    f85a:	f0 e0       	ldi	r31, 0x00	; 0
    f85c:	80 81       	ld	r24, Z
    f85e:	85 ff       	sbrs	r24, 5
    f860:	fd cf       	rjmp	.-6      	; 0xf85c <_Z14min_temp_errorh+0x7a>
    f862:	8a e0       	ldi	r24, 0x0A	; 10
    f864:	80 93 c6 00 	sts	0x00C6, r24
    f868:	8a e2       	ldi	r24, 0x2A	; 42
    f86a:	92 e1       	ldi	r25, 0x12	; 18
    f86c:	0e 94 46 94 	call	0x1288c	; 0x1288c <_Z21lcd_setalertstatuspgmPKc>
    f870:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_Z4Stopv>
    f874:	df 91       	pop	r29
    f876:	cf 91       	pop	r28
    f878:	1f 91       	pop	r17
    f87a:	08 95       	ret

0000f87c <__vector_22>:
#endif


// Timer 0 is shared with millies
ISR(TIMER0_COMPB_vect)
{
    f87c:	1f 92       	push	r1
    f87e:	0f 92       	push	r0
    f880:	0f b6       	in	r0, 0x3f	; 63
    f882:	0f 92       	push	r0
    f884:	11 24       	eor	r1, r1
    f886:	0b b6       	in	r0, 0x3b	; 59
    f888:	0f 92       	push	r0
    f88a:	2f 93       	push	r18
    f88c:	3f 93       	push	r19
    f88e:	4f 93       	push	r20
    f890:	5f 93       	push	r21
    f892:	6f 93       	push	r22
    f894:	7f 93       	push	r23
    f896:	8f 93       	push	r24
    f898:	9f 93       	push	r25
    f89a:	af 93       	push	r26
    f89c:	bf 93       	push	r27
    f89e:	ef 93       	push	r30
    f8a0:	ff 93       	push	r31
  #endif
  #if HEATER_BED_PIN > -1
  static unsigned char soft_pwm_b;
  #endif
  
  if(pwm_count == 0){
    f8a2:	80 91 63 02 	lds	r24, 0x0263
    f8a6:	81 11       	cpse	r24, r1
    f8a8:	0c c0       	rjmp	.+24     	; 0xf8c2 <__vector_22+0x46>
    soft_pwm_0 = soft_pwm[0];
    f8aa:	80 91 1c 11 	lds	r24, 0x111C
    f8ae:	80 93 46 11 	sts	0x1146, r24
    if(soft_pwm_0 > 0) WRITE(HEATER_0_PIN,1);
    f8b2:	81 11       	cpse	r24, r1
    f8b4:	74 9a       	sbi	0x0e, 4	; 14
    #if EXTRUDERS > 2
    soft_pwm_2 = soft_pwm[2];
    if(soft_pwm_2 > 0) WRITE(HEATER_2_PIN,1);
    #endif
    #if defined(HEATER_BED_PIN) && HEATER_BED_PIN > -1
    soft_pwm_b = soft_pwm_bed;
    f8b6:	80 91 1b 11 	lds	r24, 0x111B
    f8ba:	80 93 47 11 	sts	0x1147, r24
    if(soft_pwm_b > 0) WRITE(HEATER_BED_PIN,1);
    f8be:	81 11       	cpse	r24, r1
    f8c0:	a5 9a       	sbi	0x14, 5	; 20
    #ifdef FAN_SOFT_PWM
    soft_pwm_fan = fanSpeedSoftPwm / 2;
    if(soft_pwm_fan > 0) WRITE(FAN_PIN,1);
    #endif
  }
  if(soft_pwm_0 <= pwm_count) WRITE(HEATER_0_PIN,0);
    f8c2:	90 91 46 11 	lds	r25, 0x1146
    f8c6:	80 91 63 02 	lds	r24, 0x0263
    f8ca:	89 17       	cp	r24, r25
    f8cc:	08 f0       	brcs	.+2      	; 0xf8d0 <__vector_22+0x54>
    f8ce:	74 98       	cbi	0x0e, 4	; 14
  #endif
  #if EXTRUDERS > 2
  if(soft_pwm_2 <= pwm_count) WRITE(HEATER_2_PIN,0);
  #endif
  #if defined(HEATER_BED_PIN) && HEATER_BED_PIN > -1
  if(soft_pwm_b <= pwm_count) WRITE(HEATER_BED_PIN,0);
    f8d0:	90 91 47 11 	lds	r25, 0x1147
    f8d4:	80 91 63 02 	lds	r24, 0x0263
    f8d8:	89 17       	cp	r24, r25
    f8da:	08 f0       	brcs	.+2      	; 0xf8de <__vector_22+0x62>
    f8dc:	a5 98       	cbi	0x14, 5	; 20
  #endif
  #ifdef FAN_SOFT_PWM
  if(soft_pwm_fan <= pwm_count) WRITE(FAN_PIN,0);
  #endif
  
  pwm_count += (1 << SOFT_PWM_SCALE);
    f8de:	80 91 63 02 	lds	r24, 0x0263
    f8e2:	8f 5f       	subi	r24, 0xFF	; 255
  pwm_count &= 0x7f;
    f8e4:	8f 77       	andi	r24, 0x7F	; 127
    f8e6:	80 93 63 02 	sts	0x0263, r24
  
  switch(temp_state) {
    f8ea:	80 91 48 11 	lds	r24, 0x1148
    f8ee:	83 30       	cpi	r24, 0x03	; 3
    f8f0:	09 f4       	brne	.+2      	; 0xf8f4 <__vector_22+0x78>
    f8f2:	4f c0       	rjmp	.+158    	; 0xf992 <__vector_22+0x116>
    f8f4:	20 f4       	brcc	.+8      	; 0xf8fe <__vector_22+0x82>
    f8f6:	81 30       	cpi	r24, 0x01	; 1
    f8f8:	f9 f0       	breq	.+62     	; 0xf938 <__vector_22+0xbc>
    f8fa:	d0 f5       	brcc	.+116    	; 0xf970 <__vector_22+0xf4>
    f8fc:	0c c0       	rjmp	.+24     	; 0xf916 <__vector_22+0x9a>
    f8fe:	85 30       	cpi	r24, 0x05	; 5
    f900:	09 f4       	brne	.+2      	; 0xf904 <__vector_22+0x88>
    f902:	74 c0       	rjmp	.+232    	; 0xf9ec <__vector_22+0x170>
    f904:	08 f4       	brcc	.+2      	; 0xf908 <__vector_22+0x8c>
    f906:	61 c0       	rjmp	.+194    	; 0xf9ca <__vector_22+0x14e>
    f908:	86 30       	cpi	r24, 0x06	; 6
    f90a:	09 f4       	brne	.+2      	; 0xf90e <__vector_22+0x92>
    f90c:	8b c0       	rjmp	.+278    	; 0xfa24 <__vector_22+0x1a8>
    f90e:	87 30       	cpi	r24, 0x07	; 7
    f910:	09 f0       	breq	.+2      	; 0xf914 <__vector_22+0x98>
    f912:	95 c0       	rjmp	.+298    	; 0xfa3e <__vector_22+0x1c2>
    f914:	8d c0       	rjmp	.+282    	; 0xfa30 <__vector_22+0x1b4>
    case 0: // Prepare TEMP_0
      #if defined(TEMP_0_PIN) && (TEMP_0_PIN > -1)
        #if TEMP_0_PIN > 7
          ADCSRB = 1<<MUX5;
    f916:	88 e0       	ldi	r24, 0x08	; 8
    f918:	80 93 7b 00 	sts	0x007B, r24
        #else
          ADCSRB = 0;
        #endif
        ADMUX = ((1 << REFS0) | (TEMP_0_PIN & 0x07));
    f91c:	80 e4       	ldi	r24, 0x40	; 64
    f91e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA |= 1<<ADSC; // Start conversion
    f922:	ea e7       	ldi	r30, 0x7A	; 122
    f924:	f0 e0       	ldi	r31, 0x00	; 0
    f926:	80 81       	ld	r24, Z
    f928:	80 64       	ori	r24, 0x40	; 64
    f92a:	80 83       	st	Z, r24
      #endif
      lcd_buttons_update();
    f92c:	0e 94 4f 94 	call	0x1289e	; 0x1289e <_Z18lcd_buttons_updatev>
      temp_state = 1;
    f930:	81 e0       	ldi	r24, 0x01	; 1
    f932:	80 93 48 11 	sts	0x1148, r24
      break;
    f936:	83 c0       	rjmp	.+262    	; 0xfa3e <__vector_22+0x1c2>
    case 1: // Measure TEMP_0
      #if defined(TEMP_0_PIN) && (TEMP_0_PIN > -1)
        raw_temp_0_value += ADC;
    f938:	20 91 78 00 	lds	r18, 0x0078
    f93c:	30 91 79 00 	lds	r19, 0x0079
    f940:	80 91 49 11 	lds	r24, 0x1149
    f944:	90 91 4a 11 	lds	r25, 0x114A
    f948:	a0 91 4b 11 	lds	r26, 0x114B
    f94c:	b0 91 4c 11 	lds	r27, 0x114C
    f950:	82 0f       	add	r24, r18
    f952:	93 1f       	adc	r25, r19
    f954:	a1 1d       	adc	r26, r1
    f956:	b1 1d       	adc	r27, r1
    f958:	80 93 49 11 	sts	0x1149, r24
    f95c:	90 93 4a 11 	sts	0x114A, r25
    f960:	a0 93 4b 11 	sts	0x114B, r26
    f964:	b0 93 4c 11 	sts	0x114C, r27
      #endif
      #ifdef HEATER_0_USES_MAX6675 // TODO remove the blocking
        raw_temp_0_value = read_max6675();
      #endif
      temp_state = 2;
    f968:	82 e0       	ldi	r24, 0x02	; 2
    f96a:	80 93 48 11 	sts	0x1148, r24
      break;
    f96e:	67 c0       	rjmp	.+206    	; 0xfa3e <__vector_22+0x1c2>
    case 2: // Prepare TEMP_BED
      #if defined(TEMP_BED_PIN) && (TEMP_BED_PIN > -1)
        #if TEMP_BED_PIN > 7
          ADCSRB = 1<<MUX5;
    f970:	88 e0       	ldi	r24, 0x08	; 8
    f972:	80 93 7b 00 	sts	0x007B, r24
        #else
          ADCSRB = 0;
        #endif
        ADMUX = ((1 << REFS0) | (TEMP_BED_PIN & 0x07));
    f976:	82 e4       	ldi	r24, 0x42	; 66
    f978:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA |= 1<<ADSC; // Start conversion
    f97c:	ea e7       	ldi	r30, 0x7A	; 122
    f97e:	f0 e0       	ldi	r31, 0x00	; 0
    f980:	80 81       	ld	r24, Z
    f982:	80 64       	ori	r24, 0x40	; 64
    f984:	80 83       	st	Z, r24
      #endif
      lcd_buttons_update();
    f986:	0e 94 4f 94 	call	0x1289e	; 0x1289e <_Z18lcd_buttons_updatev>
      temp_state = 3;
    f98a:	83 e0       	ldi	r24, 0x03	; 3
    f98c:	80 93 48 11 	sts	0x1148, r24
      break;
    f990:	56 c0       	rjmp	.+172    	; 0xfa3e <__vector_22+0x1c2>
    case 3: // Measure TEMP_BED
      #if defined(TEMP_BED_PIN) && (TEMP_BED_PIN > -1)
        raw_temp_bed_value += ADC;
    f992:	20 91 78 00 	lds	r18, 0x0078
    f996:	30 91 79 00 	lds	r19, 0x0079
    f99a:	80 91 4d 11 	lds	r24, 0x114D
    f99e:	90 91 4e 11 	lds	r25, 0x114E
    f9a2:	a0 91 4f 11 	lds	r26, 0x114F
    f9a6:	b0 91 50 11 	lds	r27, 0x1150
    f9aa:	82 0f       	add	r24, r18
    f9ac:	93 1f       	adc	r25, r19
    f9ae:	a1 1d       	adc	r26, r1
    f9b0:	b1 1d       	adc	r27, r1
    f9b2:	80 93 4d 11 	sts	0x114D, r24
    f9b6:	90 93 4e 11 	sts	0x114E, r25
    f9ba:	a0 93 4f 11 	sts	0x114F, r26
    f9be:	b0 93 50 11 	sts	0x1150, r27
      #endif
      temp_state = 4;
    f9c2:	84 e0       	ldi	r24, 0x04	; 4
    f9c4:	80 93 48 11 	sts	0x1148, r24
      break;
    f9c8:	3a c0       	rjmp	.+116    	; 0xfa3e <__vector_22+0x1c2>
    case 4: // Prepare TEMP_1
      #if defined(TEMP_1_PIN) && (TEMP_1_PIN > -1)
        #if TEMP_1_PIN > 7
          ADCSRB = 1<<MUX5;
    f9ca:	88 e0       	ldi	r24, 0x08	; 8
    f9cc:	80 93 7b 00 	sts	0x007B, r24
        #else
          ADCSRB = 0;
        #endif
        ADMUX = ((1 << REFS0) | (TEMP_1_PIN & 0x07));
    f9d0:	81 e4       	ldi	r24, 0x41	; 65
    f9d2:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA |= 1<<ADSC; // Start conversion
    f9d6:	ea e7       	ldi	r30, 0x7A	; 122
    f9d8:	f0 e0       	ldi	r31, 0x00	; 0
    f9da:	80 81       	ld	r24, Z
    f9dc:	80 64       	ori	r24, 0x40	; 64
    f9de:	80 83       	st	Z, r24
      #endif
      lcd_buttons_update();
    f9e0:	0e 94 4f 94 	call	0x1289e	; 0x1289e <_Z18lcd_buttons_updatev>
      temp_state = 5;
    f9e4:	85 e0       	ldi	r24, 0x05	; 5
    f9e6:	80 93 48 11 	sts	0x1148, r24
      break;
    f9ea:	29 c0       	rjmp	.+82     	; 0xfa3e <__vector_22+0x1c2>
    case 5: // Measure TEMP_1
      #if defined(TEMP_1_PIN) && (TEMP_1_PIN > -1)
        raw_temp_1_value += ADC;
    f9ec:	20 91 78 00 	lds	r18, 0x0078
    f9f0:	30 91 79 00 	lds	r19, 0x0079
    f9f4:	80 91 51 11 	lds	r24, 0x1151
    f9f8:	90 91 52 11 	lds	r25, 0x1152
    f9fc:	a0 91 53 11 	lds	r26, 0x1153
    fa00:	b0 91 54 11 	lds	r27, 0x1154
    fa04:	82 0f       	add	r24, r18
    fa06:	93 1f       	adc	r25, r19
    fa08:	a1 1d       	adc	r26, r1
    fa0a:	b1 1d       	adc	r27, r1
    fa0c:	80 93 51 11 	sts	0x1151, r24
    fa10:	90 93 52 11 	sts	0x1152, r25
    fa14:	a0 93 53 11 	sts	0x1153, r26
    fa18:	b0 93 54 11 	sts	0x1154, r27
      #endif
      temp_state = 6;
    fa1c:	86 e0       	ldi	r24, 0x06	; 6
    fa1e:	80 93 48 11 	sts	0x1148, r24
      break;
    fa22:	0d c0       	rjmp	.+26     	; 0xfa3e <__vector_22+0x1c2>
          ADCSRB = 0;
        #endif
        ADMUX = ((1 << REFS0) | (TEMP_2_PIN & 0x07));
        ADCSRA |= 1<<ADSC; // Start conversion
      #endif
      lcd_buttons_update();
    fa24:	0e 94 4f 94 	call	0x1289e	; 0x1289e <_Z18lcd_buttons_updatev>
      temp_state = 7;
    fa28:	87 e0       	ldi	r24, 0x07	; 7
    fa2a:	80 93 48 11 	sts	0x1148, r24
      break;
    fa2e:	07 c0       	rjmp	.+14     	; 0xfa3e <__vector_22+0x1c2>
    case 7: // Measure TEMP_2
      #if defined(TEMP_2_PIN) && (TEMP_2_PIN > -1)
        raw_temp_2_value += ADC;
      #endif
      temp_state = 0;
    fa30:	10 92 48 11 	sts	0x1148, r1
      temp_count++;
    fa34:	80 91 55 11 	lds	r24, 0x1155
    fa38:	8f 5f       	subi	r24, 0xFF	; 255
    fa3a:	80 93 55 11 	sts	0x1155, r24
//      SERIAL_ERROR_START;
//      SERIAL_ERRORLNPGM("Temp measurement error!");
//      break;
  }
    
  if(temp_count >= 16) // 8 ms * 16 = 128ms.
    fa3e:	80 91 55 11 	lds	r24, 0x1155
    fa42:	80 31       	cpi	r24, 0x10	; 16
    fa44:	08 f4       	brcc	.+2      	; 0xfa48 <__vector_22+0x1cc>
    fa46:	53 c0       	rjmp	.+166    	; 0xfaee <__vector_22+0x272>
  {
    if (!temp_meas_ready) //Only update the raw values if they have been read. Else we could be updating them during reading.
    fa48:	80 91 0a 11 	lds	r24, 0x110A
    fa4c:	81 11       	cpse	r24, r1
    fa4e:	10 c0       	rjmp	.+32     	; 0xfa70 <__vector_22+0x1f4>
    {
      current_temperature_raw[0] = raw_temp_0_value;
    fa50:	80 91 49 11 	lds	r24, 0x1149
    fa54:	90 91 4a 11 	lds	r25, 0x114A
    fa58:	90 93 16 11 	sts	0x1116, r25
    fa5c:	80 93 15 11 	sts	0x1115, r24
      redundant_temperature_raw = raw_temp_1_value;
#endif
#if EXTRUDERS > 2
      current_temperature_raw[2] = raw_temp_2_value;
#endif
      current_temperature_bed_raw = raw_temp_bed_value;
    fa60:	80 91 4d 11 	lds	r24, 0x114D
    fa64:	90 91 4e 11 	lds	r25, 0x114E
    fa68:	90 93 10 11 	sts	0x1110, r25
    fa6c:	80 93 0f 11 	sts	0x110F, r24
    }
    
    temp_meas_ready = true;
    fa70:	81 e0       	ldi	r24, 0x01	; 1
    fa72:	80 93 0a 11 	sts	0x110A, r24
    temp_count = 0;
    fa76:	10 92 55 11 	sts	0x1155, r1
    raw_temp_0_value = 0;
    fa7a:	10 92 49 11 	sts	0x1149, r1
    fa7e:	10 92 4a 11 	sts	0x114A, r1
    fa82:	10 92 4b 11 	sts	0x114B, r1
    fa86:	10 92 4c 11 	sts	0x114C, r1
    raw_temp_1_value = 0;
    fa8a:	10 92 51 11 	sts	0x1151, r1
    fa8e:	10 92 52 11 	sts	0x1152, r1
    fa92:	10 92 53 11 	sts	0x1153, r1
    fa96:	10 92 54 11 	sts	0x1154, r1
    raw_temp_2_value = 0;
    fa9a:	10 92 56 11 	sts	0x1156, r1
    fa9e:	10 92 57 11 	sts	0x1157, r1
    faa2:	10 92 58 11 	sts	0x1158, r1
    faa6:	10 92 59 11 	sts	0x1159, r1
    raw_temp_bed_value = 0;
    faaa:	10 92 4d 11 	sts	0x114D, r1
    faae:	10 92 4e 11 	sts	0x114E, r1
    fab2:	10 92 4f 11 	sts	0x114F, r1
    fab6:	10 92 50 11 	sts	0x1150, r1

#if HEATER_0_RAW_LO_TEMP > HEATER_0_RAW_HI_TEMP
    if(current_temperature_raw[0] <= maxttemp_raw[0]) {
#else
    if(current_temperature_raw[0] >= maxttemp_raw[0]) {
    faba:	20 91 15 11 	lds	r18, 0x1115
    fabe:	30 91 16 11 	lds	r19, 0x1116
    fac2:	80 91 61 02 	lds	r24, 0x0261
    fac6:	90 91 62 02 	lds	r25, 0x0262
    faca:	28 17       	cp	r18, r24
    facc:	39 07       	cpc	r19, r25
    face:	14 f0       	brlt	.+4      	; 0xfad4 <__vector_22+0x258>
#endif
        max_temp_error(0);
    fad0:	80 e0       	ldi	r24, 0x00	; 0
    fad2:	3a de       	rcall	.-908    	; 0xf748 <_Z14max_temp_errorh>
    }
#if HEATER_0_RAW_LO_TEMP > HEATER_0_RAW_HI_TEMP
    if(current_temperature_raw[0] >= minttemp_raw[0]) {
#else
    if(current_temperature_raw[0] <= minttemp_raw[0]) {
    fad4:	20 91 15 11 	lds	r18, 0x1115
    fad8:	30 91 16 11 	lds	r19, 0x1116
    fadc:	80 91 44 11 	lds	r24, 0x1144
    fae0:	90 91 45 11 	lds	r25, 0x1145
    fae4:	82 17       	cp	r24, r18
    fae6:	93 07       	cpc	r25, r19
    fae8:	14 f0       	brlt	.+4      	; 0xfaee <__vector_22+0x272>
#endif
        min_temp_error(0);
    faea:	80 e0       	ldi	r24, 0x00	; 0
    faec:	7a de       	rcall	.-780    	; 0xf7e2 <_Z14min_temp_errorh>
       target_temperature_bed = 0;
       bed_max_temp_error();
    }
#endif
  }  
}
    faee:	ff 91       	pop	r31
    faf0:	ef 91       	pop	r30
    faf2:	bf 91       	pop	r27
    faf4:	af 91       	pop	r26
    faf6:	9f 91       	pop	r25
    faf8:	8f 91       	pop	r24
    fafa:	7f 91       	pop	r23
    fafc:	6f 91       	pop	r22
    fafe:	5f 91       	pop	r21
    fb00:	4f 91       	pop	r20
    fb02:	3f 91       	pop	r19
    fb04:	2f 91       	pop	r18
    fb06:	0f 90       	pop	r0
    fb08:	0b be       	out	0x3b, r0	; 59
    fb0a:	0f 90       	pop	r0
    fb0c:	0f be       	out	0x3f, r0	; 63
    fb0e:	0f 90       	pop	r0
    fb10:	1f 90       	pop	r1
    fb12:	18 95       	reti

0000fb14 <_Z10scalePID_if>:
// Apply the scale factors to the PID values


float scalePID_i(float i)
{
	return i*PID_dT;
    fb14:	2d eb       	ldi	r18, 0xBD	; 189
    fb16:	37 e3       	ldi	r19, 0x37	; 55
    fb18:	46 e0       	ldi	r20, 0x06	; 6
    fb1a:	5e e3       	ldi	r21, 0x3E	; 62
    fb1c:	0c 94 f5 b8 	jmp	0x171ea	; 0x171ea <__mulsf3>

0000fb20 <_Z12unscalePID_if>:
}

float unscalePID_i(float i)
{
	return i/PID_dT;
    fb20:	2d eb       	ldi	r18, 0xBD	; 189
    fb22:	37 e3       	ldi	r19, 0x37	; 55
    fb24:	46 e0       	ldi	r20, 0x06	; 6
    fb26:	5e e3       	ldi	r21, 0x3E	; 62
    fb28:	0c 94 27 b6 	jmp	0x16c4e	; 0x16c4e <__divsf3>

0000fb2c <_Z10scalePID_df>:
}

float scalePID_d(float d)
{
    return d/PID_dT;
    fb2c:	2d eb       	ldi	r18, 0xBD	; 189
    fb2e:	37 e3       	ldi	r19, 0x37	; 55
    fb30:	46 e0       	ldi	r20, 0x06	; 6
    fb32:	5e e3       	ldi	r21, 0x3E	; 62
    fb34:	0c 94 27 b6 	jmp	0x16c4e	; 0x16c4e <__divsf3>

0000fb38 <_Z12unscalePID_df>:
}

float unscalePID_d(float d)
{
	return d*PID_dT;
    fb38:	2d eb       	ldi	r18, 0xBD	; 189
    fb3a:	37 e3       	ldi	r19, 0x37	; 55
    fb3c:	46 e0       	ldi	r20, 0x06	; 6
    fb3e:	5e e3       	ldi	r21, 0x3E	; 62
    fb40:	0c 94 f5 b8 	jmp	0x171ea	; 0x171ea <__mulsf3>

0000fb44 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    fb44:	10 92 63 11 	sts	0x1163, r1
    fb48:	81 e0       	ldi	r24, 0x01	; 1
    fb4a:	80 93 61 11 	sts	0x1161, r24
    fb4e:	10 92 60 11 	sts	0x1160, r1
    fb52:	61 e0       	ldi	r22, 0x01	; 1
    fb54:	82 e1       	ldi	r24, 0x12	; 18
    fb56:	0e 94 67 bc 	call	0x178ce	; 0x178ce <digitalWrite>
    fb5a:	61 e0       	ldi	r22, 0x01	; 1
    fb5c:	83 e1       	ldi	r24, 0x13	; 19
    fb5e:	0e 94 67 bc 	call	0x178ce	; 0x178ce <digitalWrite>
    fb62:	e9 eb       	ldi	r30, 0xB9	; 185
    fb64:	f0 e0       	ldi	r31, 0x00	; 0
    fb66:	80 81       	ld	r24, Z
    fb68:	8e 7f       	andi	r24, 0xFE	; 254
    fb6a:	80 83       	st	Z, r24
    fb6c:	80 81       	ld	r24, Z
    fb6e:	8d 7f       	andi	r24, 0xFD	; 253
    fb70:	80 83       	st	Z, r24
    fb72:	88 e4       	ldi	r24, 0x48	; 72
    fb74:	80 93 b8 00 	sts	0x00B8, r24
    fb78:	85 e4       	ldi	r24, 0x45	; 69
    fb7a:	80 93 bc 00 	sts	0x00BC, r24
    fb7e:	08 95       	ret

0000fb80 <twi_readFrom>:
    fb80:	41 32       	cpi	r20, 0x21	; 33
    fb82:	08 f0       	brcs	.+2      	; 0xfb86 <twi_readFrom+0x6>
    fb84:	3f c0       	rjmp	.+126    	; 0xfc04 <twi_readFrom+0x84>
    fb86:	90 91 63 11 	lds	r25, 0x1163
    fb8a:	91 11       	cpse	r25, r1
    fb8c:	fc cf       	rjmp	.-8      	; 0xfb86 <twi_readFrom+0x6>
    fb8e:	91 e0       	ldi	r25, 0x01	; 1
    fb90:	90 93 63 11 	sts	0x1163, r25
    fb94:	20 93 61 11 	sts	0x1161, r18
    fb98:	2f ef       	ldi	r18, 0xFF	; 255
    fb9a:	20 93 5a 11 	sts	0x115A, r18
    fb9e:	10 92 5f 11 	sts	0x115F, r1
    fba2:	24 2f       	mov	r18, r20
    fba4:	21 50       	subi	r18, 0x01	; 1
    fba6:	20 93 5e 11 	sts	0x115E, r18
    fbaa:	90 93 62 11 	sts	0x1162, r25
    fbae:	90 91 62 11 	lds	r25, 0x1162
    fbb2:	88 0f       	add	r24, r24
    fbb4:	89 2b       	or	r24, r25
    fbb6:	80 93 62 11 	sts	0x1162, r24
    fbba:	80 91 60 11 	lds	r24, 0x1160
    fbbe:	81 30       	cpi	r24, 0x01	; 1
    fbc0:	41 f4       	brne	.+16     	; 0xfbd2 <twi_readFrom+0x52>
    fbc2:	10 92 60 11 	sts	0x1160, r1
    fbc6:	80 91 62 11 	lds	r24, 0x1162
    fbca:	80 93 bb 00 	sts	0x00BB, r24
    fbce:	85 ec       	ldi	r24, 0xC5	; 197
    fbd0:	01 c0       	rjmp	.+2      	; 0xfbd4 <twi_readFrom+0x54>
    fbd2:	85 ee       	ldi	r24, 0xE5	; 229
    fbd4:	80 93 bc 00 	sts	0x00BC, r24
    fbd8:	80 91 63 11 	lds	r24, 0x1163
    fbdc:	81 30       	cpi	r24, 0x01	; 1
    fbde:	e1 f3       	breq	.-8      	; 0xfbd8 <twi_readFrom+0x58>
    fbe0:	80 91 5f 11 	lds	r24, 0x115F
    fbe4:	84 17       	cp	r24, r20
    fbe6:	10 f4       	brcc	.+4      	; 0xfbec <twi_readFrom+0x6c>
    fbe8:	40 91 5f 11 	lds	r20, 0x115F
    fbec:	24 e6       	ldi	r18, 0x64	; 100
    fbee:	31 e1       	ldi	r19, 0x11	; 17
    fbf0:	fb 01       	movw	r30, r22
    fbf2:	d9 01       	movw	r26, r18
    fbf4:	02 c0       	rjmp	.+4      	; 0xfbfa <twi_readFrom+0x7a>
    fbf6:	8d 91       	ld	r24, X+
    fbf8:	81 93       	st	Z+, r24
    fbfa:	8a 2f       	mov	r24, r26
    fbfc:	82 1b       	sub	r24, r18
    fbfe:	84 17       	cp	r24, r20
    fc00:	d0 f3       	brcs	.-12     	; 0xfbf6 <twi_readFrom+0x76>
    fc02:	01 c0       	rjmp	.+2      	; 0xfc06 <twi_readFrom+0x86>
    fc04:	40 e0       	ldi	r20, 0x00	; 0
    fc06:	84 2f       	mov	r24, r20
    fc08:	08 95       	ret

0000fc0a <twi_writeTo>:
    fc0a:	0f 93       	push	r16
    fc0c:	41 32       	cpi	r20, 0x21	; 33
    fc0e:	08 f0       	brcs	.+2      	; 0xfc12 <twi_writeTo+0x8>
    fc10:	46 c0       	rjmp	.+140    	; 0xfc9e <twi_writeTo+0x94>
    fc12:	90 91 63 11 	lds	r25, 0x1163
    fc16:	91 11       	cpse	r25, r1
    fc18:	fc cf       	rjmp	.-8      	; 0xfc12 <twi_writeTo+0x8>
    fc1a:	92 e0       	ldi	r25, 0x02	; 2
    fc1c:	90 93 63 11 	sts	0x1163, r25
    fc20:	00 93 61 11 	sts	0x1161, r16
    fc24:	9f ef       	ldi	r25, 0xFF	; 255
    fc26:	90 93 5a 11 	sts	0x115A, r25
    fc2a:	10 92 5f 11 	sts	0x115F, r1
    fc2e:	40 93 5e 11 	sts	0x115E, r20
    fc32:	fb 01       	movw	r30, r22
    fc34:	64 e6       	ldi	r22, 0x64	; 100
    fc36:	71 e1       	ldi	r23, 0x11	; 17
    fc38:	db 01       	movw	r26, r22
    fc3a:	02 c0       	rjmp	.+4      	; 0xfc40 <twi_writeTo+0x36>
    fc3c:	91 91       	ld	r25, Z+
    fc3e:	9d 93       	st	X+, r25
    fc40:	9a 2f       	mov	r25, r26
    fc42:	96 1b       	sub	r25, r22
    fc44:	94 17       	cp	r25, r20
    fc46:	d0 f3       	brcs	.-12     	; 0xfc3c <twi_writeTo+0x32>
    fc48:	10 92 62 11 	sts	0x1162, r1
    fc4c:	90 91 62 11 	lds	r25, 0x1162
    fc50:	88 0f       	add	r24, r24
    fc52:	89 2b       	or	r24, r25
    fc54:	80 93 62 11 	sts	0x1162, r24
    fc58:	80 91 60 11 	lds	r24, 0x1160
    fc5c:	81 30       	cpi	r24, 0x01	; 1
    fc5e:	41 f4       	brne	.+16     	; 0xfc70 <twi_writeTo+0x66>
    fc60:	10 92 60 11 	sts	0x1160, r1
    fc64:	80 91 62 11 	lds	r24, 0x1162
    fc68:	80 93 bb 00 	sts	0x00BB, r24
    fc6c:	85 ec       	ldi	r24, 0xC5	; 197
    fc6e:	01 c0       	rjmp	.+2      	; 0xfc72 <twi_writeTo+0x68>
    fc70:	85 ee       	ldi	r24, 0xE5	; 229
    fc72:	80 93 bc 00 	sts	0x00BC, r24
    fc76:	22 23       	and	r18, r18
    fc78:	21 f0       	breq	.+8      	; 0xfc82 <twi_writeTo+0x78>
    fc7a:	80 91 63 11 	lds	r24, 0x1163
    fc7e:	82 30       	cpi	r24, 0x02	; 2
    fc80:	e1 f3       	breq	.-8      	; 0xfc7a <twi_writeTo+0x70>
    fc82:	80 91 5a 11 	lds	r24, 0x115A
    fc86:	8f 3f       	cpi	r24, 0xFF	; 255
    fc88:	61 f0       	breq	.+24     	; 0xfca2 <twi_writeTo+0x98>
    fc8a:	80 91 5a 11 	lds	r24, 0x115A
    fc8e:	80 32       	cpi	r24, 0x20	; 32
    fc90:	51 f0       	breq	.+20     	; 0xfca6 <twi_writeTo+0x9c>
    fc92:	80 91 5a 11 	lds	r24, 0x115A
    fc96:	80 33       	cpi	r24, 0x30	; 48
    fc98:	41 f4       	brne	.+16     	; 0xfcaa <twi_writeTo+0xa0>
    fc9a:	83 e0       	ldi	r24, 0x03	; 3
    fc9c:	07 c0       	rjmp	.+14     	; 0xfcac <twi_writeTo+0xa2>
    fc9e:	81 e0       	ldi	r24, 0x01	; 1
    fca0:	05 c0       	rjmp	.+10     	; 0xfcac <twi_writeTo+0xa2>
    fca2:	80 e0       	ldi	r24, 0x00	; 0
    fca4:	03 c0       	rjmp	.+6      	; 0xfcac <twi_writeTo+0xa2>
    fca6:	82 e0       	ldi	r24, 0x02	; 2
    fca8:	01 c0       	rjmp	.+2      	; 0xfcac <twi_writeTo+0xa2>
    fcaa:	84 e0       	ldi	r24, 0x04	; 4
    fcac:	0f 91       	pop	r16
    fcae:	08 95       	ret

0000fcb0 <twi_transmit>:
    fcb0:	61 32       	cpi	r22, 0x21	; 33
    fcb2:	98 f4       	brcc	.+38     	; 0xfcda <twi_transmit+0x2a>
    fcb4:	20 91 63 11 	lds	r18, 0x1163
    fcb8:	24 30       	cpi	r18, 0x04	; 4
    fcba:	89 f4       	brne	.+34     	; 0xfcde <twi_transmit+0x2e>
    fcbc:	60 93 5c 11 	sts	0x115C, r22
    fcc0:	fc 01       	movw	r30, r24
    fcc2:	84 e8       	ldi	r24, 0x84	; 132
    fcc4:	91 e1       	ldi	r25, 0x11	; 17
    fcc6:	dc 01       	movw	r26, r24
    fcc8:	02 c0       	rjmp	.+4      	; 0xfcce <twi_transmit+0x1e>
    fcca:	21 91       	ld	r18, Z+
    fccc:	2d 93       	st	X+, r18
    fcce:	2a 2f       	mov	r18, r26
    fcd0:	28 1b       	sub	r18, r24
    fcd2:	26 17       	cp	r18, r22
    fcd4:	d0 f3       	brcs	.-12     	; 0xfcca <twi_transmit+0x1a>
    fcd6:	80 e0       	ldi	r24, 0x00	; 0
    fcd8:	08 95       	ret
    fcda:	81 e0       	ldi	r24, 0x01	; 1
    fcdc:	08 95       	ret
    fcde:	82 e0       	ldi	r24, 0x02	; 2
    fce0:	08 95       	ret

0000fce2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    fce2:	85 ed       	ldi	r24, 0xD5	; 213
    fce4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    fce8:	80 91 bc 00 	lds	r24, 0x00BC
    fcec:	84 fd       	sbrc	r24, 4
    fcee:	fc cf       	rjmp	.-8      	; 0xfce8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    fcf0:	10 92 63 11 	sts	0x1163, r1
    fcf4:	08 95       	ret

0000fcf6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    fcf6:	85 ec       	ldi	r24, 0xC5	; 197
    fcf8:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    fcfc:	10 92 63 11 	sts	0x1163, r1
    fd00:	08 95       	ret

0000fd02 <__vector_39>:
}

ISR(TWI_vect)
{
    fd02:	1f 92       	push	r1
    fd04:	0f 92       	push	r0
    fd06:	0f b6       	in	r0, 0x3f	; 63
    fd08:	0f 92       	push	r0
    fd0a:	11 24       	eor	r1, r1
    fd0c:	0b b6       	in	r0, 0x3b	; 59
    fd0e:	0f 92       	push	r0
    fd10:	2f 93       	push	r18
    fd12:	3f 93       	push	r19
    fd14:	4f 93       	push	r20
    fd16:	5f 93       	push	r21
    fd18:	6f 93       	push	r22
    fd1a:	7f 93       	push	r23
    fd1c:	8f 93       	push	r24
    fd1e:	9f 93       	push	r25
    fd20:	af 93       	push	r26
    fd22:	bf 93       	push	r27
    fd24:	ef 93       	push	r30
    fd26:	ff 93       	push	r31
  switch(TW_STATUS){
    fd28:	80 91 b9 00 	lds	r24, 0x00B9
    fd2c:	88 7f       	andi	r24, 0xF8	; 248
    fd2e:	80 36       	cpi	r24, 0x60	; 96
    fd30:	09 f4       	brne	.+2      	; 0xfd34 <__vector_39+0x32>
    fd32:	9f c0       	rjmp	.+318    	; 0xfe72 <__vector_39+0x170>
    fd34:	58 f5       	brcc	.+86     	; 0xfd8c <__vector_39+0x8a>
    fd36:	88 32       	cpi	r24, 0x28	; 40
    fd38:	09 f4       	brne	.+2      	; 0xfd3c <__vector_39+0x3a>
    fd3a:	5b c0       	rjmp	.+182    	; 0xfdf2 <__vector_39+0xf0>
    fd3c:	90 f4       	brcc	.+36     	; 0xfd62 <__vector_39+0x60>
    fd3e:	80 31       	cpi	r24, 0x10	; 16
    fd40:	09 f4       	brne	.+2      	; 0xfd44 <__vector_39+0x42>
    fd42:	52 c0       	rjmp	.+164    	; 0xfde8 <__vector_39+0xe6>
    fd44:	38 f4       	brcc	.+14     	; 0xfd54 <__vector_39+0x52>
    fd46:	88 23       	and	r24, r24
    fd48:	09 f4       	brne	.+2      	; 0xfd4c <__vector_39+0x4a>
    fd4a:	f6 c0       	rjmp	.+492    	; 0xff38 <__vector_39+0x236>
    fd4c:	88 30       	cpi	r24, 0x08	; 8
    fd4e:	09 f0       	breq	.+2      	; 0xfd52 <__vector_39+0x50>
    fd50:	f6 c0       	rjmp	.+492    	; 0xff3e <__vector_39+0x23c>
    fd52:	4a c0       	rjmp	.+148    	; 0xfde8 <__vector_39+0xe6>
    fd54:	88 31       	cpi	r24, 0x18	; 24
    fd56:	09 f4       	brne	.+2      	; 0xfd5a <__vector_39+0x58>
    fd58:	4c c0       	rjmp	.+152    	; 0xfdf2 <__vector_39+0xf0>
    fd5a:	80 32       	cpi	r24, 0x20	; 32
    fd5c:	09 f0       	breq	.+2      	; 0xfd60 <__vector_39+0x5e>
    fd5e:	ef c0       	rjmp	.+478    	; 0xff3e <__vector_39+0x23c>
    fd60:	5c c0       	rjmp	.+184    	; 0xfe1a <__vector_39+0x118>
    fd62:	80 34       	cpi	r24, 0x40	; 64
    fd64:	09 f4       	brne	.+2      	; 0xfd68 <__vector_39+0x66>
    fd66:	6b c0       	rjmp	.+214    	; 0xfe3e <__vector_39+0x13c>
    fd68:	38 f4       	brcc	.+14     	; 0xfd78 <__vector_39+0x76>
    fd6a:	80 33       	cpi	r24, 0x30	; 48
    fd6c:	09 f4       	brne	.+2      	; 0xfd70 <__vector_39+0x6e>
    fd6e:	55 c0       	rjmp	.+170    	; 0xfe1a <__vector_39+0x118>
    fd70:	88 33       	cpi	r24, 0x38	; 56
    fd72:	09 f0       	breq	.+2      	; 0xfd76 <__vector_39+0x74>
    fd74:	e4 c0       	rjmp	.+456    	; 0xff3e <__vector_39+0x23c>
    fd76:	54 c0       	rjmp	.+168    	; 0xfe20 <__vector_39+0x11e>
    fd78:	80 35       	cpi	r24, 0x50	; 80
    fd7a:	09 f4       	brne	.+2      	; 0xfd7e <__vector_39+0x7c>
    fd7c:	54 c0       	rjmp	.+168    	; 0xfe26 <__vector_39+0x124>
    fd7e:	88 35       	cpi	r24, 0x58	; 88
    fd80:	09 f4       	brne	.+2      	; 0xfd84 <__vector_39+0x82>
    fd82:	62 c0       	rjmp	.+196    	; 0xfe48 <__vector_39+0x146>
    fd84:	88 34       	cpi	r24, 0x48	; 72
    fd86:	09 f0       	breq	.+2      	; 0xfd8a <__vector_39+0x88>
    fd88:	da c0       	rjmp	.+436    	; 0xff3e <__vector_39+0x23c>
    fd8a:	d8 c0       	rjmp	.+432    	; 0xff3c <__vector_39+0x23a>
    fd8c:	88 39       	cpi	r24, 0x98	; 152
    fd8e:	09 f4       	brne	.+2      	; 0xfd92 <__vector_39+0x90>
    fd90:	c9 c0       	rjmp	.+402    	; 0xff24 <__vector_39+0x222>
    fd92:	a8 f4       	brcc	.+42     	; 0xfdbe <__vector_39+0xbc>
    fd94:	88 37       	cpi	r24, 0x78	; 120
    fd96:	09 f4       	brne	.+2      	; 0xfd9a <__vector_39+0x98>
    fd98:	6c c0       	rjmp	.+216    	; 0xfe72 <__vector_39+0x170>
    fd9a:	38 f4       	brcc	.+14     	; 0xfdaa <__vector_39+0xa8>
    fd9c:	88 36       	cpi	r24, 0x68	; 104
    fd9e:	09 f4       	brne	.+2      	; 0xfda2 <__vector_39+0xa0>
    fda0:	68 c0       	rjmp	.+208    	; 0xfe72 <__vector_39+0x170>
    fda2:	80 37       	cpi	r24, 0x70	; 112
    fda4:	09 f0       	breq	.+2      	; 0xfda8 <__vector_39+0xa6>
    fda6:	cb c0       	rjmp	.+406    	; 0xff3e <__vector_39+0x23c>
    fda8:	64 c0       	rjmp	.+200    	; 0xfe72 <__vector_39+0x170>
    fdaa:	88 38       	cpi	r24, 0x88	; 136
    fdac:	09 f4       	brne	.+2      	; 0xfdb0 <__vector_39+0xae>
    fdae:	ba c0       	rjmp	.+372    	; 0xff24 <__vector_39+0x222>
    fdb0:	80 39       	cpi	r24, 0x90	; 144
    fdb2:	09 f4       	brne	.+2      	; 0xfdb6 <__vector_39+0xb4>
    fdb4:	64 c0       	rjmp	.+200    	; 0xfe7e <__vector_39+0x17c>
    fdb6:	80 38       	cpi	r24, 0x80	; 128
    fdb8:	09 f0       	breq	.+2      	; 0xfdbc <__vector_39+0xba>
    fdba:	c1 c0       	rjmp	.+386    	; 0xff3e <__vector_39+0x23c>
    fdbc:	60 c0       	rjmp	.+192    	; 0xfe7e <__vector_39+0x17c>
    fdbe:	80 3b       	cpi	r24, 0xB0	; 176
    fdc0:	09 f4       	brne	.+2      	; 0xfdc4 <__vector_39+0xc2>
    fdc2:	88 c0       	rjmp	.+272    	; 0xfed4 <__vector_39+0x1d2>
    fdc4:	38 f4       	brcc	.+14     	; 0xfdd4 <__vector_39+0xd2>
    fdc6:	80 3a       	cpi	r24, 0xA0	; 160
    fdc8:	09 f4       	brne	.+2      	; 0xfdcc <__vector_39+0xca>
    fdca:	6b c0       	rjmp	.+214    	; 0xfea2 <__vector_39+0x1a0>
    fdcc:	88 3a       	cpi	r24, 0xA8	; 168
    fdce:	09 f0       	breq	.+2      	; 0xfdd2 <__vector_39+0xd0>
    fdd0:	b6 c0       	rjmp	.+364    	; 0xff3e <__vector_39+0x23c>
    fdd2:	80 c0       	rjmp	.+256    	; 0xfed4 <__vector_39+0x1d2>
    fdd4:	80 3c       	cpi	r24, 0xC0	; 192
    fdd6:	09 f4       	brne	.+2      	; 0xfdda <__vector_39+0xd8>
    fdd8:	a9 c0       	rjmp	.+338    	; 0xff2c <__vector_39+0x22a>
    fdda:	88 3c       	cpi	r24, 0xC8	; 200
    fddc:	09 f4       	brne	.+2      	; 0xfde0 <__vector_39+0xde>
    fdde:	a6 c0       	rjmp	.+332    	; 0xff2c <__vector_39+0x22a>
    fde0:	88 3b       	cpi	r24, 0xB8	; 184
    fde2:	09 f0       	breq	.+2      	; 0xfde6 <__vector_39+0xe4>
    fde4:	ac c0       	rjmp	.+344    	; 0xff3e <__vector_39+0x23c>
    fde6:	8b c0       	rjmp	.+278    	; 0xfefe <__vector_39+0x1fc>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    fde8:	80 91 62 11 	lds	r24, 0x1162
    fdec:	80 93 bb 00 	sts	0x00BB, r24
    fdf0:	12 c0       	rjmp	.+36     	; 0xfe16 <__vector_39+0x114>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    fdf2:	90 91 5f 11 	lds	r25, 0x115F
    fdf6:	80 91 5e 11 	lds	r24, 0x115E
    fdfa:	98 17       	cp	r25, r24
    fdfc:	88 f5       	brcc	.+98     	; 0xfe60 <__vector_39+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    fdfe:	80 91 5f 11 	lds	r24, 0x115F
    fe02:	e8 2f       	mov	r30, r24
    fe04:	f0 e0       	ldi	r31, 0x00	; 0
    fe06:	ec 59       	subi	r30, 0x9C	; 156
    fe08:	fe 4e       	sbci	r31, 0xEE	; 238
    fe0a:	90 81       	ld	r25, Z
    fe0c:	90 93 bb 00 	sts	0x00BB, r25
    fe10:	8f 5f       	subi	r24, 0xFF	; 255
    fe12:	80 93 5f 11 	sts	0x115F, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    fe16:	85 ec       	ldi	r24, 0xC5	; 197
    fe18:	86 c0       	rjmp	.+268    	; 0xff26 <__vector_39+0x224>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    fe1a:	80 93 5a 11 	sts	0x115A, r24
    fe1e:	8e c0       	rjmp	.+284    	; 0xff3c <__vector_39+0x23a>
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    fe20:	80 93 5a 11 	sts	0x115A, r24
    fe24:	55 c0       	rjmp	.+170    	; 0xfed0 <__vector_39+0x1ce>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    fe26:	80 91 5f 11 	lds	r24, 0x115F
    fe2a:	90 91 bb 00 	lds	r25, 0x00BB
    fe2e:	e8 2f       	mov	r30, r24
    fe30:	f0 e0       	ldi	r31, 0x00	; 0
    fe32:	ec 59       	subi	r30, 0x9C	; 156
    fe34:	fe 4e       	sbci	r31, 0xEE	; 238
    fe36:	90 83       	st	Z, r25
    fe38:	8f 5f       	subi	r24, 0xFF	; 255
    fe3a:	80 93 5f 11 	sts	0x115F, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    fe3e:	90 91 5f 11 	lds	r25, 0x115F
    fe42:	80 91 5e 11 	lds	r24, 0x115E
    fe46:	6b c0       	rjmp	.+214    	; 0xff1e <__vector_39+0x21c>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    fe48:	80 91 5f 11 	lds	r24, 0x115F
    fe4c:	90 91 bb 00 	lds	r25, 0x00BB
    fe50:	e8 2f       	mov	r30, r24
    fe52:	f0 e0       	ldi	r31, 0x00	; 0
    fe54:	ec 59       	subi	r30, 0x9C	; 156
    fe56:	fe 4e       	sbci	r31, 0xEE	; 238
    fe58:	90 83       	st	Z, r25
    fe5a:	8f 5f       	subi	r24, 0xFF	; 255
    fe5c:	80 93 5f 11 	sts	0x115F, r24
	if (twi_sendStop)
    fe60:	80 91 61 11 	lds	r24, 0x1161
    fe64:	81 11       	cpse	r24, r1
    fe66:	6a c0       	rjmp	.+212    	; 0xff3c <__vector_39+0x23a>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    fe68:	81 e0       	ldi	r24, 0x01	; 1
    fe6a:	80 93 60 11 	sts	0x1160, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    fe6e:	84 ea       	ldi	r24, 0xA4	; 164
    fe70:	5e c0       	rjmp	.+188    	; 0xff2e <__vector_39+0x22c>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    fe72:	83 e0       	ldi	r24, 0x03	; 3
    fe74:	80 93 63 11 	sts	0x1163, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    fe78:	10 92 5b 11 	sts	0x115B, r1
    fe7c:	cc cf       	rjmp	.-104    	; 0xfe16 <__vector_39+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    fe7e:	80 91 5b 11 	lds	r24, 0x115B
    fe82:	80 32       	cpi	r24, 0x20	; 32
    fe84:	08 f0       	brcs	.+2      	; 0xfe88 <__vector_39+0x186>
    fe86:	4e c0       	rjmp	.+156    	; 0xff24 <__vector_39+0x222>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    fe88:	80 91 5b 11 	lds	r24, 0x115B
    fe8c:	90 91 bb 00 	lds	r25, 0x00BB
    fe90:	e8 2f       	mov	r30, r24
    fe92:	f0 e0       	ldi	r31, 0x00	; 0
    fe94:	e8 55       	subi	r30, 0x58	; 88
    fe96:	fe 4e       	sbci	r31, 0xEE	; 238
    fe98:	90 83       	st	Z, r25
    fe9a:	8f 5f       	subi	r24, 0xFF	; 255
    fe9c:	80 93 5b 11 	sts	0x115B, r24
    fea0:	ba cf       	rjmp	.-140    	; 0xfe16 <__vector_39+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    fea2:	80 91 5b 11 	lds	r24, 0x115B
    fea6:	80 32       	cpi	r24, 0x20	; 32
    fea8:	30 f4       	brcc	.+12     	; 0xfeb6 <__vector_39+0x1b4>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    feaa:	e0 91 5b 11 	lds	r30, 0x115B
    feae:	f0 e0       	ldi	r31, 0x00	; 0
    feb0:	e8 55       	subi	r30, 0x58	; 88
    feb2:	fe 4e       	sbci	r31, 0xEE	; 238
    feb4:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    feb6:	15 df       	rcall	.-470    	; 0xfce2 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    feb8:	60 91 5b 11 	lds	r22, 0x115B
    febc:	e0 91 a4 11 	lds	r30, 0x11A4
    fec0:	f0 91 a5 11 	lds	r31, 0x11A5
    fec4:	70 e0       	ldi	r23, 0x00	; 0
    fec6:	88 ea       	ldi	r24, 0xA8	; 168
    fec8:	91 e1       	ldi	r25, 0x11	; 17
    feca:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    fecc:	10 92 5b 11 	sts	0x115B, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    fed0:	12 df       	rcall	.-476    	; 0xfcf6 <twi_releaseBus>
      break;
    fed2:	35 c0       	rjmp	.+106    	; 0xff3e <__vector_39+0x23c>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    fed4:	84 e0       	ldi	r24, 0x04	; 4
    fed6:	80 93 63 11 	sts	0x1163, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    feda:	10 92 5d 11 	sts	0x115D, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    fede:	10 92 5c 11 	sts	0x115C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    fee2:	e0 91 a6 11 	lds	r30, 0x11A6
    fee6:	f0 91 a7 11 	lds	r31, 0x11A7
    feea:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    feec:	80 91 5c 11 	lds	r24, 0x115C
    fef0:	81 11       	cpse	r24, r1
    fef2:	05 c0       	rjmp	.+10     	; 0xfefe <__vector_39+0x1fc>
        twi_txBufferLength = 1;
    fef4:	81 e0       	ldi	r24, 0x01	; 1
    fef6:	80 93 5c 11 	sts	0x115C, r24
        twi_txBuffer[0] = 0x00;
    fefa:	10 92 84 11 	sts	0x1184, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    fefe:	80 91 5d 11 	lds	r24, 0x115D
    ff02:	e8 2f       	mov	r30, r24
    ff04:	f0 e0       	ldi	r31, 0x00	; 0
    ff06:	ec 57       	subi	r30, 0x7C	; 124
    ff08:	fe 4e       	sbci	r31, 0xEE	; 238
    ff0a:	90 81       	ld	r25, Z
    ff0c:	90 93 bb 00 	sts	0x00BB, r25
    ff10:	8f 5f       	subi	r24, 0xFF	; 255
    ff12:	80 93 5d 11 	sts	0x115D, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    ff16:	90 91 5d 11 	lds	r25, 0x115D
    ff1a:	80 91 5c 11 	lds	r24, 0x115C
    ff1e:	98 17       	cp	r25, r24
    ff20:	08 f4       	brcc	.+2      	; 0xff24 <__vector_39+0x222>
    ff22:	79 cf       	rjmp	.-270    	; 0xfe16 <__vector_39+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    ff24:	85 e8       	ldi	r24, 0x85	; 133
    ff26:	80 93 bc 00 	sts	0x00BC, r24
    ff2a:	09 c0       	rjmp	.+18     	; 0xff3e <__vector_39+0x23c>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    ff2c:	85 ec       	ldi	r24, 0xC5	; 197
    ff2e:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    ff32:	10 92 63 11 	sts	0x1163, r1
      break;
    ff36:	03 c0       	rjmp	.+6      	; 0xff3e <__vector_39+0x23c>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    ff38:	10 92 5a 11 	sts	0x115A, r1
      twi_stop();
    ff3c:	d2 de       	rcall	.-604    	; 0xfce2 <twi_stop>
      break;
  }
}
    ff3e:	ff 91       	pop	r31
    ff40:	ef 91       	pop	r30
    ff42:	bf 91       	pop	r27
    ff44:	af 91       	pop	r26
    ff46:	9f 91       	pop	r25
    ff48:	8f 91       	pop	r24
    ff4a:	7f 91       	pop	r23
    ff4c:	6f 91       	pop	r22
    ff4e:	5f 91       	pop	r21
    ff50:	4f 91       	pop	r20
    ff52:	3f 91       	pop	r19
    ff54:	2f 91       	pop	r18
    ff56:	0f 90       	pop	r0
    ff58:	0b be       	out	0x3b, r0	; 59
    ff5a:	0f 90       	pop	r0
    ff5c:	0f be       	out	0x3f, r0	; 63
    ff5e:	0f 90       	pop	r0
    ff60:	1f 90       	pop	r1
    ff62:	18 95       	reti

0000ff64 <_ZL20lcd_return_to_statusv>:
    }
menu_edit_type(int, int3, itostr3, 1)
menu_edit_type(float, float3, ftostr3, 1)
menu_edit_type(float, float32, ftostr32, 100)
menu_edit_type(float, float5, ftostr5, 0.01)
menu_edit_type(float, float51, ftostr51, 10)
    ff64:	10 92 f4 11 	sts	0x11F4, r1
    ff68:	10 92 f5 11 	sts	0x11F5, r1
    ff6c:	10 92 f6 11 	sts	0x11F6, r1
    ff70:	10 92 f7 11 	sts	0x11F7, r1
    ff74:	81 ec       	ldi	r24, 0xC1	; 193
    ff76:	90 ea       	ldi	r25, 0xA0	; 160
    ff78:	90 93 66 02 	sts	0x0266, r25
    ff7c:	80 93 65 02 	sts	0x0265, r24
    ff80:	08 95       	ret

0000ff82 <_ZL12lcd_cooldownv>:
    ff82:	10 92 1a 11 	sts	0x111A, r1
    ff86:	10 92 19 11 	sts	0x1119, r1
    ff8a:	10 92 18 11 	sts	0x1118, r1
    ff8e:	10 92 17 11 	sts	0x1117, r1
    ff92:	e8 cf       	rjmp	.-48     	; 0xff64 <_ZL20lcd_return_to_statusv>

0000ff94 <_ZL29menu_action_setting_edit_int3PKcPiii>:
    ff94:	fb 01       	movw	r30, r22
    ff96:	60 91 65 02 	lds	r22, 0x0265
    ff9a:	70 91 66 02 	lds	r23, 0x0266
    ff9e:	70 93 ed 11 	sts	0x11ED, r23
    ffa2:	60 93 ec 11 	sts	0x11EC, r22
    ffa6:	60 91 f4 11 	lds	r22, 0x11F4
    ffaa:	70 91 f5 11 	lds	r23, 0x11F5
    ffae:	70 93 eb 11 	sts	0x11EB, r23
    ffb2:	60 93 ea 11 	sts	0x11EA, r22
    ffb6:	62 e0       	ldi	r22, 0x02	; 2
    ffb8:	60 93 64 02 	sts	0x0264, r22
    ffbc:	6e ee       	ldi	r22, 0xEE	; 238
    ffbe:	7f e9       	ldi	r23, 0x9F	; 159
    ffc0:	70 93 66 02 	sts	0x0266, r23
    ffc4:	60 93 65 02 	sts	0x0265, r22
    ffc8:	90 93 e9 11 	sts	0x11E9, r25
    ffcc:	80 93 e8 11 	sts	0x11E8, r24
    ffd0:	f0 93 e7 11 	sts	0x11E7, r31
    ffd4:	e0 93 e6 11 	sts	0x11E6, r30
    ffd8:	66 27       	eor	r22, r22
    ffda:	57 fd       	sbrc	r21, 7
    ffdc:	60 95       	com	r22
    ffde:	76 2f       	mov	r23, r22
    ffe0:	40 93 e2 11 	sts	0x11E2, r20
    ffe4:	50 93 e3 11 	sts	0x11E3, r21
    ffe8:	60 93 e4 11 	sts	0x11E4, r22
    ffec:	70 93 e5 11 	sts	0x11E5, r23
    fff0:	c9 01       	movw	r24, r18
    fff2:	aa 27       	eor	r26, r26
    fff4:	97 fd       	sbrc	r25, 7
    fff6:	a0 95       	com	r26
    fff8:	ba 2f       	mov	r27, r26
    fffa:	80 93 de 11 	sts	0x11DE, r24
    fffe:	90 93 df 11 	sts	0x11DF, r25
   10002:	a0 93 e0 11 	sts	0x11E0, r26
   10006:	b0 93 e1 11 	sts	0x11E1, r27
   1000a:	80 81       	ld	r24, Z
   1000c:	91 81       	ldd	r25, Z+1	; 0x01
   1000e:	aa 27       	eor	r26, r26
   10010:	97 fd       	sbrc	r25, 7
   10012:	a0 95       	com	r26
   10014:	ba 2f       	mov	r27, r26
   10016:	80 93 f4 11 	sts	0x11F4, r24
   1001a:	90 93 f5 11 	sts	0x11F5, r25
   1001e:	a0 93 f6 11 	sts	0x11F6, r26
   10022:	b0 93 f7 11 	sts	0x11F7, r27
   10026:	08 95       	ret

00010028 <_ZL31menu_action_setting_edit_float3PKcPfff>:
   10028:	cf 92       	push	r12
   1002a:	df 92       	push	r13
   1002c:	ef 92       	push	r14
   1002e:	ff 92       	push	r15
   10030:	0f 93       	push	r16
   10032:	1f 93       	push	r17
   10034:	cf 93       	push	r28
   10036:	df 93       	push	r29
   10038:	eb 01       	movw	r28, r22
   1003a:	67 01       	movw	r12, r14
   1003c:	78 01       	movw	r14, r16
   1003e:	60 91 65 02 	lds	r22, 0x0265
   10042:	70 91 66 02 	lds	r23, 0x0266
   10046:	70 93 ed 11 	sts	0x11ED, r23
   1004a:	60 93 ec 11 	sts	0x11EC, r22
   1004e:	60 91 f4 11 	lds	r22, 0x11F4
   10052:	70 91 f5 11 	lds	r23, 0x11F5
   10056:	70 93 eb 11 	sts	0x11EB, r23
   1005a:	60 93 ea 11 	sts	0x11EA, r22
   1005e:	62 e0       	ldi	r22, 0x02	; 2
   10060:	60 93 64 02 	sts	0x0264, r22
   10064:	68 e5       	ldi	r22, 0x58	; 88
   10066:	7f e9       	ldi	r23, 0x9F	; 159
   10068:	70 93 66 02 	sts	0x0266, r23
   1006c:	60 93 65 02 	sts	0x0265, r22
   10070:	90 93 e9 11 	sts	0x11E9, r25
   10074:	80 93 e8 11 	sts	0x11E8, r24
   10078:	d0 93 e7 11 	sts	0x11E7, r29
   1007c:	c0 93 e6 11 	sts	0x11E6, r28
   10080:	ca 01       	movw	r24, r20
   10082:	b9 01       	movw	r22, r18
   10084:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10088:	60 93 e2 11 	sts	0x11E2, r22
   1008c:	70 93 e3 11 	sts	0x11E3, r23
   10090:	80 93 e4 11 	sts	0x11E4, r24
   10094:	90 93 e5 11 	sts	0x11E5, r25
   10098:	c7 01       	movw	r24, r14
   1009a:	b6 01       	movw	r22, r12
   1009c:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   100a0:	60 93 de 11 	sts	0x11DE, r22
   100a4:	70 93 df 11 	sts	0x11DF, r23
   100a8:	80 93 e0 11 	sts	0x11E0, r24
   100ac:	90 93 e1 11 	sts	0x11E1, r25
   100b0:	68 81       	ld	r22, Y
   100b2:	79 81       	ldd	r23, Y+1	; 0x01
   100b4:	8a 81       	ldd	r24, Y+2	; 0x02
   100b6:	9b 81       	ldd	r25, Y+3	; 0x03
   100b8:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   100bc:	60 93 f4 11 	sts	0x11F4, r22
   100c0:	70 93 f5 11 	sts	0x11F5, r23
   100c4:	80 93 f6 11 	sts	0x11F6, r24
   100c8:	90 93 f7 11 	sts	0x11F7, r25
   100cc:	df 91       	pop	r29
   100ce:	cf 91       	pop	r28
   100d0:	1f 91       	pop	r17
   100d2:	0f 91       	pop	r16
   100d4:	ff 90       	pop	r15
   100d6:	ef 90       	pop	r14
   100d8:	df 90       	pop	r13
   100da:	cf 90       	pop	r12
   100dc:	08 95       	ret

000100de <_ZL31menu_action_setting_edit_float5PKcPfff>:
   100de:	8f 92       	push	r8
   100e0:	9f 92       	push	r9
   100e2:	af 92       	push	r10
   100e4:	bf 92       	push	r11
   100e6:	cf 92       	push	r12
   100e8:	df 92       	push	r13
   100ea:	ef 92       	push	r14
   100ec:	ff 92       	push	r15
   100ee:	0f 93       	push	r16
   100f0:	1f 93       	push	r17
   100f2:	cf 93       	push	r28
   100f4:	df 93       	push	r29
   100f6:	eb 01       	movw	r28, r22
   100f8:	49 01       	movw	r8, r18
   100fa:	5a 01       	movw	r10, r20
   100fc:	67 01       	movw	r12, r14
   100fe:	78 01       	movw	r14, r16
   10100:	20 91 65 02 	lds	r18, 0x0265
   10104:	30 91 66 02 	lds	r19, 0x0266
   10108:	30 93 ed 11 	sts	0x11ED, r19
   1010c:	20 93 ec 11 	sts	0x11EC, r18
   10110:	20 91 f4 11 	lds	r18, 0x11F4
   10114:	30 91 f5 11 	lds	r19, 0x11F5
   10118:	30 93 eb 11 	sts	0x11EB, r19
   1011c:	20 93 ea 11 	sts	0x11EA, r18
   10120:	22 e0       	ldi	r18, 0x02	; 2
   10122:	20 93 64 02 	sts	0x0264, r18
   10126:	22 e5       	ldi	r18, 0x52	; 82
   10128:	34 ea       	ldi	r19, 0xA4	; 164
   1012a:	30 93 66 02 	sts	0x0266, r19
   1012e:	20 93 65 02 	sts	0x0265, r18
   10132:	90 93 e9 11 	sts	0x11E9, r25
   10136:	80 93 e8 11 	sts	0x11E8, r24
   1013a:	70 93 e7 11 	sts	0x11E7, r23
   1013e:	60 93 e6 11 	sts	0x11E6, r22
   10142:	2a e0       	ldi	r18, 0x0A	; 10
   10144:	37 ed       	ldi	r19, 0xD7	; 215
   10146:	43 e2       	ldi	r20, 0x23	; 35
   10148:	5c e3       	ldi	r21, 0x3C	; 60
   1014a:	c5 01       	movw	r24, r10
   1014c:	b4 01       	movw	r22, r8
   1014e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10152:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10156:	60 93 e2 11 	sts	0x11E2, r22
   1015a:	70 93 e3 11 	sts	0x11E3, r23
   1015e:	80 93 e4 11 	sts	0x11E4, r24
   10162:	90 93 e5 11 	sts	0x11E5, r25
   10166:	2a e0       	ldi	r18, 0x0A	; 10
   10168:	37 ed       	ldi	r19, 0xD7	; 215
   1016a:	43 e2       	ldi	r20, 0x23	; 35
   1016c:	5c e3       	ldi	r21, 0x3C	; 60
   1016e:	c7 01       	movw	r24, r14
   10170:	b6 01       	movw	r22, r12
   10172:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10176:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1017a:	60 93 de 11 	sts	0x11DE, r22
   1017e:	70 93 df 11 	sts	0x11DF, r23
   10182:	80 93 e0 11 	sts	0x11E0, r24
   10186:	90 93 e1 11 	sts	0x11E1, r25
   1018a:	2a e0       	ldi	r18, 0x0A	; 10
   1018c:	37 ed       	ldi	r19, 0xD7	; 215
   1018e:	43 e2       	ldi	r20, 0x23	; 35
   10190:	5c e3       	ldi	r21, 0x3C	; 60
   10192:	68 81       	ld	r22, Y
   10194:	79 81       	ldd	r23, Y+1	; 0x01
   10196:	8a 81       	ldd	r24, Y+2	; 0x02
   10198:	9b 81       	ldd	r25, Y+3	; 0x03
   1019a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1019e:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   101a2:	60 93 f4 11 	sts	0x11F4, r22
   101a6:	70 93 f5 11 	sts	0x11F5, r23
   101aa:	80 93 f6 11 	sts	0x11F6, r24
   101ae:	90 93 f7 11 	sts	0x11F7, r25
   101b2:	df 91       	pop	r29
   101b4:	cf 91       	pop	r28
   101b6:	1f 91       	pop	r17
   101b8:	0f 91       	pop	r16
   101ba:	ff 90       	pop	r15
   101bc:	ef 90       	pop	r14
   101be:	df 90       	pop	r13
   101c0:	cf 90       	pop	r12
   101c2:	bf 90       	pop	r11
   101c4:	af 90       	pop	r10
   101c6:	9f 90       	pop	r9
   101c8:	8f 90       	pop	r8
   101ca:	08 95       	ret

000101cc <_ZL32menu_action_setting_edit_float51PKcPfff>:
   101cc:	8f 92       	push	r8
   101ce:	9f 92       	push	r9
   101d0:	af 92       	push	r10
   101d2:	bf 92       	push	r11
   101d4:	cf 92       	push	r12
   101d6:	df 92       	push	r13
   101d8:	ef 92       	push	r14
   101da:	ff 92       	push	r15
   101dc:	0f 93       	push	r16
   101de:	1f 93       	push	r17
   101e0:	cf 93       	push	r28
   101e2:	df 93       	push	r29
   101e4:	eb 01       	movw	r28, r22
   101e6:	49 01       	movw	r8, r18
   101e8:	5a 01       	movw	r10, r20
   101ea:	67 01       	movw	r12, r14
   101ec:	78 01       	movw	r14, r16
   101ee:	20 91 65 02 	lds	r18, 0x0265
   101f2:	30 91 66 02 	lds	r19, 0x0266
   101f6:	30 93 ed 11 	sts	0x11ED, r19
   101fa:	20 93 ec 11 	sts	0x11EC, r18
   101fe:	20 91 f4 11 	lds	r18, 0x11F4
   10202:	30 91 f5 11 	lds	r19, 0x11F5
   10206:	30 93 eb 11 	sts	0x11EB, r19
   1020a:	20 93 ea 11 	sts	0x11EA, r18
   1020e:	22 e0       	ldi	r18, 0x02	; 2
   10210:	20 93 64 02 	sts	0x0264, r18
   10214:	2e e7       	ldi	r18, 0x7E	; 126
   10216:	35 ea       	ldi	r19, 0xA5	; 165
   10218:	30 93 66 02 	sts	0x0266, r19
   1021c:	20 93 65 02 	sts	0x0265, r18
   10220:	90 93 e9 11 	sts	0x11E9, r25
   10224:	80 93 e8 11 	sts	0x11E8, r24
   10228:	70 93 e7 11 	sts	0x11E7, r23
   1022c:	60 93 e6 11 	sts	0x11E6, r22
   10230:	20 e0       	ldi	r18, 0x00	; 0
   10232:	30 e0       	ldi	r19, 0x00	; 0
   10234:	40 e2       	ldi	r20, 0x20	; 32
   10236:	51 e4       	ldi	r21, 0x41	; 65
   10238:	c5 01       	movw	r24, r10
   1023a:	b4 01       	movw	r22, r8
   1023c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10240:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10244:	60 93 e2 11 	sts	0x11E2, r22
   10248:	70 93 e3 11 	sts	0x11E3, r23
   1024c:	80 93 e4 11 	sts	0x11E4, r24
   10250:	90 93 e5 11 	sts	0x11E5, r25
   10254:	20 e0       	ldi	r18, 0x00	; 0
   10256:	30 e0       	ldi	r19, 0x00	; 0
   10258:	40 e2       	ldi	r20, 0x20	; 32
   1025a:	51 e4       	ldi	r21, 0x41	; 65
   1025c:	c7 01       	movw	r24, r14
   1025e:	b6 01       	movw	r22, r12
   10260:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10264:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10268:	60 93 de 11 	sts	0x11DE, r22
   1026c:	70 93 df 11 	sts	0x11DF, r23
   10270:	80 93 e0 11 	sts	0x11E0, r24
   10274:	90 93 e1 11 	sts	0x11E1, r25
   10278:	20 e0       	ldi	r18, 0x00	; 0
   1027a:	30 e0       	ldi	r19, 0x00	; 0
   1027c:	40 e2       	ldi	r20, 0x20	; 32
   1027e:	51 e4       	ldi	r21, 0x41	; 65
   10280:	68 81       	ld	r22, Y
   10282:	79 81       	ldd	r23, Y+1	; 0x01
   10284:	8a 81       	ldd	r24, Y+2	; 0x02
   10286:	9b 81       	ldd	r25, Y+3	; 0x03
   10288:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1028c:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   10290:	60 93 f4 11 	sts	0x11F4, r22
   10294:	70 93 f5 11 	sts	0x11F5, r23
   10298:	80 93 f6 11 	sts	0x11F6, r24
   1029c:	90 93 f7 11 	sts	0x11F7, r25
   102a0:	df 91       	pop	r29
   102a2:	cf 91       	pop	r28
   102a4:	1f 91       	pop	r17
   102a6:	0f 91       	pop	r16
   102a8:	ff 90       	pop	r15
   102aa:	ef 90       	pop	r14
   102ac:	df 90       	pop	r13
   102ae:	cf 90       	pop	r12
   102b0:	bf 90       	pop	r11
   102b2:	af 90       	pop	r10
   102b4:	9f 90       	pop	r9
   102b6:	8f 90       	pop	r8
   102b8:	08 95       	ret

000102ba <_ZL32menu_action_setting_edit_float52PKcPfff>:
   102ba:	8f 92       	push	r8
   102bc:	9f 92       	push	r9
   102be:	af 92       	push	r10
   102c0:	bf 92       	push	r11
   102c2:	cf 92       	push	r12
   102c4:	df 92       	push	r13
   102c6:	ef 92       	push	r14
   102c8:	ff 92       	push	r15
   102ca:	0f 93       	push	r16
   102cc:	1f 93       	push	r17
   102ce:	cf 93       	push	r28
   102d0:	df 93       	push	r29
   102d2:	eb 01       	movw	r28, r22
   102d4:	49 01       	movw	r8, r18
   102d6:	5a 01       	movw	r10, r20
   102d8:	67 01       	movw	r12, r14
   102da:	78 01       	movw	r14, r16
   102dc:	20 91 65 02 	lds	r18, 0x0265
   102e0:	30 91 66 02 	lds	r19, 0x0266
   102e4:	30 93 ed 11 	sts	0x11ED, r19
   102e8:	20 93 ec 11 	sts	0x11EC, r18
   102ec:	20 91 f4 11 	lds	r18, 0x11F4
   102f0:	30 91 f5 11 	lds	r19, 0x11F5
   102f4:	30 93 eb 11 	sts	0x11EB, r19
   102f8:	20 93 ea 11 	sts	0x11EA, r18
   102fc:	22 e0       	ldi	r18, 0x02	; 2
   102fe:	20 93 64 02 	sts	0x0264, r18
   10302:	20 e8       	ldi	r18, 0x80	; 128
   10304:	34 eb       	ldi	r19, 0xB4	; 180
   10306:	30 93 66 02 	sts	0x0266, r19
   1030a:	20 93 65 02 	sts	0x0265, r18
   1030e:	90 93 e9 11 	sts	0x11E9, r25
   10312:	80 93 e8 11 	sts	0x11E8, r24
   10316:	70 93 e7 11 	sts	0x11E7, r23
   1031a:	60 93 e6 11 	sts	0x11E6, r22
   1031e:	20 e0       	ldi	r18, 0x00	; 0
   10320:	30 e0       	ldi	r19, 0x00	; 0
   10322:	48 ec       	ldi	r20, 0xC8	; 200
   10324:	52 e4       	ldi	r21, 0x42	; 66
   10326:	c5 01       	movw	r24, r10
   10328:	b4 01       	movw	r22, r8
   1032a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1032e:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10332:	60 93 e2 11 	sts	0x11E2, r22
   10336:	70 93 e3 11 	sts	0x11E3, r23
   1033a:	80 93 e4 11 	sts	0x11E4, r24
   1033e:	90 93 e5 11 	sts	0x11E5, r25
   10342:	20 e0       	ldi	r18, 0x00	; 0
   10344:	30 e0       	ldi	r19, 0x00	; 0
   10346:	48 ec       	ldi	r20, 0xC8	; 200
   10348:	52 e4       	ldi	r21, 0x42	; 66
   1034a:	c7 01       	movw	r24, r14
   1034c:	b6 01       	movw	r22, r12
   1034e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10352:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10356:	60 93 de 11 	sts	0x11DE, r22
   1035a:	70 93 df 11 	sts	0x11DF, r23
   1035e:	80 93 e0 11 	sts	0x11E0, r24
   10362:	90 93 e1 11 	sts	0x11E1, r25
   10366:	20 e0       	ldi	r18, 0x00	; 0
   10368:	30 e0       	ldi	r19, 0x00	; 0
   1036a:	48 ec       	ldi	r20, 0xC8	; 200
   1036c:	52 e4       	ldi	r21, 0x42	; 66
   1036e:	68 81       	ld	r22, Y
   10370:	79 81       	ldd	r23, Y+1	; 0x01
   10372:	8a 81       	ldd	r24, Y+2	; 0x02
   10374:	9b 81       	ldd	r25, Y+3	; 0x03
   10376:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1037a:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   1037e:	60 93 f4 11 	sts	0x11F4, r22
   10382:	70 93 f5 11 	sts	0x11F5, r23
   10386:	80 93 f6 11 	sts	0x11F6, r24
   1038a:	90 93 f7 11 	sts	0x11F7, r25
   1038e:	df 91       	pop	r29
   10390:	cf 91       	pop	r28
   10392:	1f 91       	pop	r17
   10394:	0f 91       	pop	r16
   10396:	ff 90       	pop	r15
   10398:	ef 90       	pop	r14
   1039a:	df 90       	pop	r13
   1039c:	cf 90       	pop	r12
   1039e:	bf 90       	pop	r11
   103a0:	af 90       	pop	r10
   103a2:	9f 90       	pop	r9
   103a4:	8f 90       	pop	r8
   103a6:	08 95       	ret

000103a8 <_ZL41menu_action_setting_edit_callback_float52PKcPfffPFvvE>:
   103a8:	4f 92       	push	r4
   103aa:	5f 92       	push	r5
   103ac:	6f 92       	push	r6
   103ae:	7f 92       	push	r7
   103b0:	8f 92       	push	r8
   103b2:	9f 92       	push	r9
   103b4:	af 92       	push	r10
   103b6:	bf 92       	push	r11
   103b8:	cf 92       	push	r12
   103ba:	df 92       	push	r13
   103bc:	ef 92       	push	r14
   103be:	ff 92       	push	r15
   103c0:	0f 93       	push	r16
   103c2:	1f 93       	push	r17
   103c4:	cf 93       	push	r28
   103c6:	df 93       	push	r29
   103c8:	eb 01       	movw	r28, r22
   103ca:	29 01       	movw	r4, r18
   103cc:	3a 01       	movw	r6, r20
   103ce:	20 91 65 02 	lds	r18, 0x0265
   103d2:	30 91 66 02 	lds	r19, 0x0266
   103d6:	30 93 ed 11 	sts	0x11ED, r19
   103da:	20 93 ec 11 	sts	0x11EC, r18
   103de:	20 91 f4 11 	lds	r18, 0x11F4
   103e2:	30 91 f5 11 	lds	r19, 0x11F5
   103e6:	30 93 eb 11 	sts	0x11EB, r19
   103ea:	20 93 ea 11 	sts	0x11EA, r18
   103ee:	22 e0       	ldi	r18, 0x02	; 2
   103f0:	20 93 64 02 	sts	0x0264, r18
   103f4:	2c ed       	ldi	r18, 0xDC	; 220
   103f6:	33 eb       	ldi	r19, 0xB3	; 179
   103f8:	30 93 66 02 	sts	0x0266, r19
   103fc:	20 93 65 02 	sts	0x0265, r18
   10400:	90 93 e9 11 	sts	0x11E9, r25
   10404:	80 93 e8 11 	sts	0x11E8, r24
   10408:	70 93 e7 11 	sts	0x11E7, r23
   1040c:	60 93 e6 11 	sts	0x11E6, r22
   10410:	20 e0       	ldi	r18, 0x00	; 0
   10412:	30 e0       	ldi	r19, 0x00	; 0
   10414:	48 ec       	ldi	r20, 0xC8	; 200
   10416:	52 e4       	ldi	r21, 0x42	; 66
   10418:	c3 01       	movw	r24, r6
   1041a:	b2 01       	movw	r22, r4
   1041c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10420:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10424:	60 93 e2 11 	sts	0x11E2, r22
   10428:	70 93 e3 11 	sts	0x11E3, r23
   1042c:	80 93 e4 11 	sts	0x11E4, r24
   10430:	90 93 e5 11 	sts	0x11E5, r25
   10434:	20 e0       	ldi	r18, 0x00	; 0
   10436:	30 e0       	ldi	r19, 0x00	; 0
   10438:	48 ec       	ldi	r20, 0xC8	; 200
   1043a:	52 e4       	ldi	r21, 0x42	; 66
   1043c:	c8 01       	movw	r24, r16
   1043e:	b7 01       	movw	r22, r14
   10440:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10444:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10448:	60 93 de 11 	sts	0x11DE, r22
   1044c:	70 93 df 11 	sts	0x11DF, r23
   10450:	80 93 e0 11 	sts	0x11E0, r24
   10454:	90 93 e1 11 	sts	0x11E1, r25
   10458:	20 e0       	ldi	r18, 0x00	; 0
   1045a:	30 e0       	ldi	r19, 0x00	; 0
   1045c:	48 ec       	ldi	r20, 0xC8	; 200
   1045e:	52 e4       	ldi	r21, 0x42	; 66
   10460:	68 81       	ld	r22, Y
   10462:	79 81       	ldd	r23, Y+1	; 0x01
   10464:	8a 81       	ldd	r24, Y+2	; 0x02
   10466:	9b 81       	ldd	r25, Y+3	; 0x03
   10468:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1046c:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   10470:	60 93 f4 11 	sts	0x11F4, r22
   10474:	70 93 f5 11 	sts	0x11F5, r23
   10478:	80 93 f6 11 	sts	0x11F6, r24
   1047c:	90 93 f7 11 	sts	0x11F7, r25
   10480:	d0 92 dd 11 	sts	0x11DD, r13
   10484:	c0 92 dc 11 	sts	0x11DC, r12
   10488:	df 91       	pop	r29
   1048a:	cf 91       	pop	r28
   1048c:	1f 91       	pop	r17
   1048e:	0f 91       	pop	r16
   10490:	ff 90       	pop	r15
   10492:	ef 90       	pop	r14
   10494:	df 90       	pop	r13
   10496:	cf 90       	pop	r12
   10498:	bf 90       	pop	r11
   1049a:	af 90       	pop	r10
   1049c:	9f 90       	pop	r9
   1049e:	8f 90       	pop	r8
   104a0:	7f 90       	pop	r7
   104a2:	6f 90       	pop	r6
   104a4:	5f 90       	pop	r5
   104a6:	4f 90       	pop	r4
   104a8:	08 95       	ret

000104aa <_ZL39menu_action_setting_edit_callback_long5PKcPmmmPFvvE>:
   104aa:	8f 92       	push	r8
   104ac:	9f 92       	push	r9
   104ae:	af 92       	push	r10
   104b0:	bf 92       	push	r11
   104b2:	cf 92       	push	r12
   104b4:	df 92       	push	r13
   104b6:	ef 92       	push	r14
   104b8:	ff 92       	push	r15
   104ba:	0f 93       	push	r16
   104bc:	1f 93       	push	r17
   104be:	cf 93       	push	r28
   104c0:	df 93       	push	r29
   104c2:	eb 01       	movw	r28, r22
   104c4:	60 91 65 02 	lds	r22, 0x0265
   104c8:	70 91 66 02 	lds	r23, 0x0266
   104cc:	70 93 ed 11 	sts	0x11ED, r23
   104d0:	60 93 ec 11 	sts	0x11EC, r22
   104d4:	60 91 f4 11 	lds	r22, 0x11F4
   104d8:	70 91 f5 11 	lds	r23, 0x11F5
   104dc:	70 93 eb 11 	sts	0x11EB, r23
   104e0:	60 93 ea 11 	sts	0x11EA, r22
   104e4:	62 e0       	ldi	r22, 0x02	; 2
   104e6:	60 93 64 02 	sts	0x0264, r22
   104ea:	69 ea       	ldi	r22, 0xA9	; 169
   104ec:	73 ea       	ldi	r23, 0xA3	; 163
   104ee:	70 93 66 02 	sts	0x0266, r23
   104f2:	60 93 65 02 	sts	0x0265, r22
   104f6:	90 93 e9 11 	sts	0x11E9, r25
   104fa:	80 93 e8 11 	sts	0x11E8, r24
   104fe:	d0 93 e7 11 	sts	0x11E7, r29
   10502:	c0 93 e6 11 	sts	0x11E6, r28
   10506:	ca 01       	movw	r24, r20
   10508:	b9 01       	movw	r22, r18
   1050a:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1050e:	2a e0       	ldi	r18, 0x0A	; 10
   10510:	37 ed       	ldi	r19, 0xD7	; 215
   10512:	43 e2       	ldi	r20, 0x23	; 35
   10514:	5c e3       	ldi	r21, 0x3C	; 60
   10516:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1051a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1051e:	60 93 e2 11 	sts	0x11E2, r22
   10522:	70 93 e3 11 	sts	0x11E3, r23
   10526:	80 93 e4 11 	sts	0x11E4, r24
   1052a:	90 93 e5 11 	sts	0x11E5, r25
   1052e:	c8 01       	movw	r24, r16
   10530:	b7 01       	movw	r22, r14
   10532:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   10536:	2a e0       	ldi	r18, 0x0A	; 10
   10538:	37 ed       	ldi	r19, 0xD7	; 215
   1053a:	43 e2       	ldi	r20, 0x23	; 35
   1053c:	5c e3       	ldi	r21, 0x3C	; 60
   1053e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   10542:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   10546:	60 93 de 11 	sts	0x11DE, r22
   1054a:	70 93 df 11 	sts	0x11DF, r23
   1054e:	80 93 e0 11 	sts	0x11E0, r24
   10552:	90 93 e1 11 	sts	0x11E1, r25
   10556:	68 81       	ld	r22, Y
   10558:	79 81       	ldd	r23, Y+1	; 0x01
   1055a:	8a 81       	ldd	r24, Y+2	; 0x02
   1055c:	9b 81       	ldd	r25, Y+3	; 0x03
   1055e:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   10562:	2a e0       	ldi	r18, 0x0A	; 10
   10564:	37 ed       	ldi	r19, 0xD7	; 215
   10566:	43 e2       	ldi	r20, 0x23	; 35
   10568:	5c e3       	ldi	r21, 0x3C	; 60
   1056a:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   1056e:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   10572:	60 93 f4 11 	sts	0x11F4, r22
   10576:	70 93 f5 11 	sts	0x11F5, r23
   1057a:	80 93 f6 11 	sts	0x11F6, r24
   1057e:	90 93 f7 11 	sts	0x11F7, r25
   10582:	d0 92 dd 11 	sts	0x11DD, r13
   10586:	c0 92 dc 11 	sts	0x11DC, r12
   1058a:	df 91       	pop	r29
   1058c:	cf 91       	pop	r28
   1058e:	1f 91       	pop	r17
   10590:	0f 91       	pop	r16
   10592:	ff 90       	pop	r15
   10594:	ef 90       	pop	r14
   10596:	df 90       	pop	r13
   10598:	cf 90       	pop	r12
   1059a:	bf 90       	pop	r11
   1059c:	af 90       	pop	r10
   1059e:	9f 90       	pop	r9
   105a0:	8f 90       	pop	r8
   105a2:	08 95       	ret

000105a4 <_ZL16menu_action_backPFvvE>:
   105a4:	90 93 66 02 	sts	0x0266, r25
   105a8:	80 93 65 02 	sts	0x0265, r24
   105ac:	10 92 f4 11 	sts	0x11F4, r1
   105b0:	10 92 f5 11 	sts	0x11F5, r1
   105b4:	10 92 f6 11 	sts	0x11F6, r1
   105b8:	10 92 f7 11 	sts	0x11F7, r1
   105bc:	08 95       	ret

000105be <_ZL19menu_action_submenuPFvvE>:
   105be:	90 93 66 02 	sts	0x0266, r25
   105c2:	80 93 65 02 	sts	0x0265, r24
   105c6:	10 92 f4 11 	sts	0x11F4, r1
   105ca:	10 92 f5 11 	sts	0x11F5, r1
   105ce:	10 92 f6 11 	sts	0x11F6, r1
   105d2:	10 92 f7 11 	sts	0x11F7, r1
   105d6:	08 95       	ret

000105d8 <_ZL20menu_action_functionPFvvE>:
   105d8:	fc 01       	movw	r30, r24
   105da:	19 95       	eicall
   105dc:	08 95       	ret

000105de <_ZL35lcd_implementation_drawmenu_generichPKccc>:
   105de:	0f 93       	push	r16
   105e0:	1f 93       	push	r17
   105e2:	cf 93       	push	r28
   105e4:	df 93       	push	r29
   105e6:	eb 01       	movw	r28, r22
   105e8:	14 2f       	mov	r17, r20
   105ea:	02 2f       	mov	r16, r18
   105ec:	48 2f       	mov	r20, r24
   105ee:	60 e0       	ldi	r22, 0x00	; 0
   105f0:	8f ef       	ldi	r24, 0xFF	; 255
   105f2:	91 e1       	ldi	r25, 0x11	; 17
   105f4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   105f8:	61 2f       	mov	r22, r17
   105fa:	8f ef       	ldi	r24, 0xFF	; 255
   105fc:	91 e1       	ldi	r25, 0x11	; 17
   105fe:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   10602:	11 e1       	ldi	r17, 0x11	; 17
   10604:	fe 01       	movw	r30, r28
   10606:	64 91       	lpm	r22, Z
   10608:	66 23       	and	r22, r22
   1060a:	19 f0       	breq	.+6      	; 0x10612 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x34>
   1060c:	11 11       	cpse	r17, r1
   1060e:	15 c0       	rjmp	.+42     	; 0x1063a <_ZL35lcd_implementation_drawmenu_generichPKccc+0x5c>
   10610:	09 c0       	rjmp	.+18     	; 0x10624 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x46>
   10612:	11 23       	and	r17, r17
   10614:	39 f0       	breq	.+14     	; 0x10624 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x46>
   10616:	60 e2       	ldi	r22, 0x20	; 32
   10618:	8f ef       	ldi	r24, 0xFF	; 255
   1061a:	91 e1       	ldi	r25, 0x11	; 17
   1061c:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   10620:	11 50       	subi	r17, 0x01	; 1
   10622:	c9 f7       	brne	.-14     	; 0x10616 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x38>
   10624:	60 2f       	mov	r22, r16
   10626:	8f ef       	ldi	r24, 0xFF	; 255
   10628:	91 e1       	ldi	r25, 0x11	; 17
   1062a:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   1062e:	60 e2       	ldi	r22, 0x20	; 32
   10630:	8f ef       	ldi	r24, 0xFF	; 255
   10632:	91 e1       	ldi	r25, 0x11	; 17
   10634:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   10638:	07 c0       	rjmp	.+14     	; 0x10648 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x6a>
   1063a:	8f ef       	ldi	r24, 0xFF	; 255
   1063c:	91 e1       	ldi	r25, 0x11	; 17
   1063e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   10642:	21 96       	adiw	r28, 0x01	; 1
   10644:	11 50       	subi	r17, 0x01	; 1
   10646:	de cf       	rjmp	.-68     	; 0x10604 <_ZL35lcd_implementation_drawmenu_generichPKccc+0x26>
   10648:	df 91       	pop	r29
   1064a:	cf 91       	pop	r28
   1064c:	1f 91       	pop	r17
   1064e:	0f 91       	pop	r16
   10650:	08 95       	ret

00010652 <_ZL12lcd_printPGMPKc>:
   10652:	cf 93       	push	r28
   10654:	df 93       	push	r29
   10656:	ec 01       	movw	r28, r24
   10658:	21 96       	adiw	r28, 0x01	; 1
   1065a:	fc 01       	movw	r30, r24
   1065c:	64 91       	lpm	r22, Z
   1065e:	66 23       	and	r22, r22
   10660:	49 f0       	breq	.+18     	; 0x10674 <_ZL12lcd_printPGMPKc+0x22>
   10662:	8f ef       	ldi	r24, 0xFF	; 255
   10664:	91 e1       	ldi	r25, 0x11	; 17
   10666:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN3LCD5writeEh>
   1066a:	fe 01       	movw	r30, r28
   1066c:	21 96       	adiw	r28, 0x01	; 1
   1066e:	64 91       	lpm	r22, Z
   10670:	61 11       	cpse	r22, r1
   10672:	f7 cf       	rjmp	.-18     	; 0x10662 <_ZL12lcd_printPGMPKc+0x10>
   10674:	df 91       	pop	r29
   10676:	cf 91       	pop	r28
   10678:	08 95       	ret

0001067a <_ZL18lcd_quick_feedbackv>:
   1067a:	cf 93       	push	r28
   1067c:	82 e0       	ldi	r24, 0x02	; 2
   1067e:	80 93 64 02 	sts	0x0264, r24
   10682:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   10686:	dc 01       	movw	r26, r24
   10688:	cb 01       	movw	r24, r22
   1068a:	8c 50       	subi	r24, 0x0C	; 12
   1068c:	9e 4f       	sbci	r25, 0xFE	; 254
   1068e:	af 4f       	sbci	r26, 0xFF	; 255
   10690:	bf 4f       	sbci	r27, 0xFF	; 255
   10692:	80 93 f9 11 	sts	0x11F9, r24
   10696:	90 93 fa 11 	sts	0x11FA, r25
   1069a:	a0 93 fb 11 	sts	0x11FB, r26
   1069e:	b0 93 fc 11 	sts	0x11FC, r27
   106a2:	53 9a       	sbi	0x0a, 3	; 10
   106a4:	ca e0       	ldi	r28, 0x0A	; 10
   106a6:	5b 9a       	sbi	0x0b, 3	; 11
   106a8:	84 e6       	ldi	r24, 0x64	; 100
   106aa:	90 e0       	ldi	r25, 0x00	; 0
   106ac:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
   106b0:	5b 98       	cbi	0x0b, 3	; 11
   106b2:	84 e6       	ldi	r24, 0x64	; 100
   106b4:	90 e0       	ldi	r25, 0x00	; 0
   106b6:	0e 94 6a ba 	call	0x174d4	; 0x174d4 <delayMicroseconds>
   106ba:	c1 50       	subi	r28, 0x01	; 1
   106bc:	a1 f7       	brne	.-24     	; 0x106a6 <_ZL18lcd_quick_feedbackv+0x2c>
   106be:	cf 91       	pop	r28
   106c0:	08 95       	ret

000106c2 <_ZL16lcd_control_menuv>:
   106c2:	7f 92       	push	r7
   106c4:	8f 92       	push	r8
   106c6:	9f 92       	push	r9
   106c8:	af 92       	push	r10
   106ca:	bf 92       	push	r11
   106cc:	cf 92       	push	r12
   106ce:	df 92       	push	r13
   106d0:	ef 92       	push	r14
   106d2:	ff 92       	push	r15
   106d4:	0f 93       	push	r16
   106d6:	1f 93       	push	r17
   106d8:	cf 93       	push	r28
   106da:	df 93       	push	r29
   106dc:	80 91 f4 11 	lds	r24, 0x11F4
   106e0:	90 91 f5 11 	lds	r25, 0x11F5
   106e4:	a0 91 f6 11 	lds	r26, 0x11F6
   106e8:	b0 91 f7 11 	lds	r27, 0x11F7
   106ec:	81 30       	cpi	r24, 0x01	; 1
   106ee:	90 48       	sbci	r25, 0x80	; 128
   106f0:	a1 05       	cpc	r26, r1
   106f2:	b1 05       	cpc	r27, r1
   106f4:	40 f0       	brcs	.+16     	; 0x10706 <_ZL16lcd_control_menuv+0x44>
   106f6:	10 92 f4 11 	sts	0x11F4, r1
   106fa:	10 92 f5 11 	sts	0x11F5, r1
   106fe:	10 92 f6 11 	sts	0x11F6, r1
   10702:	10 92 f7 11 	sts	0x11F7, r1
   10706:	60 91 f4 11 	lds	r22, 0x11F4
   1070a:	70 91 f5 11 	lds	r23, 0x11F5
   1070e:	80 91 f6 11 	lds	r24, 0x11F6
   10712:	90 91 f7 11 	lds	r25, 0x11F7
   10716:	25 e0       	ldi	r18, 0x05	; 5
   10718:	30 e0       	ldi	r19, 0x00	; 0
   1071a:	40 e0       	ldi	r20, 0x00	; 0
   1071c:	50 e0       	ldi	r21, 0x00	; 0
   1071e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10722:	80 91 fd 11 	lds	r24, 0x11FD
   10726:	90 e0       	ldi	r25, 0x00	; 0
   10728:	a0 e0       	ldi	r26, 0x00	; 0
   1072a:	b0 e0       	ldi	r27, 0x00	; 0
   1072c:	28 17       	cp	r18, r24
   1072e:	39 07       	cpc	r19, r25
   10730:	4a 07       	cpc	r20, r26
   10732:	5b 07       	cpc	r21, r27
   10734:	10 f4       	brcc	.+4      	; 0x1073a <_ZL16lcd_control_menuv+0x78>
   10736:	20 93 fd 11 	sts	0x11FD, r18
   1073a:	c0 91 fd 11 	lds	r28, 0x11FD
   1073e:	10 91 fe 11 	lds	r17, 0x11FE
   10742:	12 fb       	bst	r17, 2
   10744:	11 27       	eor	r17, r17
   10746:	10 f9       	bld	r17, 0
   10748:	d0 e0       	ldi	r29, 0x00	; 0
   1074a:	0f 2e       	mov	r0, r31
   1074c:	f5 e0       	ldi	r31, 0x05	; 5
   1074e:	cf 2e       	mov	r12, r31
   10750:	d1 2c       	mov	r13, r1
   10752:	e1 2c       	mov	r14, r1
   10754:	f1 2c       	mov	r15, r1
   10756:	f0 2d       	mov	r31, r0
   10758:	0f 2e       	mov	r0, r31
   1075a:	f3 e1       	ldi	r31, 0x13	; 19
   1075c:	8f 2e       	mov	r8, r31
   1075e:	91 2c       	mov	r9, r1
   10760:	a1 2c       	mov	r10, r1
   10762:	b1 2c       	mov	r11, r1
   10764:	f0 2d       	mov	r31, r0
   10766:	77 24       	eor	r7, r7
   10768:	73 94       	inc	r7
   1076a:	00 e0       	ldi	r16, 0x00	; 0
   1076c:	c1 11       	cpse	r28, r1
   1076e:	32 c0       	rjmp	.+100    	; 0x107d4 <_ZL16lcd_control_menuv+0x112>
   10770:	80 91 64 02 	lds	r24, 0x0264
   10774:	88 23       	and	r24, r24
   10776:	c9 f0       	breq	.+50     	; 0x107aa <_ZL16lcd_control_menuv+0xe8>
   10778:	80 91 f4 11 	lds	r24, 0x11F4
   1077c:	90 91 f5 11 	lds	r25, 0x11F5
   10780:	a0 91 f6 11 	lds	r26, 0x11F6
   10784:	b0 91 f7 11 	lds	r27, 0x11F7
   10788:	05 97       	sbiw	r24, 0x05	; 5
   1078a:	a1 05       	cpc	r26, r1
   1078c:	b1 05       	cpc	r27, r1
   1078e:	38 f4       	brcc	.+14     	; 0x1079e <_ZL16lcd_control_menuv+0xdc>
   10790:	23 e0       	ldi	r18, 0x03	; 3
   10792:	43 e0       	ldi	r20, 0x03	; 3
   10794:	62 eb       	ldi	r22, 0xB2	; 178
   10796:	72 e1       	ldi	r23, 0x12	; 18
   10798:	8d 2f       	mov	r24, r29
   1079a:	21 df       	rcall	.-446    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1079c:	06 c0       	rjmp	.+12     	; 0x107aa <_ZL16lcd_control_menuv+0xe8>
   1079e:	23 e0       	ldi	r18, 0x03	; 3
   107a0:	40 e2       	ldi	r20, 0x20	; 32
   107a2:	62 eb       	ldi	r22, 0xB2	; 178
   107a4:	72 e1       	ldi	r23, 0x12	; 18
   107a6:	8d 2f       	mov	r24, r29
   107a8:	1a df       	rcall	.-460    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   107aa:	11 23       	and	r17, r17
   107ac:	09 f4       	brne	.+2      	; 0x107b0 <_ZL16lcd_control_menuv+0xee>
   107ae:	90 c0       	rjmp	.+288    	; 0x108d0 <_ZL16lcd_control_menuv+0x20e>
   107b0:	80 91 f4 11 	lds	r24, 0x11F4
   107b4:	90 91 f5 11 	lds	r25, 0x11F5
   107b8:	a0 91 f6 11 	lds	r26, 0x11F6
   107bc:	b0 91 f7 11 	lds	r27, 0x11F7
   107c0:	05 97       	sbiw	r24, 0x05	; 5
   107c2:	a1 05       	cpc	r26, r1
   107c4:	b1 05       	cpc	r27, r1
   107c6:	08 f0       	brcs	.+2      	; 0x107ca <_ZL16lcd_control_menuv+0x108>
   107c8:	83 c0       	rjmp	.+262    	; 0x108d0 <_ZL16lcd_control_menuv+0x20e>
   107ca:	57 df       	rcall	.-338    	; 0x1067a <_ZL18lcd_quick_feedbackv>
   107cc:	8a eb       	ldi	r24, 0xBA	; 186
   107ce:	98 e8       	ldi	r25, 0x88	; 136
   107d0:	e9 de       	rcall	.-558    	; 0x105a4 <_ZL16menu_action_backPFvvE>
   107d2:	f0 c0       	rjmp	.+480    	; 0x109b4 <_ZL16lcd_control_menuv+0x2f2>
   107d4:	c1 30       	cpi	r28, 0x01	; 1
   107d6:	09 f0       	breq	.+2      	; 0x107da <_ZL16lcd_control_menuv+0x118>
   107d8:	3c c0       	rjmp	.+120    	; 0x10852 <_ZL16lcd_control_menuv+0x190>
   107da:	80 91 64 02 	lds	r24, 0x0264
   107de:	88 23       	and	r24, r24
   107e0:	f1 f0       	breq	.+60     	; 0x1081e <_ZL16lcd_control_menuv+0x15c>
   107e2:	60 91 f4 11 	lds	r22, 0x11F4
   107e6:	70 91 f5 11 	lds	r23, 0x11F5
   107ea:	80 91 f6 11 	lds	r24, 0x11F6
   107ee:	90 91 f7 11 	lds	r25, 0x11F7
   107f2:	a7 01       	movw	r20, r14
   107f4:	96 01       	movw	r18, r12
   107f6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   107fa:	21 30       	cpi	r18, 0x01	; 1
   107fc:	31 05       	cpc	r19, r1
   107fe:	41 05       	cpc	r20, r1
   10800:	51 05       	cpc	r21, r1
   10802:	39 f4       	brne	.+14     	; 0x10812 <_ZL16lcd_control_menuv+0x150>
   10804:	2e e7       	ldi	r18, 0x7E	; 126
   10806:	4e e3       	ldi	r20, 0x3E	; 62
   10808:	67 eb       	ldi	r22, 0xB7	; 183
   1080a:	72 e1       	ldi	r23, 0x12	; 18
   1080c:	8d 2f       	mov	r24, r29
   1080e:	e7 de       	rcall	.-562    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10810:	06 c0       	rjmp	.+12     	; 0x1081e <_ZL16lcd_control_menuv+0x15c>
   10812:	2e e7       	ldi	r18, 0x7E	; 126
   10814:	40 e2       	ldi	r20, 0x20	; 32
   10816:	67 eb       	ldi	r22, 0xB7	; 183
   10818:	72 e1       	ldi	r23, 0x12	; 18
   1081a:	8d 2f       	mov	r24, r29
   1081c:	e0 de       	rcall	.-576    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1081e:	11 23       	and	r17, r17
   10820:	09 f4       	brne	.+2      	; 0x10824 <_ZL16lcd_control_menuv+0x162>
   10822:	92 c0       	rjmp	.+292    	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   10824:	60 91 f4 11 	lds	r22, 0x11F4
   10828:	70 91 f5 11 	lds	r23, 0x11F5
   1082c:	80 91 f6 11 	lds	r24, 0x11F6
   10830:	90 91 f7 11 	lds	r25, 0x11F7
   10834:	a7 01       	movw	r20, r14
   10836:	96 01       	movw	r18, r12
   10838:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1083c:	21 30       	cpi	r18, 0x01	; 1
   1083e:	31 05       	cpc	r19, r1
   10840:	41 05       	cpc	r20, r1
   10842:	51 05       	cpc	r21, r1
   10844:	09 f0       	breq	.+2      	; 0x10848 <_ZL16lcd_control_menuv+0x186>
   10846:	80 c0       	rjmp	.+256    	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   10848:	18 df       	rcall	.-464    	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1084a:	8d e6       	ldi	r24, 0x6D	; 109
   1084c:	9e ea       	ldi	r25, 0xAE	; 174
   1084e:	b7 de       	rcall	.-658    	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10850:	b1 c0       	rjmp	.+354    	; 0x109b4 <_ZL16lcd_control_menuv+0x2f2>
   10852:	c2 30       	cpi	r28, 0x02	; 2
   10854:	09 f0       	breq	.+2      	; 0x10858 <_ZL16lcd_control_menuv+0x196>
   10856:	3c c0       	rjmp	.+120    	; 0x108d0 <_ZL16lcd_control_menuv+0x20e>
   10858:	80 91 64 02 	lds	r24, 0x0264
   1085c:	88 23       	and	r24, r24
   1085e:	f1 f0       	breq	.+60     	; 0x1089c <_ZL16lcd_control_menuv+0x1da>
   10860:	60 91 f4 11 	lds	r22, 0x11F4
   10864:	70 91 f5 11 	lds	r23, 0x11F5
   10868:	80 91 f6 11 	lds	r24, 0x11F6
   1086c:	90 91 f7 11 	lds	r25, 0x11F7
   10870:	a7 01       	movw	r20, r14
   10872:	96 01       	movw	r18, r12
   10874:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10878:	22 30       	cpi	r18, 0x02	; 2
   1087a:	31 05       	cpc	r19, r1
   1087c:	41 05       	cpc	r20, r1
   1087e:	51 05       	cpc	r21, r1
   10880:	39 f4       	brne	.+14     	; 0x10890 <_ZL16lcd_control_menuv+0x1ce>
   10882:	2e e7       	ldi	r18, 0x7E	; 126
   10884:	4e e3       	ldi	r20, 0x3E	; 62
   10886:	63 ec       	ldi	r22, 0xC3	; 195
   10888:	72 e1       	ldi	r23, 0x12	; 18
   1088a:	8d 2f       	mov	r24, r29
   1088c:	a8 de       	rcall	.-688    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1088e:	06 c0       	rjmp	.+12     	; 0x1089c <_ZL16lcd_control_menuv+0x1da>
   10890:	2e e7       	ldi	r18, 0x7E	; 126
   10892:	40 e2       	ldi	r20, 0x20	; 32
   10894:	63 ec       	ldi	r22, 0xC3	; 195
   10896:	72 e1       	ldi	r23, 0x12	; 18
   10898:	8d 2f       	mov	r24, r29
   1089a:	a1 de       	rcall	.-702    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1089c:	11 23       	and	r17, r17
   1089e:	09 f4       	brne	.+2      	; 0x108a2 <_ZL16lcd_control_menuv+0x1e0>
   108a0:	53 c0       	rjmp	.+166    	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   108a2:	60 91 f4 11 	lds	r22, 0x11F4
   108a6:	70 91 f5 11 	lds	r23, 0x11F5
   108aa:	80 91 f6 11 	lds	r24, 0x11F6
   108ae:	90 91 f7 11 	lds	r25, 0x11F7
   108b2:	a7 01       	movw	r20, r14
   108b4:	96 01       	movw	r18, r12
   108b6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   108ba:	22 30       	cpi	r18, 0x02	; 2
   108bc:	31 05       	cpc	r19, r1
   108be:	41 05       	cpc	r20, r1
   108c0:	51 05       	cpc	r21, r1
   108c2:	09 f0       	breq	.+2      	; 0x108c6 <_ZL16lcd_control_menuv+0x204>
   108c4:	41 c0       	rjmp	.+130    	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   108c6:	d9 de       	rcall	.-590    	; 0x1067a <_ZL18lcd_quick_feedbackv>
   108c8:	8a ea       	ldi	r24, 0xAA	; 170
   108ca:	96 ea       	ldi	r25, 0xA6	; 166
   108cc:	78 de       	rcall	.-784    	; 0x105be <_ZL19menu_action_submenuPFvvE>
   108ce:	72 c0       	rjmp	.+228    	; 0x109b4 <_ZL16lcd_control_menuv+0x2f2>
   108d0:	c3 30       	cpi	r28, 0x03	; 3
   108d2:	d1 f5       	brne	.+116    	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   108d4:	80 91 64 02 	lds	r24, 0x0264
   108d8:	88 23       	and	r24, r24
   108da:	f1 f0       	breq	.+60     	; 0x10918 <_ZL16lcd_control_menuv+0x256>
   108dc:	60 91 f4 11 	lds	r22, 0x11F4
   108e0:	70 91 f5 11 	lds	r23, 0x11F5
   108e4:	80 91 f6 11 	lds	r24, 0x11F6
   108e8:	90 91 f7 11 	lds	r25, 0x11F7
   108ec:	a7 01       	movw	r20, r14
   108ee:	96 01       	movw	r18, r12
   108f0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   108f4:	23 30       	cpi	r18, 0x03	; 3
   108f6:	31 05       	cpc	r19, r1
   108f8:	41 05       	cpc	r20, r1
   108fa:	51 05       	cpc	r21, r1
   108fc:	39 f4       	brne	.+14     	; 0x1090c <_ZL16lcd_control_menuv+0x24a>
   108fe:	20 e2       	ldi	r18, 0x20	; 32
   10900:	4e e3       	ldi	r20, 0x3E	; 62
   10902:	6a ec       	ldi	r22, 0xCA	; 202
   10904:	72 e1       	ldi	r23, 0x12	; 18
   10906:	8d 2f       	mov	r24, r29
   10908:	6a de       	rcall	.-812    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1090a:	06 c0       	rjmp	.+12     	; 0x10918 <_ZL16lcd_control_menuv+0x256>
   1090c:	20 e2       	ldi	r18, 0x20	; 32
   1090e:	40 e2       	ldi	r20, 0x20	; 32
   10910:	6a ec       	ldi	r22, 0xCA	; 202
   10912:	72 e1       	ldi	r23, 0x12	; 18
   10914:	8d 2f       	mov	r24, r29
   10916:	63 de       	rcall	.-826    	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10918:	11 23       	and	r17, r17
   1091a:	b1 f0       	breq	.+44     	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   1091c:	60 91 f4 11 	lds	r22, 0x11F4
   10920:	70 91 f5 11 	lds	r23, 0x11F5
   10924:	80 91 f6 11 	lds	r24, 0x11F6
   10928:	90 91 f7 11 	lds	r25, 0x11F7
   1092c:	a7 01       	movw	r20, r14
   1092e:	96 01       	movw	r18, r12
   10930:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10934:	23 30       	cpi	r18, 0x03	; 3
   10936:	31 05       	cpc	r19, r1
   10938:	41 05       	cpc	r20, r1
   1093a:	51 05       	cpc	r21, r1
   1093c:	29 f4       	brne	.+10     	; 0x10948 <_ZL16lcd_control_menuv+0x286>
   1093e:	9d de       	rcall	.-710    	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10940:	84 e8       	ldi	r24, 0x84	; 132
   10942:	9b e1       	ldi	r25, 0x1B	; 27
   10944:	49 de       	rcall	.-878    	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   10946:	36 c0       	rjmp	.+108    	; 0x109b4 <_ZL16lcd_control_menuv+0x2f2>
   10948:	80 91 f4 11 	lds	r24, 0x11F4
   1094c:	90 91 f5 11 	lds	r25, 0x11F5
   10950:	a0 91 f6 11 	lds	r26, 0x11F6
   10954:	b0 91 f7 11 	lds	r27, 0x11F7
   10958:	44 97       	sbiw	r24, 0x14	; 20
   1095a:	a1 05       	cpc	r26, r1
   1095c:	b1 05       	cpc	r27, r1
   1095e:	40 f0       	brcs	.+16     	; 0x10970 <_ZL16lcd_control_menuv+0x2ae>
   10960:	80 92 f4 11 	sts	0x11F4, r8
   10964:	90 92 f5 11 	sts	0x11F5, r9
   10968:	a0 92 f6 11 	sts	0x11F6, r10
   1096c:	b0 92 f7 11 	sts	0x11F7, r11
   10970:	60 91 f4 11 	lds	r22, 0x11F4
   10974:	70 91 f5 11 	lds	r23, 0x11F5
   10978:	80 91 f6 11 	lds	r24, 0x11F6
   1097c:	90 91 f7 11 	lds	r25, 0x11F7
   10980:	a7 01       	movw	r20, r14
   10982:	96 01       	movw	r18, r12
   10984:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10988:	42 2f       	mov	r20, r18
   1098a:	50 e0       	ldi	r21, 0x00	; 0
   1098c:	80 91 fd 11 	lds	r24, 0x11FD
   10990:	90 e0       	ldi	r25, 0x00	; 0
   10992:	04 96       	adiw	r24, 0x04	; 4
   10994:	48 17       	cp	r20, r24
   10996:	59 07       	cpc	r21, r25
   10998:	44 f0       	brlt	.+16     	; 0x109aa <_ZL16lcd_control_menuv+0x2e8>
   1099a:	c2 2f       	mov	r28, r18
   1099c:	c3 50       	subi	r28, 0x03	; 3
   1099e:	c0 93 fd 11 	sts	0x11FD, r28
   109a2:	70 92 64 02 	sts	0x0264, r7
   109a6:	d0 2f       	mov	r29, r16
   109a8:	e1 ce       	rjmp	.-574    	; 0x1076c <_ZL16lcd_control_menuv+0xaa>
   109aa:	df 5f       	subi	r29, 0xFF	; 255
   109ac:	cf 5f       	subi	r28, 0xFF	; 255
   109ae:	d4 30       	cpi	r29, 0x04	; 4
   109b0:	08 f4       	brcc	.+2      	; 0x109b4 <_ZL16lcd_control_menuv+0x2f2>
   109b2:	dc ce       	rjmp	.-584    	; 0x1076c <_ZL16lcd_control_menuv+0xaa>
   109b4:	df 91       	pop	r29
   109b6:	cf 91       	pop	r28
   109b8:	1f 91       	pop	r17
   109ba:	0f 91       	pop	r16
   109bc:	ff 90       	pop	r15
   109be:	ef 90       	pop	r14
   109c0:	df 90       	pop	r13
   109c2:	cf 90       	pop	r12
   109c4:	bf 90       	pop	r11
   109c6:	af 90       	pop	r10
   109c8:	9f 90       	pop	r9
   109ca:	8f 90       	pop	r8
   109cc:	7f 90       	pop	r7
   109ce:	08 95       	ret

000109d0 <_ZL13lcd_move_menuv>:
   109d0:	7f 92       	push	r7
   109d2:	8f 92       	push	r8
   109d4:	9f 92       	push	r9
   109d6:	af 92       	push	r10
   109d8:	bf 92       	push	r11
   109da:	cf 92       	push	r12
   109dc:	df 92       	push	r13
   109de:	ef 92       	push	r14
   109e0:	ff 92       	push	r15
   109e2:	0f 93       	push	r16
   109e4:	1f 93       	push	r17
   109e6:	cf 93       	push	r28
   109e8:	df 93       	push	r29
   109ea:	80 91 f4 11 	lds	r24, 0x11F4
   109ee:	90 91 f5 11 	lds	r25, 0x11F5
   109f2:	a0 91 f6 11 	lds	r26, 0x11F6
   109f6:	b0 91 f7 11 	lds	r27, 0x11F7
   109fa:	81 30       	cpi	r24, 0x01	; 1
   109fc:	90 48       	sbci	r25, 0x80	; 128
   109fe:	a1 05       	cpc	r26, r1
   10a00:	b1 05       	cpc	r27, r1
   10a02:	40 f0       	brcs	.+16     	; 0x10a14 <_ZL13lcd_move_menuv+0x44>
   10a04:	10 92 f4 11 	sts	0x11F4, r1
   10a08:	10 92 f5 11 	sts	0x11F5, r1
   10a0c:	10 92 f6 11 	sts	0x11F6, r1
   10a10:	10 92 f7 11 	sts	0x11F7, r1
   10a14:	60 91 f4 11 	lds	r22, 0x11F4
   10a18:	70 91 f5 11 	lds	r23, 0x11F5
   10a1c:	80 91 f6 11 	lds	r24, 0x11F6
   10a20:	90 91 f7 11 	lds	r25, 0x11F7
   10a24:	25 e0       	ldi	r18, 0x05	; 5
   10a26:	30 e0       	ldi	r19, 0x00	; 0
   10a28:	40 e0       	ldi	r20, 0x00	; 0
   10a2a:	50 e0       	ldi	r21, 0x00	; 0
   10a2c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10a30:	80 91 fd 11 	lds	r24, 0x11FD
   10a34:	90 e0       	ldi	r25, 0x00	; 0
   10a36:	a0 e0       	ldi	r26, 0x00	; 0
   10a38:	b0 e0       	ldi	r27, 0x00	; 0
   10a3a:	28 17       	cp	r18, r24
   10a3c:	39 07       	cpc	r19, r25
   10a3e:	4a 07       	cpc	r20, r26
   10a40:	5b 07       	cpc	r21, r27
   10a42:	10 f4       	brcc	.+4      	; 0x10a48 <_ZL13lcd_move_menuv+0x78>
   10a44:	20 93 fd 11 	sts	0x11FD, r18
   10a48:	c0 91 fd 11 	lds	r28, 0x11FD
   10a4c:	10 91 fe 11 	lds	r17, 0x11FE
   10a50:	12 fb       	bst	r17, 2
   10a52:	11 27       	eor	r17, r17
   10a54:	10 f9       	bld	r17, 0
   10a56:	d0 e0       	ldi	r29, 0x00	; 0
   10a58:	0f 2e       	mov	r0, r31
   10a5a:	f5 e0       	ldi	r31, 0x05	; 5
   10a5c:	cf 2e       	mov	r12, r31
   10a5e:	d1 2c       	mov	r13, r1
   10a60:	e1 2c       	mov	r14, r1
   10a62:	f1 2c       	mov	r15, r1
   10a64:	f0 2d       	mov	r31, r0
   10a66:	0f 2e       	mov	r0, r31
   10a68:	f3 e1       	ldi	r31, 0x13	; 19
   10a6a:	8f 2e       	mov	r8, r31
   10a6c:	91 2c       	mov	r9, r1
   10a6e:	a1 2c       	mov	r10, r1
   10a70:	b1 2c       	mov	r11, r1
   10a72:	f0 2d       	mov	r31, r0
   10a74:	77 24       	eor	r7, r7
   10a76:	73 94       	inc	r7
   10a78:	00 e0       	ldi	r16, 0x00	; 0
   10a7a:	c1 11       	cpse	r28, r1
   10a7c:	32 c0       	rjmp	.+100    	; 0x10ae2 <_ZL13lcd_move_menuv+0x112>
   10a7e:	80 91 64 02 	lds	r24, 0x0264
   10a82:	88 23       	and	r24, r24
   10a84:	c9 f0       	breq	.+50     	; 0x10ab8 <_ZL13lcd_move_menuv+0xe8>
   10a86:	80 91 f4 11 	lds	r24, 0x11F4
   10a8a:	90 91 f5 11 	lds	r25, 0x11F5
   10a8e:	a0 91 f6 11 	lds	r26, 0x11F6
   10a92:	b0 91 f7 11 	lds	r27, 0x11F7
   10a96:	05 97       	sbiw	r24, 0x05	; 5
   10a98:	a1 05       	cpc	r26, r1
   10a9a:	b1 05       	cpc	r27, r1
   10a9c:	38 f4       	brcc	.+14     	; 0x10aac <_ZL13lcd_move_menuv+0xdc>
   10a9e:	23 e0       	ldi	r18, 0x03	; 3
   10aa0:	43 e0       	ldi	r20, 0x03	; 3
   10aa2:	6c eb       	ldi	r22, 0xBC	; 188
   10aa4:	75 e1       	ldi	r23, 0x15	; 21
   10aa6:	8d 2f       	mov	r24, r29
   10aa8:	9a dd       	rcall	.-1228   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10aaa:	06 c0       	rjmp	.+12     	; 0x10ab8 <_ZL13lcd_move_menuv+0xe8>
   10aac:	23 e0       	ldi	r18, 0x03	; 3
   10aae:	40 e2       	ldi	r20, 0x20	; 32
   10ab0:	6c eb       	ldi	r22, 0xBC	; 188
   10ab2:	75 e1       	ldi	r23, 0x15	; 21
   10ab4:	8d 2f       	mov	r24, r29
   10ab6:	93 dd       	rcall	.-1242   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10ab8:	11 23       	and	r17, r17
   10aba:	09 f4       	brne	.+2      	; 0x10abe <_ZL13lcd_move_menuv+0xee>
   10abc:	90 c0       	rjmp	.+288    	; 0x10bde <_ZL13lcd_move_menuv+0x20e>
   10abe:	80 91 f4 11 	lds	r24, 0x11F4
   10ac2:	90 91 f5 11 	lds	r25, 0x11F5
   10ac6:	a0 91 f6 11 	lds	r26, 0x11F6
   10aca:	b0 91 f7 11 	lds	r27, 0x11F7
   10ace:	05 97       	sbiw	r24, 0x05	; 5
   10ad0:	a1 05       	cpc	r26, r1
   10ad2:	b1 05       	cpc	r27, r1
   10ad4:	08 f0       	brcs	.+2      	; 0x10ad8 <_ZL13lcd_move_menuv+0x108>
   10ad6:	83 c0       	rjmp	.+262    	; 0x10bde <_ZL13lcd_move_menuv+0x20e>
   10ad8:	d0 dd       	rcall	.-1120   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10ada:	8e ef       	ldi	r24, 0xFE	; 254
   10adc:	9e e8       	ldi	r25, 0x8E	; 142
   10ade:	62 dd       	rcall	.-1340   	; 0x105a4 <_ZL16menu_action_backPFvvE>
   10ae0:	f0 c0       	rjmp	.+480    	; 0x10cc2 <_ZL13lcd_move_menuv+0x2f2>
   10ae2:	c1 30       	cpi	r28, 0x01	; 1
   10ae4:	09 f0       	breq	.+2      	; 0x10ae8 <_ZL13lcd_move_menuv+0x118>
   10ae6:	3c c0       	rjmp	.+120    	; 0x10b60 <_ZL13lcd_move_menuv+0x190>
   10ae8:	80 91 64 02 	lds	r24, 0x0264
   10aec:	88 23       	and	r24, r24
   10aee:	f1 f0       	breq	.+60     	; 0x10b2c <_ZL13lcd_move_menuv+0x15c>
   10af0:	60 91 f4 11 	lds	r22, 0x11F4
   10af4:	70 91 f5 11 	lds	r23, 0x11F5
   10af8:	80 91 f6 11 	lds	r24, 0x11F6
   10afc:	90 91 f7 11 	lds	r25, 0x11F7
   10b00:	a7 01       	movw	r20, r14
   10b02:	96 01       	movw	r18, r12
   10b04:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10b08:	21 30       	cpi	r18, 0x01	; 1
   10b0a:	31 05       	cpc	r19, r1
   10b0c:	41 05       	cpc	r20, r1
   10b0e:	51 05       	cpc	r21, r1
   10b10:	39 f4       	brne	.+14     	; 0x10b20 <_ZL13lcd_move_menuv+0x150>
   10b12:	2e e7       	ldi	r18, 0x7E	; 126
   10b14:	4e e3       	ldi	r20, 0x3E	; 62
   10b16:	64 ec       	ldi	r22, 0xC4	; 196
   10b18:	75 e1       	ldi	r23, 0x15	; 21
   10b1a:	8d 2f       	mov	r24, r29
   10b1c:	60 dd       	rcall	.-1344   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10b1e:	06 c0       	rjmp	.+12     	; 0x10b2c <_ZL13lcd_move_menuv+0x15c>
   10b20:	2e e7       	ldi	r18, 0x7E	; 126
   10b22:	40 e2       	ldi	r20, 0x20	; 32
   10b24:	64 ec       	ldi	r22, 0xC4	; 196
   10b26:	75 e1       	ldi	r23, 0x15	; 21
   10b28:	8d 2f       	mov	r24, r29
   10b2a:	59 dd       	rcall	.-1358   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10b2c:	11 23       	and	r17, r17
   10b2e:	09 f4       	brne	.+2      	; 0x10b32 <_ZL13lcd_move_menuv+0x162>
   10b30:	92 c0       	rjmp	.+292    	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10b32:	60 91 f4 11 	lds	r22, 0x11F4
   10b36:	70 91 f5 11 	lds	r23, 0x11F5
   10b3a:	80 91 f6 11 	lds	r24, 0x11F6
   10b3e:	90 91 f7 11 	lds	r25, 0x11F7
   10b42:	a7 01       	movw	r20, r14
   10b44:	96 01       	movw	r18, r12
   10b46:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10b4a:	21 30       	cpi	r18, 0x01	; 1
   10b4c:	31 05       	cpc	r19, r1
   10b4e:	41 05       	cpc	r20, r1
   10b50:	51 05       	cpc	r21, r1
   10b52:	09 f0       	breq	.+2      	; 0x10b56 <_ZL13lcd_move_menuv+0x186>
   10b54:	80 c0       	rjmp	.+256    	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10b56:	91 dd       	rcall	.-1246   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10b58:	8d ea       	ldi	r24, 0xAD	; 173
   10b5a:	98 e8       	ldi	r25, 0x88	; 136
   10b5c:	30 dd       	rcall	.-1440   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10b5e:	b1 c0       	rjmp	.+354    	; 0x10cc2 <_ZL13lcd_move_menuv+0x2f2>
   10b60:	c2 30       	cpi	r28, 0x02	; 2
   10b62:	09 f0       	breq	.+2      	; 0x10b66 <_ZL13lcd_move_menuv+0x196>
   10b64:	3c c0       	rjmp	.+120    	; 0x10bde <_ZL13lcd_move_menuv+0x20e>
   10b66:	80 91 64 02 	lds	r24, 0x0264
   10b6a:	88 23       	and	r24, r24
   10b6c:	f1 f0       	breq	.+60     	; 0x10baa <_ZL13lcd_move_menuv+0x1da>
   10b6e:	60 91 f4 11 	lds	r22, 0x11F4
   10b72:	70 91 f5 11 	lds	r23, 0x11F5
   10b76:	80 91 f6 11 	lds	r24, 0x11F6
   10b7a:	90 91 f7 11 	lds	r25, 0x11F7
   10b7e:	a7 01       	movw	r20, r14
   10b80:	96 01       	movw	r18, r12
   10b82:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10b86:	22 30       	cpi	r18, 0x02	; 2
   10b88:	31 05       	cpc	r19, r1
   10b8a:	41 05       	cpc	r20, r1
   10b8c:	51 05       	cpc	r21, r1
   10b8e:	39 f4       	brne	.+14     	; 0x10b9e <_ZL13lcd_move_menuv+0x1ce>
   10b90:	2e e7       	ldi	r18, 0x7E	; 126
   10b92:	4e e3       	ldi	r20, 0x3E	; 62
   10b94:	6e ec       	ldi	r22, 0xCE	; 206
   10b96:	75 e1       	ldi	r23, 0x15	; 21
   10b98:	8d 2f       	mov	r24, r29
   10b9a:	21 dd       	rcall	.-1470   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10b9c:	06 c0       	rjmp	.+12     	; 0x10baa <_ZL13lcd_move_menuv+0x1da>
   10b9e:	2e e7       	ldi	r18, 0x7E	; 126
   10ba0:	40 e2       	ldi	r20, 0x20	; 32
   10ba2:	6e ec       	ldi	r22, 0xCE	; 206
   10ba4:	75 e1       	ldi	r23, 0x15	; 21
   10ba6:	8d 2f       	mov	r24, r29
   10ba8:	1a dd       	rcall	.-1484   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10baa:	11 23       	and	r17, r17
   10bac:	09 f4       	brne	.+2      	; 0x10bb0 <_ZL13lcd_move_menuv+0x1e0>
   10bae:	53 c0       	rjmp	.+166    	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10bb0:	60 91 f4 11 	lds	r22, 0x11F4
   10bb4:	70 91 f5 11 	lds	r23, 0x11F5
   10bb8:	80 91 f6 11 	lds	r24, 0x11F6
   10bbc:	90 91 f7 11 	lds	r25, 0x11F7
   10bc0:	a7 01       	movw	r20, r14
   10bc2:	96 01       	movw	r18, r12
   10bc4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10bc8:	22 30       	cpi	r18, 0x02	; 2
   10bca:	31 05       	cpc	r19, r1
   10bcc:	41 05       	cpc	r20, r1
   10bce:	51 05       	cpc	r21, r1
   10bd0:	09 f0       	breq	.+2      	; 0x10bd4 <_ZL13lcd_move_menuv+0x204>
   10bd2:	41 c0       	rjmp	.+130    	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10bd4:	52 dd       	rcall	.-1372   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10bd6:	80 ea       	ldi	r24, 0xA0	; 160
   10bd8:	98 e8       	ldi	r25, 0x88	; 136
   10bda:	f1 dc       	rcall	.-1566   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10bdc:	72 c0       	rjmp	.+228    	; 0x10cc2 <_ZL13lcd_move_menuv+0x2f2>
   10bde:	c3 30       	cpi	r28, 0x03	; 3
   10be0:	d1 f5       	brne	.+116    	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10be2:	80 91 64 02 	lds	r24, 0x0264
   10be6:	88 23       	and	r24, r24
   10be8:	f1 f0       	breq	.+60     	; 0x10c26 <_ZL13lcd_move_menuv+0x256>
   10bea:	60 91 f4 11 	lds	r22, 0x11F4
   10bee:	70 91 f5 11 	lds	r23, 0x11F5
   10bf2:	80 91 f6 11 	lds	r24, 0x11F6
   10bf6:	90 91 f7 11 	lds	r25, 0x11F7
   10bfa:	a7 01       	movw	r20, r14
   10bfc:	96 01       	movw	r18, r12
   10bfe:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10c02:	23 30       	cpi	r18, 0x03	; 3
   10c04:	31 05       	cpc	r19, r1
   10c06:	41 05       	cpc	r20, r1
   10c08:	51 05       	cpc	r21, r1
   10c0a:	39 f4       	brne	.+14     	; 0x10c1a <_ZL13lcd_move_menuv+0x24a>
   10c0c:	2e e7       	ldi	r18, 0x7E	; 126
   10c0e:	4e e3       	ldi	r20, 0x3E	; 62
   10c10:	67 ed       	ldi	r22, 0xD7	; 215
   10c12:	75 e1       	ldi	r23, 0x15	; 21
   10c14:	8d 2f       	mov	r24, r29
   10c16:	e3 dc       	rcall	.-1594   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10c18:	06 c0       	rjmp	.+12     	; 0x10c26 <_ZL13lcd_move_menuv+0x256>
   10c1a:	2e e7       	ldi	r18, 0x7E	; 126
   10c1c:	40 e2       	ldi	r20, 0x20	; 32
   10c1e:	67 ed       	ldi	r22, 0xD7	; 215
   10c20:	75 e1       	ldi	r23, 0x15	; 21
   10c22:	8d 2f       	mov	r24, r29
   10c24:	dc dc       	rcall	.-1608   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10c26:	11 23       	and	r17, r17
   10c28:	b1 f0       	breq	.+44     	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10c2a:	60 91 f4 11 	lds	r22, 0x11F4
   10c2e:	70 91 f5 11 	lds	r23, 0x11F5
   10c32:	80 91 f6 11 	lds	r24, 0x11F6
   10c36:	90 91 f7 11 	lds	r25, 0x11F7
   10c3a:	a7 01       	movw	r20, r14
   10c3c:	96 01       	movw	r18, r12
   10c3e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10c42:	23 30       	cpi	r18, 0x03	; 3
   10c44:	31 05       	cpc	r19, r1
   10c46:	41 05       	cpc	r20, r1
   10c48:	51 05       	cpc	r21, r1
   10c4a:	29 f4       	brne	.+10     	; 0x10c56 <_ZL13lcd_move_menuv+0x286>
   10c4c:	16 dd       	rcall	.-1492   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10c4e:	83 e9       	ldi	r24, 0x93	; 147
   10c50:	98 e8       	ldi	r25, 0x88	; 136
   10c52:	b5 dc       	rcall	.-1686   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10c54:	36 c0       	rjmp	.+108    	; 0x10cc2 <_ZL13lcd_move_menuv+0x2f2>
   10c56:	80 91 f4 11 	lds	r24, 0x11F4
   10c5a:	90 91 f5 11 	lds	r25, 0x11F5
   10c5e:	a0 91 f6 11 	lds	r26, 0x11F6
   10c62:	b0 91 f7 11 	lds	r27, 0x11F7
   10c66:	44 97       	sbiw	r24, 0x14	; 20
   10c68:	a1 05       	cpc	r26, r1
   10c6a:	b1 05       	cpc	r27, r1
   10c6c:	40 f0       	brcs	.+16     	; 0x10c7e <_ZL13lcd_move_menuv+0x2ae>
   10c6e:	80 92 f4 11 	sts	0x11F4, r8
   10c72:	90 92 f5 11 	sts	0x11F5, r9
   10c76:	a0 92 f6 11 	sts	0x11F6, r10
   10c7a:	b0 92 f7 11 	sts	0x11F7, r11
   10c7e:	60 91 f4 11 	lds	r22, 0x11F4
   10c82:	70 91 f5 11 	lds	r23, 0x11F5
   10c86:	80 91 f6 11 	lds	r24, 0x11F6
   10c8a:	90 91 f7 11 	lds	r25, 0x11F7
   10c8e:	a7 01       	movw	r20, r14
   10c90:	96 01       	movw	r18, r12
   10c92:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10c96:	42 2f       	mov	r20, r18
   10c98:	50 e0       	ldi	r21, 0x00	; 0
   10c9a:	80 91 fd 11 	lds	r24, 0x11FD
   10c9e:	90 e0       	ldi	r25, 0x00	; 0
   10ca0:	04 96       	adiw	r24, 0x04	; 4
   10ca2:	48 17       	cp	r20, r24
   10ca4:	59 07       	cpc	r21, r25
   10ca6:	44 f0       	brlt	.+16     	; 0x10cb8 <_ZL13lcd_move_menuv+0x2e8>
   10ca8:	c2 2f       	mov	r28, r18
   10caa:	c3 50       	subi	r28, 0x03	; 3
   10cac:	c0 93 fd 11 	sts	0x11FD, r28
   10cb0:	70 92 64 02 	sts	0x0264, r7
   10cb4:	d0 2f       	mov	r29, r16
   10cb6:	e1 ce       	rjmp	.-574    	; 0x10a7a <_ZL13lcd_move_menuv+0xaa>
   10cb8:	df 5f       	subi	r29, 0xFF	; 255
   10cba:	cf 5f       	subi	r28, 0xFF	; 255
   10cbc:	d4 30       	cpi	r29, 0x04	; 4
   10cbe:	08 f4       	brcc	.+2      	; 0x10cc2 <_ZL13lcd_move_menuv+0x2f2>
   10cc0:	dc ce       	rjmp	.-584    	; 0x10a7a <_ZL13lcd_move_menuv+0xaa>
   10cc2:	df 91       	pop	r29
   10cc4:	cf 91       	pop	r28
   10cc6:	1f 91       	pop	r17
   10cc8:	0f 91       	pop	r16
   10cca:	ff 90       	pop	r15
   10ccc:	ef 90       	pop	r14
   10cce:	df 90       	pop	r13
   10cd0:	cf 90       	pop	r12
   10cd2:	bf 90       	pop	r11
   10cd4:	af 90       	pop	r10
   10cd6:	9f 90       	pop	r9
   10cd8:	8f 90       	pop	r8
   10cda:	7f 90       	pop	r7
   10cdc:	08 95       	ret

00010cde <_ZL18lcd_move_menu_axisv>:
   10cde:	9f 92       	push	r9
   10ce0:	af 92       	push	r10
   10ce2:	bf 92       	push	r11
   10ce4:	cf 92       	push	r12
   10ce6:	df 92       	push	r13
   10ce8:	ef 92       	push	r14
   10cea:	ff 92       	push	r15
   10cec:	0f 93       	push	r16
   10cee:	1f 93       	push	r17
   10cf0:	cf 93       	push	r28
   10cf2:	df 93       	push	r29
   10cf4:	80 91 f4 11 	lds	r24, 0x11F4
   10cf8:	90 91 f5 11 	lds	r25, 0x11F5
   10cfc:	a0 91 f6 11 	lds	r26, 0x11F6
   10d00:	b0 91 f7 11 	lds	r27, 0x11F7
   10d04:	81 30       	cpi	r24, 0x01	; 1
   10d06:	90 48       	sbci	r25, 0x80	; 128
   10d08:	a1 05       	cpc	r26, r1
   10d0a:	b1 05       	cpc	r27, r1
   10d0c:	40 f0       	brcs	.+16     	; 0x10d1e <_ZL18lcd_move_menu_axisv+0x40>
   10d0e:	10 92 f4 11 	sts	0x11F4, r1
   10d12:	10 92 f5 11 	sts	0x11F5, r1
   10d16:	10 92 f6 11 	sts	0x11F6, r1
   10d1a:	10 92 f7 11 	sts	0x11F7, r1
   10d1e:	60 91 f4 11 	lds	r22, 0x11F4
   10d22:	70 91 f5 11 	lds	r23, 0x11F5
   10d26:	80 91 f6 11 	lds	r24, 0x11F6
   10d2a:	90 91 f7 11 	lds	r25, 0x11F7
   10d2e:	25 e0       	ldi	r18, 0x05	; 5
   10d30:	30 e0       	ldi	r19, 0x00	; 0
   10d32:	40 e0       	ldi	r20, 0x00	; 0
   10d34:	50 e0       	ldi	r21, 0x00	; 0
   10d36:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10d3a:	80 91 fd 11 	lds	r24, 0x11FD
   10d3e:	90 e0       	ldi	r25, 0x00	; 0
   10d40:	a0 e0       	ldi	r26, 0x00	; 0
   10d42:	b0 e0       	ldi	r27, 0x00	; 0
   10d44:	28 17       	cp	r18, r24
   10d46:	39 07       	cpc	r19, r25
   10d48:	4a 07       	cpc	r20, r26
   10d4a:	5b 07       	cpc	r21, r27
   10d4c:	10 f4       	brcc	.+4      	; 0x10d52 <_ZL18lcd_move_menu_axisv+0x74>
   10d4e:	20 93 fd 11 	sts	0x11FD, r18
   10d52:	c0 91 fd 11 	lds	r28, 0x11FD
   10d56:	10 91 fe 11 	lds	r17, 0x11FE
   10d5a:	12 fb       	bst	r17, 2
   10d5c:	11 27       	eor	r17, r17
   10d5e:	10 f9       	bld	r17, 0
   10d60:	d0 e0       	ldi	r29, 0x00	; 0
   10d62:	0f 2e       	mov	r0, r31
   10d64:	f5 e0       	ldi	r31, 0x05	; 5
   10d66:	af 2e       	mov	r10, r31
   10d68:	f0 2d       	mov	r31, r0
   10d6a:	0f 2e       	mov	r0, r31
   10d6c:	f5 e0       	ldi	r31, 0x05	; 5
   10d6e:	cf 2e       	mov	r12, r31
   10d70:	d1 2c       	mov	r13, r1
   10d72:	e1 2c       	mov	r14, r1
   10d74:	f1 2c       	mov	r15, r1
   10d76:	f0 2d       	mov	r31, r0
   10d78:	bb 24       	eor	r11, r11
   10d7a:	b3 94       	inc	r11
   10d7c:	00 e0       	ldi	r16, 0x00	; 0
   10d7e:	c1 11       	cpse	r28, r1
   10d80:	32 c0       	rjmp	.+100    	; 0x10de6 <_ZL18lcd_move_menu_axisv+0x108>
   10d82:	80 91 64 02 	lds	r24, 0x0264
   10d86:	88 23       	and	r24, r24
   10d88:	c9 f0       	breq	.+50     	; 0x10dbc <_ZL18lcd_move_menu_axisv+0xde>
   10d8a:	80 91 f4 11 	lds	r24, 0x11F4
   10d8e:	90 91 f5 11 	lds	r25, 0x11F5
   10d92:	a0 91 f6 11 	lds	r26, 0x11F6
   10d96:	b0 91 f7 11 	lds	r27, 0x11F7
   10d9a:	05 97       	sbiw	r24, 0x05	; 5
   10d9c:	a1 05       	cpc	r26, r1
   10d9e:	b1 05       	cpc	r27, r1
   10da0:	38 f4       	brcc	.+14     	; 0x10db0 <_ZL18lcd_move_menu_axisv+0xd2>
   10da2:	23 e0       	ldi	r18, 0x03	; 3
   10da4:	43 e0       	ldi	r20, 0x03	; 3
   10da6:	62 ee       	ldi	r22, 0xE2	; 226
   10da8:	75 e1       	ldi	r23, 0x15	; 21
   10daa:	8d 2f       	mov	r24, r29
   10dac:	18 dc       	rcall	.-2000   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10dae:	06 c0       	rjmp	.+12     	; 0x10dbc <_ZL18lcd_move_menu_axisv+0xde>
   10db0:	23 e0       	ldi	r18, 0x03	; 3
   10db2:	40 e2       	ldi	r20, 0x20	; 32
   10db4:	62 ee       	ldi	r22, 0xE2	; 226
   10db6:	75 e1       	ldi	r23, 0x15	; 21
   10db8:	8d 2f       	mov	r24, r29
   10dba:	11 dc       	rcall	.-2014   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10dbc:	11 23       	and	r17, r17
   10dbe:	09 f4       	brne	.+2      	; 0x10dc2 <_ZL18lcd_move_menu_axisv+0xe4>
   10dc0:	90 c0       	rjmp	.+288    	; 0x10ee2 <_ZL18lcd_move_menu_axisv+0x204>
   10dc2:	80 91 f4 11 	lds	r24, 0x11F4
   10dc6:	90 91 f5 11 	lds	r25, 0x11F5
   10dca:	a0 91 f6 11 	lds	r26, 0x11F6
   10dce:	b0 91 f7 11 	lds	r27, 0x11F7
   10dd2:	05 97       	sbiw	r24, 0x05	; 5
   10dd4:	a1 05       	cpc	r26, r1
   10dd6:	b1 05       	cpc	r27, r1
   10dd8:	08 f0       	brcs	.+2      	; 0x10ddc <_ZL18lcd_move_menu_axisv+0xfe>
   10dda:	83 c0       	rjmp	.+262    	; 0x10ee2 <_ZL18lcd_move_menu_axisv+0x204>
   10ddc:	4e dc       	rcall	.-1892   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10dde:	88 ee       	ldi	r24, 0xE8	; 232
   10de0:	94 e8       	ldi	r25, 0x84	; 132
   10de2:	e0 db       	rcall	.-2112   	; 0x105a4 <_ZL16menu_action_backPFvvE>
   10de4:	94 c1       	rjmp	.+808    	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   10de6:	c1 30       	cpi	r28, 0x01	; 1
   10de8:	09 f0       	breq	.+2      	; 0x10dec <_ZL18lcd_move_menu_axisv+0x10e>
   10dea:	3c c0       	rjmp	.+120    	; 0x10e64 <_ZL18lcd_move_menu_axisv+0x186>
   10dec:	80 91 64 02 	lds	r24, 0x0264
   10df0:	88 23       	and	r24, r24
   10df2:	f1 f0       	breq	.+60     	; 0x10e30 <_ZL18lcd_move_menu_axisv+0x152>
   10df4:	60 91 f4 11 	lds	r22, 0x11F4
   10df8:	70 91 f5 11 	lds	r23, 0x11F5
   10dfc:	80 91 f6 11 	lds	r24, 0x11F6
   10e00:	90 91 f7 11 	lds	r25, 0x11F7
   10e04:	a7 01       	movw	r20, r14
   10e06:	96 01       	movw	r18, r12
   10e08:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10e0c:	21 30       	cpi	r18, 0x01	; 1
   10e0e:	31 05       	cpc	r19, r1
   10e10:	41 05       	cpc	r20, r1
   10e12:	51 05       	cpc	r21, r1
   10e14:	39 f4       	brne	.+14     	; 0x10e24 <_ZL18lcd_move_menu_axisv+0x146>
   10e16:	2e e7       	ldi	r18, 0x7E	; 126
   10e18:	4e e3       	ldi	r20, 0x3E	; 62
   10e1a:	6c ee       	ldi	r22, 0xEC	; 236
   10e1c:	75 e1       	ldi	r23, 0x15	; 21
   10e1e:	8d 2f       	mov	r24, r29
   10e20:	de db       	rcall	.-2116   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10e22:	06 c0       	rjmp	.+12     	; 0x10e30 <_ZL18lcd_move_menu_axisv+0x152>
   10e24:	2e e7       	ldi	r18, 0x7E	; 126
   10e26:	40 e2       	ldi	r20, 0x20	; 32
   10e28:	6c ee       	ldi	r22, 0xEC	; 236
   10e2a:	75 e1       	ldi	r23, 0x15	; 21
   10e2c:	8d 2f       	mov	r24, r29
   10e2e:	d7 db       	rcall	.-2130   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10e30:	11 23       	and	r17, r17
   10e32:	09 f4       	brne	.+2      	; 0x10e36 <_ZL18lcd_move_menu_axisv+0x158>
   10e34:	54 c1       	rjmp	.+680    	; 0x110de <_ZL18lcd_move_menu_axisv+0x400>
   10e36:	60 91 f4 11 	lds	r22, 0x11F4
   10e3a:	70 91 f5 11 	lds	r23, 0x11F5
   10e3e:	80 91 f6 11 	lds	r24, 0x11F6
   10e42:	90 91 f7 11 	lds	r25, 0x11F7
   10e46:	a7 01       	movw	r20, r14
   10e48:	96 01       	movw	r18, r12
   10e4a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10e4e:	21 30       	cpi	r18, 0x01	; 1
   10e50:	31 05       	cpc	r19, r1
   10e52:	41 05       	cpc	r20, r1
   10e54:	51 05       	cpc	r21, r1
   10e56:	09 f0       	breq	.+2      	; 0x10e5a <_ZL18lcd_move_menu_axisv+0x17c>
   10e58:	42 c1       	rjmp	.+644    	; 0x110de <_ZL18lcd_move_menu_axisv+0x400>
   10e5a:	0f dc       	rcall	.-2018   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10e5c:	89 ef       	ldi	r24, 0xF9	; 249
   10e5e:	97 e9       	ldi	r25, 0x97	; 151
   10e60:	ae db       	rcall	.-2212   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10e62:	55 c1       	rjmp	.+682    	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   10e64:	c2 30       	cpi	r28, 0x02	; 2
   10e66:	09 f0       	breq	.+2      	; 0x10e6a <_ZL18lcd_move_menu_axisv+0x18c>
   10e68:	3c c0       	rjmp	.+120    	; 0x10ee2 <_ZL18lcd_move_menu_axisv+0x204>
   10e6a:	80 91 64 02 	lds	r24, 0x0264
   10e6e:	88 23       	and	r24, r24
   10e70:	f1 f0       	breq	.+60     	; 0x10eae <_ZL18lcd_move_menu_axisv+0x1d0>
   10e72:	60 91 f4 11 	lds	r22, 0x11F4
   10e76:	70 91 f5 11 	lds	r23, 0x11F5
   10e7a:	80 91 f6 11 	lds	r24, 0x11F6
   10e7e:	90 91 f7 11 	lds	r25, 0x11F7
   10e82:	a7 01       	movw	r20, r14
   10e84:	96 01       	movw	r18, r12
   10e86:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10e8a:	22 30       	cpi	r18, 0x02	; 2
   10e8c:	31 05       	cpc	r19, r1
   10e8e:	41 05       	cpc	r20, r1
   10e90:	51 05       	cpc	r21, r1
   10e92:	39 f4       	brne	.+14     	; 0x10ea2 <_ZL18lcd_move_menu_axisv+0x1c4>
   10e94:	2e e7       	ldi	r18, 0x7E	; 126
   10e96:	4e e3       	ldi	r20, 0x3E	; 62
   10e98:	63 ef       	ldi	r22, 0xF3	; 243
   10e9a:	75 e1       	ldi	r23, 0x15	; 21
   10e9c:	8d 2f       	mov	r24, r29
   10e9e:	9f db       	rcall	.-2242   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10ea0:	06 c0       	rjmp	.+12     	; 0x10eae <_ZL18lcd_move_menu_axisv+0x1d0>
   10ea2:	2e e7       	ldi	r18, 0x7E	; 126
   10ea4:	40 e2       	ldi	r20, 0x20	; 32
   10ea6:	63 ef       	ldi	r22, 0xF3	; 243
   10ea8:	75 e1       	ldi	r23, 0x15	; 21
   10eaa:	8d 2f       	mov	r24, r29
   10eac:	98 db       	rcall	.-2256   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10eae:	11 23       	and	r17, r17
   10eb0:	09 f4       	brne	.+2      	; 0x10eb4 <_ZL18lcd_move_menu_axisv+0x1d6>
   10eb2:	00 c1       	rjmp	.+512    	; 0x110b4 <_ZL18lcd_move_menu_axisv+0x3d6>
   10eb4:	60 91 f4 11 	lds	r22, 0x11F4
   10eb8:	70 91 f5 11 	lds	r23, 0x11F5
   10ebc:	80 91 f6 11 	lds	r24, 0x11F6
   10ec0:	90 91 f7 11 	lds	r25, 0x11F7
   10ec4:	a7 01       	movw	r20, r14
   10ec6:	96 01       	movw	r18, r12
   10ec8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10ecc:	22 30       	cpi	r18, 0x02	; 2
   10ece:	31 05       	cpc	r19, r1
   10ed0:	41 05       	cpc	r20, r1
   10ed2:	51 05       	cpc	r21, r1
   10ed4:	09 f0       	breq	.+2      	; 0x10ed8 <_ZL18lcd_move_menu_axisv+0x1fa>
   10ed6:	ee c0       	rjmp	.+476    	; 0x110b4 <_ZL18lcd_move_menu_axisv+0x3d6>
   10ed8:	d0 db       	rcall	.-2144   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10eda:	8a e4       	ldi	r24, 0x4A	; 74
   10edc:	97 e9       	ldi	r25, 0x97	; 151
   10ede:	6f db       	rcall	.-2338   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10ee0:	16 c1       	rjmp	.+556    	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   10ee2:	20 e0       	ldi	r18, 0x00	; 0
   10ee4:	30 e0       	ldi	r19, 0x00	; 0
   10ee6:	40 e2       	ldi	r20, 0x20	; 32
   10ee8:	51 e4       	ldi	r21, 0x41	; 65
   10eea:	60 91 d0 11 	lds	r22, 0x11D0
   10eee:	70 91 d1 11 	lds	r23, 0x11D1
   10ef2:	80 91 d2 11 	lds	r24, 0x11D2
   10ef6:	90 91 d3 11 	lds	r25, 0x11D3
   10efa:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   10efe:	88 23       	and	r24, r24
   10f00:	0c f0       	brlt	.+2      	; 0x10f04 <_ZL18lcd_move_menu_axisv+0x226>
   10f02:	7c c0       	rjmp	.+248    	; 0x10ffc <_ZL18lcd_move_menu_axisv+0x31e>
   10f04:	c3 30       	cpi	r28, 0x03	; 3
   10f06:	09 f0       	breq	.+2      	; 0x10f0a <_ZL18lcd_move_menu_axisv+0x22c>
   10f08:	3c c0       	rjmp	.+120    	; 0x10f82 <_ZL18lcd_move_menu_axisv+0x2a4>
   10f0a:	80 91 64 02 	lds	r24, 0x0264
   10f0e:	88 23       	and	r24, r24
   10f10:	f1 f0       	breq	.+60     	; 0x10f4e <_ZL18lcd_move_menu_axisv+0x270>
   10f12:	60 91 f4 11 	lds	r22, 0x11F4
   10f16:	70 91 f5 11 	lds	r23, 0x11F5
   10f1a:	80 91 f6 11 	lds	r24, 0x11F6
   10f1e:	90 91 f7 11 	lds	r25, 0x11F7
   10f22:	a7 01       	movw	r20, r14
   10f24:	96 01       	movw	r18, r12
   10f26:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10f2a:	23 30       	cpi	r18, 0x03	; 3
   10f2c:	31 05       	cpc	r19, r1
   10f2e:	41 05       	cpc	r20, r1
   10f30:	51 05       	cpc	r21, r1
   10f32:	39 f4       	brne	.+14     	; 0x10f42 <_ZL18lcd_move_menu_axisv+0x264>
   10f34:	2e e7       	ldi	r18, 0x7E	; 126
   10f36:	4e e3       	ldi	r20, 0x3E	; 62
   10f38:	6a ef       	ldi	r22, 0xFA	; 250
   10f3a:	75 e1       	ldi	r23, 0x15	; 21
   10f3c:	8d 2f       	mov	r24, r29
   10f3e:	4f db       	rcall	.-2402   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10f40:	06 c0       	rjmp	.+12     	; 0x10f4e <_ZL18lcd_move_menu_axisv+0x270>
   10f42:	2e e7       	ldi	r18, 0x7E	; 126
   10f44:	40 e2       	ldi	r20, 0x20	; 32
   10f46:	6a ef       	ldi	r22, 0xFA	; 250
   10f48:	75 e1       	ldi	r23, 0x15	; 21
   10f4a:	8d 2f       	mov	r24, r29
   10f4c:	48 db       	rcall	.-2416   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10f4e:	11 23       	and	r17, r17
   10f50:	09 f4       	brne	.+2      	; 0x10f54 <_ZL18lcd_move_menu_axisv+0x276>
   10f52:	59 c0       	rjmp	.+178    	; 0x11006 <_ZL18lcd_move_menu_axisv+0x328>
   10f54:	60 91 f4 11 	lds	r22, 0x11F4
   10f58:	70 91 f5 11 	lds	r23, 0x11F5
   10f5c:	80 91 f6 11 	lds	r24, 0x11F6
   10f60:	90 91 f7 11 	lds	r25, 0x11F7
   10f64:	a7 01       	movw	r20, r14
   10f66:	96 01       	movw	r18, r12
   10f68:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10f6c:	23 30       	cpi	r18, 0x03	; 3
   10f6e:	31 05       	cpc	r19, r1
   10f70:	41 05       	cpc	r20, r1
   10f72:	51 05       	cpc	r21, r1
   10f74:	09 f0       	breq	.+2      	; 0x10f78 <_ZL18lcd_move_menu_axisv+0x29a>
   10f76:	49 c0       	rjmp	.+146    	; 0x1100a <_ZL18lcd_move_menu_axisv+0x32c>
   10f78:	80 db       	rcall	.-2304   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10f7a:	8b e9       	ldi	r24, 0x9B	; 155
   10f7c:	96 e9       	ldi	r25, 0x96	; 150
   10f7e:	1f db       	rcall	.-2498   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10f80:	c6 c0       	rjmp	.+396    	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   10f82:	c4 30       	cpi	r28, 0x04	; 4
   10f84:	09 f0       	breq	.+2      	; 0x10f88 <_ZL18lcd_move_menu_axisv+0x2aa>
   10f86:	43 c0       	rjmp	.+134    	; 0x1100e <_ZL18lcd_move_menu_axisv+0x330>
   10f88:	80 91 64 02 	lds	r24, 0x0264
   10f8c:	88 23       	and	r24, r24
   10f8e:	f1 f0       	breq	.+60     	; 0x10fcc <_ZL18lcd_move_menu_axisv+0x2ee>
   10f90:	60 91 f4 11 	lds	r22, 0x11F4
   10f94:	70 91 f5 11 	lds	r23, 0x11F5
   10f98:	80 91 f6 11 	lds	r24, 0x11F6
   10f9c:	90 91 f7 11 	lds	r25, 0x11F7
   10fa0:	a7 01       	movw	r20, r14
   10fa2:	96 01       	movw	r18, r12
   10fa4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10fa8:	24 30       	cpi	r18, 0x04	; 4
   10faa:	31 05       	cpc	r19, r1
   10fac:	41 05       	cpc	r20, r1
   10fae:	51 05       	cpc	r21, r1
   10fb0:	39 f4       	brne	.+14     	; 0x10fc0 <_ZL18lcd_move_menu_axisv+0x2e2>
   10fb2:	2e e7       	ldi	r18, 0x7E	; 126
   10fb4:	4e e3       	ldi	r20, 0x3E	; 62
   10fb6:	61 e0       	ldi	r22, 0x01	; 1
   10fb8:	76 e1       	ldi	r23, 0x16	; 22
   10fba:	8d 2f       	mov	r24, r29
   10fbc:	10 db       	rcall	.-2528   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10fbe:	06 c0       	rjmp	.+12     	; 0x10fcc <_ZL18lcd_move_menu_axisv+0x2ee>
   10fc0:	2e e7       	ldi	r18, 0x7E	; 126
   10fc2:	40 e2       	ldi	r20, 0x20	; 32
   10fc4:	61 e0       	ldi	r22, 0x01	; 1
   10fc6:	76 e1       	ldi	r23, 0x16	; 22
   10fc8:	8d 2f       	mov	r24, r29
   10fca:	09 db       	rcall	.-2542   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   10fcc:	11 23       	and	r17, r17
   10fce:	09 f1       	breq	.+66     	; 0x11012 <_ZL18lcd_move_menu_axisv+0x334>
   10fd0:	60 91 f4 11 	lds	r22, 0x11F4
   10fd4:	70 91 f5 11 	lds	r23, 0x11F5
   10fd8:	80 91 f6 11 	lds	r24, 0x11F6
   10fdc:	90 91 f7 11 	lds	r25, 0x11F7
   10fe0:	a7 01       	movw	r20, r14
   10fe2:	96 01       	movw	r18, r12
   10fe4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   10fe8:	24 30       	cpi	r18, 0x04	; 4
   10fea:	31 05       	cpc	r19, r1
   10fec:	41 05       	cpc	r20, r1
   10fee:	51 05       	cpc	r21, r1
   10ff0:	91 f4       	brne	.+36     	; 0x11016 <_ZL18lcd_move_menu_axisv+0x338>
   10ff2:	43 db       	rcall	.-2426   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   10ff4:	81 e2       	ldi	r24, 0x21	; 33
   10ff6:	96 e9       	ldi	r25, 0x96	; 150
   10ff8:	e2 da       	rcall	.-2620   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   10ffa:	89 c0       	rjmp	.+274    	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   10ffc:	0f 2e       	mov	r0, r31
   10ffe:	f3 e0       	ldi	r31, 0x03	; 3
   11000:	9f 2e       	mov	r9, r31
   11002:	f0 2d       	mov	r31, r0
   11004:	09 c0       	rjmp	.+18     	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   11006:	9a 2c       	mov	r9, r10
   11008:	07 c0       	rjmp	.+14     	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   1100a:	9a 2c       	mov	r9, r10
   1100c:	05 c0       	rjmp	.+10     	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   1100e:	9a 2c       	mov	r9, r10
   11010:	03 c0       	rjmp	.+6      	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   11012:	9a 2c       	mov	r9, r10
   11014:	01 c0       	rjmp	.+2      	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   11016:	9a 2c       	mov	r9, r10
   11018:	60 91 f4 11 	lds	r22, 0x11F4
   1101c:	70 91 f5 11 	lds	r23, 0x11F5
   11020:	80 91 f6 11 	lds	r24, 0x11F6
   11024:	90 91 f7 11 	lds	r25, 0x11F7
   11028:	a7 01       	movw	r20, r14
   1102a:	96 01       	movw	r18, r12
   1102c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11030:	89 2d       	mov	r24, r9
   11032:	90 e0       	ldi	r25, 0x00	; 0
   11034:	a0 e0       	ldi	r26, 0x00	; 0
   11036:	b0 e0       	ldi	r27, 0x00	; 0
   11038:	28 17       	cp	r18, r24
   1103a:	39 07       	cpc	r19, r25
   1103c:	4a 07       	cpc	r20, r26
   1103e:	5b 07       	cpc	r21, r27
   11040:	b0 f0       	brcs	.+44     	; 0x1106e <_ZL18lcd_move_menu_axisv+0x390>
   11042:	89 2d       	mov	r24, r9
   11044:	90 e0       	ldi	r25, 0x00	; 0
   11046:	9c 01       	movw	r18, r24
   11048:	22 0f       	add	r18, r18
   1104a:	33 1f       	adc	r19, r19
   1104c:	22 0f       	add	r18, r18
   1104e:	33 1f       	adc	r19, r19
   11050:	82 0f       	add	r24, r18
   11052:	93 1f       	adc	r25, r19
   11054:	01 97       	sbiw	r24, 0x01	; 1
   11056:	aa 27       	eor	r26, r26
   11058:	97 fd       	sbrc	r25, 7
   1105a:	a0 95       	com	r26
   1105c:	ba 2f       	mov	r27, r26
   1105e:	80 93 f4 11 	sts	0x11F4, r24
   11062:	90 93 f5 11 	sts	0x11F5, r25
   11066:	a0 93 f6 11 	sts	0x11F6, r26
   1106a:	b0 93 f7 11 	sts	0x11F7, r27
   1106e:	60 91 f4 11 	lds	r22, 0x11F4
   11072:	70 91 f5 11 	lds	r23, 0x11F5
   11076:	80 91 f6 11 	lds	r24, 0x11F6
   1107a:	90 91 f7 11 	lds	r25, 0x11F7
   1107e:	a7 01       	movw	r20, r14
   11080:	96 01       	movw	r18, r12
   11082:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11086:	42 2f       	mov	r20, r18
   11088:	50 e0       	ldi	r21, 0x00	; 0
   1108a:	80 91 fd 11 	lds	r24, 0x11FD
   1108e:	90 e0       	ldi	r25, 0x00	; 0
   11090:	04 96       	adiw	r24, 0x04	; 4
   11092:	48 17       	cp	r20, r24
   11094:	59 07       	cpc	r21, r25
   11096:	44 f0       	brlt	.+16     	; 0x110a8 <_ZL18lcd_move_menu_axisv+0x3ca>
   11098:	c2 2f       	mov	r28, r18
   1109a:	c3 50       	subi	r28, 0x03	; 3
   1109c:	c0 93 fd 11 	sts	0x11FD, r28
   110a0:	b0 92 64 02 	sts	0x0264, r11
   110a4:	d0 2f       	mov	r29, r16
   110a6:	6b ce       	rjmp	.-810    	; 0x10d7e <_ZL18lcd_move_menu_axisv+0xa0>
   110a8:	df 5f       	subi	r29, 0xFF	; 255
   110aa:	cf 5f       	subi	r28, 0xFF	; 255
   110ac:	d4 30       	cpi	r29, 0x04	; 4
   110ae:	08 f4       	brcc	.+2      	; 0x110b2 <_ZL18lcd_move_menu_axisv+0x3d4>
   110b0:	66 ce       	rjmp	.-820    	; 0x10d7e <_ZL18lcd_move_menu_axisv+0xa0>
   110b2:	2d c0       	rjmp	.+90     	; 0x1110e <_ZL18lcd_move_menu_axisv+0x430>
   110b4:	20 e0       	ldi	r18, 0x00	; 0
   110b6:	30 e0       	ldi	r19, 0x00	; 0
   110b8:	40 e2       	ldi	r20, 0x20	; 32
   110ba:	51 e4       	ldi	r21, 0x41	; 65
   110bc:	60 91 d0 11 	lds	r22, 0x11D0
   110c0:	70 91 d1 11 	lds	r23, 0x11D1
   110c4:	80 91 d2 11 	lds	r24, 0x11D2
   110c8:	90 91 d3 11 	lds	r25, 0x11D3
   110cc:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   110d0:	88 23       	and	r24, r24
   110d2:	dc f0       	brlt	.+54     	; 0x1110a <_ZL18lcd_move_menu_axisv+0x42c>
   110d4:	0f 2e       	mov	r0, r31
   110d6:	f3 e0       	ldi	r31, 0x03	; 3
   110d8:	9f 2e       	mov	r9, r31
   110da:	f0 2d       	mov	r31, r0
   110dc:	9d cf       	rjmp	.-198    	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   110de:	20 e0       	ldi	r18, 0x00	; 0
   110e0:	30 e0       	ldi	r19, 0x00	; 0
   110e2:	40 e2       	ldi	r20, 0x20	; 32
   110e4:	51 e4       	ldi	r21, 0x41	; 65
   110e6:	60 91 d0 11 	lds	r22, 0x11D0
   110ea:	70 91 d1 11 	lds	r23, 0x11D1
   110ee:	80 91 d2 11 	lds	r24, 0x11D2
   110f2:	90 91 d3 11 	lds	r25, 0x11D3
   110f6:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   110fa:	88 23       	and	r24, r24
   110fc:	0c f4       	brge	.+2      	; 0x11100 <_ZL18lcd_move_menu_axisv+0x422>
   110fe:	41 cf       	rjmp	.-382    	; 0x10f82 <_ZL18lcd_move_menu_axisv+0x2a4>
   11100:	0f 2e       	mov	r0, r31
   11102:	f3 e0       	ldi	r31, 0x03	; 3
   11104:	9f 2e       	mov	r9, r31
   11106:	f0 2d       	mov	r31, r0
   11108:	87 cf       	rjmp	.-242    	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   1110a:	9a 2c       	mov	r9, r10
   1110c:	85 cf       	rjmp	.-246    	; 0x11018 <_ZL18lcd_move_menu_axisv+0x33a>
   1110e:	df 91       	pop	r29
   11110:	cf 91       	pop	r28
   11112:	1f 91       	pop	r17
   11114:	0f 91       	pop	r16
   11116:	ff 90       	pop	r15
   11118:	ef 90       	pop	r14
   1111a:	df 90       	pop	r13
   1111c:	cf 90       	pop	r12
   1111e:	bf 90       	pop	r11
   11120:	af 90       	pop	r10
   11122:	9f 90       	pop	r9
   11124:	08 95       	ret

00011126 <_ZL18lcd_move_menu_01mmv>:
   11126:	8d ec       	ldi	r24, 0xCD	; 205
   11128:	9c ec       	ldi	r25, 0xCC	; 204
   1112a:	ac ec       	ldi	r26, 0xCC	; 204
   1112c:	bd e3       	ldi	r27, 0x3D	; 61
   1112e:	80 93 d0 11 	sts	0x11D0, r24
   11132:	90 93 d1 11 	sts	0x11D1, r25
   11136:	a0 93 d2 11 	sts	0x11D2, r26
   1113a:	b0 93 d3 11 	sts	0x11D3, r27
   1113e:	cf cd       	rjmp	.-1122   	; 0x10cde <_ZL18lcd_move_menu_axisv>

00011140 <_ZL17lcd_move_menu_1mmv>:
   11140:	80 e0       	ldi	r24, 0x00	; 0
   11142:	90 e0       	ldi	r25, 0x00	; 0
   11144:	a0 e8       	ldi	r26, 0x80	; 128
   11146:	bf e3       	ldi	r27, 0x3F	; 63
   11148:	80 93 d0 11 	sts	0x11D0, r24
   1114c:	90 93 d1 11 	sts	0x11D1, r25
   11150:	a0 93 d2 11 	sts	0x11D2, r26
   11154:	b0 93 d3 11 	sts	0x11D3, r27
   11158:	c2 cd       	rjmp	.-1148   	; 0x10cde <_ZL18lcd_move_menu_axisv>

0001115a <_ZL18lcd_move_menu_10mmv>:
   1115a:	80 e0       	ldi	r24, 0x00	; 0
   1115c:	90 e0       	ldi	r25, 0x00	; 0
   1115e:	a0 e2       	ldi	r26, 0x20	; 32
   11160:	b1 e4       	ldi	r27, 0x41	; 65
   11162:	80 93 d0 11 	sts	0x11D0, r24
   11166:	90 93 d1 11 	sts	0x11D1, r25
   1116a:	a0 93 d2 11 	sts	0x11D2, r26
   1116e:	b0 93 d3 11 	sts	0x11D3, r27
   11172:	b5 cd       	rjmp	.-1174   	; 0x10cde <_ZL18lcd_move_menu_axisv>

00011174 <_ZL13lcd_main_menuv>:
   11174:	2f 92       	push	r2
   11176:	3f 92       	push	r3
   11178:	4f 92       	push	r4
   1117a:	5f 92       	push	r5
   1117c:	6f 92       	push	r6
   1117e:	7f 92       	push	r7
   11180:	8f 92       	push	r8
   11182:	af 92       	push	r10
   11184:	bf 92       	push	r11
   11186:	cf 92       	push	r12
   11188:	df 92       	push	r13
   1118a:	ef 92       	push	r14
   1118c:	ff 92       	push	r15
   1118e:	1f 93       	push	r17
   11190:	cf 93       	push	r28
   11192:	df 93       	push	r29
   11194:	80 91 f4 11 	lds	r24, 0x11F4
   11198:	90 91 f5 11 	lds	r25, 0x11F5
   1119c:	a0 91 f6 11 	lds	r26, 0x11F6
   111a0:	b0 91 f7 11 	lds	r27, 0x11F7
   111a4:	81 30       	cpi	r24, 0x01	; 1
   111a6:	90 48       	sbci	r25, 0x80	; 128
   111a8:	a1 05       	cpc	r26, r1
   111aa:	b1 05       	cpc	r27, r1
   111ac:	40 f0       	brcs	.+16     	; 0x111be <_ZL13lcd_main_menuv+0x4a>
   111ae:	10 92 f4 11 	sts	0x11F4, r1
   111b2:	10 92 f5 11 	sts	0x11F5, r1
   111b6:	10 92 f6 11 	sts	0x11F6, r1
   111ba:	10 92 f7 11 	sts	0x11F7, r1
   111be:	60 91 f4 11 	lds	r22, 0x11F4
   111c2:	70 91 f5 11 	lds	r23, 0x11F5
   111c6:	80 91 f6 11 	lds	r24, 0x11F6
   111ca:	90 91 f7 11 	lds	r25, 0x11F7
   111ce:	25 e0       	ldi	r18, 0x05	; 5
   111d0:	30 e0       	ldi	r19, 0x00	; 0
   111d2:	40 e0       	ldi	r20, 0x00	; 0
   111d4:	50 e0       	ldi	r21, 0x00	; 0
   111d6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   111da:	80 91 fd 11 	lds	r24, 0x11FD
   111de:	90 e0       	ldi	r25, 0x00	; 0
   111e0:	a0 e0       	ldi	r26, 0x00	; 0
   111e2:	b0 e0       	ldi	r27, 0x00	; 0
   111e4:	28 17       	cp	r18, r24
   111e6:	39 07       	cpc	r19, r25
   111e8:	4a 07       	cpc	r20, r26
   111ea:	5b 07       	cpc	r21, r27
   111ec:	10 f4       	brcc	.+4      	; 0x111f2 <_ZL13lcd_main_menuv+0x7e>
   111ee:	20 93 fd 11 	sts	0x11FD, r18
   111f2:	10 91 fd 11 	lds	r17, 0x11FD
   111f6:	60 90 fe 11 	lds	r6, 0x11FE
   111fa:	62 fa       	bst	r6, 2
   111fc:	66 24       	eor	r6, r6
   111fe:	60 f8       	bld	r6, 0
   11200:	81 2c       	mov	r8, r1
   11202:	0f 2e       	mov	r0, r31
   11204:	f5 e0       	ldi	r31, 0x05	; 5
   11206:	2f 2e       	mov	r2, r31
   11208:	f0 2d       	mov	r31, r0
   1120a:	0f 2e       	mov	r0, r31
   1120c:	f5 e0       	ldi	r31, 0x05	; 5
   1120e:	cf 2e       	mov	r12, r31
   11210:	d1 2c       	mov	r13, r1
   11212:	e1 2c       	mov	r14, r1
   11214:	f1 2c       	mov	r15, r1
   11216:	f0 2d       	mov	r31, r0
   11218:	c5 e9       	ldi	r28, 0x95	; 149
   1121a:	d5 e0       	ldi	r29, 0x05	; 5
   1121c:	68 94       	set
   1121e:	55 24       	eor	r5, r5
   11220:	52 f8       	bld	r5, 2
   11222:	0f 2e       	mov	r0, r31
   11224:	f3 e6       	ldi	r31, 0x63	; 99
   11226:	af 2e       	mov	r10, r31
   11228:	f7 e0       	ldi	r31, 0x07	; 7
   1122a:	bf 2e       	mov	r11, r31
   1122c:	f0 2d       	mov	r31, r0
   1122e:	33 24       	eor	r3, r3
   11230:	33 94       	inc	r3
   11232:	41 2c       	mov	r4, r1
   11234:	11 11       	cpse	r17, r1
   11236:	30 c0       	rjmp	.+96     	; 0x11298 <_ZL13lcd_main_menuv+0x124>
   11238:	80 91 64 02 	lds	r24, 0x0264
   1123c:	88 23       	and	r24, r24
   1123e:	c9 f0       	breq	.+50     	; 0x11272 <_ZL13lcd_main_menuv+0xfe>
   11240:	80 91 f4 11 	lds	r24, 0x11F4
   11244:	90 91 f5 11 	lds	r25, 0x11F5
   11248:	a0 91 f6 11 	lds	r26, 0x11F6
   1124c:	b0 91 f7 11 	lds	r27, 0x11F7
   11250:	05 97       	sbiw	r24, 0x05	; 5
   11252:	a1 05       	cpc	r26, r1
   11254:	b1 05       	cpc	r27, r1
   11256:	38 f4       	brcc	.+14     	; 0x11266 <_ZL13lcd_main_menuv+0xf2>
   11258:	23 e0       	ldi	r18, 0x03	; 3
   1125a:	43 e0       	ldi	r20, 0x03	; 3
   1125c:	67 e3       	ldi	r22, 0x37	; 55
   1125e:	72 e1       	ldi	r23, 0x12	; 18
   11260:	88 2d       	mov	r24, r8
   11262:	bd d9       	rcall	.-3206   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11264:	06 c0       	rjmp	.+12     	; 0x11272 <_ZL13lcd_main_menuv+0xfe>
   11266:	23 e0       	ldi	r18, 0x03	; 3
   11268:	40 e2       	ldi	r20, 0x20	; 32
   1126a:	67 e3       	ldi	r22, 0x37	; 55
   1126c:	72 e1       	ldi	r23, 0x12	; 18
   1126e:	88 2d       	mov	r24, r8
   11270:	b6 d9       	rcall	.-3220   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11272:	66 20       	and	r6, r6
   11274:	89 f0       	breq	.+34     	; 0x11298 <_ZL13lcd_main_menuv+0x124>
   11276:	80 91 f4 11 	lds	r24, 0x11F4
   1127a:	90 91 f5 11 	lds	r25, 0x11F5
   1127e:	a0 91 f6 11 	lds	r26, 0x11F6
   11282:	b0 91 f7 11 	lds	r27, 0x11F7
   11286:	05 97       	sbiw	r24, 0x05	; 5
   11288:	a1 05       	cpc	r26, r1
   1128a:	b1 05       	cpc	r27, r1
   1128c:	28 f4       	brcc	.+10     	; 0x11298 <_ZL13lcd_main_menuv+0x124>
   1128e:	f5 d9       	rcall	.-3094   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11290:	81 ec       	ldi	r24, 0xC1	; 193
   11292:	90 ea       	ldi	r25, 0xA0	; 160
   11294:	87 d9       	rcall	.-3314   	; 0x105a4 <_ZL16menu_action_backPFvvE>
   11296:	83 c2       	rjmp	.+1286   	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   11298:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <_Z12movesplannedv>
   1129c:	81 11       	cpse	r24, r1
   1129e:	06 c0       	rjmp	.+12     	; 0x112ac <_ZL13lcd_main_menuv+0x138>
   112a0:	e4 e9       	ldi	r30, 0x94	; 148
   112a2:	f5 e0       	ldi	r31, 0x05	; 5
   112a4:	80 81       	ld	r24, Z
   112a6:	88 23       	and	r24, r24
   112a8:	09 f4       	brne	.+2      	; 0x112ac <_ZL13lcd_main_menuv+0x138>
   112aa:	3f c0       	rjmp	.+126    	; 0x1132a <_ZL13lcd_main_menuv+0x1b6>
   112ac:	11 30       	cpi	r17, 0x01	; 1
   112ae:	09 f0       	breq	.+2      	; 0x112b2 <_ZL13lcd_main_menuv+0x13e>
   112b0:	7b c0       	rjmp	.+246    	; 0x113a8 <_ZL13lcd_main_menuv+0x234>
   112b2:	80 91 64 02 	lds	r24, 0x0264
   112b6:	88 23       	and	r24, r24
   112b8:	f1 f0       	breq	.+60     	; 0x112f6 <_ZL13lcd_main_menuv+0x182>
   112ba:	60 91 f4 11 	lds	r22, 0x11F4
   112be:	70 91 f5 11 	lds	r23, 0x11F5
   112c2:	80 91 f6 11 	lds	r24, 0x11F6
   112c6:	90 91 f7 11 	lds	r25, 0x11F7
   112ca:	a7 01       	movw	r20, r14
   112cc:	96 01       	movw	r18, r12
   112ce:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   112d2:	21 30       	cpi	r18, 0x01	; 1
   112d4:	31 05       	cpc	r19, r1
   112d6:	41 05       	cpc	r20, r1
   112d8:	51 05       	cpc	r21, r1
   112da:	39 f4       	brne	.+14     	; 0x112ea <_ZL13lcd_main_menuv+0x176>
   112dc:	2e e7       	ldi	r18, 0x7E	; 126
   112de:	4e e3       	ldi	r20, 0x3E	; 62
   112e0:	63 e4       	ldi	r22, 0x43	; 67
   112e2:	72 e1       	ldi	r23, 0x12	; 18
   112e4:	88 2d       	mov	r24, r8
   112e6:	7b d9       	rcall	.-3338   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   112e8:	06 c0       	rjmp	.+12     	; 0x112f6 <_ZL13lcd_main_menuv+0x182>
   112ea:	2e e7       	ldi	r18, 0x7E	; 126
   112ec:	40 e2       	ldi	r20, 0x20	; 32
   112ee:	63 e4       	ldi	r22, 0x43	; 67
   112f0:	72 e1       	ldi	r23, 0x12	; 18
   112f2:	88 2d       	mov	r24, r8
   112f4:	74 d9       	rcall	.-3352   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   112f6:	66 20       	and	r6, r6
   112f8:	09 f4       	brne	.+2      	; 0x112fc <_ZL13lcd_main_menuv+0x188>
   112fa:	95 c0       	rjmp	.+298    	; 0x11426 <_ZL13lcd_main_menuv+0x2b2>
   112fc:	60 91 f4 11 	lds	r22, 0x11F4
   11300:	70 91 f5 11 	lds	r23, 0x11F5
   11304:	80 91 f6 11 	lds	r24, 0x11F6
   11308:	90 91 f7 11 	lds	r25, 0x11F7
   1130c:	a7 01       	movw	r20, r14
   1130e:	96 01       	movw	r18, r12
   11310:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11314:	21 30       	cpi	r18, 0x01	; 1
   11316:	31 05       	cpc	r19, r1
   11318:	41 05       	cpc	r20, r1
   1131a:	51 05       	cpc	r21, r1
   1131c:	09 f0       	breq	.+2      	; 0x11320 <_ZL13lcd_main_menuv+0x1ac>
   1131e:	83 c0       	rjmp	.+262    	; 0x11426 <_ZL13lcd_main_menuv+0x2b2>
   11320:	ac d9       	rcall	.-3240   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11322:	87 ee       	ldi	r24, 0xE7	; 231
   11324:	9c e9       	ldi	r25, 0x9C	; 156
   11326:	4b d9       	rcall	.-3434   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   11328:	3a c2       	rjmp	.+1140   	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   1132a:	11 30       	cpi	r17, 0x01	; 1
   1132c:	09 f0       	breq	.+2      	; 0x11330 <_ZL13lcd_main_menuv+0x1bc>
   1132e:	3c c0       	rjmp	.+120    	; 0x113a8 <_ZL13lcd_main_menuv+0x234>
   11330:	80 91 64 02 	lds	r24, 0x0264
   11334:	88 23       	and	r24, r24
   11336:	f1 f0       	breq	.+60     	; 0x11374 <_ZL13lcd_main_menuv+0x200>
   11338:	60 91 f4 11 	lds	r22, 0x11F4
   1133c:	70 91 f5 11 	lds	r23, 0x11F5
   11340:	80 91 f6 11 	lds	r24, 0x11F6
   11344:	90 91 f7 11 	lds	r25, 0x11F7
   11348:	a7 01       	movw	r20, r14
   1134a:	96 01       	movw	r18, r12
   1134c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11350:	21 30       	cpi	r18, 0x01	; 1
   11352:	31 05       	cpc	r19, r1
   11354:	41 05       	cpc	r20, r1
   11356:	51 05       	cpc	r21, r1
   11358:	39 f4       	brne	.+14     	; 0x11368 <_ZL13lcd_main_menuv+0x1f4>
   1135a:	2e e7       	ldi	r18, 0x7E	; 126
   1135c:	4e e3       	ldi	r20, 0x3E	; 62
   1135e:	68 e4       	ldi	r22, 0x48	; 72
   11360:	72 e1       	ldi	r23, 0x12	; 18
   11362:	88 2d       	mov	r24, r8
   11364:	3c d9       	rcall	.-3464   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11366:	06 c0       	rjmp	.+12     	; 0x11374 <_ZL13lcd_main_menuv+0x200>
   11368:	2e e7       	ldi	r18, 0x7E	; 126
   1136a:	40 e2       	ldi	r20, 0x20	; 32
   1136c:	68 e4       	ldi	r22, 0x48	; 72
   1136e:	72 e1       	ldi	r23, 0x12	; 18
   11370:	88 2d       	mov	r24, r8
   11372:	35 d9       	rcall	.-3478   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11374:	66 20       	and	r6, r6
   11376:	09 f4       	brne	.+2      	; 0x1137a <_ZL13lcd_main_menuv+0x206>
   11378:	56 c0       	rjmp	.+172    	; 0x11426 <_ZL13lcd_main_menuv+0x2b2>
   1137a:	60 91 f4 11 	lds	r22, 0x11F4
   1137e:	70 91 f5 11 	lds	r23, 0x11F5
   11382:	80 91 f6 11 	lds	r24, 0x11F6
   11386:	90 91 f7 11 	lds	r25, 0x11F7
   1138a:	a7 01       	movw	r20, r14
   1138c:	96 01       	movw	r18, r12
   1138e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11392:	21 30       	cpi	r18, 0x01	; 1
   11394:	31 05       	cpc	r19, r1
   11396:	41 05       	cpc	r20, r1
   11398:	51 05       	cpc	r21, r1
   1139a:	09 f0       	breq	.+2      	; 0x1139e <_ZL13lcd_main_menuv+0x22a>
   1139c:	44 c0       	rjmp	.+136    	; 0x11426 <_ZL13lcd_main_menuv+0x2b2>
   1139e:	6d d9       	rcall	.-3366   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   113a0:	8e ef       	ldi	r24, 0xFE	; 254
   113a2:	9e e8       	ldi	r25, 0x8E	; 142
   113a4:	0c d9       	rcall	.-3560   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   113a6:	fb c1       	rjmp	.+1014   	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   113a8:	12 30       	cpi	r17, 0x02	; 2
   113aa:	09 f0       	breq	.+2      	; 0x113ae <_ZL13lcd_main_menuv+0x23a>
   113ac:	3c c0       	rjmp	.+120    	; 0x11426 <_ZL13lcd_main_menuv+0x2b2>
   113ae:	80 91 64 02 	lds	r24, 0x0264
   113b2:	88 23       	and	r24, r24
   113b4:	f1 f0       	breq	.+60     	; 0x113f2 <_ZL13lcd_main_menuv+0x27e>
   113b6:	60 91 f4 11 	lds	r22, 0x11F4
   113ba:	70 91 f5 11 	lds	r23, 0x11F5
   113be:	80 91 f6 11 	lds	r24, 0x11F6
   113c2:	90 91 f7 11 	lds	r25, 0x11F7
   113c6:	a7 01       	movw	r20, r14
   113c8:	96 01       	movw	r18, r12
   113ca:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   113ce:	22 30       	cpi	r18, 0x02	; 2
   113d0:	31 05       	cpc	r19, r1
   113d2:	41 05       	cpc	r20, r1
   113d4:	51 05       	cpc	r21, r1
   113d6:	39 f4       	brne	.+14     	; 0x113e6 <_ZL13lcd_main_menuv+0x272>
   113d8:	2e e7       	ldi	r18, 0x7E	; 126
   113da:	4e e3       	ldi	r20, 0x3E	; 62
   113dc:	60 e5       	ldi	r22, 0x50	; 80
   113de:	72 e1       	ldi	r23, 0x12	; 18
   113e0:	88 2d       	mov	r24, r8
   113e2:	fd d8       	rcall	.-3590   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   113e4:	06 c0       	rjmp	.+12     	; 0x113f2 <_ZL13lcd_main_menuv+0x27e>
   113e6:	2e e7       	ldi	r18, 0x7E	; 126
   113e8:	40 e2       	ldi	r20, 0x20	; 32
   113ea:	60 e5       	ldi	r22, 0x50	; 80
   113ec:	72 e1       	ldi	r23, 0x12	; 18
   113ee:	88 2d       	mov	r24, r8
   113f0:	f6 d8       	rcall	.-3604   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   113f2:	66 20       	and	r6, r6
   113f4:	09 f4       	brne	.+2      	; 0x113f8 <_ZL13lcd_main_menuv+0x284>
   113f6:	c6 c1       	rjmp	.+908    	; 0x11784 <_ZL13lcd_main_menuv+0x610>
   113f8:	60 91 f4 11 	lds	r22, 0x11F4
   113fc:	70 91 f5 11 	lds	r23, 0x11F5
   11400:	80 91 f6 11 	lds	r24, 0x11F6
   11404:	90 91 f7 11 	lds	r25, 0x11F7
   11408:	a7 01       	movw	r20, r14
   1140a:	96 01       	movw	r18, r12
   1140c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11410:	22 30       	cpi	r18, 0x02	; 2
   11412:	31 05       	cpc	r19, r1
   11414:	41 05       	cpc	r20, r1
   11416:	51 05       	cpc	r21, r1
   11418:	09 f0       	breq	.+2      	; 0x1141c <_ZL13lcd_main_menuv+0x2a8>
   1141a:	b4 c1       	rjmp	.+872    	; 0x11784 <_ZL13lcd_main_menuv+0x610>
   1141c:	2e d9       	rcall	.-3492   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1141e:	81 e6       	ldi	r24, 0x61	; 97
   11420:	93 e8       	ldi	r25, 0x83	; 131
   11422:	cd d8       	rcall	.-3686   	; 0x105be <_ZL19menu_action_submenuPFvvE>
   11424:	bc c1       	rjmp	.+888    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   11426:	88 81       	ld	r24, Y
   11428:	88 23       	and	r24, r24
   1142a:	09 f4       	brne	.+2      	; 0x1142e <_ZL13lcd_main_menuv+0x2ba>
   1142c:	0a c1       	rjmp	.+532    	; 0x11642 <_ZL13lcd_main_menuv+0x4ce>
   1142e:	f5 01       	movw	r30, r10
   11430:	80 81       	ld	r24, Z
   11432:	88 23       	and	r24, r24
   11434:	09 f4       	brne	.+2      	; 0x11438 <_ZL13lcd_main_menuv+0x2c4>
   11436:	c3 c0       	rjmp	.+390    	; 0x115be <_ZL13lcd_main_menuv+0x44a>
   11438:	e4 e9       	ldi	r30, 0x94	; 148
   1143a:	f5 e0       	ldi	r31, 0x05	; 5
   1143c:	80 81       	ld	r24, Z
   1143e:	88 23       	and	r24, r24
   11440:	09 f4       	brne	.+2      	; 0x11444 <_ZL13lcd_main_menuv+0x2d0>
   11442:	3f c0       	rjmp	.+126    	; 0x114c2 <_ZL13lcd_main_menuv+0x34e>
   11444:	13 30       	cpi	r17, 0x03	; 3
   11446:	09 f0       	breq	.+2      	; 0x1144a <_ZL13lcd_main_menuv+0x2d6>
   11448:	7b c0       	rjmp	.+246    	; 0x11540 <_ZL13lcd_main_menuv+0x3cc>
   1144a:	80 91 64 02 	lds	r24, 0x0264
   1144e:	88 23       	and	r24, r24
   11450:	f1 f0       	breq	.+60     	; 0x1148e <_ZL13lcd_main_menuv+0x31a>
   11452:	60 91 f4 11 	lds	r22, 0x11F4
   11456:	70 91 f5 11 	lds	r23, 0x11F5
   1145a:	80 91 f6 11 	lds	r24, 0x11F6
   1145e:	90 91 f7 11 	lds	r25, 0x11F7
   11462:	a7 01       	movw	r20, r14
   11464:	96 01       	movw	r18, r12
   11466:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1146a:	23 30       	cpi	r18, 0x03	; 3
   1146c:	31 05       	cpc	r19, r1
   1146e:	41 05       	cpc	r20, r1
   11470:	51 05       	cpc	r21, r1
   11472:	39 f4       	brne	.+14     	; 0x11482 <_ZL13lcd_main_menuv+0x30e>
   11474:	20 e2       	ldi	r18, 0x20	; 32
   11476:	4e e3       	ldi	r20, 0x3E	; 62
   11478:	68 e5       	ldi	r22, 0x58	; 88
   1147a:	72 e1       	ldi	r23, 0x12	; 18
   1147c:	88 2d       	mov	r24, r8
   1147e:	af d8       	rcall	.-3746   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11480:	06 c0       	rjmp	.+12     	; 0x1148e <_ZL13lcd_main_menuv+0x31a>
   11482:	20 e2       	ldi	r18, 0x20	; 32
   11484:	40 e2       	ldi	r20, 0x20	; 32
   11486:	68 e5       	ldi	r22, 0x58	; 88
   11488:	72 e1       	ldi	r23, 0x12	; 18
   1148a:	88 2d       	mov	r24, r8
   1148c:	a8 d8       	rcall	.-3760   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1148e:	66 20       	and	r6, r6
   11490:	09 f4       	brne	.+2      	; 0x11494 <_ZL13lcd_main_menuv+0x320>
   11492:	7d c1       	rjmp	.+762    	; 0x1178e <_ZL13lcd_main_menuv+0x61a>
   11494:	60 91 f4 11 	lds	r22, 0x11F4
   11498:	70 91 f5 11 	lds	r23, 0x11F5
   1149c:	80 91 f6 11 	lds	r24, 0x11F6
   114a0:	90 91 f7 11 	lds	r25, 0x11F7
   114a4:	a7 01       	movw	r20, r14
   114a6:	96 01       	movw	r18, r12
   114a8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   114ac:	23 30       	cpi	r18, 0x03	; 3
   114ae:	31 05       	cpc	r19, r1
   114b0:	41 05       	cpc	r20, r1
   114b2:	51 05       	cpc	r21, r1
   114b4:	09 f0       	breq	.+2      	; 0x114b8 <_ZL13lcd_main_menuv+0x344>
   114b6:	6b c1       	rjmp	.+726    	; 0x1178e <_ZL13lcd_main_menuv+0x61a>
   114b8:	e0 d8       	rcall	.-3648   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   114ba:	84 e3       	ldi	r24, 0x34	; 52
   114bc:	92 e9       	ldi	r25, 0x92	; 146
   114be:	8c d8       	rcall	.-3816   	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   114c0:	6e c1       	rjmp	.+732    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   114c2:	13 30       	cpi	r17, 0x03	; 3
   114c4:	09 f0       	breq	.+2      	; 0x114c8 <_ZL13lcd_main_menuv+0x354>
   114c6:	3c c0       	rjmp	.+120    	; 0x11540 <_ZL13lcd_main_menuv+0x3cc>
   114c8:	80 91 64 02 	lds	r24, 0x0264
   114cc:	88 23       	and	r24, r24
   114ce:	f1 f0       	breq	.+60     	; 0x1150c <_ZL13lcd_main_menuv+0x398>
   114d0:	60 91 f4 11 	lds	r22, 0x11F4
   114d4:	70 91 f5 11 	lds	r23, 0x11F5
   114d8:	80 91 f6 11 	lds	r24, 0x11F6
   114dc:	90 91 f7 11 	lds	r25, 0x11F7
   114e0:	a7 01       	movw	r20, r14
   114e2:	96 01       	movw	r18, r12
   114e4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   114e8:	23 30       	cpi	r18, 0x03	; 3
   114ea:	31 05       	cpc	r19, r1
   114ec:	41 05       	cpc	r20, r1
   114ee:	51 05       	cpc	r21, r1
   114f0:	39 f4       	brne	.+14     	; 0x11500 <_ZL13lcd_main_menuv+0x38c>
   114f2:	20 e2       	ldi	r18, 0x20	; 32
   114f4:	4e e3       	ldi	r20, 0x3E	; 62
   114f6:	64 e6       	ldi	r22, 0x64	; 100
   114f8:	72 e1       	ldi	r23, 0x12	; 18
   114fa:	88 2d       	mov	r24, r8
   114fc:	70 d8       	rcall	.-3872   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   114fe:	06 c0       	rjmp	.+12     	; 0x1150c <_ZL13lcd_main_menuv+0x398>
   11500:	20 e2       	ldi	r18, 0x20	; 32
   11502:	40 e2       	ldi	r20, 0x20	; 32
   11504:	64 e6       	ldi	r22, 0x64	; 100
   11506:	72 e1       	ldi	r23, 0x12	; 18
   11508:	88 2d       	mov	r24, r8
   1150a:	69 d8       	rcall	.-3886   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1150c:	66 20       	and	r6, r6
   1150e:	09 f4       	brne	.+2      	; 0x11512 <_ZL13lcd_main_menuv+0x39e>
   11510:	3e c1       	rjmp	.+636    	; 0x1178e <_ZL13lcd_main_menuv+0x61a>
   11512:	60 91 f4 11 	lds	r22, 0x11F4
   11516:	70 91 f5 11 	lds	r23, 0x11F5
   1151a:	80 91 f6 11 	lds	r24, 0x11F6
   1151e:	90 91 f7 11 	lds	r25, 0x11F7
   11522:	a7 01       	movw	r20, r14
   11524:	96 01       	movw	r18, r12
   11526:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1152a:	23 30       	cpi	r18, 0x03	; 3
   1152c:	31 05       	cpc	r19, r1
   1152e:	41 05       	cpc	r20, r1
   11530:	51 05       	cpc	r21, r1
   11532:	09 f0       	breq	.+2      	; 0x11536 <_ZL13lcd_main_menuv+0x3c2>
   11534:	2c c1       	rjmp	.+600    	; 0x1178e <_ZL13lcd_main_menuv+0x61a>
   11536:	a1 d8       	rcall	.-3774   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11538:	80 e3       	ldi	r24, 0x30	; 48
   1153a:	92 e9       	ldi	r25, 0x92	; 146
   1153c:	4d d8       	rcall	.-3942   	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   1153e:	2f c1       	rjmp	.+606    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   11540:	14 30       	cpi	r17, 0x04	; 4
   11542:	09 f0       	breq	.+2      	; 0x11546 <_ZL13lcd_main_menuv+0x3d2>
   11544:	bf c0       	rjmp	.+382    	; 0x116c4 <_ZL13lcd_main_menuv+0x550>
   11546:	80 91 64 02 	lds	r24, 0x0264
   1154a:	88 23       	and	r24, r24
   1154c:	f1 f0       	breq	.+60     	; 0x1158a <_ZL13lcd_main_menuv+0x416>
   1154e:	60 91 f4 11 	lds	r22, 0x11F4
   11552:	70 91 f5 11 	lds	r23, 0x11F5
   11556:	80 91 f6 11 	lds	r24, 0x11F6
   1155a:	90 91 f7 11 	lds	r25, 0x11F7
   1155e:	a7 01       	movw	r20, r14
   11560:	96 01       	movw	r18, r12
   11562:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11566:	24 30       	cpi	r18, 0x04	; 4
   11568:	31 05       	cpc	r19, r1
   1156a:	41 05       	cpc	r20, r1
   1156c:	51 05       	cpc	r21, r1
   1156e:	39 f4       	brne	.+14     	; 0x1157e <_ZL13lcd_main_menuv+0x40a>
   11570:	20 e2       	ldi	r18, 0x20	; 32
   11572:	4e e3       	ldi	r20, 0x3E	; 62
   11574:	61 e7       	ldi	r22, 0x71	; 113
   11576:	72 e1       	ldi	r23, 0x12	; 18
   11578:	88 2d       	mov	r24, r8
   1157a:	31 d8       	rcall	.-3998   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1157c:	06 c0       	rjmp	.+12     	; 0x1158a <_ZL13lcd_main_menuv+0x416>
   1157e:	20 e2       	ldi	r18, 0x20	; 32
   11580:	40 e2       	ldi	r20, 0x20	; 32
   11582:	61 e7       	ldi	r22, 0x71	; 113
   11584:	72 e1       	ldi	r23, 0x12	; 18
   11586:	88 2d       	mov	r24, r8
   11588:	2a d8       	rcall	.-4012   	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1158a:	66 20       	and	r6, r6
   1158c:	09 f4       	brne	.+2      	; 0x11590 <_ZL13lcd_main_menuv+0x41c>
   1158e:	9c c0       	rjmp	.+312    	; 0x116c8 <_ZL13lcd_main_menuv+0x554>
   11590:	60 91 f4 11 	lds	r22, 0x11F4
   11594:	70 91 f5 11 	lds	r23, 0x11F5
   11598:	80 91 f6 11 	lds	r24, 0x11F6
   1159c:	90 91 f7 11 	lds	r25, 0x11F7
   115a0:	a7 01       	movw	r20, r14
   115a2:	96 01       	movw	r18, r12
   115a4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   115a8:	24 30       	cpi	r18, 0x04	; 4
   115aa:	31 05       	cpc	r19, r1
   115ac:	41 05       	cpc	r20, r1
   115ae:	51 05       	cpc	r21, r1
   115b0:	09 f0       	breq	.+2      	; 0x115b4 <_ZL13lcd_main_menuv+0x440>
   115b2:	8c c0       	rjmp	.+280    	; 0x116cc <_ZL13lcd_main_menuv+0x558>
   115b4:	62 d8       	rcall	.-3900   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   115b6:	87 ef       	ldi	r24, 0xF7	; 247
   115b8:	91 e9       	ldi	r25, 0x91	; 145
   115ba:	0e d8       	rcall	.-4068   	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   115bc:	f0 c0       	rjmp	.+480    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   115be:	13 30       	cpi	r17, 0x03	; 3
   115c0:	09 f0       	breq	.+2      	; 0x115c4 <_ZL13lcd_main_menuv+0x450>
   115c2:	86 c0       	rjmp	.+268    	; 0x116d0 <_ZL13lcd_main_menuv+0x55c>
   115c4:	80 91 64 02 	lds	r24, 0x0264
   115c8:	88 23       	and	r24, r24
   115ca:	01 f1       	breq	.+64     	; 0x1160c <_ZL13lcd_main_menuv+0x498>
   115cc:	60 91 f4 11 	lds	r22, 0x11F4
   115d0:	70 91 f5 11 	lds	r23, 0x11F5
   115d4:	80 91 f6 11 	lds	r24, 0x11F6
   115d8:	90 91 f7 11 	lds	r25, 0x11F7
   115dc:	a7 01       	movw	r20, r14
   115de:	96 01       	movw	r18, r12
   115e0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   115e4:	23 30       	cpi	r18, 0x03	; 3
   115e6:	31 05       	cpc	r19, r1
   115e8:	41 05       	cpc	r20, r1
   115ea:	51 05       	cpc	r21, r1
   115ec:	41 f4       	brne	.+16     	; 0x115fe <_ZL13lcd_main_menuv+0x48a>
   115ee:	2e e7       	ldi	r18, 0x7E	; 126
   115f0:	4e e3       	ldi	r20, 0x3E	; 62
   115f2:	6c e7       	ldi	r22, 0x7C	; 124
   115f4:	72 e1       	ldi	r23, 0x12	; 18
   115f6:	88 2d       	mov	r24, r8
   115f8:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   115fc:	07 c0       	rjmp	.+14     	; 0x1160c <_ZL13lcd_main_menuv+0x498>
   115fe:	2e e7       	ldi	r18, 0x7E	; 126
   11600:	40 e2       	ldi	r20, 0x20	; 32
   11602:	6c e7       	ldi	r22, 0x7C	; 124
   11604:	72 e1       	ldi	r23, 0x12	; 18
   11606:	88 2d       	mov	r24, r8
   11608:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1160c:	66 20       	and	r6, r6
   1160e:	09 f4       	brne	.+2      	; 0x11612 <_ZL13lcd_main_menuv+0x49e>
   11610:	61 c0       	rjmp	.+194    	; 0x116d4 <_ZL13lcd_main_menuv+0x560>
   11612:	60 91 f4 11 	lds	r22, 0x11F4
   11616:	70 91 f5 11 	lds	r23, 0x11F5
   1161a:	80 91 f6 11 	lds	r24, 0x11F6
   1161e:	90 91 f7 11 	lds	r25, 0x11F7
   11622:	a7 01       	movw	r20, r14
   11624:	96 01       	movw	r18, r12
   11626:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1162a:	23 30       	cpi	r18, 0x03	; 3
   1162c:	31 05       	cpc	r19, r1
   1162e:	41 05       	cpc	r20, r1
   11630:	51 05       	cpc	r21, r1
   11632:	09 f0       	breq	.+2      	; 0x11636 <_ZL13lcd_main_menuv+0x4c2>
   11634:	51 c0       	rjmp	.+162    	; 0x116d8 <_ZL13lcd_main_menuv+0x564>
   11636:	21 d8       	rcall	.-4030   	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11638:	80 ee       	ldi	r24, 0xE0	; 224
   1163a:	9b e8       	ldi	r25, 0x8B	; 139
   1163c:	0e 94 df 82 	call	0x105be	; 0x105be <_ZL19menu_action_submenuPFvvE>
   11640:	ae c0       	rjmp	.+348    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   11642:	13 30       	cpi	r17, 0x03	; 3
   11644:	09 f0       	breq	.+2      	; 0x11648 <_ZL13lcd_main_menuv+0x4d4>
   11646:	4a c0       	rjmp	.+148    	; 0x116dc <_ZL13lcd_main_menuv+0x568>
   11648:	80 91 64 02 	lds	r24, 0x0264
   1164c:	88 23       	and	r24, r24
   1164e:	01 f1       	breq	.+64     	; 0x11690 <_ZL13lcd_main_menuv+0x51c>
   11650:	60 91 f4 11 	lds	r22, 0x11F4
   11654:	70 91 f5 11 	lds	r23, 0x11F5
   11658:	80 91 f6 11 	lds	r24, 0x11F6
   1165c:	90 91 f7 11 	lds	r25, 0x11F7
   11660:	a7 01       	movw	r20, r14
   11662:	96 01       	movw	r18, r12
   11664:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11668:	23 30       	cpi	r18, 0x03	; 3
   1166a:	31 05       	cpc	r19, r1
   1166c:	41 05       	cpc	r20, r1
   1166e:	51 05       	cpc	r21, r1
   11670:	41 f4       	brne	.+16     	; 0x11682 <_ZL13lcd_main_menuv+0x50e>
   11672:	2e e7       	ldi	r18, 0x7E	; 126
   11674:	4e e3       	ldi	r20, 0x3E	; 62
   11676:	6a e8       	ldi	r22, 0x8A	; 138
   11678:	72 e1       	ldi	r23, 0x12	; 18
   1167a:	88 2d       	mov	r24, r8
   1167c:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11680:	07 c0       	rjmp	.+14     	; 0x11690 <_ZL13lcd_main_menuv+0x51c>
   11682:	2e e7       	ldi	r18, 0x7E	; 126
   11684:	40 e2       	ldi	r20, 0x20	; 32
   11686:	6a e8       	ldi	r22, 0x8A	; 138
   11688:	72 e1       	ldi	r23, 0x12	; 18
   1168a:	88 2d       	mov	r24, r8
   1168c:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11690:	66 20       	and	r6, r6
   11692:	31 f1       	breq	.+76     	; 0x116e0 <_ZL13lcd_main_menuv+0x56c>
   11694:	60 91 f4 11 	lds	r22, 0x11F4
   11698:	70 91 f5 11 	lds	r23, 0x11F5
   1169c:	80 91 f6 11 	lds	r24, 0x11F6
   116a0:	90 91 f7 11 	lds	r25, 0x11F7
   116a4:	a7 01       	movw	r20, r14
   116a6:	96 01       	movw	r18, r12
   116a8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   116ac:	23 30       	cpi	r18, 0x03	; 3
   116ae:	31 05       	cpc	r19, r1
   116b0:	41 05       	cpc	r20, r1
   116b2:	51 05       	cpc	r21, r1
   116b4:	b9 f4       	brne	.+46     	; 0x116e4 <_ZL13lcd_main_menuv+0x570>
   116b6:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   116ba:	80 ee       	ldi	r24, 0xE0	; 224
   116bc:	9b e8       	ldi	r25, 0x8B	; 139
   116be:	0e 94 df 82 	call	0x105be	; 0x105be <_ZL19menu_action_submenuPFvvE>
   116c2:	6d c0       	rjmp	.+218    	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   116c4:	72 2c       	mov	r7, r2
   116c6:	0f c0       	rjmp	.+30     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116c8:	72 2c       	mov	r7, r2
   116ca:	0d c0       	rjmp	.+26     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116cc:	72 2c       	mov	r7, r2
   116ce:	0b c0       	rjmp	.+22     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116d0:	75 2c       	mov	r7, r5
   116d2:	09 c0       	rjmp	.+18     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116d4:	75 2c       	mov	r7, r5
   116d6:	07 c0       	rjmp	.+14     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116d8:	75 2c       	mov	r7, r5
   116da:	05 c0       	rjmp	.+10     	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116dc:	75 2c       	mov	r7, r5
   116de:	03 c0       	rjmp	.+6      	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116e0:	75 2c       	mov	r7, r5
   116e2:	01 c0       	rjmp	.+2      	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   116e4:	75 2c       	mov	r7, r5
   116e6:	60 91 f4 11 	lds	r22, 0x11F4
   116ea:	70 91 f5 11 	lds	r23, 0x11F5
   116ee:	80 91 f6 11 	lds	r24, 0x11F6
   116f2:	90 91 f7 11 	lds	r25, 0x11F7
   116f6:	a7 01       	movw	r20, r14
   116f8:	96 01       	movw	r18, r12
   116fa:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   116fe:	87 2d       	mov	r24, r7
   11700:	90 e0       	ldi	r25, 0x00	; 0
   11702:	a0 e0       	ldi	r26, 0x00	; 0
   11704:	b0 e0       	ldi	r27, 0x00	; 0
   11706:	28 17       	cp	r18, r24
   11708:	39 07       	cpc	r19, r25
   1170a:	4a 07       	cpc	r20, r26
   1170c:	5b 07       	cpc	r21, r27
   1170e:	b0 f0       	brcs	.+44     	; 0x1173c <_ZL13lcd_main_menuv+0x5c8>
   11710:	87 2d       	mov	r24, r7
   11712:	90 e0       	ldi	r25, 0x00	; 0
   11714:	9c 01       	movw	r18, r24
   11716:	22 0f       	add	r18, r18
   11718:	33 1f       	adc	r19, r19
   1171a:	22 0f       	add	r18, r18
   1171c:	33 1f       	adc	r19, r19
   1171e:	82 0f       	add	r24, r18
   11720:	93 1f       	adc	r25, r19
   11722:	01 97       	sbiw	r24, 0x01	; 1
   11724:	aa 27       	eor	r26, r26
   11726:	97 fd       	sbrc	r25, 7
   11728:	a0 95       	com	r26
   1172a:	ba 2f       	mov	r27, r26
   1172c:	80 93 f4 11 	sts	0x11F4, r24
   11730:	90 93 f5 11 	sts	0x11F5, r25
   11734:	a0 93 f6 11 	sts	0x11F6, r26
   11738:	b0 93 f7 11 	sts	0x11F7, r27
   1173c:	60 91 f4 11 	lds	r22, 0x11F4
   11740:	70 91 f5 11 	lds	r23, 0x11F5
   11744:	80 91 f6 11 	lds	r24, 0x11F6
   11748:	90 91 f7 11 	lds	r25, 0x11F7
   1174c:	a7 01       	movw	r20, r14
   1174e:	96 01       	movw	r18, r12
   11750:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11754:	42 2f       	mov	r20, r18
   11756:	50 e0       	ldi	r21, 0x00	; 0
   11758:	80 91 fd 11 	lds	r24, 0x11FD
   1175c:	90 e0       	ldi	r25, 0x00	; 0
   1175e:	04 96       	adiw	r24, 0x04	; 4
   11760:	48 17       	cp	r20, r24
   11762:	59 07       	cpc	r21, r25
   11764:	44 f0       	brlt	.+16     	; 0x11776 <_ZL13lcd_main_menuv+0x602>
   11766:	12 2f       	mov	r17, r18
   11768:	13 50       	subi	r17, 0x03	; 3
   1176a:	10 93 fd 11 	sts	0x11FD, r17
   1176e:	30 92 64 02 	sts	0x0264, r3
   11772:	84 2c       	mov	r8, r4
   11774:	5f cd       	rjmp	.-1346   	; 0x11234 <_ZL13lcd_main_menuv+0xc0>
   11776:	83 94       	inc	r8
   11778:	1f 5f       	subi	r17, 0xFF	; 255
   1177a:	f3 e0       	ldi	r31, 0x03	; 3
   1177c:	f8 15       	cp	r31, r8
   1177e:	08 f0       	brcs	.+2      	; 0x11782 <_ZL13lcd_main_menuv+0x60e>
   11780:	59 cd       	rjmp	.-1358   	; 0x11234 <_ZL13lcd_main_menuv+0xc0>
   11782:	0d c0       	rjmp	.+26     	; 0x1179e <_ZL13lcd_main_menuv+0x62a>
   11784:	88 81       	ld	r24, Y
   11786:	81 11       	cpse	r24, r1
   11788:	04 c0       	rjmp	.+8      	; 0x11792 <_ZL13lcd_main_menuv+0x61e>
   1178a:	75 2c       	mov	r7, r5
   1178c:	ac cf       	rjmp	.-168    	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   1178e:	72 2c       	mov	r7, r2
   11790:	aa cf       	rjmp	.-172    	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   11792:	f5 01       	movw	r30, r10
   11794:	80 81       	ld	r24, Z
   11796:	81 11       	cpse	r24, r1
   11798:	4f ce       	rjmp	.-866    	; 0x11438 <_ZL13lcd_main_menuv+0x2c4>
   1179a:	75 2c       	mov	r7, r5
   1179c:	a4 cf       	rjmp	.-184    	; 0x116e6 <_ZL13lcd_main_menuv+0x572>
   1179e:	df 91       	pop	r29
   117a0:	cf 91       	pop	r28
   117a2:	1f 91       	pop	r17
   117a4:	ff 90       	pop	r15
   117a6:	ef 90       	pop	r14
   117a8:	df 90       	pop	r13
   117aa:	cf 90       	pop	r12
   117ac:	bf 90       	pop	r11
   117ae:	af 90       	pop	r10
   117b0:	8f 90       	pop	r8
   117b2:	7f 90       	pop	r7
   117b4:	6f 90       	pop	r6
   117b6:	5f 90       	pop	r5
   117b8:	4f 90       	pop	r4
   117ba:	3f 90       	pop	r3
   117bc:	2f 90       	pop	r2
   117be:	08 95       	ret

000117c0 <_ZL15lcd_sdcard_menuv>:
   117c0:	2f 92       	push	r2
   117c2:	3f 92       	push	r3
   117c4:	4f 92       	push	r4
   117c6:	5f 92       	push	r5
   117c8:	6f 92       	push	r6
   117ca:	7f 92       	push	r7
   117cc:	8f 92       	push	r8
   117ce:	9f 92       	push	r9
   117d0:	af 92       	push	r10
   117d2:	bf 92       	push	r11
   117d4:	cf 92       	push	r12
   117d6:	df 92       	push	r13
   117d8:	ef 92       	push	r14
   117da:	ff 92       	push	r15
   117dc:	0f 93       	push	r16
   117de:	1f 93       	push	r17
   117e0:	cf 93       	push	r28
   117e2:	df 93       	push	r29
   117e4:	cd b7       	in	r28, 0x3d	; 61
   117e6:	de b7       	in	r29, 0x3e	; 62
   117e8:	a3 97       	sbiw	r28, 0x23	; 35
   117ea:	0f b6       	in	r0, 0x3f	; 63
   117ec:	f8 94       	cli
   117ee:	de bf       	out	0x3e, r29	; 62
   117f0:	0f be       	out	0x3f, r0	; 63
   117f2:	cd bf       	out	0x3d, r28	; 61
   117f4:	80 91 64 02 	lds	r24, 0x0264
   117f8:	81 11       	cpse	r24, r1
   117fa:	b8 c2       	rjmp	.+1392   	; 0x11d6c <_ZL15lcd_sdcard_menuv+0x5ac>
   117fc:	80 91 fe 11 	lds	r24, 0x11FE
   11800:	82 ff       	sbrs	r24, 2
   11802:	e0 c2       	rjmp	.+1472   	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   11804:	b3 c2       	rjmp	.+1382   	; 0x11d6c <_ZL15lcd_sdcard_menuv+0x5ac>
   11806:	10 92 f4 11 	sts	0x11F4, r1
   1180a:	10 92 f5 11 	sts	0x11F5, r1
   1180e:	10 92 f6 11 	sts	0x11F6, r1
   11812:	10 92 f7 11 	sts	0x11F7, r1
   11816:	60 91 f4 11 	lds	r22, 0x11F4
   1181a:	70 91 f5 11 	lds	r23, 0x11F5
   1181e:	80 91 f6 11 	lds	r24, 0x11F6
   11822:	90 91 f7 11 	lds	r25, 0x11F7
   11826:	25 e0       	ldi	r18, 0x05	; 5
   11828:	30 e0       	ldi	r19, 0x00	; 0
   1182a:	40 e0       	ldi	r20, 0x00	; 0
   1182c:	50 e0       	ldi	r21, 0x00	; 0
   1182e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11832:	80 91 fd 11 	lds	r24, 0x11FD
   11836:	90 e0       	ldi	r25, 0x00	; 0
   11838:	a0 e0       	ldi	r26, 0x00	; 0
   1183a:	b0 e0       	ldi	r27, 0x00	; 0
   1183c:	28 17       	cp	r18, r24
   1183e:	39 07       	cpc	r19, r25
   11840:	4a 07       	cpc	r20, r26
   11842:	5b 07       	cpc	r21, r27
   11844:	10 f4       	brcc	.+4      	; 0x1184a <_ZL15lcd_sdcard_menuv+0x8a>
   11846:	20 93 fd 11 	sts	0x11FD, r18
   1184a:	90 90 fd 11 	lds	r9, 0x11FD
   1184e:	80 91 fe 11 	lds	r24, 0x11FE
   11852:	82 fb       	bst	r24, 2
   11854:	88 27       	eor	r24, r24
   11856:	80 f9       	bld	r24, 0
   11858:	8b a3       	std	Y+35, r24	; 0x23
   1185a:	61 2c       	mov	r6, r1
   1185c:	0f 2e       	mov	r0, r31
   1185e:	f5 e0       	ldi	r31, 0x05	; 5
   11860:	cf 2e       	mov	r12, r31
   11862:	d1 2c       	mov	r13, r1
   11864:	e1 2c       	mov	r14, r1
   11866:	f1 2c       	mov	r15, r1
   11868:	f0 2d       	mov	r31, r0
   1186a:	91 10       	cpse	r9, r1
   1186c:	35 c0       	rjmp	.+106    	; 0x118d8 <_ZL15lcd_sdcard_menuv+0x118>
   1186e:	80 91 64 02 	lds	r24, 0x0264
   11872:	88 23       	and	r24, r24
   11874:	d9 f0       	breq	.+54     	; 0x118ac <_ZL15lcd_sdcard_menuv+0xec>
   11876:	80 91 f4 11 	lds	r24, 0x11F4
   1187a:	90 91 f5 11 	lds	r25, 0x11F5
   1187e:	a0 91 f6 11 	lds	r26, 0x11F6
   11882:	b0 91 f7 11 	lds	r27, 0x11F7
   11886:	05 97       	sbiw	r24, 0x05	; 5
   11888:	a1 05       	cpc	r26, r1
   1188a:	b1 05       	cpc	r27, r1
   1188c:	40 f4       	brcc	.+16     	; 0x1189e <_ZL15lcd_sdcard_menuv+0xde>
   1188e:	23 e0       	ldi	r18, 0x03	; 3
   11890:	43 e0       	ldi	r20, 0x03	; 3
   11892:	62 e9       	ldi	r22, 0x92	; 146
   11894:	72 e1       	ldi	r23, 0x12	; 18
   11896:	86 2d       	mov	r24, r6
   11898:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1189c:	07 c0       	rjmp	.+14     	; 0x118ac <_ZL15lcd_sdcard_menuv+0xec>
   1189e:	23 e0       	ldi	r18, 0x03	; 3
   118a0:	40 e2       	ldi	r20, 0x20	; 32
   118a2:	62 e9       	ldi	r22, 0x92	; 146
   118a4:	72 e1       	ldi	r23, 0x12	; 18
   118a6:	86 2d       	mov	r24, r6
   118a8:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   118ac:	2b a1       	ldd	r18, Y+35	; 0x23
   118ae:	22 23       	and	r18, r18
   118b0:	99 f0       	breq	.+38     	; 0x118d8 <_ZL15lcd_sdcard_menuv+0x118>
   118b2:	80 91 f4 11 	lds	r24, 0x11F4
   118b6:	90 91 f5 11 	lds	r25, 0x11F5
   118ba:	a0 91 f6 11 	lds	r26, 0x11F6
   118be:	b0 91 f7 11 	lds	r27, 0x11F7
   118c2:	05 97       	sbiw	r24, 0x05	; 5
   118c4:	a1 05       	cpc	r26, r1
   118c6:	b1 05       	cpc	r27, r1
   118c8:	38 f4       	brcc	.+14     	; 0x118d8 <_ZL15lcd_sdcard_menuv+0x118>
   118ca:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   118ce:	8a eb       	ldi	r24, 0xBA	; 186
   118d0:	98 e8       	ldi	r25, 0x88	; 136
   118d2:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   118d6:	76 c2       	rjmp	.+1260   	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   118d8:	66 e9       	ldi	r22, 0x96	; 150
   118da:	75 e0       	ldi	r23, 0x05	; 5
   118dc:	86 ee       	ldi	r24, 0xE6	; 230
   118de:	95 e0       	ldi	r25, 0x05	; 5
   118e0:	0e 94 33 5b 	call	0xb666	; 0xb666 <_ZN10SdBaseFile11getFilenameEPc>
   118e4:	80 91 96 05 	lds	r24, 0x0596
   118e8:	8f 32       	cpi	r24, 0x2F	; 47
   118ea:	71 f1       	breq	.+92     	; 0x11948 <_ZL15lcd_sdcard_menuv+0x188>
   118ec:	31 e0       	ldi	r19, 0x01	; 1
   118ee:	93 12       	cpse	r9, r19
   118f0:	2e c0       	rjmp	.+92     	; 0x1194e <_ZL15lcd_sdcard_menuv+0x18e>
   118f2:	80 91 64 02 	lds	r24, 0x0264
   118f6:	88 23       	and	r24, r24
   118f8:	01 f1       	breq	.+64     	; 0x1193a <_ZL15lcd_sdcard_menuv+0x17a>
   118fa:	60 91 f4 11 	lds	r22, 0x11F4
   118fe:	70 91 f5 11 	lds	r23, 0x11F5
   11902:	80 91 f6 11 	lds	r24, 0x11F6
   11906:	90 91 f7 11 	lds	r25, 0x11F7
   1190a:	a7 01       	movw	r20, r14
   1190c:	96 01       	movw	r18, r12
   1190e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11912:	21 30       	cpi	r18, 0x01	; 1
   11914:	31 05       	cpc	r19, r1
   11916:	41 05       	cpc	r20, r1
   11918:	51 05       	cpc	r21, r1
   1191a:	41 f4       	brne	.+16     	; 0x1192c <_ZL15lcd_sdcard_menuv+0x16c>
   1191c:	20 e2       	ldi	r18, 0x20	; 32
   1191e:	4e e3       	ldi	r20, 0x3E	; 62
   11920:	67 e9       	ldi	r22, 0x97	; 151
   11922:	72 e1       	ldi	r23, 0x12	; 18
   11924:	86 2d       	mov	r24, r6
   11926:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1192a:	07 c0       	rjmp	.+14     	; 0x1193a <_ZL15lcd_sdcard_menuv+0x17a>
   1192c:	20 e2       	ldi	r18, 0x20	; 32
   1192e:	40 e2       	ldi	r20, 0x20	; 32
   11930:	67 e9       	ldi	r22, 0x97	; 151
   11932:	72 e1       	ldi	r23, 0x12	; 18
   11934:	86 2d       	mov	r24, r6
   11936:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1193a:	8b a1       	ldd	r24, Y+35	; 0x23
   1193c:	81 11       	cpse	r24, r1
   1193e:	12 c0       	rjmp	.+36     	; 0x11964 <_ZL15lcd_sdcard_menuv+0x1a4>
   11940:	68 94       	set
   11942:	bb 24       	eor	r11, r11
   11944:	b1 f8       	bld	r11, 1
   11946:	0a c0       	rjmp	.+20     	; 0x1195c <_ZL15lcd_sdcard_menuv+0x19c>
   11948:	bb 24       	eor	r11, r11
   1194a:	b3 94       	inc	r11
   1194c:	07 c0       	rjmp	.+14     	; 0x1195c <_ZL15lcd_sdcard_menuv+0x19c>
   1194e:	68 94       	set
   11950:	bb 24       	eor	r11, r11
   11952:	b1 f8       	bld	r11, 1
   11954:	03 c0       	rjmp	.+6      	; 0x1195c <_ZL15lcd_sdcard_menuv+0x19c>
   11956:	68 94       	set
   11958:	bb 24       	eor	r11, r11
   1195a:	b1 f8       	bld	r11, 1
   1195c:	21 14       	cp	r2, r1
   1195e:	31 04       	cpc	r3, r1
   11960:	c9 f4       	brne	.+50     	; 0x11994 <_ZL15lcd_sdcard_menuv+0x1d4>
   11962:	b1 c1       	rjmp	.+866    	; 0x11cc6 <_ZL15lcd_sdcard_menuv+0x506>
   11964:	60 91 f4 11 	lds	r22, 0x11F4
   11968:	70 91 f5 11 	lds	r23, 0x11F5
   1196c:	80 91 f6 11 	lds	r24, 0x11F6
   11970:	90 91 f7 11 	lds	r25, 0x11F7
   11974:	a7 01       	movw	r20, r14
   11976:	96 01       	movw	r18, r12
   11978:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1197c:	21 30       	cpi	r18, 0x01	; 1
   1197e:	31 05       	cpc	r19, r1
   11980:	41 05       	cpc	r20, r1
   11982:	51 05       	cpc	r21, r1
   11984:	41 f7       	brne	.-48     	; 0x11956 <_ZL15lcd_sdcard_menuv+0x196>
   11986:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1198a:	80 ef       	ldi	r24, 0xF0	; 240
   1198c:	91 e9       	ldi	r25, 0x91	; 145
   1198e:	0e 94 ec 82 	call	0x105d8	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   11992:	18 c2       	rjmp	.+1072   	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   11994:	00 e0       	ldi	r16, 0x00	; 0
   11996:	10 e0       	ldi	r17, 0x00	; 0
   11998:	89 2c       	mov	r8, r9
   1199a:	83 94       	inc	r8
   1199c:	89 2d       	mov	r24, r9
   1199e:	90 e0       	ldi	r25, 0x00	; 0
   119a0:	a0 e0       	ldi	r26, 0x00	; 0
   119a2:	b0 e0       	ldi	r27, 0x00	; 0
   119a4:	8f 8f       	std	Y+31, r24	; 0x1f
   119a6:	98 a3       	std	Y+32, r25	; 0x20
   119a8:	a9 a3       	std	Y+33, r26	; 0x21
   119aa:	ba a3       	std	Y+34, r27	; 0x22
   119ac:	0f 2e       	mov	r0, r31
   119ae:	f6 e9       	ldi	r31, 0x96	; 150
   119b0:	4f 2e       	mov	r4, r31
   119b2:	f5 e0       	ldi	r31, 0x05	; 5
   119b4:	5f 2e       	mov	r5, r31
   119b6:	f0 2d       	mov	r31, r0
   119b8:	b9 10       	cpse	r11, r9
   119ba:	7e c1       	rjmp	.+764    	; 0x11cb8 <_ZL15lcd_sdcard_menuv+0x4f8>
   119bc:	60 2f       	mov	r22, r16
   119be:	82 e9       	ldi	r24, 0x92	; 146
   119c0:	95 e0       	ldi	r25, 0x05	; 5
   119c2:	0e 94 24 19 	call	0x3248	; 0x3248 <_ZN10CardReader11getfilenameEh>
   119c6:	ae eb       	ldi	r26, 0xBE	; 190
   119c8:	b5 e0       	ldi	r27, 0x05	; 5
   119ca:	8c 91       	ld	r24, X
   119cc:	88 23       	and	r24, r24
   119ce:	09 f4       	brne	.+2      	; 0x119d2 <_ZL15lcd_sdcard_menuv+0x212>
   119d0:	af c0       	rjmp	.+350    	; 0x11b30 <_ZL15lcd_sdcard_menuv+0x370>
   119d2:	80 91 64 02 	lds	r24, 0x0264
   119d6:	88 23       	and	r24, r24
   119d8:	09 f4       	brne	.+2      	; 0x119dc <_ZL15lcd_sdcard_menuv+0x21c>
   119da:	7f c0       	rjmp	.+254    	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   119dc:	60 91 f4 11 	lds	r22, 0x11F4
   119e0:	70 91 f5 11 	lds	r23, 0x11F5
   119e4:	80 91 f6 11 	lds	r24, 0x11F6
   119e8:	90 91 f7 11 	lds	r25, 0x11F7
   119ec:	a7 01       	movw	r20, r14
   119ee:	96 01       	movw	r18, r12
   119f0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   119f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
   119f6:	98 a1       	ldd	r25, Y+32	; 0x20
   119f8:	a9 a1       	ldd	r26, Y+33	; 0x21
   119fa:	ba a1       	ldd	r27, Y+34	; 0x22
   119fc:	28 17       	cp	r18, r24
   119fe:	39 07       	cpc	r19, r25
   11a00:	4a 07       	cpc	r20, r26
   11a02:	5b 07       	cpc	r21, r27
   11a04:	b1 f5       	brne	.+108    	; 0x11a72 <_ZL15lcd_sdcard_menuv+0x2b2>
   11a06:	46 2d       	mov	r20, r6
   11a08:	60 e0       	ldi	r22, 0x00	; 0
   11a0a:	8f ef       	ldi	r24, 0xFF	; 255
   11a0c:	91 e1       	ldi	r25, 0x11	; 17
   11a0e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   11a12:	6e e3       	ldi	r22, 0x3E	; 62
   11a14:	8f ef       	ldi	r24, 0xFF	; 255
   11a16:	91 e1       	ldi	r25, 0x11	; 17
   11a18:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11a1c:	65 e0       	ldi	r22, 0x05	; 5
   11a1e:	8f ef       	ldi	r24, 0xFF	; 255
   11a20:	91 e1       	ldi	r25, 0x11	; 17
   11a22:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11a26:	80 91 a3 05 	lds	r24, 0x05A3
   11a2a:	88 23       	and	r24, r24
   11a2c:	39 f0       	breq	.+14     	; 0x11a3c <_ZL15lcd_sdcard_menuv+0x27c>
   11a2e:	10 92 b5 05 	sts	0x05B5, r1
   11a32:	a3 ea       	ldi	r26, 0xA3	; 163
   11a34:	b5 e0       	ldi	r27, 0x05	; 5
   11a36:	9a 2f       	mov	r25, r26
   11a38:	8b 2f       	mov	r24, r27
   11a3a:	02 c0       	rjmp	.+4      	; 0x11a40 <_ZL15lcd_sdcard_menuv+0x280>
   11a3c:	94 2d       	mov	r25, r4
   11a3e:	85 2d       	mov	r24, r5
   11a40:	a9 2e       	mov	r10, r25
   11a42:	b8 2e       	mov	r11, r24
   11a44:	0f 2e       	mov	r0, r31
   11a46:	f2 e1       	ldi	r31, 0x12	; 18
   11a48:	7f 2e       	mov	r7, r31
   11a4a:	f0 2d       	mov	r31, r0
   11a4c:	f5 01       	movw	r30, r10
   11a4e:	61 91       	ld	r22, Z+
   11a50:	5f 01       	movw	r10, r30
   11a52:	66 23       	and	r22, r22
   11a54:	19 f0       	breq	.+6      	; 0x11a5c <_ZL15lcd_sdcard_menuv+0x29c>
   11a56:	71 10       	cpse	r7, r1
   11a58:	9d c1       	rjmp	.+826    	; 0x11d94 <_ZL15lcd_sdcard_menuv+0x5d4>
   11a5a:	3f c0       	rjmp	.+126    	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   11a5c:	77 20       	and	r7, r7
   11a5e:	09 f4       	brne	.+2      	; 0x11a62 <_ZL15lcd_sdcard_menuv+0x2a2>
   11a60:	3c c0       	rjmp	.+120    	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   11a62:	60 e2       	ldi	r22, 0x20	; 32
   11a64:	8f ef       	ldi	r24, 0xFF	; 255
   11a66:	91 e1       	ldi	r25, 0x11	; 17
   11a68:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11a6c:	7a 94       	dec	r7
   11a6e:	c9 f7       	brne	.-14     	; 0x11a62 <_ZL15lcd_sdcard_menuv+0x2a2>
   11a70:	34 c0       	rjmp	.+104    	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   11a72:	46 2d       	mov	r20, r6
   11a74:	60 e0       	ldi	r22, 0x00	; 0
   11a76:	8f ef       	ldi	r24, 0xFF	; 255
   11a78:	91 e1       	ldi	r25, 0x11	; 17
   11a7a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   11a7e:	60 e2       	ldi	r22, 0x20	; 32
   11a80:	8f ef       	ldi	r24, 0xFF	; 255
   11a82:	91 e1       	ldi	r25, 0x11	; 17
   11a84:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11a88:	65 e0       	ldi	r22, 0x05	; 5
   11a8a:	8f ef       	ldi	r24, 0xFF	; 255
   11a8c:	91 e1       	ldi	r25, 0x11	; 17
   11a8e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11a92:	80 91 a3 05 	lds	r24, 0x05A3
   11a96:	88 23       	and	r24, r24
   11a98:	39 f0       	breq	.+14     	; 0x11aa8 <_ZL15lcd_sdcard_menuv+0x2e8>
   11a9a:	10 92 b5 05 	sts	0x05B5, r1
   11a9e:	23 ea       	ldi	r18, 0xA3	; 163
   11aa0:	35 e0       	ldi	r19, 0x05	; 5
   11aa2:	92 2f       	mov	r25, r18
   11aa4:	83 2f       	mov	r24, r19
   11aa6:	02 c0       	rjmp	.+4      	; 0x11aac <_ZL15lcd_sdcard_menuv+0x2ec>
   11aa8:	94 2d       	mov	r25, r4
   11aaa:	85 2d       	mov	r24, r5
   11aac:	a9 2e       	mov	r10, r25
   11aae:	b8 2e       	mov	r11, r24
   11ab0:	0f 2e       	mov	r0, r31
   11ab2:	f2 e1       	ldi	r31, 0x12	; 18
   11ab4:	7f 2e       	mov	r7, r31
   11ab6:	f0 2d       	mov	r31, r0
   11ab8:	d5 01       	movw	r26, r10
   11aba:	6d 91       	ld	r22, X+
   11abc:	5d 01       	movw	r10, r26
   11abe:	66 23       	and	r22, r22
   11ac0:	19 f0       	breq	.+6      	; 0x11ac8 <_ZL15lcd_sdcard_menuv+0x308>
   11ac2:	71 10       	cpse	r7, r1
   11ac4:	6d c1       	rjmp	.+730    	; 0x11da0 <_ZL15lcd_sdcard_menuv+0x5e0>
   11ac6:	09 c0       	rjmp	.+18     	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   11ac8:	77 20       	and	r7, r7
   11aca:	39 f0       	breq	.+14     	; 0x11ada <_ZL15lcd_sdcard_menuv+0x31a>
   11acc:	60 e2       	ldi	r22, 0x20	; 32
   11ace:	8f ef       	ldi	r24, 0xFF	; 255
   11ad0:	91 e1       	ldi	r25, 0x11	; 17
   11ad2:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11ad6:	7a 94       	dec	r7
   11ad8:	c9 f7       	brne	.-14     	; 0x11acc <_ZL15lcd_sdcard_menuv+0x30c>
   11ada:	bb a1       	ldd	r27, Y+35	; 0x23
   11adc:	bb 23       	and	r27, r27
   11ade:	31 f1       	breq	.+76     	; 0x11b2c <_ZL15lcd_sdcard_menuv+0x36c>
   11ae0:	60 91 f4 11 	lds	r22, 0x11F4
   11ae4:	70 91 f5 11 	lds	r23, 0x11F5
   11ae8:	80 91 f6 11 	lds	r24, 0x11F6
   11aec:	90 91 f7 11 	lds	r25, 0x11F7
   11af0:	a7 01       	movw	r20, r14
   11af2:	96 01       	movw	r18, r12
   11af4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11afa:	98 a1       	ldd	r25, Y+32	; 0x20
   11afc:	a9 a1       	ldd	r26, Y+33	; 0x21
   11afe:	ba a1       	ldd	r27, Y+34	; 0x22
   11b00:	28 17       	cp	r18, r24
   11b02:	39 07       	cpc	r19, r25
   11b04:	4a 07       	cpc	r20, r26
   11b06:	5b 07       	cpc	r21, r27
   11b08:	89 f4       	brne	.+34     	; 0x11b2c <_ZL15lcd_sdcard_menuv+0x36c>
   11b0a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11b0e:	66 e9       	ldi	r22, 0x96	; 150
   11b10:	75 e0       	ldi	r23, 0x05	; 5
   11b12:	82 e9       	ldi	r24, 0x92	; 146
   11b14:	95 e0       	ldi	r25, 0x05	; 5
   11b16:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <_ZN10CardReader5chdirEPKc>
   11b1a:	10 92 f4 11 	sts	0x11F4, r1
   11b1e:	10 92 f5 11 	sts	0x11F5, r1
   11b22:	10 92 f6 11 	sts	0x11F6, r1
   11b26:	10 92 f7 11 	sts	0x11F7, r1
   11b2a:	4c c1       	rjmp	.+664    	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   11b2c:	b8 2c       	mov	r11, r8
   11b2e:	c5 c0       	rjmp	.+394    	; 0x11cba <_ZL15lcd_sdcard_menuv+0x4fa>
   11b30:	80 91 64 02 	lds	r24, 0x0264
   11b34:	88 23       	and	r24, r24
   11b36:	09 f4       	brne	.+2      	; 0x11b3a <_ZL15lcd_sdcard_menuv+0x37a>
   11b38:	74 c0       	rjmp	.+232    	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11b3a:	60 91 f4 11 	lds	r22, 0x11F4
   11b3e:	70 91 f5 11 	lds	r23, 0x11F5
   11b42:	80 91 f6 11 	lds	r24, 0x11F6
   11b46:	90 91 f7 11 	lds	r25, 0x11F7
   11b4a:	a7 01       	movw	r20, r14
   11b4c:	96 01       	movw	r18, r12
   11b4e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11b52:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11b54:	98 a1       	ldd	r25, Y+32	; 0x20
   11b56:	a9 a1       	ldd	r26, Y+33	; 0x21
   11b58:	ba a1       	ldd	r27, Y+34	; 0x22
   11b5a:	28 17       	cp	r18, r24
   11b5c:	39 07       	cpc	r19, r25
   11b5e:	4a 07       	cpc	r20, r26
   11b60:	5b 07       	cpc	r21, r27
   11b62:	81 f5       	brne	.+96     	; 0x11bc4 <_ZL15lcd_sdcard_menuv+0x404>
   11b64:	46 2d       	mov	r20, r6
   11b66:	60 e0       	ldi	r22, 0x00	; 0
   11b68:	8f ef       	ldi	r24, 0xFF	; 255
   11b6a:	91 e1       	ldi	r25, 0x11	; 17
   11b6c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   11b70:	6e e3       	ldi	r22, 0x3E	; 62
   11b72:	8f ef       	ldi	r24, 0xFF	; 255
   11b74:	91 e1       	ldi	r25, 0x11	; 17
   11b76:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11b7a:	80 91 a3 05 	lds	r24, 0x05A3
   11b7e:	88 23       	and	r24, r24
   11b80:	39 f0       	breq	.+14     	; 0x11b90 <_ZL15lcd_sdcard_menuv+0x3d0>
   11b82:	10 92 b6 05 	sts	0x05B6, r1
   11b86:	a3 ea       	ldi	r26, 0xA3	; 163
   11b88:	b5 e0       	ldi	r27, 0x05	; 5
   11b8a:	9a 2f       	mov	r25, r26
   11b8c:	8b 2f       	mov	r24, r27
   11b8e:	02 c0       	rjmp	.+4      	; 0x11b94 <_ZL15lcd_sdcard_menuv+0x3d4>
   11b90:	94 2d       	mov	r25, r4
   11b92:	85 2d       	mov	r24, r5
   11b94:	a9 2e       	mov	r10, r25
   11b96:	b8 2e       	mov	r11, r24
   11b98:	0f 2e       	mov	r0, r31
   11b9a:	f3 e1       	ldi	r31, 0x13	; 19
   11b9c:	7f 2e       	mov	r7, r31
   11b9e:	f0 2d       	mov	r31, r0
   11ba0:	f5 01       	movw	r30, r10
   11ba2:	61 91       	ld	r22, Z+
   11ba4:	5f 01       	movw	r10, r30
   11ba6:	66 23       	and	r22, r22
   11ba8:	19 f0       	breq	.+6      	; 0x11bb0 <_ZL15lcd_sdcard_menuv+0x3f0>
   11baa:	71 10       	cpse	r7, r1
   11bac:	ff c0       	rjmp	.+510    	; 0x11dac <_ZL15lcd_sdcard_menuv+0x5ec>
   11bae:	39 c0       	rjmp	.+114    	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11bb0:	77 20       	and	r7, r7
   11bb2:	b9 f1       	breq	.+110    	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11bb4:	60 e2       	ldi	r22, 0x20	; 32
   11bb6:	8f ef       	ldi	r24, 0xFF	; 255
   11bb8:	91 e1       	ldi	r25, 0x11	; 17
   11bba:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11bbe:	7a 94       	dec	r7
   11bc0:	c9 f7       	brne	.-14     	; 0x11bb4 <_ZL15lcd_sdcard_menuv+0x3f4>
   11bc2:	2f c0       	rjmp	.+94     	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11bc4:	46 2d       	mov	r20, r6
   11bc6:	60 e0       	ldi	r22, 0x00	; 0
   11bc8:	8f ef       	ldi	r24, 0xFF	; 255
   11bca:	91 e1       	ldi	r25, 0x11	; 17
   11bcc:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   11bd0:	60 e2       	ldi	r22, 0x20	; 32
   11bd2:	8f ef       	ldi	r24, 0xFF	; 255
   11bd4:	91 e1       	ldi	r25, 0x11	; 17
   11bd6:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11bda:	80 91 a3 05 	lds	r24, 0x05A3
   11bde:	88 23       	and	r24, r24
   11be0:	39 f0       	breq	.+14     	; 0x11bf0 <_ZL15lcd_sdcard_menuv+0x430>
   11be2:	10 92 b6 05 	sts	0x05B6, r1
   11be6:	23 ea       	ldi	r18, 0xA3	; 163
   11be8:	35 e0       	ldi	r19, 0x05	; 5
   11bea:	92 2f       	mov	r25, r18
   11bec:	83 2f       	mov	r24, r19
   11bee:	02 c0       	rjmp	.+4      	; 0x11bf4 <_ZL15lcd_sdcard_menuv+0x434>
   11bf0:	94 2d       	mov	r25, r4
   11bf2:	85 2d       	mov	r24, r5
   11bf4:	a9 2e       	mov	r10, r25
   11bf6:	b8 2e       	mov	r11, r24
   11bf8:	0f 2e       	mov	r0, r31
   11bfa:	f3 e1       	ldi	r31, 0x13	; 19
   11bfc:	7f 2e       	mov	r7, r31
   11bfe:	f0 2d       	mov	r31, r0
   11c00:	d5 01       	movw	r26, r10
   11c02:	6d 91       	ld	r22, X+
   11c04:	5d 01       	movw	r10, r26
   11c06:	66 23       	and	r22, r22
   11c08:	19 f0       	breq	.+6      	; 0x11c10 <_ZL15lcd_sdcard_menuv+0x450>
   11c0a:	71 10       	cpse	r7, r1
   11c0c:	d5 c0       	rjmp	.+426    	; 0x11db8 <_ZL15lcd_sdcard_menuv+0x5f8>
   11c0e:	09 c0       	rjmp	.+18     	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11c10:	77 20       	and	r7, r7
   11c12:	39 f0       	breq	.+14     	; 0x11c22 <_ZL15lcd_sdcard_menuv+0x462>
   11c14:	60 e2       	ldi	r22, 0x20	; 32
   11c16:	8f ef       	ldi	r24, 0xFF	; 255
   11c18:	91 e1       	ldi	r25, 0x11	; 17
   11c1a:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11c1e:	7a 94       	dec	r7
   11c20:	c9 f7       	brne	.-14     	; 0x11c14 <_ZL15lcd_sdcard_menuv+0x454>
   11c22:	bb a1       	ldd	r27, Y+35	; 0x23
   11c24:	bb 23       	and	r27, r27
   11c26:	09 f4       	brne	.+2      	; 0x11c2a <_ZL15lcd_sdcard_menuv+0x46a>
   11c28:	45 c0       	rjmp	.+138    	; 0x11cb4 <_ZL15lcd_sdcard_menuv+0x4f4>
   11c2a:	60 91 f4 11 	lds	r22, 0x11F4
   11c2e:	70 91 f5 11 	lds	r23, 0x11F5
   11c32:	80 91 f6 11 	lds	r24, 0x11F6
   11c36:	90 91 f7 11 	lds	r25, 0x11F7
   11c3a:	a7 01       	movw	r20, r14
   11c3c:	96 01       	movw	r18, r12
   11c3e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11c44:	98 a1       	ldd	r25, Y+32	; 0x20
   11c46:	a9 a1       	ldd	r26, Y+33	; 0x21
   11c48:	ba a1       	ldd	r27, Y+34	; 0x22
   11c4a:	28 17       	cp	r18, r24
   11c4c:	39 07       	cpc	r19, r25
   11c4e:	4a 07       	cpc	r20, r26
   11c50:	5b 07       	cpc	r21, r27
   11c52:	81 f5       	brne	.+96     	; 0x11cb4 <_ZL15lcd_sdcard_menuv+0x4f4>
   11c54:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11c58:	86 e9       	ldi	r24, 0x96	; 150
   11c5a:	95 e0       	ldi	r25, 0x05	; 5
   11c5c:	9f 93       	push	r25
   11c5e:	8f 93       	push	r24
   11c60:	8b e9       	ldi	r24, 0x9B	; 155
   11c62:	92 e1       	ldi	r25, 0x12	; 18
   11c64:	9f 93       	push	r25
   11c66:	8f 93       	push	r24
   11c68:	ce 01       	movw	r24, r28
   11c6a:	01 96       	adiw	r24, 0x01	; 1
   11c6c:	9f 93       	push	r25
   11c6e:	8f 93       	push	r24
   11c70:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <sprintf_P>
   11c74:	8d 81       	ldd	r24, Y+5	; 0x05
   11c76:	0f 90       	pop	r0
   11c78:	0f 90       	pop	r0
   11c7a:	0f 90       	pop	r0
   11c7c:	0f 90       	pop	r0
   11c7e:	0f 90       	pop	r0
   11c80:	0f 90       	pop	r0
   11c82:	88 23       	and	r24, r24
   11c84:	61 f0       	breq	.+24     	; 0x11c9e <_ZL15lcd_sdcard_menuv+0x4de>
   11c86:	8e 01       	movw	r16, r28
   11c88:	0b 5f       	subi	r16, 0xFB	; 251
   11c8a:	1f 4f       	sbci	r17, 0xFF	; 255
   11c8c:	90 e0       	ldi	r25, 0x00	; 0
   11c8e:	0e 94 a7 c3 	call	0x1874e	; 0x1874e <tolower>
   11c92:	d8 01       	movw	r26, r16
   11c94:	8d 93       	st	X+, r24
   11c96:	8d 01       	movw	r16, r26
   11c98:	8c 91       	ld	r24, X
   11c9a:	81 11       	cpse	r24, r1
   11c9c:	f7 cf       	rjmp	.-18     	; 0x11c8c <_ZL15lcd_sdcard_menuv+0x4cc>
   11c9e:	ce 01       	movw	r24, r28
   11ca0:	01 96       	adiw	r24, 0x01	; 1
   11ca2:	0e 94 60 22 	call	0x44c0	; 0x44c0 <_Z12enquecommandPKc>
   11ca6:	82 ea       	ldi	r24, 0xA2	; 162
   11ca8:	92 e1       	ldi	r25, 0x12	; 18
   11caa:	0e 94 ed 22 	call	0x45da	; 0x45da <_Z14enquecommand_PPKc>
   11cae:	0e 94 b2 7f 	call	0xff64	; 0xff64 <_ZL20lcd_return_to_statusv>
   11cb2:	88 c0       	rjmp	.+272    	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   11cb4:	b8 2c       	mov	r11, r8
   11cb6:	01 c0       	rjmp	.+2      	; 0x11cba <_ZL15lcd_sdcard_menuv+0x4fa>
   11cb8:	b3 94       	inc	r11
   11cba:	0f 5f       	subi	r16, 0xFF	; 255
   11cbc:	1f 4f       	sbci	r17, 0xFF	; 255
   11cbe:	02 15       	cp	r16, r2
   11cc0:	13 05       	cpc	r17, r3
   11cc2:	09 f0       	breq	.+2      	; 0x11cc6 <_ZL15lcd_sdcard_menuv+0x506>
   11cc4:	79 ce       	rjmp	.-782    	; 0x119b8 <_ZL15lcd_sdcard_menuv+0x1f8>
   11cc6:	60 91 f4 11 	lds	r22, 0x11F4
   11cca:	70 91 f5 11 	lds	r23, 0x11F5
   11cce:	80 91 f6 11 	lds	r24, 0x11F6
   11cd2:	90 91 f7 11 	lds	r25, 0x11F7
   11cd6:	a7 01       	movw	r20, r14
   11cd8:	96 01       	movw	r18, r12
   11cda:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11cde:	8b 2d       	mov	r24, r11
   11ce0:	90 e0       	ldi	r25, 0x00	; 0
   11ce2:	a0 e0       	ldi	r26, 0x00	; 0
   11ce4:	b0 e0       	ldi	r27, 0x00	; 0
   11ce6:	28 17       	cp	r18, r24
   11ce8:	39 07       	cpc	r19, r25
   11cea:	4a 07       	cpc	r20, r26
   11cec:	5b 07       	cpc	r21, r27
   11cee:	b0 f0       	brcs	.+44     	; 0x11d1c <_ZL15lcd_sdcard_menuv+0x55c>
   11cf0:	8b 2d       	mov	r24, r11
   11cf2:	90 e0       	ldi	r25, 0x00	; 0
   11cf4:	9c 01       	movw	r18, r24
   11cf6:	22 0f       	add	r18, r18
   11cf8:	33 1f       	adc	r19, r19
   11cfa:	22 0f       	add	r18, r18
   11cfc:	33 1f       	adc	r19, r19
   11cfe:	82 0f       	add	r24, r18
   11d00:	93 1f       	adc	r25, r19
   11d02:	01 97       	sbiw	r24, 0x01	; 1
   11d04:	aa 27       	eor	r26, r26
   11d06:	97 fd       	sbrc	r25, 7
   11d08:	a0 95       	com	r26
   11d0a:	ba 2f       	mov	r27, r26
   11d0c:	80 93 f4 11 	sts	0x11F4, r24
   11d10:	90 93 f5 11 	sts	0x11F5, r25
   11d14:	a0 93 f6 11 	sts	0x11F6, r26
   11d18:	b0 93 f7 11 	sts	0x11F7, r27
   11d1c:	60 91 f4 11 	lds	r22, 0x11F4
   11d20:	70 91 f5 11 	lds	r23, 0x11F5
   11d24:	80 91 f6 11 	lds	r24, 0x11F6
   11d28:	90 91 f7 11 	lds	r25, 0x11F7
   11d2c:	a7 01       	movw	r20, r14
   11d2e:	96 01       	movw	r18, r12
   11d30:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11d34:	42 2f       	mov	r20, r18
   11d36:	50 e0       	ldi	r21, 0x00	; 0
   11d38:	80 91 fd 11 	lds	r24, 0x11FD
   11d3c:	90 e0       	ldi	r25, 0x00	; 0
   11d3e:	04 96       	adiw	r24, 0x04	; 4
   11d40:	48 17       	cp	r20, r24
   11d42:	59 07       	cpc	r21, r25
   11d44:	64 f0       	brlt	.+24     	; 0x11d5e <_ZL15lcd_sdcard_menuv+0x59e>
   11d46:	0f 2e       	mov	r0, r31
   11d48:	fd ef       	ldi	r31, 0xFD	; 253
   11d4a:	9f 2e       	mov	r9, r31
   11d4c:	f0 2d       	mov	r31, r0
   11d4e:	92 0e       	add	r9, r18
   11d50:	90 92 fd 11 	sts	0x11FD, r9
   11d54:	b1 e0       	ldi	r27, 0x01	; 1
   11d56:	b0 93 64 02 	sts	0x0264, r27
   11d5a:	61 2c       	mov	r6, r1
   11d5c:	86 cd       	rjmp	.-1268   	; 0x1186a <_ZL15lcd_sdcard_menuv+0xaa>
   11d5e:	63 94       	inc	r6
   11d60:	93 94       	inc	r9
   11d62:	e3 e0       	ldi	r30, 0x03	; 3
   11d64:	e6 15       	cp	r30, r6
   11d66:	08 f0       	brcs	.+2      	; 0x11d6a <_ZL15lcd_sdcard_menuv+0x5aa>
   11d68:	80 cd       	rjmp	.-1280   	; 0x1186a <_ZL15lcd_sdcard_menuv+0xaa>
   11d6a:	2c c0       	rjmp	.+88     	; 0x11dc4 <_ZL15lcd_sdcard_menuv+0x604>
   11d6c:	82 e9       	ldi	r24, 0x92	; 146
   11d6e:	95 e0       	ldi	r25, 0x05	; 5
   11d70:	0e 94 84 19 	call	0x3308	; 0x3308 <_ZN10CardReader14getnrfilenamesEv>
   11d74:	1c 01       	movw	r2, r24
   11d76:	80 91 f4 11 	lds	r24, 0x11F4
   11d7a:	90 91 f5 11 	lds	r25, 0x11F5
   11d7e:	a0 91 f6 11 	lds	r26, 0x11F6
   11d82:	b0 91 f7 11 	lds	r27, 0x11F7
   11d86:	81 30       	cpi	r24, 0x01	; 1
   11d88:	90 48       	sbci	r25, 0x80	; 128
   11d8a:	a1 05       	cpc	r26, r1
   11d8c:	b1 05       	cpc	r27, r1
   11d8e:	08 f0       	brcs	.+2      	; 0x11d92 <_ZL15lcd_sdcard_menuv+0x5d2>
   11d90:	3a cd       	rjmp	.-1420   	; 0x11806 <_ZL15lcd_sdcard_menuv+0x46>
   11d92:	41 cd       	rjmp	.-1406   	; 0x11816 <_ZL15lcd_sdcard_menuv+0x56>
   11d94:	8f ef       	ldi	r24, 0xFF	; 255
   11d96:	91 e1       	ldi	r25, 0x11	; 17
   11d98:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11d9c:	7a 94       	dec	r7
   11d9e:	56 ce       	rjmp	.-852    	; 0x11a4c <_ZL15lcd_sdcard_menuv+0x28c>
   11da0:	8f ef       	ldi	r24, 0xFF	; 255
   11da2:	91 e1       	ldi	r25, 0x11	; 17
   11da4:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11da8:	7a 94       	dec	r7
   11daa:	86 ce       	rjmp	.-756    	; 0x11ab8 <_ZL15lcd_sdcard_menuv+0x2f8>
   11dac:	8f ef       	ldi	r24, 0xFF	; 255
   11dae:	91 e1       	ldi	r25, 0x11	; 17
   11db0:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11db4:	7a 94       	dec	r7
   11db6:	f4 ce       	rjmp	.-536    	; 0x11ba0 <_ZL15lcd_sdcard_menuv+0x3e0>
   11db8:	8f ef       	ldi	r24, 0xFF	; 255
   11dba:	91 e1       	ldi	r25, 0x11	; 17
   11dbc:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   11dc0:	7a 94       	dec	r7
   11dc2:	1e cf       	rjmp	.-452    	; 0x11c00 <_ZL15lcd_sdcard_menuv+0x440>
   11dc4:	a3 96       	adiw	r28, 0x23	; 35
   11dc6:	0f b6       	in	r0, 0x3f	; 63
   11dc8:	f8 94       	cli
   11dca:	de bf       	out	0x3e, r29	; 62
   11dcc:	0f be       	out	0x3f, r0	; 63
   11dce:	cd bf       	out	0x3d, r28	; 61
   11dd0:	df 91       	pop	r29
   11dd2:	cf 91       	pop	r28
   11dd4:	1f 91       	pop	r17
   11dd6:	0f 91       	pop	r16
   11dd8:	ff 90       	pop	r15
   11dda:	ef 90       	pop	r14
   11ddc:	df 90       	pop	r13
   11dde:	cf 90       	pop	r12
   11de0:	bf 90       	pop	r11
   11de2:	af 90       	pop	r10
   11de4:	9f 90       	pop	r9
   11de6:	8f 90       	pop	r8
   11de8:	7f 90       	pop	r7
   11dea:	6f 90       	pop	r6
   11dec:	5f 90       	pop	r5
   11dee:	4f 90       	pop	r4
   11df0:	3f 90       	pop	r3
   11df2:	2f 90       	pop	r2
   11df4:	08 95       	ret

00011df6 <_ZL17menu_action_gcodePKc>:
   11df6:	0c 94 ed 22 	jmp	0x45da	; 0x45da <_Z14enquecommand_PPKc>
   11dfa:	08 95       	ret

00011dfc <_ZL16lcd_prepare_menuv>:
   11dfc:	7f 92       	push	r7
   11dfe:	8f 92       	push	r8
   11e00:	9f 92       	push	r9
   11e02:	af 92       	push	r10
   11e04:	bf 92       	push	r11
   11e06:	cf 92       	push	r12
   11e08:	df 92       	push	r13
   11e0a:	ef 92       	push	r14
   11e0c:	ff 92       	push	r15
   11e0e:	0f 93       	push	r16
   11e10:	1f 93       	push	r17
   11e12:	cf 93       	push	r28
   11e14:	df 93       	push	r29
   11e16:	80 91 f4 11 	lds	r24, 0x11F4
   11e1a:	90 91 f5 11 	lds	r25, 0x11F5
   11e1e:	a0 91 f6 11 	lds	r26, 0x11F6
   11e22:	b0 91 f7 11 	lds	r27, 0x11F7
   11e26:	81 30       	cpi	r24, 0x01	; 1
   11e28:	90 48       	sbci	r25, 0x80	; 128
   11e2a:	a1 05       	cpc	r26, r1
   11e2c:	b1 05       	cpc	r27, r1
   11e2e:	40 f0       	brcs	.+16     	; 0x11e40 <_ZL16lcd_prepare_menuv+0x44>
   11e30:	10 92 f4 11 	sts	0x11F4, r1
   11e34:	10 92 f5 11 	sts	0x11F5, r1
   11e38:	10 92 f6 11 	sts	0x11F6, r1
   11e3c:	10 92 f7 11 	sts	0x11F7, r1
   11e40:	60 91 f4 11 	lds	r22, 0x11F4
   11e44:	70 91 f5 11 	lds	r23, 0x11F5
   11e48:	80 91 f6 11 	lds	r24, 0x11F6
   11e4c:	90 91 f7 11 	lds	r25, 0x11F7
   11e50:	25 e0       	ldi	r18, 0x05	; 5
   11e52:	30 e0       	ldi	r19, 0x00	; 0
   11e54:	40 e0       	ldi	r20, 0x00	; 0
   11e56:	50 e0       	ldi	r21, 0x00	; 0
   11e58:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11e5c:	80 91 fd 11 	lds	r24, 0x11FD
   11e60:	90 e0       	ldi	r25, 0x00	; 0
   11e62:	a0 e0       	ldi	r26, 0x00	; 0
   11e64:	b0 e0       	ldi	r27, 0x00	; 0
   11e66:	28 17       	cp	r18, r24
   11e68:	39 07       	cpc	r19, r25
   11e6a:	4a 07       	cpc	r20, r26
   11e6c:	5b 07       	cpc	r21, r27
   11e6e:	10 f4       	brcc	.+4      	; 0x11e74 <_ZL16lcd_prepare_menuv+0x78>
   11e70:	20 93 fd 11 	sts	0x11FD, r18
   11e74:	c0 91 fd 11 	lds	r28, 0x11FD
   11e78:	10 91 fe 11 	lds	r17, 0x11FE
   11e7c:	12 fb       	bst	r17, 2
   11e7e:	11 27       	eor	r17, r17
   11e80:	10 f9       	bld	r17, 0
   11e82:	d0 e0       	ldi	r29, 0x00	; 0
   11e84:	0f 2e       	mov	r0, r31
   11e86:	f5 e0       	ldi	r31, 0x05	; 5
   11e88:	cf 2e       	mov	r12, r31
   11e8a:	d1 2c       	mov	r13, r1
   11e8c:	e1 2c       	mov	r14, r1
   11e8e:	f1 2c       	mov	r15, r1
   11e90:	f0 2d       	mov	r31, r0
   11e92:	0f 2e       	mov	r0, r31
   11e94:	f7 e2       	ldi	r31, 0x27	; 39
   11e96:	8f 2e       	mov	r8, r31
   11e98:	91 2c       	mov	r9, r1
   11e9a:	a1 2c       	mov	r10, r1
   11e9c:	b1 2c       	mov	r11, r1
   11e9e:	f0 2d       	mov	r31, r0
   11ea0:	77 24       	eor	r7, r7
   11ea2:	73 94       	inc	r7
   11ea4:	00 e0       	ldi	r16, 0x00	; 0
   11ea6:	c1 11       	cpse	r28, r1
   11ea8:	36 c0       	rjmp	.+108    	; 0x11f16 <_ZL16lcd_prepare_menuv+0x11a>
   11eaa:	80 91 64 02 	lds	r24, 0x0264
   11eae:	88 23       	and	r24, r24
   11eb0:	d9 f0       	breq	.+54     	; 0x11ee8 <_ZL16lcd_prepare_menuv+0xec>
   11eb2:	80 91 f4 11 	lds	r24, 0x11F4
   11eb6:	90 91 f5 11 	lds	r25, 0x11F5
   11eba:	a0 91 f6 11 	lds	r26, 0x11F6
   11ebe:	b0 91 f7 11 	lds	r27, 0x11F7
   11ec2:	05 97       	sbiw	r24, 0x05	; 5
   11ec4:	a1 05       	cpc	r26, r1
   11ec6:	b1 05       	cpc	r27, r1
   11ec8:	40 f4       	brcc	.+16     	; 0x11eda <_ZL16lcd_prepare_menuv+0xde>
   11eca:	23 e0       	ldi	r18, 0x03	; 3
   11ecc:	43 e0       	ldi	r20, 0x03	; 3
   11ece:	60 e4       	ldi	r22, 0x40	; 64
   11ed0:	75 e1       	ldi	r23, 0x15	; 21
   11ed2:	8d 2f       	mov	r24, r29
   11ed4:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11ed8:	07 c0       	rjmp	.+14     	; 0x11ee8 <_ZL16lcd_prepare_menuv+0xec>
   11eda:	23 e0       	ldi	r18, 0x03	; 3
   11edc:	40 e2       	ldi	r20, 0x20	; 32
   11ede:	60 e4       	ldi	r22, 0x40	; 64
   11ee0:	75 e1       	ldi	r23, 0x15	; 21
   11ee2:	8d 2f       	mov	r24, r29
   11ee4:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11ee8:	11 23       	and	r17, r17
   11eea:	09 f4       	brne	.+2      	; 0x11eee <_ZL16lcd_prepare_menuv+0xf2>
   11eec:	98 c0       	rjmp	.+304    	; 0x1201e <_ZL16lcd_prepare_menuv+0x222>
   11eee:	80 91 f4 11 	lds	r24, 0x11F4
   11ef2:	90 91 f5 11 	lds	r25, 0x11F5
   11ef6:	a0 91 f6 11 	lds	r26, 0x11F6
   11efa:	b0 91 f7 11 	lds	r27, 0x11F7
   11efe:	05 97       	sbiw	r24, 0x05	; 5
   11f00:	a1 05       	cpc	r26, r1
   11f02:	b1 05       	cpc	r27, r1
   11f04:	08 f0       	brcs	.+2      	; 0x11f08 <_ZL16lcd_prepare_menuv+0x10c>
   11f06:	8b c0       	rjmp	.+278    	; 0x1201e <_ZL16lcd_prepare_menuv+0x222>
   11f08:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11f0c:	8a eb       	ldi	r24, 0xBA	; 186
   11f0e:	98 e8       	ldi	r25, 0x88	; 136
   11f10:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   11f14:	57 c2       	rjmp	.+1198   	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   11f16:	c1 30       	cpi	r28, 0x01	; 1
   11f18:	09 f0       	breq	.+2      	; 0x11f1c <_ZL16lcd_prepare_menuv+0x120>
   11f1a:	3f c0       	rjmp	.+126    	; 0x11f9a <_ZL16lcd_prepare_menuv+0x19e>
   11f1c:	80 91 64 02 	lds	r24, 0x0264
   11f20:	88 23       	and	r24, r24
   11f22:	01 f1       	breq	.+64     	; 0x11f64 <_ZL16lcd_prepare_menuv+0x168>
   11f24:	60 91 f4 11 	lds	r22, 0x11F4
   11f28:	70 91 f5 11 	lds	r23, 0x11F5
   11f2c:	80 91 f6 11 	lds	r24, 0x11F6
   11f30:	90 91 f7 11 	lds	r25, 0x11F7
   11f34:	a7 01       	movw	r20, r14
   11f36:	96 01       	movw	r18, r12
   11f38:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11f3c:	21 30       	cpi	r18, 0x01	; 1
   11f3e:	31 05       	cpc	r19, r1
   11f40:	41 05       	cpc	r20, r1
   11f42:	51 05       	cpc	r21, r1
   11f44:	41 f4       	brne	.+16     	; 0x11f56 <_ZL16lcd_prepare_menuv+0x15a>
   11f46:	20 e2       	ldi	r18, 0x20	; 32
   11f48:	4e e3       	ldi	r20, 0x3E	; 62
   11f4a:	65 e4       	ldi	r22, 0x45	; 69
   11f4c:	75 e1       	ldi	r23, 0x15	; 21
   11f4e:	8d 2f       	mov	r24, r29
   11f50:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11f54:	07 c0       	rjmp	.+14     	; 0x11f64 <_ZL16lcd_prepare_menuv+0x168>
   11f56:	20 e2       	ldi	r18, 0x20	; 32
   11f58:	40 e2       	ldi	r20, 0x20	; 32
   11f5a:	65 e4       	ldi	r22, 0x45	; 69
   11f5c:	75 e1       	ldi	r23, 0x15	; 21
   11f5e:	8d 2f       	mov	r24, r29
   11f60:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11f64:	11 23       	and	r17, r17
   11f66:	09 f4       	brne	.+2      	; 0x11f6a <_ZL16lcd_prepare_menuv+0x16e>
   11f68:	9d c0       	rjmp	.+314    	; 0x120a4 <_ZL16lcd_prepare_menuv+0x2a8>
   11f6a:	60 91 f4 11 	lds	r22, 0x11F4
   11f6e:	70 91 f5 11 	lds	r23, 0x11F5
   11f72:	80 91 f6 11 	lds	r24, 0x11F6
   11f76:	90 91 f7 11 	lds	r25, 0x11F7
   11f7a:	a7 01       	movw	r20, r14
   11f7c:	96 01       	movw	r18, r12
   11f7e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11f82:	21 30       	cpi	r18, 0x01	; 1
   11f84:	31 05       	cpc	r19, r1
   11f86:	41 05       	cpc	r20, r1
   11f88:	51 05       	cpc	r21, r1
   11f8a:	09 f0       	breq	.+2      	; 0x11f8e <_ZL16lcd_prepare_menuv+0x192>
   11f8c:	8b c0       	rjmp	.+278    	; 0x120a4 <_ZL16lcd_prepare_menuv+0x2a8>
   11f8e:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   11f92:	86 e5       	ldi	r24, 0x56	; 86
   11f94:	95 e1       	ldi	r25, 0x15	; 21
   11f96:	2f df       	rcall	.-418    	; 0x11df6 <_ZL17menu_action_gcodePKc>
   11f98:	15 c2       	rjmp	.+1066   	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   11f9a:	c2 30       	cpi	r28, 0x02	; 2
   11f9c:	09 f0       	breq	.+2      	; 0x11fa0 <_ZL16lcd_prepare_menuv+0x1a4>
   11f9e:	3f c0       	rjmp	.+126    	; 0x1201e <_ZL16lcd_prepare_menuv+0x222>
   11fa0:	80 91 64 02 	lds	r24, 0x0264
   11fa4:	88 23       	and	r24, r24
   11fa6:	01 f1       	breq	.+64     	; 0x11fe8 <_ZL16lcd_prepare_menuv+0x1ec>
   11fa8:	60 91 f4 11 	lds	r22, 0x11F4
   11fac:	70 91 f5 11 	lds	r23, 0x11F5
   11fb0:	80 91 f6 11 	lds	r24, 0x11F6
   11fb4:	90 91 f7 11 	lds	r25, 0x11F7
   11fb8:	a7 01       	movw	r20, r14
   11fba:	96 01       	movw	r18, r12
   11fbc:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   11fc0:	22 30       	cpi	r18, 0x02	; 2
   11fc2:	31 05       	cpc	r19, r1
   11fc4:	41 05       	cpc	r20, r1
   11fc6:	51 05       	cpc	r21, r1
   11fc8:	41 f4       	brne	.+16     	; 0x11fda <_ZL16lcd_prepare_menuv+0x1de>
   11fca:	20 e2       	ldi	r18, 0x20	; 32
   11fcc:	4e e3       	ldi	r20, 0x3E	; 62
   11fce:	6a e5       	ldi	r22, 0x5A	; 90
   11fd0:	75 e1       	ldi	r23, 0x15	; 21
   11fd2:	8d 2f       	mov	r24, r29
   11fd4:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11fd8:	07 c0       	rjmp	.+14     	; 0x11fe8 <_ZL16lcd_prepare_menuv+0x1ec>
   11fda:	20 e2       	ldi	r18, 0x20	; 32
   11fdc:	40 e2       	ldi	r20, 0x20	; 32
   11fde:	6a e5       	ldi	r22, 0x5A	; 90
   11fe0:	75 e1       	ldi	r23, 0x15	; 21
   11fe2:	8d 2f       	mov	r24, r29
   11fe4:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   11fe8:	11 23       	and	r17, r17
   11fea:	09 f4       	brne	.+2      	; 0x11fee <_ZL16lcd_prepare_menuv+0x1f2>
   11fec:	9e c0       	rjmp	.+316    	; 0x1212a <_ZL16lcd_prepare_menuv+0x32e>
   11fee:	60 91 f4 11 	lds	r22, 0x11F4
   11ff2:	70 91 f5 11 	lds	r23, 0x11F5
   11ff6:	80 91 f6 11 	lds	r24, 0x11F6
   11ffa:	90 91 f7 11 	lds	r25, 0x11F7
   11ffe:	a7 01       	movw	r20, r14
   12000:	96 01       	movw	r18, r12
   12002:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12006:	22 30       	cpi	r18, 0x02	; 2
   12008:	31 05       	cpc	r19, r1
   1200a:	41 05       	cpc	r20, r1
   1200c:	51 05       	cpc	r21, r1
   1200e:	09 f0       	breq	.+2      	; 0x12012 <_ZL16lcd_prepare_menuv+0x216>
   12010:	8c c0       	rjmp	.+280    	; 0x1212a <_ZL16lcd_prepare_menuv+0x32e>
   12012:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12016:	84 e6       	ldi	r24, 0x64	; 100
   12018:	95 e1       	ldi	r25, 0x15	; 21
   1201a:	ed de       	rcall	.-550    	; 0x11df6 <_ZL17menu_action_gcodePKc>
   1201c:	d3 c1       	rjmp	.+934    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   1201e:	c3 30       	cpi	r28, 0x03	; 3
   12020:	09 f0       	breq	.+2      	; 0x12024 <_ZL16lcd_prepare_menuv+0x228>
   12022:	40 c0       	rjmp	.+128    	; 0x120a4 <_ZL16lcd_prepare_menuv+0x2a8>
   12024:	80 91 64 02 	lds	r24, 0x0264
   12028:	88 23       	and	r24, r24
   1202a:	01 f1       	breq	.+64     	; 0x1206c <_ZL16lcd_prepare_menuv+0x270>
   1202c:	60 91 f4 11 	lds	r22, 0x11F4
   12030:	70 91 f5 11 	lds	r23, 0x11F5
   12034:	80 91 f6 11 	lds	r24, 0x11F6
   12038:	90 91 f7 11 	lds	r25, 0x11F7
   1203c:	a7 01       	movw	r20, r14
   1203e:	96 01       	movw	r18, r12
   12040:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12044:	23 30       	cpi	r18, 0x03	; 3
   12046:	31 05       	cpc	r19, r1
   12048:	41 05       	cpc	r20, r1
   1204a:	51 05       	cpc	r21, r1
   1204c:	41 f4       	brne	.+16     	; 0x1205e <_ZL16lcd_prepare_menuv+0x262>
   1204e:	20 e2       	ldi	r18, 0x20	; 32
   12050:	4e e3       	ldi	r20, 0x3E	; 62
   12052:	68 e6       	ldi	r22, 0x68	; 104
   12054:	75 e1       	ldi	r23, 0x15	; 21
   12056:	8d 2f       	mov	r24, r29
   12058:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1205c:	07 c0       	rjmp	.+14     	; 0x1206c <_ZL16lcd_prepare_menuv+0x270>
   1205e:	20 e2       	ldi	r18, 0x20	; 32
   12060:	40 e2       	ldi	r20, 0x20	; 32
   12062:	68 e6       	ldi	r22, 0x68	; 104
   12064:	75 e1       	ldi	r23, 0x15	; 21
   12066:	8d 2f       	mov	r24, r29
   12068:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1206c:	11 23       	and	r17, r17
   1206e:	09 f4       	brne	.+2      	; 0x12072 <_ZL16lcd_prepare_menuv+0x276>
   12070:	9f c0       	rjmp	.+318    	; 0x121b0 <_ZL16lcd_prepare_menuv+0x3b4>
   12072:	60 91 f4 11 	lds	r22, 0x11F4
   12076:	70 91 f5 11 	lds	r23, 0x11F5
   1207a:	80 91 f6 11 	lds	r24, 0x11F6
   1207e:	90 91 f7 11 	lds	r25, 0x11F7
   12082:	a7 01       	movw	r20, r14
   12084:	96 01       	movw	r18, r12
   12086:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1208a:	23 30       	cpi	r18, 0x03	; 3
   1208c:	31 05       	cpc	r19, r1
   1208e:	41 05       	cpc	r20, r1
   12090:	51 05       	cpc	r21, r1
   12092:	09 f0       	breq	.+2      	; 0x12096 <_ZL16lcd_prepare_menuv+0x29a>
   12094:	8d c0       	rjmp	.+282    	; 0x121b0 <_ZL16lcd_prepare_menuv+0x3b4>
   12096:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1209a:	8e ec       	ldi	r24, 0xCE	; 206
   1209c:	93 e9       	ldi	r25, 0x93	; 147
   1209e:	0e 94 ec 82 	call	0x105d8	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   120a2:	90 c1       	rjmp	.+800    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   120a4:	c4 30       	cpi	r28, 0x04	; 4
   120a6:	09 f0       	breq	.+2      	; 0x120aa <_ZL16lcd_prepare_menuv+0x2ae>
   120a8:	40 c0       	rjmp	.+128    	; 0x1212a <_ZL16lcd_prepare_menuv+0x32e>
   120aa:	80 91 64 02 	lds	r24, 0x0264
   120ae:	88 23       	and	r24, r24
   120b0:	01 f1       	breq	.+64     	; 0x120f2 <_ZL16lcd_prepare_menuv+0x2f6>
   120b2:	60 91 f4 11 	lds	r22, 0x11F4
   120b6:	70 91 f5 11 	lds	r23, 0x11F5
   120ba:	80 91 f6 11 	lds	r24, 0x11F6
   120be:	90 91 f7 11 	lds	r25, 0x11F7
   120c2:	a7 01       	movw	r20, r14
   120c4:	96 01       	movw	r18, r12
   120c6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   120ca:	24 30       	cpi	r18, 0x04	; 4
   120cc:	31 05       	cpc	r19, r1
   120ce:	41 05       	cpc	r20, r1
   120d0:	51 05       	cpc	r21, r1
   120d2:	41 f4       	brne	.+16     	; 0x120e4 <_ZL16lcd_prepare_menuv+0x2e8>
   120d4:	20 e2       	ldi	r18, 0x20	; 32
   120d6:	4e e3       	ldi	r20, 0x3E	; 62
   120d8:	64 e7       	ldi	r22, 0x74	; 116
   120da:	75 e1       	ldi	r23, 0x15	; 21
   120dc:	8d 2f       	mov	r24, r29
   120de:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   120e2:	07 c0       	rjmp	.+14     	; 0x120f2 <_ZL16lcd_prepare_menuv+0x2f6>
   120e4:	20 e2       	ldi	r18, 0x20	; 32
   120e6:	40 e2       	ldi	r20, 0x20	; 32
   120e8:	64 e7       	ldi	r22, 0x74	; 116
   120ea:	75 e1       	ldi	r23, 0x15	; 21
   120ec:	8d 2f       	mov	r24, r29
   120ee:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   120f2:	11 23       	and	r17, r17
   120f4:	09 f4       	brne	.+2      	; 0x120f8 <_ZL16lcd_prepare_menuv+0x2fc>
   120f6:	61 c1       	rjmp	.+706    	; 0x123ba <_ZL16lcd_prepare_menuv+0x5be>
   120f8:	60 91 f4 11 	lds	r22, 0x11F4
   120fc:	70 91 f5 11 	lds	r23, 0x11F5
   12100:	80 91 f6 11 	lds	r24, 0x11F6
   12104:	90 91 f7 11 	lds	r25, 0x11F7
   12108:	a7 01       	movw	r20, r14
   1210a:	96 01       	movw	r18, r12
   1210c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12110:	24 30       	cpi	r18, 0x04	; 4
   12112:	31 05       	cpc	r19, r1
   12114:	41 05       	cpc	r20, r1
   12116:	51 05       	cpc	r21, r1
   12118:	09 f0       	breq	.+2      	; 0x1211c <_ZL16lcd_prepare_menuv+0x320>
   1211a:	4f c1       	rjmp	.+670    	; 0x123ba <_ZL16lcd_prepare_menuv+0x5be>
   1211c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12120:	82 ea       	ldi	r24, 0xA2	; 162
   12122:	93 e9       	ldi	r25, 0x93	; 147
   12124:	0e 94 ec 82 	call	0x105d8	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   12128:	4d c1       	rjmp	.+666    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   1212a:	c5 30       	cpi	r28, 0x05	; 5
   1212c:	09 f0       	breq	.+2      	; 0x12130 <_ZL16lcd_prepare_menuv+0x334>
   1212e:	40 c0       	rjmp	.+128    	; 0x121b0 <_ZL16lcd_prepare_menuv+0x3b4>
   12130:	80 91 64 02 	lds	r24, 0x0264
   12134:	88 23       	and	r24, r24
   12136:	01 f1       	breq	.+64     	; 0x12178 <_ZL16lcd_prepare_menuv+0x37c>
   12138:	60 91 f4 11 	lds	r22, 0x11F4
   1213c:	70 91 f5 11 	lds	r23, 0x11F5
   12140:	80 91 f6 11 	lds	r24, 0x11F6
   12144:	90 91 f7 11 	lds	r25, 0x11F7
   12148:	a7 01       	movw	r20, r14
   1214a:	96 01       	movw	r18, r12
   1214c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12150:	25 30       	cpi	r18, 0x05	; 5
   12152:	31 05       	cpc	r19, r1
   12154:	41 05       	cpc	r20, r1
   12156:	51 05       	cpc	r21, r1
   12158:	41 f4       	brne	.+16     	; 0x1216a <_ZL16lcd_prepare_menuv+0x36e>
   1215a:	20 e2       	ldi	r18, 0x20	; 32
   1215c:	4e e3       	ldi	r20, 0x3E	; 62
   1215e:	60 e8       	ldi	r22, 0x80	; 128
   12160:	75 e1       	ldi	r23, 0x15	; 21
   12162:	8d 2f       	mov	r24, r29
   12164:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   12168:	07 c0       	rjmp	.+14     	; 0x12178 <_ZL16lcd_prepare_menuv+0x37c>
   1216a:	20 e2       	ldi	r18, 0x20	; 32
   1216c:	40 e2       	ldi	r20, 0x20	; 32
   1216e:	60 e8       	ldi	r22, 0x80	; 128
   12170:	75 e1       	ldi	r23, 0x15	; 21
   12172:	8d 2f       	mov	r24, r29
   12174:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   12178:	11 23       	and	r17, r17
   1217a:	09 f4       	brne	.+2      	; 0x1217e <_ZL16lcd_prepare_menuv+0x382>
   1217c:	19 c1       	rjmp	.+562    	; 0x123b0 <_ZL16lcd_prepare_menuv+0x5b4>
   1217e:	60 91 f4 11 	lds	r22, 0x11F4
   12182:	70 91 f5 11 	lds	r23, 0x11F5
   12186:	80 91 f6 11 	lds	r24, 0x11F6
   1218a:	90 91 f7 11 	lds	r25, 0x11F7
   1218e:	a7 01       	movw	r20, r14
   12190:	96 01       	movw	r18, r12
   12192:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12196:	25 30       	cpi	r18, 0x05	; 5
   12198:	31 05       	cpc	r19, r1
   1219a:	41 05       	cpc	r20, r1
   1219c:	51 05       	cpc	r21, r1
   1219e:	09 f0       	breq	.+2      	; 0x121a2 <_ZL16lcd_prepare_menuv+0x3a6>
   121a0:	07 c1       	rjmp	.+526    	; 0x123b0 <_ZL16lcd_prepare_menuv+0x5b4>
   121a2:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   121a6:	81 ec       	ldi	r24, 0xC1	; 193
   121a8:	9f e7       	ldi	r25, 0x7F	; 127
   121aa:	0e 94 ec 82 	call	0x105d8	; 0x105d8 <_ZL20menu_action_functionPFvvE>
   121ae:	0a c1       	rjmp	.+532    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   121b0:	80 91 10 02 	lds	r24, 0x0210
   121b4:	88 23       	and	r24, r24
   121b6:	09 f4       	brne	.+2      	; 0x121ba <_ZL16lcd_prepare_menuv+0x3be>
   121b8:	42 c0       	rjmp	.+132    	; 0x1223e <_ZL16lcd_prepare_menuv+0x442>
   121ba:	c6 30       	cpi	r28, 0x06	; 6
   121bc:	09 f0       	breq	.+2      	; 0x121c0 <_ZL16lcd_prepare_menuv+0x3c4>
   121be:	81 c0       	rjmp	.+258    	; 0x122c2 <_ZL16lcd_prepare_menuv+0x4c6>
   121c0:	80 91 64 02 	lds	r24, 0x0264
   121c4:	88 23       	and	r24, r24
   121c6:	01 f1       	breq	.+64     	; 0x12208 <_ZL16lcd_prepare_menuv+0x40c>
   121c8:	60 91 f4 11 	lds	r22, 0x11F4
   121cc:	70 91 f5 11 	lds	r23, 0x11F5
   121d0:	80 91 f6 11 	lds	r24, 0x11F6
   121d4:	90 91 f7 11 	lds	r25, 0x11F7
   121d8:	a7 01       	movw	r20, r14
   121da:	96 01       	movw	r18, r12
   121dc:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   121e0:	26 30       	cpi	r18, 0x06	; 6
   121e2:	31 05       	cpc	r19, r1
   121e4:	41 05       	cpc	r20, r1
   121e6:	51 05       	cpc	r21, r1
   121e8:	41 f4       	brne	.+16     	; 0x121fa <_ZL16lcd_prepare_menuv+0x3fe>
   121ea:	20 e2       	ldi	r18, 0x20	; 32
   121ec:	4e e3       	ldi	r20, 0x3E	; 62
   121ee:	69 e8       	ldi	r22, 0x89	; 137
   121f0:	75 e1       	ldi	r23, 0x15	; 21
   121f2:	8d 2f       	mov	r24, r29
   121f4:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   121f8:	07 c0       	rjmp	.+14     	; 0x12208 <_ZL16lcd_prepare_menuv+0x40c>
   121fa:	20 e2       	ldi	r18, 0x20	; 32
   121fc:	40 e2       	ldi	r20, 0x20	; 32
   121fe:	69 e8       	ldi	r22, 0x89	; 137
   12200:	75 e1       	ldi	r23, 0x15	; 21
   12202:	8d 2f       	mov	r24, r29
   12204:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   12208:	11 23       	and	r17, r17
   1220a:	09 f4       	brne	.+2      	; 0x1220e <_ZL16lcd_prepare_menuv+0x412>
   1220c:	9a c0       	rjmp	.+308    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   1220e:	60 91 f4 11 	lds	r22, 0x11F4
   12212:	70 91 f5 11 	lds	r23, 0x11F5
   12216:	80 91 f6 11 	lds	r24, 0x11F6
   1221a:	90 91 f7 11 	lds	r25, 0x11F7
   1221e:	a7 01       	movw	r20, r14
   12220:	96 01       	movw	r18, r12
   12222:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12226:	26 30       	cpi	r18, 0x06	; 6
   12228:	31 05       	cpc	r19, r1
   1222a:	41 05       	cpc	r20, r1
   1222c:	51 05       	cpc	r21, r1
   1222e:	09 f0       	breq	.+2      	; 0x12232 <_ZL16lcd_prepare_menuv+0x436>
   12230:	88 c0       	rjmp	.+272    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   12232:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12236:	8a e9       	ldi	r24, 0x9A	; 154
   12238:	95 e1       	ldi	r25, 0x15	; 21
   1223a:	dd dd       	rcall	.-1094   	; 0x11df6 <_ZL17menu_action_gcodePKc>
   1223c:	c3 c0       	rjmp	.+390    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   1223e:	c6 30       	cpi	r28, 0x06	; 6
   12240:	09 f0       	breq	.+2      	; 0x12244 <_ZL16lcd_prepare_menuv+0x448>
   12242:	3f c0       	rjmp	.+126    	; 0x122c2 <_ZL16lcd_prepare_menuv+0x4c6>
   12244:	80 91 64 02 	lds	r24, 0x0264
   12248:	88 23       	and	r24, r24
   1224a:	01 f1       	breq	.+64     	; 0x1228c <_ZL16lcd_prepare_menuv+0x490>
   1224c:	60 91 f4 11 	lds	r22, 0x11F4
   12250:	70 91 f5 11 	lds	r23, 0x11F5
   12254:	80 91 f6 11 	lds	r24, 0x11F6
   12258:	90 91 f7 11 	lds	r25, 0x11F7
   1225c:	a7 01       	movw	r20, r14
   1225e:	96 01       	movw	r18, r12
   12260:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12264:	26 30       	cpi	r18, 0x06	; 6
   12266:	31 05       	cpc	r19, r1
   12268:	41 05       	cpc	r20, r1
   1226a:	51 05       	cpc	r21, r1
   1226c:	41 f4       	brne	.+16     	; 0x1227e <_ZL16lcd_prepare_menuv+0x482>
   1226e:	20 e2       	ldi	r18, 0x20	; 32
   12270:	4e e3       	ldi	r20, 0x3E	; 62
   12272:	6e e9       	ldi	r22, 0x9E	; 158
   12274:	75 e1       	ldi	r23, 0x15	; 21
   12276:	8d 2f       	mov	r24, r29
   12278:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1227c:	07 c0       	rjmp	.+14     	; 0x1228c <_ZL16lcd_prepare_menuv+0x490>
   1227e:	20 e2       	ldi	r18, 0x20	; 32
   12280:	40 e2       	ldi	r20, 0x20	; 32
   12282:	6e e9       	ldi	r22, 0x9E	; 158
   12284:	75 e1       	ldi	r23, 0x15	; 21
   12286:	8d 2f       	mov	r24, r29
   12288:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1228c:	11 23       	and	r17, r17
   1228e:	09 f4       	brne	.+2      	; 0x12292 <_ZL16lcd_prepare_menuv+0x496>
   12290:	58 c0       	rjmp	.+176    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   12292:	60 91 f4 11 	lds	r22, 0x11F4
   12296:	70 91 f5 11 	lds	r23, 0x11F5
   1229a:	80 91 f6 11 	lds	r24, 0x11F6
   1229e:	90 91 f7 11 	lds	r25, 0x11F7
   122a2:	a7 01       	movw	r20, r14
   122a4:	96 01       	movw	r18, r12
   122a6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   122aa:	26 30       	cpi	r18, 0x06	; 6
   122ac:	31 05       	cpc	r19, r1
   122ae:	41 05       	cpc	r20, r1
   122b0:	51 05       	cpc	r21, r1
   122b2:	09 f0       	breq	.+2      	; 0x122b6 <_ZL16lcd_prepare_menuv+0x4ba>
   122b4:	46 c0       	rjmp	.+140    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   122b6:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   122ba:	8e ea       	ldi	r24, 0xAE	; 174
   122bc:	95 e1       	ldi	r25, 0x15	; 21
   122be:	9b dd       	rcall	.-1226   	; 0x11df6 <_ZL17menu_action_gcodePKc>
   122c0:	81 c0       	rjmp	.+258    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   122c2:	c7 30       	cpi	r28, 0x07	; 7
   122c4:	f1 f5       	brne	.+124    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   122c6:	80 91 64 02 	lds	r24, 0x0264
   122ca:	88 23       	and	r24, r24
   122cc:	01 f1       	breq	.+64     	; 0x1230e <_ZL16lcd_prepare_menuv+0x512>
   122ce:	60 91 f4 11 	lds	r22, 0x11F4
   122d2:	70 91 f5 11 	lds	r23, 0x11F5
   122d6:	80 91 f6 11 	lds	r24, 0x11F6
   122da:	90 91 f7 11 	lds	r25, 0x11F7
   122de:	a7 01       	movw	r20, r14
   122e0:	96 01       	movw	r18, r12
   122e2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   122e6:	27 30       	cpi	r18, 0x07	; 7
   122e8:	31 05       	cpc	r19, r1
   122ea:	41 05       	cpc	r20, r1
   122ec:	51 05       	cpc	r21, r1
   122ee:	41 f4       	brne	.+16     	; 0x12300 <_ZL16lcd_prepare_menuv+0x504>
   122f0:	2e e7       	ldi	r18, 0x7E	; 126
   122f2:	4e e3       	ldi	r20, 0x3E	; 62
   122f4:	62 eb       	ldi	r22, 0xB2	; 178
   122f6:	75 e1       	ldi	r23, 0x15	; 21
   122f8:	8d 2f       	mov	r24, r29
   122fa:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   122fe:	07 c0       	rjmp	.+14     	; 0x1230e <_ZL16lcd_prepare_menuv+0x512>
   12300:	2e e7       	ldi	r18, 0x7E	; 126
   12302:	40 e2       	ldi	r20, 0x20	; 32
   12304:	62 eb       	ldi	r22, 0xB2	; 178
   12306:	75 e1       	ldi	r23, 0x15	; 21
   12308:	8d 2f       	mov	r24, r29
   1230a:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   1230e:	11 23       	and	r17, r17
   12310:	c1 f0       	breq	.+48     	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   12312:	60 91 f4 11 	lds	r22, 0x11F4
   12316:	70 91 f5 11 	lds	r23, 0x11F5
   1231a:	80 91 f6 11 	lds	r24, 0x11F6
   1231e:	90 91 f7 11 	lds	r25, 0x11F7
   12322:	a7 01       	movw	r20, r14
   12324:	96 01       	movw	r18, r12
   12326:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1232a:	27 30       	cpi	r18, 0x07	; 7
   1232c:	31 05       	cpc	r19, r1
   1232e:	41 05       	cpc	r20, r1
   12330:	51 05       	cpc	r21, r1
   12332:	39 f4       	brne	.+14     	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   12334:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12338:	88 ee       	ldi	r24, 0xE8	; 232
   1233a:	94 e8       	ldi	r25, 0x84	; 132
   1233c:	0e 94 df 82 	call	0x105be	; 0x105be <_ZL19menu_action_submenuPFvvE>
   12340:	41 c0       	rjmp	.+130    	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   12342:	80 91 f4 11 	lds	r24, 0x11F4
   12346:	90 91 f5 11 	lds	r25, 0x11F5
   1234a:	a0 91 f6 11 	lds	r26, 0x11F6
   1234e:	b0 91 f7 11 	lds	r27, 0x11F7
   12352:	88 97       	sbiw	r24, 0x28	; 40
   12354:	a1 05       	cpc	r26, r1
   12356:	b1 05       	cpc	r27, r1
   12358:	40 f0       	brcs	.+16     	; 0x1236a <_ZL16lcd_prepare_menuv+0x56e>
   1235a:	80 92 f4 11 	sts	0x11F4, r8
   1235e:	90 92 f5 11 	sts	0x11F5, r9
   12362:	a0 92 f6 11 	sts	0x11F6, r10
   12366:	b0 92 f7 11 	sts	0x11F7, r11
   1236a:	60 91 f4 11 	lds	r22, 0x11F4
   1236e:	70 91 f5 11 	lds	r23, 0x11F5
   12372:	80 91 f6 11 	lds	r24, 0x11F6
   12376:	90 91 f7 11 	lds	r25, 0x11F7
   1237a:	a7 01       	movw	r20, r14
   1237c:	96 01       	movw	r18, r12
   1237e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   12382:	42 2f       	mov	r20, r18
   12384:	50 e0       	ldi	r21, 0x00	; 0
   12386:	80 91 fd 11 	lds	r24, 0x11FD
   1238a:	90 e0       	ldi	r25, 0x00	; 0
   1238c:	04 96       	adiw	r24, 0x04	; 4
   1238e:	48 17       	cp	r20, r24
   12390:	59 07       	cpc	r21, r25
   12392:	44 f0       	brlt	.+16     	; 0x123a4 <_ZL16lcd_prepare_menuv+0x5a8>
   12394:	c2 2f       	mov	r28, r18
   12396:	c3 50       	subi	r28, 0x03	; 3
   12398:	c0 93 fd 11 	sts	0x11FD, r28
   1239c:	70 92 64 02 	sts	0x0264, r7
   123a0:	d0 2f       	mov	r29, r16
   123a2:	81 cd       	rjmp	.-1278   	; 0x11ea6 <_ZL16lcd_prepare_menuv+0xaa>
   123a4:	df 5f       	subi	r29, 0xFF	; 255
   123a6:	cf 5f       	subi	r28, 0xFF	; 255
   123a8:	d4 30       	cpi	r29, 0x04	; 4
   123aa:	08 f4       	brcc	.+2      	; 0x123ae <_ZL16lcd_prepare_menuv+0x5b2>
   123ac:	7c cd       	rjmp	.-1288   	; 0x11ea6 <_ZL16lcd_prepare_menuv+0xaa>
   123ae:	0a c0       	rjmp	.+20     	; 0x123c4 <_ZL16lcd_prepare_menuv+0x5c8>
   123b0:	80 91 10 02 	lds	r24, 0x0210
   123b4:	81 11       	cpse	r24, r1
   123b6:	85 cf       	rjmp	.-246    	; 0x122c2 <_ZL16lcd_prepare_menuv+0x4c6>
   123b8:	c4 cf       	rjmp	.-120    	; 0x12342 <_ZL16lcd_prepare_menuv+0x546>
   123ba:	80 91 10 02 	lds	r24, 0x0210
   123be:	81 11       	cpse	r24, r1
   123c0:	fc ce       	rjmp	.-520    	; 0x121ba <_ZL16lcd_prepare_menuv+0x3be>
   123c2:	7f cf       	rjmp	.-258    	; 0x122c2 <_ZL16lcd_prepare_menuv+0x4c6>
   123c4:	df 91       	pop	r29
   123c6:	cf 91       	pop	r28
   123c8:	1f 91       	pop	r17
   123ca:	0f 91       	pop	r16
   123cc:	ff 90       	pop	r15
   123ce:	ef 90       	pop	r14
   123d0:	df 90       	pop	r13
   123d2:	cf 90       	pop	r12
   123d4:	bf 90       	pop	r11
   123d6:	af 90       	pop	r10
   123d8:	9f 90       	pop	r9
   123da:	8f 90       	pop	r8
   123dc:	7f 90       	pop	r7
   123de:	08 95       	ret

000123e0 <_ZL12lcd_sd_updirv>:
   123e0:	82 e9       	ldi	r24, 0x92	; 146
   123e2:	95 e0       	ldi	r25, 0x05	; 5
   123e4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN10CardReader5updirEv>
   123e8:	10 92 fd 11 	sts	0x11FD, r1
   123ec:	08 95       	ret

000123ee <_ZL15lcd_sdcard_stopv>:
   123ee:	cf 93       	push	r28
   123f0:	df 93       	push	r29
   123f2:	10 92 94 05 	sts	0x0594, r1
   123f6:	82 e9       	ldi	r24, 0x92	; 146
   123f8:	95 e0       	ldi	r25, 0x05	; 5
   123fa:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN10CardReader9closefileEv>
   123fe:	0e 94 86 72 	call	0xe50c	; 0xe50c <_Z9quickStopv>
   12402:	86 ea       	ldi	r24, 0xA6	; 166
   12404:	92 e1       	ldi	r25, 0x12	; 18
   12406:	0e 94 ed 22 	call	0x45da	; 0x45da <_Z14enquecommand_PPKc>
   1240a:	80 91 29 0e 	lds	r24, 0x0E29
   1240e:	88 23       	and	r24, r24
   12410:	21 f1       	breq	.+72     	; 0x1245a <_ZL15lcd_sdcard_stopv+0x6c>
   12412:	10 92 29 0e 	sts	0x0E29, r1
   12416:	c0 91 63 05 	lds	r28, 0x0563
   1241a:	d0 e0       	ldi	r29, 0x00	; 0
   1241c:	fe 01       	movw	r30, r28
   1241e:	ee 0f       	add	r30, r30
   12420:	ff 1f       	adc	r31, r31
   12422:	e7 5e       	subi	r30, 0xE7	; 231
   12424:	fe 4e       	sbci	r31, 0xEE	; 238
   12426:	60 81       	ld	r22, Z
   12428:	71 81       	ldd	r23, Z+1	; 0x01
   1242a:	88 27       	eor	r24, r24
   1242c:	77 fd       	sbrc	r23, 7
   1242e:	80 95       	com	r24
   12430:	98 2f       	mov	r25, r24
   12432:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12436:	20 91 42 02 	lds	r18, 0x0242
   1243a:	30 91 43 02 	lds	r19, 0x0243
   1243e:	40 91 44 02 	lds	r20, 0x0244
   12442:	50 91 45 02 	lds	r21, 0x0245
   12446:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
   1244a:	18 16       	cp	r1, r24
   1244c:	34 f4       	brge	.+12     	; 0x1245a <_ZL15lcd_sdcard_stopv+0x6c>
   1244e:	cc 0f       	add	r28, r28
   12450:	dd 1f       	adc	r29, r29
   12452:	c7 5e       	subi	r28, 0xE7	; 231
   12454:	de 4e       	sbci	r29, 0xEE	; 238
   12456:	19 82       	std	Y+1, r1	; 0x01
   12458:	18 82       	st	Y, r1
   1245a:	df 91       	pop	r29
   1245c:	cf 91       	pop	r28
   1245e:	08 95       	ret

00012460 <_ZL17lcd_sdcard_resumev>:
   12460:	82 e9       	ldi	r24, 0x92	; 146
   12462:	95 e0       	ldi	r25, 0x05	; 5
   12464:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <_ZN10CardReader14startFileprintEv>

00012468 <_ZL16lcd_sdcard_pausev>:
   12468:	82 e9       	ldi	r24, 0x92	; 146
   1246a:	95 e0       	ldi	r25, 0x05	; 5
   1246c:	0c 94 b7 12 	jmp	0x256e	; 0x256e <_ZN10CardReader12pauseSDPrintEv>

00012470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>:
   12470:	ef 92       	push	r14
   12472:	ff 92       	push	r15
   12474:	0f 93       	push	r16
   12476:	1f 93       	push	r17
   12478:	cf 93       	push	r28
   1247a:	df 93       	push	r29
   1247c:	eb 01       	movw	r28, r22
   1247e:	e4 2e       	mov	r14, r20
   12480:	02 2f       	mov	r16, r18
   12482:	f3 2e       	mov	r15, r19
   12484:	e2 2f       	mov	r30, r18
   12486:	f3 2f       	mov	r31, r19
   12488:	df 01       	movw	r26, r30
   1248a:	0d 90       	ld	r0, X+
   1248c:	00 20       	and	r0, r0
   1248e:	e9 f7       	brne	.-6      	; 0x1248a <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x1a>
   12490:	ea 1b       	sub	r30, r26
   12492:	1e 2f       	mov	r17, r30
   12494:	1e 5e       	subi	r17, 0xEE	; 238
   12496:	48 2f       	mov	r20, r24
   12498:	60 e0       	ldi	r22, 0x00	; 0
   1249a:	8f ef       	ldi	r24, 0xFF	; 255
   1249c:	91 e1       	ldi	r25, 0x11	; 17
   1249e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   124a2:	6e 2d       	mov	r22, r14
   124a4:	8f ef       	ldi	r24, 0xFF	; 255
   124a6:	91 e1       	ldi	r25, 0x11	; 17
   124a8:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   124ac:	fe 01       	movw	r30, r28
   124ae:	64 91       	lpm	r22, Z
   124b0:	66 23       	and	r22, r22
   124b2:	89 f0       	breq	.+34     	; 0x124d6 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x66>
   124b4:	11 11       	cpse	r17, r1
   124b6:	17 c0       	rjmp	.+46     	; 0x124e6 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x76>
   124b8:	1d c0       	rjmp	.+58     	; 0x124f4 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x84>
   124ba:	60 e2       	ldi	r22, 0x20	; 32
   124bc:	8f ef       	ldi	r24, 0xFF	; 255
   124be:	91 e1       	ldi	r25, 0x11	; 17
   124c0:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   124c4:	11 50       	subi	r17, 0x01	; 1
   124c6:	c9 f7       	brne	.-14     	; 0x124ba <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x4a>
   124c8:	60 2f       	mov	r22, r16
   124ca:	7f 2d       	mov	r23, r15
   124cc:	8f ef       	ldi	r24, 0xFF	; 255
   124ce:	91 e1       	ldi	r25, 0x11	; 17
   124d0:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   124d4:	15 c0       	rjmp	.+42     	; 0x12500 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x90>
   124d6:	6a e3       	ldi	r22, 0x3A	; 58
   124d8:	8f ef       	ldi	r24, 0xFF	; 255
   124da:	91 e1       	ldi	r25, 0x11	; 17
   124dc:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   124e0:	11 11       	cpse	r17, r1
   124e2:	eb cf       	rjmp	.-42     	; 0x124ba <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x4a>
   124e4:	f1 cf       	rjmp	.-30     	; 0x124c8 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x58>
   124e6:	8f ef       	ldi	r24, 0xFF	; 255
   124e8:	91 e1       	ldi	r25, 0x11	; 17
   124ea:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   124ee:	21 96       	adiw	r28, 0x01	; 1
   124f0:	11 50       	subi	r17, 0x01	; 1
   124f2:	dc cf       	rjmp	.-72     	; 0x124ac <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x3c>
   124f4:	6a e3       	ldi	r22, 0x3A	; 58
   124f6:	8f ef       	ldi	r24, 0xFF	; 255
   124f8:	91 e1       	ldi	r25, 0x11	; 17
   124fa:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   124fe:	e4 cf       	rjmp	.-56     	; 0x124c8 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc+0x58>
   12500:	df 91       	pop	r29
   12502:	cf 91       	pop	r28
   12504:	1f 91       	pop	r17
   12506:	0f 91       	pop	r16
   12508:	ff 90       	pop	r15
   1250a:	ef 90       	pop	r14
   1250c:	08 95       	ret

0001250e <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_>:
   1250e:	df 92       	push	r13
   12510:	ef 92       	push	r14
   12512:	ff 92       	push	r15
   12514:	0f 93       	push	r16
   12516:	1f 93       	push	r17
   12518:	cf 93       	push	r28
   1251a:	df 93       	push	r29
   1251c:	d8 2e       	mov	r13, r24
   1251e:	eb 01       	movw	r28, r22
   12520:	e4 2e       	mov	r14, r20
   12522:	89 01       	movw	r16, r18
   12524:	c9 01       	movw	r24, r18
   12526:	0e 94 b6 c3 	call	0x1876c	; 0x1876c <__strlen_P>
   1252a:	91 e1       	ldi	r25, 0x11	; 17
   1252c:	f9 2e       	mov	r15, r25
   1252e:	f8 1a       	sub	r15, r24
   12530:	4d 2d       	mov	r20, r13
   12532:	60 e0       	ldi	r22, 0x00	; 0
   12534:	8f ef       	ldi	r24, 0xFF	; 255
   12536:	91 e1       	ldi	r25, 0x11	; 17
   12538:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1253c:	6e 2d       	mov	r22, r14
   1253e:	8f ef       	ldi	r24, 0xFF	; 255
   12540:	91 e1       	ldi	r25, 0x11	; 17
   12542:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   12546:	fe 01       	movw	r30, r28
   12548:	64 91       	lpm	r22, Z
   1254a:	66 23       	and	r22, r22
   1254c:	71 f0       	breq	.+28     	; 0x1256a <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x5c>
   1254e:	f1 10       	cpse	r15, r1
   12550:	14 c0       	rjmp	.+40     	; 0x1257a <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x6c>
   12552:	1a c0       	rjmp	.+52     	; 0x12588 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x7a>
   12554:	60 e2       	ldi	r22, 0x20	; 32
   12556:	8f ef       	ldi	r24, 0xFF	; 255
   12558:	91 e1       	ldi	r25, 0x11	; 17
   1255a:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   1255e:	fa 94       	dec	r15
   12560:	c9 f7       	brne	.-14     	; 0x12554 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x46>
   12562:	c8 01       	movw	r24, r16
   12564:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   12568:	15 c0       	rjmp	.+42     	; 0x12594 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x86>
   1256a:	6a e3       	ldi	r22, 0x3A	; 58
   1256c:	8f ef       	ldi	r24, 0xFF	; 255
   1256e:	91 e1       	ldi	r25, 0x11	; 17
   12570:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   12574:	f1 10       	cpse	r15, r1
   12576:	ee cf       	rjmp	.-36     	; 0x12554 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x46>
   12578:	f4 cf       	rjmp	.-24     	; 0x12562 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x54>
   1257a:	8f ef       	ldi	r24, 0xFF	; 255
   1257c:	91 e1       	ldi	r25, 0x11	; 17
   1257e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   12582:	21 96       	adiw	r28, 0x01	; 1
   12584:	fa 94       	dec	r15
   12586:	df cf       	rjmp	.-66     	; 0x12546 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x38>
   12588:	6a e3       	ldi	r22, 0x3A	; 58
   1258a:	8f ef       	ldi	r24, 0xFF	; 255
   1258c:	91 e1       	ldi	r25, 0x11	; 17
   1258e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   12592:	e7 cf       	rjmp	.-50     	; 0x12562 <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_+0x54>
   12594:	df 91       	pop	r29
   12596:	cf 91       	pop	r28
   12598:	1f 91       	pop	r17
   1259a:	0f 91       	pop	r16
   1259c:	ff 90       	pop	r15
   1259e:	ef 90       	pop	r14
   125a0:	df 90       	pop	r13
   125a2:	08 95       	ret

000125a4 <_Z19copy_and_scalePID_dv>:
   125a4:	60 91 d4 11 	lds	r22, 0x11D4
   125a8:	70 91 d5 11 	lds	r23, 0x11D5
   125ac:	80 91 d6 11 	lds	r24, 0x11D6
   125b0:	90 91 d7 11 	lds	r25, 0x11D7
   125b4:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <_Z10scalePID_df>
   125b8:	60 93 53 02 	sts	0x0253, r22
   125bc:	70 93 54 02 	sts	0x0254, r23
   125c0:	80 93 55 02 	sts	0x0255, r24
   125c4:	90 93 56 02 	sts	0x0256, r25
   125c8:	0c 94 1c 73 	jmp	0xe638	; 0xe638 <_Z9updatePIDv>

000125cc <_Z19copy_and_scalePID_iv>:
   125cc:	60 91 d8 11 	lds	r22, 0x11D8
   125d0:	70 91 d9 11 	lds	r23, 0x11D9
   125d4:	80 91 da 11 	lds	r24, 0x11DA
   125d8:	90 91 db 11 	lds	r25, 0x11DB
   125dc:	0e 94 8a 7d 	call	0xfb14	; 0xfb14 <_Z10scalePID_if>
   125e0:	60 93 57 02 	sts	0x0257, r22
   125e4:	70 93 58 02 	sts	0x0258, r23
   125e8:	80 93 59 02 	sts	0x0259, r24
   125ec:	90 93 5a 02 	sts	0x025A, r25
   125f0:	0c 94 1c 73 	jmp	0xe638	; 0xe638 <_Z9updatePIDv>

000125f4 <_ZL23lcd_implementation_initv>:
   125f4:	cf 93       	push	r28
   125f6:	df 93       	push	r29
   125f8:	cd b7       	in	r28, 0x3d	; 61
   125fa:	de b7       	in	r29, 0x3e	; 62
   125fc:	c0 54       	subi	r28, 0x40	; 64
   125fe:	d1 09       	sbc	r29, r1
   12600:	0f b6       	in	r0, 0x3f	; 63
   12602:	f8 94       	cli
   12604:	de bf       	out	0x3e, r29	; 62
   12606:	0f be       	out	0x3f, r0	; 63
   12608:	cd bf       	out	0x3d, r28	; 61
   1260a:	88 e0       	ldi	r24, 0x08	; 8
   1260c:	ed ea       	ldi	r30, 0xAD	; 173
   1260e:	f2 e0       	ldi	r31, 0x02	; 2
   12610:	de 01       	movw	r26, r28
   12612:	d9 96       	adiw	r26, 0x39	; 57
   12614:	01 90       	ld	r0, Z+
   12616:	0d 92       	st	X+, r0
   12618:	8a 95       	dec	r24
   1261a:	e1 f7       	brne	.-8      	; 0x12614 <_ZL23lcd_implementation_initv+0x20>
   1261c:	88 e0       	ldi	r24, 0x08	; 8
   1261e:	e5 eb       	ldi	r30, 0xB5	; 181
   12620:	f2 e0       	ldi	r31, 0x02	; 2
   12622:	de 01       	movw	r26, r28
   12624:	d1 96       	adiw	r26, 0x31	; 49
   12626:	01 90       	ld	r0, Z+
   12628:	0d 92       	st	X+, r0
   1262a:	8a 95       	dec	r24
   1262c:	e1 f7       	brne	.-8      	; 0x12626 <_ZL23lcd_implementation_initv+0x32>
   1262e:	88 e0       	ldi	r24, 0x08	; 8
   12630:	ed eb       	ldi	r30, 0xBD	; 189
   12632:	f2 e0       	ldi	r31, 0x02	; 2
   12634:	de 01       	movw	r26, r28
   12636:	99 96       	adiw	r26, 0x29	; 41
   12638:	01 90       	ld	r0, Z+
   1263a:	0d 92       	st	X+, r0
   1263c:	8a 95       	dec	r24
   1263e:	e1 f7       	brne	.-8      	; 0x12638 <_ZL23lcd_implementation_initv+0x44>
   12640:	88 e0       	ldi	r24, 0x08	; 8
   12642:	e5 ec       	ldi	r30, 0xC5	; 197
   12644:	f2 e0       	ldi	r31, 0x02	; 2
   12646:	de 01       	movw	r26, r28
   12648:	91 96       	adiw	r26, 0x21	; 33
   1264a:	01 90       	ld	r0, Z+
   1264c:	0d 92       	st	X+, r0
   1264e:	8a 95       	dec	r24
   12650:	e1 f7       	brne	.-8      	; 0x1264a <_ZL23lcd_implementation_initv+0x56>
   12652:	88 e0       	ldi	r24, 0x08	; 8
   12654:	ed ec       	ldi	r30, 0xCD	; 205
   12656:	f2 e0       	ldi	r31, 0x02	; 2
   12658:	de 01       	movw	r26, r28
   1265a:	59 96       	adiw	r26, 0x19	; 25
   1265c:	01 90       	ld	r0, Z+
   1265e:	0d 92       	st	X+, r0
   12660:	8a 95       	dec	r24
   12662:	e1 f7       	brne	.-8      	; 0x1265c <_ZL23lcd_implementation_initv+0x68>
   12664:	88 e0       	ldi	r24, 0x08	; 8
   12666:	e5 ed       	ldi	r30, 0xD5	; 213
   12668:	f2 e0       	ldi	r31, 0x02	; 2
   1266a:	de 01       	movw	r26, r28
   1266c:	51 96       	adiw	r26, 0x11	; 17
   1266e:	01 90       	ld	r0, Z+
   12670:	0d 92       	st	X+, r0
   12672:	8a 95       	dec	r24
   12674:	e1 f7       	brne	.-8      	; 0x1266e <_ZL23lcd_implementation_initv+0x7a>
   12676:	88 e0       	ldi	r24, 0x08	; 8
   12678:	ed ed       	ldi	r30, 0xDD	; 221
   1267a:	f2 e0       	ldi	r31, 0x02	; 2
   1267c:	de 01       	movw	r26, r28
   1267e:	19 96       	adiw	r26, 0x09	; 9
   12680:	01 90       	ld	r0, Z+
   12682:	0d 92       	st	X+, r0
   12684:	8a 95       	dec	r24
   12686:	e1 f7       	brne	.-8      	; 0x12680 <_ZL23lcd_implementation_initv+0x8c>
   12688:	88 e0       	ldi	r24, 0x08	; 8
   1268a:	e5 ee       	ldi	r30, 0xE5	; 229
   1268c:	f2 e0       	ldi	r31, 0x02	; 2
   1268e:	de 01       	movw	r26, r28
   12690:	11 96       	adiw	r26, 0x01	; 1
   12692:	01 90       	ld	r0, Z+
   12694:	0d 92       	st	X+, r0
   12696:	8a 95       	dec	r24
   12698:	e1 f7       	brne	.-8      	; 0x12692 <_ZL23lcd_implementation_initv+0x9e>
   1269a:	20 e0       	ldi	r18, 0x00	; 0
   1269c:	44 e0       	ldi	r20, 0x04	; 4
   1269e:	64 e1       	ldi	r22, 0x14	; 20
   126a0:	8f ef       	ldi	r24, 0xFF	; 255
   126a2:	91 e1       	ldi	r25, 0x11	; 17
   126a4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN17LiquidCrystal_I2C5beginEhhh>
   126a8:	ae 01       	movw	r20, r28
   126aa:	47 5c       	subi	r20, 0xC7	; 199
   126ac:	5f 4f       	sbci	r21, 0xFF	; 255
   126ae:	60 e0       	ldi	r22, 0x00	; 0
   126b0:	8f ef       	ldi	r24, 0xFF	; 255
   126b2:	91 e1       	ldi	r25, 0x11	; 17
   126b4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   126b8:	ae 01       	movw	r20, r28
   126ba:	4f 5c       	subi	r20, 0xCF	; 207
   126bc:	5f 4f       	sbci	r21, 0xFF	; 255
   126be:	61 e0       	ldi	r22, 0x01	; 1
   126c0:	8f ef       	ldi	r24, 0xFF	; 255
   126c2:	91 e1       	ldi	r25, 0x11	; 17
   126c4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   126c8:	ae 01       	movw	r20, r28
   126ca:	47 5d       	subi	r20, 0xD7	; 215
   126cc:	5f 4f       	sbci	r21, 0xFF	; 255
   126ce:	62 e0       	ldi	r22, 0x02	; 2
   126d0:	8f ef       	ldi	r24, 0xFF	; 255
   126d2:	91 e1       	ldi	r25, 0x11	; 17
   126d4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   126d8:	ae 01       	movw	r20, r28
   126da:	4f 5d       	subi	r20, 0xDF	; 223
   126dc:	5f 4f       	sbci	r21, 0xFF	; 255
   126de:	63 e0       	ldi	r22, 0x03	; 3
   126e0:	8f ef       	ldi	r24, 0xFF	; 255
   126e2:	91 e1       	ldi	r25, 0x11	; 17
   126e4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   126e8:	ae 01       	movw	r20, r28
   126ea:	47 5e       	subi	r20, 0xE7	; 231
   126ec:	5f 4f       	sbci	r21, 0xFF	; 255
   126ee:	64 e0       	ldi	r22, 0x04	; 4
   126f0:	8f ef       	ldi	r24, 0xFF	; 255
   126f2:	91 e1       	ldi	r25, 0x11	; 17
   126f4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   126f8:	ae 01       	movw	r20, r28
   126fa:	4f 5e       	subi	r20, 0xEF	; 239
   126fc:	5f 4f       	sbci	r21, 0xFF	; 255
   126fe:	65 e0       	ldi	r22, 0x05	; 5
   12700:	8f ef       	ldi	r24, 0xFF	; 255
   12702:	91 e1       	ldi	r25, 0x11	; 17
   12704:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   12708:	ae 01       	movw	r20, r28
   1270a:	47 5f       	subi	r20, 0xF7	; 247
   1270c:	5f 4f       	sbci	r21, 0xFF	; 255
   1270e:	66 e0       	ldi	r22, 0x06	; 6
   12710:	8f ef       	ldi	r24, 0xFF	; 255
   12712:	91 e1       	ldi	r25, 0x11	; 17
   12714:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   12718:	ae 01       	movw	r20, r28
   1271a:	4f 5f       	subi	r20, 0xFF	; 255
   1271c:	5f 4f       	sbci	r21, 0xFF	; 255
   1271e:	67 e0       	ldi	r22, 0x07	; 7
   12720:	8f ef       	ldi	r24, 0xFF	; 255
   12722:	91 e1       	ldi	r25, 0x11	; 17
   12724:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN3LCD10createCharEhPh>
   12728:	8f ef       	ldi	r24, 0xFF	; 255
   1272a:	91 e1       	ldi	r25, 0x11	; 17
   1272c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN3LCD5clearEv>
   12730:	c0 5c       	subi	r28, 0xC0	; 192
   12732:	df 4f       	sbci	r29, 0xFF	; 255
   12734:	0f b6       	in	r0, 0x3f	; 63
   12736:	f8 94       	cli
   12738:	de bf       	out	0x3e, r29	; 62
   1273a:	0f be       	out	0x3f, r0	; 63
   1273c:	cd bf       	out	0x3d, r28	; 61
   1273e:	df 91       	pop	r29
   12740:	cf 91       	pop	r28
   12742:	08 95       	ret

00012744 <_Z15lcd_preheat_absv>:
   12744:	60 91 1c 12 	lds	r22, 0x121C
   12748:	70 91 1d 12 	lds	r23, 0x121D
   1274c:	88 27       	eor	r24, r24
   1274e:	77 fd       	sbrc	r23, 7
   12750:	80 95       	com	r24
   12752:	98 2f       	mov	r25, r24
   12754:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12758:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1275c:	70 93 1a 11 	sts	0x111A, r23
   12760:	60 93 19 11 	sts	0x1119, r22
   12764:	60 91 1a 12 	lds	r22, 0x121A
   12768:	70 91 1b 12 	lds	r23, 0x121B
   1276c:	88 27       	eor	r24, r24
   1276e:	77 fd       	sbrc	r23, 7
   12770:	80 95       	com	r24
   12772:	98 2f       	mov	r25, r24
   12774:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12778:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1277c:	70 93 18 11 	sts	0x1118, r23
   12780:	60 93 17 11 	sts	0x1117, r22
   12784:	80 91 18 12 	lds	r24, 0x1218
   12788:	90 91 19 12 	lds	r25, 0x1219
   1278c:	90 93 62 05 	sts	0x0562, r25
   12790:	80 93 61 05 	sts	0x0561, r24
   12794:	0e 94 b2 7f 	call	0xff64	; 0xff64 <_ZL20lcd_return_to_statusv>
   12798:	0c 94 b4 75 	jmp	0xeb68	; 0xeb68 <_Z8setWatchv>

0001279c <_Z15lcd_preheat_plav>:
   1279c:	60 91 22 12 	lds	r22, 0x1222
   127a0:	70 91 23 12 	lds	r23, 0x1223
   127a4:	88 27       	eor	r24, r24
   127a6:	77 fd       	sbrc	r23, 7
   127a8:	80 95       	com	r24
   127aa:	98 2f       	mov	r25, r24
   127ac:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   127b0:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   127b4:	70 93 1a 11 	sts	0x111A, r23
   127b8:	60 93 19 11 	sts	0x1119, r22
   127bc:	60 91 20 12 	lds	r22, 0x1220
   127c0:	70 91 21 12 	lds	r23, 0x1221
   127c4:	88 27       	eor	r24, r24
   127c6:	77 fd       	sbrc	r23, 7
   127c8:	80 95       	com	r24
   127ca:	98 2f       	mov	r25, r24
   127cc:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   127d0:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   127d4:	70 93 18 11 	sts	0x1118, r23
   127d8:	60 93 17 11 	sts	0x1117, r22
   127dc:	80 91 1e 12 	lds	r24, 0x121E
   127e0:	90 91 1f 12 	lds	r25, 0x121F
   127e4:	90 93 62 05 	sts	0x0562, r25
   127e8:	80 93 61 05 	sts	0x0561, r24
   127ec:	0e 94 b2 7f 	call	0xff64	; 0xff64 <_ZL20lcd_return_to_statusv>
   127f0:	0c 94 b4 75 	jmp	0xeb68	; 0xeb68 <_Z8setWatchv>

000127f4 <_Z27lcd_implementation_draweditPKcPc>:
   127f4:	0f 93       	push	r16
   127f6:	1f 93       	push	r17
   127f8:	cf 93       	push	r28
   127fa:	df 93       	push	r29
   127fc:	ec 01       	movw	r28, r24
   127fe:	06 2f       	mov	r16, r22
   12800:	17 2f       	mov	r17, r23
   12802:	41 e0       	ldi	r20, 0x01	; 1
   12804:	61 e0       	ldi	r22, 0x01	; 1
   12806:	8f ef       	ldi	r24, 0xFF	; 255
   12808:	91 e1       	ldi	r25, 0x11	; 17
   1280a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1280e:	ce 01       	movw	r24, r28
   12810:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   12814:	6a e3       	ldi	r22, 0x3A	; 58
   12816:	8f ef       	ldi	r24, 0xFF	; 255
   12818:	91 e1       	ldi	r25, 0x11	; 17
   1281a:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   1281e:	e0 2f       	mov	r30, r16
   12820:	f1 2f       	mov	r31, r17
   12822:	df 01       	movw	r26, r30
   12824:	0d 90       	ld	r0, X+
   12826:	00 20       	and	r0, r0
   12828:	e9 f7       	brne	.-6      	; 0x12824 <_Z27lcd_implementation_draweditPKcPc+0x30>
   1282a:	ea 1b       	sub	r30, r26
   1282c:	6e 2f       	mov	r22, r30
   1282e:	6c 5e       	subi	r22, 0xEC	; 236
   12830:	41 e0       	ldi	r20, 0x01	; 1
   12832:	8f ef       	ldi	r24, 0xFF	; 255
   12834:	91 e1       	ldi	r25, 0x11	; 17
   12836:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1283a:	60 2f       	mov	r22, r16
   1283c:	71 2f       	mov	r23, r17
   1283e:	8f ef       	ldi	r24, 0xFF	; 255
   12840:	91 e1       	ldi	r25, 0x11	; 17
   12842:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   12846:	df 91       	pop	r29
   12848:	cf 91       	pop	r28
   1284a:	1f 91       	pop	r17
   1284c:	0f 91       	pop	r16
   1284e:	08 95       	ret

00012850 <_Z13lcd_setstatusPKc>:
   12850:	20 91 17 12 	lds	r18, 0x1217
   12854:	21 11       	cpse	r18, r1
   12856:	0a c0       	rjmp	.+20     	; 0x1286c <_Z13lcd_setstatusPKc+0x1c>
   12858:	44 e1       	ldi	r20, 0x14	; 20
   1285a:	50 e0       	ldi	r21, 0x00	; 0
   1285c:	bc 01       	movw	r22, r24
   1285e:	87 e6       	ldi	r24, 0x67	; 103
   12860:	92 e0       	ldi	r25, 0x02	; 2
   12862:	0e 94 41 c4 	call	0x18882	; 0x18882 <strncpy>
   12866:	82 e0       	ldi	r24, 0x02	; 2
   12868:	80 93 64 02 	sts	0x0264, r24
   1286c:	08 95       	ret

0001286e <_Z16lcd_setstatuspgmPKc>:
   1286e:	20 91 17 12 	lds	r18, 0x1217
   12872:	21 11       	cpse	r18, r1
   12874:	0a c0       	rjmp	.+20     	; 0x1288a <_Z16lcd_setstatuspgmPKc+0x1c>
   12876:	44 e1       	ldi	r20, 0x14	; 20
   12878:	50 e0       	ldi	r21, 0x00	; 0
   1287a:	bc 01       	movw	r22, r24
   1287c:	87 e6       	ldi	r24, 0x67	; 103
   1287e:	92 e0       	ldi	r25, 0x02	; 2
   12880:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <strncpy_P>
   12884:	82 e0       	ldi	r24, 0x02	; 2
   12886:	80 93 64 02 	sts	0x0264, r24
   1288a:	08 95       	ret

0001288c <_Z21lcd_setalertstatuspgmPKc>:
   1288c:	f0 df       	rcall	.-32     	; 0x1286e <_Z16lcd_setstatuspgmPKc>
   1288e:	81 e0       	ldi	r24, 0x01	; 1
   12890:	80 93 17 12 	sts	0x1217, r24
   12894:	0c 94 b2 7f 	jmp	0xff64	; 0xff64 <_ZL20lcd_return_to_statusv>

00012898 <_Z21lcd_reset_alert_levelv>:
   12898:	10 92 17 12 	sts	0x1217, r1
   1289c:	08 95       	ret

0001289e <_Z18lcd_buttons_updatev>:
   1289e:	0f 93       	push	r16
   128a0:	1f 93       	push	r17
   128a2:	cf 93       	push	r28
   128a4:	c2 b3       	in	r28, 0x12	; 18
   128a6:	c6 95       	lsr	r28
   128a8:	c1 70       	andi	r28, 0x01	; 1
   128aa:	81 e0       	ldi	r24, 0x01	; 1
   128ac:	c8 27       	eor	r28, r24
   128ae:	80 91 09 01 	lds	r24, 0x0109
   128b2:	88 23       	and	r24, r24
   128b4:	0c f0       	brlt	.+2      	; 0x128b8 <_Z18lcd_buttons_updatev+0x1a>
   128b6:	c2 60       	ori	r28, 0x02	; 2
   128b8:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   128bc:	00 91 f9 11 	lds	r16, 0x11F9
   128c0:	10 91 fa 11 	lds	r17, 0x11FA
   128c4:	20 91 fb 11 	lds	r18, 0x11FB
   128c8:	30 91 fc 11 	lds	r19, 0x11FC
   128cc:	06 17       	cp	r16, r22
   128ce:	17 07       	cpc	r17, r23
   128d0:	28 07       	cpc	r18, r24
   128d2:	39 07       	cpc	r19, r25
   128d4:	10 f4       	brcc	.+4      	; 0x128da <_Z18lcd_buttons_updatev+0x3c>
   128d6:	4a 9b       	sbis	0x09, 2	; 9
   128d8:	59 c0       	rjmp	.+178    	; 0x1298c <_Z18lcd_buttons_updatev+0xee>
   128da:	c0 93 fe 11 	sts	0x11FE, r28
   128de:	80 91 fe 11 	lds	r24, 0x11FE
   128e2:	81 70       	andi	r24, 0x01	; 1
   128e4:	90 91 fe 11 	lds	r25, 0x11FE
   128e8:	91 fd       	sbrc	r25, 1
   128ea:	82 60       	ori	r24, 0x02	; 2
   128ec:	90 91 f8 11 	lds	r25, 0x11F8
   128f0:	89 17       	cp	r24, r25
   128f2:	09 f4       	brne	.+2      	; 0x128f6 <_Z18lcd_buttons_updatev+0x58>
   128f4:	48 c0       	rjmp	.+144    	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   128f6:	81 30       	cpi	r24, 0x01	; 1
   128f8:	b9 f1       	breq	.+110    	; 0x12968 <_Z18lcd_buttons_updatev+0xca>
   128fa:	30 f0       	brcs	.+12     	; 0x12908 <_Z18lcd_buttons_updatev+0x6a>
   128fc:	82 30       	cpi	r24, 0x02	; 2
   128fe:	a1 f0       	breq	.+40     	; 0x12928 <_Z18lcd_buttons_updatev+0x8a>
   12900:	83 30       	cpi	r24, 0x03	; 3
   12902:	09 f0       	breq	.+2      	; 0x12906 <_Z18lcd_buttons_updatev+0x68>
   12904:	40 c0       	rjmp	.+128    	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12906:	20 c0       	rjmp	.+64     	; 0x12948 <_Z18lcd_buttons_updatev+0xaa>
   12908:	91 30       	cpi	r25, 0x01	; 1
   1290a:	31 f4       	brne	.+12     	; 0x12918 <_Z18lcd_buttons_updatev+0x7a>
   1290c:	90 91 24 12 	lds	r25, 0x1224
   12910:	9f 5f       	subi	r25, 0xFF	; 255
   12912:	90 93 24 12 	sts	0x1224, r25
   12916:	37 c0       	rjmp	.+110    	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12918:	92 30       	cpi	r25, 0x02	; 2
   1291a:	a9 f5       	brne	.+106    	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   1291c:	90 91 24 12 	lds	r25, 0x1224
   12920:	91 50       	subi	r25, 0x01	; 1
   12922:	90 93 24 12 	sts	0x1224, r25
   12926:	2f c0       	rjmp	.+94     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12928:	91 11       	cpse	r25, r1
   1292a:	06 c0       	rjmp	.+12     	; 0x12938 <_Z18lcd_buttons_updatev+0x9a>
   1292c:	90 91 24 12 	lds	r25, 0x1224
   12930:	9f 5f       	subi	r25, 0xFF	; 255
   12932:	90 93 24 12 	sts	0x1224, r25
   12936:	27 c0       	rjmp	.+78     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12938:	93 30       	cpi	r25, 0x03	; 3
   1293a:	29 f5       	brne	.+74     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   1293c:	90 91 24 12 	lds	r25, 0x1224
   12940:	91 50       	subi	r25, 0x01	; 1
   12942:	90 93 24 12 	sts	0x1224, r25
   12946:	1f c0       	rjmp	.+62     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12948:	92 30       	cpi	r25, 0x02	; 2
   1294a:	31 f4       	brne	.+12     	; 0x12958 <_Z18lcd_buttons_updatev+0xba>
   1294c:	90 91 24 12 	lds	r25, 0x1224
   12950:	9f 5f       	subi	r25, 0xFF	; 255
   12952:	90 93 24 12 	sts	0x1224, r25
   12956:	17 c0       	rjmp	.+46     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12958:	91 30       	cpi	r25, 0x01	; 1
   1295a:	a9 f4       	brne	.+42     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   1295c:	90 91 24 12 	lds	r25, 0x1224
   12960:	91 50       	subi	r25, 0x01	; 1
   12962:	90 93 24 12 	sts	0x1224, r25
   12966:	0f c0       	rjmp	.+30     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12968:	93 30       	cpi	r25, 0x03	; 3
   1296a:	31 f4       	brne	.+12     	; 0x12978 <_Z18lcd_buttons_updatev+0xda>
   1296c:	90 91 24 12 	lds	r25, 0x1224
   12970:	9f 5f       	subi	r25, 0xFF	; 255
   12972:	90 93 24 12 	sts	0x1224, r25
   12976:	07 c0       	rjmp	.+14     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   12978:	91 11       	cpse	r25, r1
   1297a:	05 c0       	rjmp	.+10     	; 0x12986 <_Z18lcd_buttons_updatev+0xe8>
   1297c:	90 91 24 12 	lds	r25, 0x1224
   12980:	91 50       	subi	r25, 0x01	; 1
   12982:	90 93 24 12 	sts	0x1224, r25
   12986:	80 93 f8 11 	sts	0x11F8, r24
   1298a:	02 c0       	rjmp	.+4      	; 0x12990 <_Z18lcd_buttons_updatev+0xf2>
   1298c:	c4 60       	ori	r28, 0x04	; 4
   1298e:	a5 cf       	rjmp	.-182    	; 0x128da <_Z18lcd_buttons_updatev+0x3c>
   12990:	cf 91       	pop	r28
   12992:	1f 91       	pop	r17
   12994:	0f 91       	pop	r16
   12996:	08 95       	ret

00012998 <_Z10lcd_updatev>:
   12998:	0f 93       	push	r16
   1299a:	1f 93       	push	r17
   1299c:	80 df       	rcall	.-256    	; 0x1289e <_Z18lcd_buttons_updatev>
   1299e:	99 b1       	in	r25, 0x09	; 9
   129a0:	90 95       	com	r25
   129a2:	99 1f       	adc	r25, r25
   129a4:	99 27       	eor	r25, r25
   129a6:	99 1f       	adc	r25, r25
   129a8:	80 91 f3 11 	lds	r24, 0x11F3
   129ac:	98 17       	cp	r25, r24
   129ae:	f1 f0       	breq	.+60     	; 0x129ec <_Z10lcd_updatev+0x54>
   129b0:	82 e0       	ldi	r24, 0x02	; 2
   129b2:	80 93 64 02 	sts	0x0264, r24
   129b6:	89 b1       	in	r24, 0x09	; 9
   129b8:	80 95       	com	r24
   129ba:	88 1f       	adc	r24, r24
   129bc:	88 27       	eor	r24, r24
   129be:	88 1f       	adc	r24, r24
   129c0:	80 93 f3 11 	sts	0x11F3, r24
   129c4:	17 de       	rcall	.-978    	; 0x125f4 <_ZL23lcd_implementation_initv>
   129c6:	80 91 f3 11 	lds	r24, 0x11F3
   129ca:	88 23       	and	r24, r24
   129cc:	41 f0       	breq	.+16     	; 0x129de <_Z10lcd_updatev+0x46>
   129ce:	82 e9       	ldi	r24, 0x92	; 146
   129d0:	95 e0       	ldi	r25, 0x05	; 5
   129d2:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN10CardReader6initsdEv>
   129d6:	89 e7       	ldi	r24, 0x79	; 121
   129d8:	96 e1       	ldi	r25, 0x16	; 22
   129da:	49 df       	rcall	.-366    	; 0x1286e <_Z16lcd_setstatuspgmPKc>
   129dc:	07 c0       	rjmp	.+14     	; 0x129ec <_Z10lcd_updatev+0x54>
   129de:	82 e9       	ldi	r24, 0x92	; 146
   129e0:	95 e0       	ldi	r25, 0x05	; 5
   129e2:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN10CardReader7releaseEv>
   129e6:	87 e8       	ldi	r24, 0x87	; 135
   129e8:	96 e1       	ldi	r25, 0x16	; 22
   129ea:	41 df       	rcall	.-382    	; 0x1286e <_Z16lcd_setstatuspgmPKc>
   129ec:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   129f0:	00 91 ef 11 	lds	r16, 0x11EF
   129f4:	10 91 f0 11 	lds	r17, 0x11F0
   129f8:	20 91 f1 11 	lds	r18, 0x11F1
   129fc:	30 91 f2 11 	lds	r19, 0x11F2
   12a00:	06 17       	cp	r16, r22
   12a02:	17 07       	cpc	r17, r23
   12a04:	28 07       	cpc	r18, r24
   12a06:	39 07       	cpc	r19, r25
   12a08:	08 f0       	brcs	.+2      	; 0x12a0c <_Z10lcd_updatev+0x74>
   12a0a:	87 c0       	rjmp	.+270    	; 0x12b1a <_Z10lcd_updatev+0x182>
   12a0c:	80 91 24 12 	lds	r24, 0x1224
   12a10:	88 23       	and	r24, r24
   12a12:	71 f1       	breq	.+92     	; 0x12a70 <_Z10lcd_updatev+0xd8>
   12a14:	91 e0       	ldi	r25, 0x01	; 1
   12a16:	90 93 64 02 	sts	0x0264, r25
   12a1a:	99 27       	eor	r25, r25
   12a1c:	87 fd       	sbrc	r24, 7
   12a1e:	90 95       	com	r25
   12a20:	a9 2f       	mov	r26, r25
   12a22:	b9 2f       	mov	r27, r25
   12a24:	40 91 f4 11 	lds	r20, 0x11F4
   12a28:	50 91 f5 11 	lds	r21, 0x11F5
   12a2c:	60 91 f6 11 	lds	r22, 0x11F6
   12a30:	70 91 f7 11 	lds	r23, 0x11F7
   12a34:	84 0f       	add	r24, r20
   12a36:	95 1f       	adc	r25, r21
   12a38:	a6 1f       	adc	r26, r22
   12a3a:	b7 1f       	adc	r27, r23
   12a3c:	80 93 f4 11 	sts	0x11F4, r24
   12a40:	90 93 f5 11 	sts	0x11F5, r25
   12a44:	a0 93 f6 11 	sts	0x11F6, r26
   12a48:	b0 93 f7 11 	sts	0x11F7, r27
   12a4c:	10 92 24 12 	sts	0x1224, r1
   12a50:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   12a54:	dc 01       	movw	r26, r24
   12a56:	cb 01       	movw	r24, r22
   12a58:	88 56       	subi	r24, 0x68	; 104
   12a5a:	95 4c       	sbci	r25, 0xC5	; 197
   12a5c:	af 4f       	sbci	r26, 0xFF	; 255
   12a5e:	bf 4f       	sbci	r27, 0xFF	; 255
   12a60:	80 93 25 12 	sts	0x1225, r24
   12a64:	90 93 26 12 	sts	0x1226, r25
   12a68:	a0 93 27 12 	sts	0x1227, r26
   12a6c:	b0 93 28 12 	sts	0x1228, r27
   12a70:	80 91 fe 11 	lds	r24, 0x11FE
   12a74:	82 ff       	sbrs	r24, 2
   12a76:	10 c0       	rjmp	.+32     	; 0x12a98 <_Z10lcd_updatev+0x100>
   12a78:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   12a7c:	dc 01       	movw	r26, r24
   12a7e:	cb 01       	movw	r24, r22
   12a80:	88 56       	subi	r24, 0x68	; 104
   12a82:	95 4c       	sbci	r25, 0xC5	; 197
   12a84:	af 4f       	sbci	r26, 0xFF	; 255
   12a86:	bf 4f       	sbci	r27, 0xFF	; 255
   12a88:	80 93 25 12 	sts	0x1225, r24
   12a8c:	90 93 26 12 	sts	0x1226, r25
   12a90:	a0 93 27 12 	sts	0x1227, r26
   12a94:	b0 93 28 12 	sts	0x1228, r27
   12a98:	e0 91 65 02 	lds	r30, 0x0265
   12a9c:	f0 91 66 02 	lds	r31, 0x0266
   12aa0:	19 95       	eicall
   12aa2:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   12aa6:	00 91 25 12 	lds	r16, 0x1225
   12aaa:	10 91 26 12 	lds	r17, 0x1226
   12aae:	20 91 27 12 	lds	r18, 0x1227
   12ab2:	30 91 28 12 	lds	r19, 0x1228
   12ab6:	06 17       	cp	r16, r22
   12ab8:	17 07       	cpc	r17, r23
   12aba:	28 07       	cpc	r18, r24
   12abc:	39 07       	cpc	r19, r25
   12abe:	38 f4       	brcc	.+14     	; 0x12ace <_Z10lcd_updatev+0x136>
   12ac0:	80 91 65 02 	lds	r24, 0x0265
   12ac4:	90 91 66 02 	lds	r25, 0x0266
   12ac8:	81 5c       	subi	r24, 0xC1	; 193
   12aca:	90 4a       	sbci	r25, 0xA0	; 160
   12acc:	01 f5       	brne	.+64     	; 0x12b0e <_Z10lcd_updatev+0x176>
   12ace:	80 91 64 02 	lds	r24, 0x0264
   12ad2:	82 30       	cpi	r24, 0x02	; 2
   12ad4:	21 f4       	brne	.+8      	; 0x12ade <_Z10lcd_updatev+0x146>
   12ad6:	8f ef       	ldi	r24, 0xFF	; 255
   12ad8:	91 e1       	ldi	r25, 0x11	; 17
   12ada:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN3LCD5clearEv>
   12ade:	80 91 64 02 	lds	r24, 0x0264
   12ae2:	88 23       	and	r24, r24
   12ae4:	19 f0       	breq	.+6      	; 0x12aec <_Z10lcd_updatev+0x154>
   12ae6:	81 50       	subi	r24, 0x01	; 1
   12ae8:	80 93 64 02 	sts	0x0264, r24
   12aec:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   12af0:	dc 01       	movw	r26, r24
   12af2:	cb 01       	movw	r24, r22
   12af4:	8c 59       	subi	r24, 0x9C	; 156
   12af6:	9f 4f       	sbci	r25, 0xFF	; 255
   12af8:	af 4f       	sbci	r26, 0xFF	; 255
   12afa:	bf 4f       	sbci	r27, 0xFF	; 255
   12afc:	80 93 ef 11 	sts	0x11EF, r24
   12b00:	90 93 f0 11 	sts	0x11F0, r25
   12b04:	a0 93 f1 11 	sts	0x11F1, r26
   12b08:	b0 93 f2 11 	sts	0x11F2, r27
   12b0c:	06 c0       	rjmp	.+12     	; 0x12b1a <_Z10lcd_updatev+0x182>
   12b0e:	0e 94 b2 7f 	call	0xff64	; 0xff64 <_ZL20lcd_return_to_statusv>
   12b12:	82 e0       	ldi	r24, 0x02	; 2
   12b14:	80 93 64 02 	sts	0x0264, r24
   12b18:	de cf       	rjmp	.-68     	; 0x12ad6 <_Z10lcd_updatev+0x13e>
   12b1a:	1f 91       	pop	r17
   12b1c:	0f 91       	pop	r16
   12b1e:	08 95       	ret

00012b20 <_Z8lcd_initv>:
   12b20:	69 dd       	rcall	.-1326   	; 0x125f4 <_ZL23lcd_implementation_initv>
   12b22:	60 e0       	ldi	r22, 0x00	; 0
   12b24:	88 e2       	ldi	r24, 0x28	; 40
   12b26:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
   12b2a:	60 e0       	ldi	r22, 0x00	; 0
   12b2c:	8a e2       	ldi	r24, 0x2A	; 42
   12b2e:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
   12b32:	60 e0       	ldi	r22, 0x00	; 0
   12b34:	86 e2       	ldi	r24, 0x26	; 38
   12b36:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
   12b3a:	a1 9a       	sbi	0x14, 1	; 20
   12b3c:	8f b7       	in	r24, 0x3f	; 63
   12b3e:	f8 94       	cli
   12b40:	eb e0       	ldi	r30, 0x0B	; 11
   12b42:	f1 e0       	ldi	r31, 0x01	; 1
   12b44:	90 81       	ld	r25, Z
   12b46:	90 68       	ori	r25, 0x80	; 128
   12b48:	90 83       	st	Z, r25
   12b4a:	8f bf       	out	0x3f, r24	; 63
   12b4c:	60 e0       	ldi	r22, 0x00	; 0
   12b4e:	83 e1       	ldi	r24, 0x13	; 19
   12b50:	0e 94 b4 bb 	call	0x17768	; 0x17768 <pinMode>
   12b54:	5a 9a       	sbi	0x0b, 2	; 11
   12b56:	5f 9a       	sbi	0x0b, 7	; 11
   12b58:	89 b1       	in	r24, 0x09	; 9
   12b5a:	80 95       	com	r24
   12b5c:	88 1f       	adc	r24, r24
   12b5e:	88 27       	eor	r24, r24
   12b60:	88 1f       	adc	r24, r24
   12b62:	80 93 f3 11 	sts	0x11F3, r24
   12b66:	9b de       	rcall	.-714    	; 0x1289e <_Z18lcd_buttons_updatev>
   12b68:	10 92 24 12 	sts	0x1224, r1
   12b6c:	08 95       	ret

00012b6e <_Z11lcd_clickedv>:
   12b6e:	80 91 fe 11 	lds	r24, 0x11FE
   12b72:	82 fb       	bst	r24, 2
   12b74:	88 27       	eor	r24, r24
   12b76:	80 f9       	bld	r24, 0
   12b78:	08 95       	ret

00012b7a <_Z7itostr2RKh>:
   12b7a:	fc 01       	movw	r30, r24
   12b7c:	80 81       	ld	r24, Z
   12b7e:	2a e0       	ldi	r18, 0x0A	; 10
   12b80:	30 e0       	ldi	r19, 0x00	; 0
   12b82:	90 e0       	ldi	r25, 0x00	; 0
   12b84:	b9 01       	movw	r22, r18
   12b86:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12b8a:	48 2f       	mov	r20, r24
   12b8c:	cb 01       	movw	r24, r22
   12b8e:	b9 01       	movw	r22, r18
   12b90:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12b94:	80 5d       	subi	r24, 0xD0	; 208
   12b96:	80 93 c8 11 	sts	0x11C8, r24
   12b9a:	40 5d       	subi	r20, 0xD0	; 208
   12b9c:	40 93 c9 11 	sts	0x11C9, r20
   12ba0:	10 92 ca 11 	sts	0x11CA, r1
   12ba4:	88 ec       	ldi	r24, 0xC8	; 200
   12ba6:	91 e1       	ldi	r25, 0x11	; 17
   12ba8:	08 95       	ret

00012baa <_Z8ftostr31RKf>:
   12baa:	20 e0       	ldi	r18, 0x00	; 0
   12bac:	30 e0       	ldi	r19, 0x00	; 0
   12bae:	40 e2       	ldi	r20, 0x20	; 32
   12bb0:	51 e4       	ldi	r21, 0x41	; 65
   12bb2:	fc 01       	movw	r30, r24
   12bb4:	60 81       	ld	r22, Z
   12bb6:	71 81       	ldd	r23, Z+1	; 0x01
   12bb8:	82 81       	ldd	r24, Z+2	; 0x02
   12bba:	93 81       	ldd	r25, Z+3	; 0x03
   12bbc:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   12bc0:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   12bc4:	77 23       	and	r23, r23
   12bc6:	14 f0       	brlt	.+4      	; 0x12bcc <_Z8ftostr31RKf+0x22>
   12bc8:	8b e2       	ldi	r24, 0x2B	; 43
   12bca:	01 c0       	rjmp	.+2      	; 0x12bce <_Z8ftostr31RKf+0x24>
   12bcc:	8d e2       	ldi	r24, 0x2D	; 45
   12bce:	80 93 c8 11 	sts	0x11C8, r24
   12bd2:	9b 01       	movw	r18, r22
   12bd4:	77 23       	and	r23, r23
   12bd6:	24 f4       	brge	.+8      	; 0x12be0 <_Z8ftostr31RKf+0x36>
   12bd8:	22 27       	eor	r18, r18
   12bda:	33 27       	eor	r19, r19
   12bdc:	26 1b       	sub	r18, r22
   12bde:	37 0b       	sbc	r19, r23
   12be0:	c9 01       	movw	r24, r18
   12be2:	68 ee       	ldi	r22, 0xE8	; 232
   12be4:	73 e0       	ldi	r23, 0x03	; 3
   12be6:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12bea:	cb 01       	movw	r24, r22
   12bec:	ea e0       	ldi	r30, 0x0A	; 10
   12bee:	f0 e0       	ldi	r31, 0x00	; 0
   12bf0:	bf 01       	movw	r22, r30
   12bf2:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12bf6:	80 5d       	subi	r24, 0xD0	; 208
   12bf8:	80 93 c9 11 	sts	0x11C9, r24
   12bfc:	c9 01       	movw	r24, r18
   12bfe:	64 e6       	ldi	r22, 0x64	; 100
   12c00:	70 e0       	ldi	r23, 0x00	; 0
   12c02:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12c06:	cb 01       	movw	r24, r22
   12c08:	bf 01       	movw	r22, r30
   12c0a:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12c0e:	80 5d       	subi	r24, 0xD0	; 208
   12c10:	80 93 ca 11 	sts	0x11CA, r24
   12c14:	c9 01       	movw	r24, r18
   12c16:	bf 01       	movw	r22, r30
   12c18:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12c1c:	28 2f       	mov	r18, r24
   12c1e:	cb 01       	movw	r24, r22
   12c20:	bf 01       	movw	r22, r30
   12c22:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   12c26:	80 5d       	subi	r24, 0xD0	; 208
   12c28:	80 93 cb 11 	sts	0x11CB, r24
   12c2c:	8e e2       	ldi	r24, 0x2E	; 46
   12c2e:	80 93 cc 11 	sts	0x11CC, r24
   12c32:	20 5d       	subi	r18, 0xD0	; 208
   12c34:	20 93 cd 11 	sts	0x11CD, r18
   12c38:	10 92 ce 11 	sts	0x11CE, r1
   12c3c:	88 ec       	ldi	r24, 0xC8	; 200
   12c3e:	91 e1       	ldi	r25, 0x11	; 17
   12c40:	08 95       	ret

00012c42 <_ZL10lcd_move_ev>:
   12c42:	cf 92       	push	r12
   12c44:	df 92       	push	r13
   12c46:	ef 92       	push	r14
   12c48:	ff 92       	push	r15
   12c4a:	0f 93       	push	r16
   12c4c:	1f 93       	push	r17
   12c4e:	cf 93       	push	r28
   12c50:	df 93       	push	r29
   12c52:	80 91 f4 11 	lds	r24, 0x11F4
   12c56:	90 91 f5 11 	lds	r25, 0x11F5
   12c5a:	a0 91 f6 11 	lds	r26, 0x11F6
   12c5e:	b0 91 f7 11 	lds	r27, 0x11F7
   12c62:	00 97       	sbiw	r24, 0x00	; 0
   12c64:	a1 05       	cpc	r26, r1
   12c66:	b1 05       	cpc	r27, r1
   12c68:	f1 f1       	breq	.+124    	; 0x12ce6 <_ZL10lcd_move_ev+0xa4>
   12c6a:	c8 e8       	ldi	r28, 0x88	; 136
   12c6c:	d5 e0       	ldi	r29, 0x05	; 5
   12c6e:	bc 01       	movw	r22, r24
   12c70:	88 27       	eor	r24, r24
   12c72:	77 fd       	sbrc	r23, 7
   12c74:	80 95       	com	r24
   12c76:	98 2f       	mov	r25, r24
   12c78:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12c7c:	20 91 d0 11 	lds	r18, 0x11D0
   12c80:	30 91 d1 11 	lds	r19, 0x11D1
   12c84:	40 91 d2 11 	lds	r20, 0x11D2
   12c88:	50 91 d3 11 	lds	r21, 0x11D3
   12c8c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   12c90:	9b 01       	movw	r18, r22
   12c92:	ac 01       	movw	r20, r24
   12c94:	68 81       	ld	r22, Y
   12c96:	79 81       	ldd	r23, Y+1	; 0x01
   12c98:	8a 81       	ldd	r24, Y+2	; 0x02
   12c9a:	9b 81       	ldd	r25, Y+3	; 0x03
   12c9c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   12ca0:	68 83       	st	Y, r22
   12ca2:	79 83       	std	Y+1, r23	; 0x01
   12ca4:	8a 83       	std	Y+2, r24	; 0x02
   12ca6:	9b 83       	std	Y+3, r25	; 0x03
   12ca8:	10 92 f4 11 	sts	0x11F4, r1
   12cac:	10 92 f5 11 	sts	0x11F5, r1
   12cb0:	10 92 f6 11 	sts	0x11F6, r1
   12cb4:	10 92 f7 11 	sts	0x11F7, r1
   12cb8:	0f 2e       	mov	r0, r31
   12cba:	f3 e6       	ldi	r31, 0x63	; 99
   12cbc:	cf 2e       	mov	r12, r31
   12cbe:	f5 e0       	ldi	r31, 0x05	; 5
   12cc0:	df 2e       	mov	r13, r31
   12cc2:	f0 2d       	mov	r31, r0
   12cc4:	e1 2c       	mov	r14, r1
   12cc6:	f1 2c       	mov	r15, r1
   12cc8:	00 e8       	ldi	r16, 0x80	; 128
   12cca:	1f e3       	ldi	r17, 0x3F	; 63
   12ccc:	9e 01       	movw	r18, r28
   12cce:	44 e8       	ldi	r20, 0x84	; 132
   12cd0:	55 e0       	ldi	r21, 0x05	; 5
   12cd2:	60 e8       	ldi	r22, 0x80	; 128
   12cd4:	75 e0       	ldi	r23, 0x05	; 5
   12cd6:	8c e7       	ldi	r24, 0x7C	; 124
   12cd8:	95 e0       	ldi	r25, 0x05	; 5
   12cda:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
   12cde:	81 e0       	ldi	r24, 0x01	; 1
   12ce0:	80 93 64 02 	sts	0x0264, r24
   12ce4:	04 c0       	rjmp	.+8      	; 0x12cee <_ZL10lcd_move_ev+0xac>
   12ce6:	80 91 64 02 	lds	r24, 0x0264
   12cea:	88 23       	and	r24, r24
   12cec:	39 f0       	breq	.+14     	; 0x12cfc <_ZL10lcd_move_ev+0xba>
   12cee:	88 e8       	ldi	r24, 0x88	; 136
   12cf0:	95 e0       	ldi	r25, 0x05	; 5
   12cf2:	5b df       	rcall	.-330    	; 0x12baa <_Z8ftostr31RKf>
   12cf4:	bc 01       	movw	r22, r24
   12cf6:	8a e0       	ldi	r24, 0x0A	; 10
   12cf8:	96 e1       	ldi	r25, 0x16	; 22
   12cfa:	7c dd       	rcall	.-1288   	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   12cfc:	80 91 fe 11 	lds	r24, 0x11FE
   12d00:	82 ff       	sbrs	r24, 2
   12d02:	10 c0       	rjmp	.+32     	; 0x12d24 <_ZL10lcd_move_ev+0xe2>
   12d04:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12d08:	8f e6       	ldi	r24, 0x6F	; 111
   12d0a:	96 e8       	ldi	r25, 0x86	; 134
   12d0c:	90 93 66 02 	sts	0x0266, r25
   12d10:	80 93 65 02 	sts	0x0265, r24
   12d14:	10 92 f4 11 	sts	0x11F4, r1
   12d18:	10 92 f5 11 	sts	0x11F5, r1
   12d1c:	10 92 f6 11 	sts	0x11F6, r1
   12d20:	10 92 f7 11 	sts	0x11F7, r1
   12d24:	df 91       	pop	r29
   12d26:	cf 91       	pop	r28
   12d28:	1f 91       	pop	r17
   12d2a:	0f 91       	pop	r16
   12d2c:	ff 90       	pop	r15
   12d2e:	ef 90       	pop	r14
   12d30:	df 90       	pop	r13
   12d32:	cf 90       	pop	r12
   12d34:	08 95       	ret

00012d36 <_ZL10lcd_move_zv>:
   12d36:	cf 92       	push	r12
   12d38:	df 92       	push	r13
   12d3a:	ef 92       	push	r14
   12d3c:	ff 92       	push	r15
   12d3e:	0f 93       	push	r16
   12d40:	1f 93       	push	r17
   12d42:	cf 93       	push	r28
   12d44:	df 93       	push	r29
   12d46:	80 91 f4 11 	lds	r24, 0x11F4
   12d4a:	90 91 f5 11 	lds	r25, 0x11F5
   12d4e:	a0 91 f6 11 	lds	r26, 0x11F6
   12d52:	b0 91 f7 11 	lds	r27, 0x11F7
   12d56:	00 97       	sbiw	r24, 0x00	; 0
   12d58:	a1 05       	cpc	r26, r1
   12d5a:	b1 05       	cpc	r27, r1
   12d5c:	09 f4       	brne	.+2      	; 0x12d60 <_ZL10lcd_move_zv+0x2a>
   12d5e:	72 c0       	rjmp	.+228    	; 0x12e44 <_ZL10lcd_move_zv+0x10e>
   12d60:	c4 e8       	ldi	r28, 0x84	; 132
   12d62:	d5 e0       	ldi	r29, 0x05	; 5
   12d64:	bc 01       	movw	r22, r24
   12d66:	88 27       	eor	r24, r24
   12d68:	77 fd       	sbrc	r23, 7
   12d6a:	80 95       	com	r24
   12d6c:	98 2f       	mov	r25, r24
   12d6e:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12d72:	20 91 d0 11 	lds	r18, 0x11D0
   12d76:	30 91 d1 11 	lds	r19, 0x11D1
   12d7a:	40 91 d2 11 	lds	r20, 0x11D2
   12d7e:	50 91 d3 11 	lds	r21, 0x11D3
   12d82:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   12d86:	28 81       	ld	r18, Y
   12d88:	39 81       	ldd	r19, Y+1	; 0x01
   12d8a:	4a 81       	ldd	r20, Y+2	; 0x02
   12d8c:	5b 81       	ldd	r21, Y+3	; 0x03
   12d8e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   12d92:	e6 2e       	mov	r14, r22
   12d94:	f7 2e       	mov	r15, r23
   12d96:	08 2f       	mov	r16, r24
   12d98:	19 2f       	mov	r17, r25
   12d9a:	98 2f       	mov	r25, r24
   12d9c:	4e 2d       	mov	r20, r14
   12d9e:	5f 2d       	mov	r21, r15
   12da0:	69 2f       	mov	r22, r25
   12da2:	71 2f       	mov	r23, r17
   12da4:	48 83       	st	Y, r20
   12da6:	59 83       	std	Y+1, r21	; 0x01
   12da8:	6a 83       	std	Y+2, r22	; 0x02
   12daa:	7b 83       	std	Y+3, r23	; 0x03
   12dac:	20 e0       	ldi	r18, 0x00	; 0
   12dae:	30 e0       	ldi	r19, 0x00	; 0
   12db0:	a9 01       	movw	r20, r18
   12db2:	6e 2d       	mov	r22, r14
   12db4:	7f 2d       	mov	r23, r15
   12db6:	80 2f       	mov	r24, r16
   12db8:	91 2f       	mov	r25, r17
   12dba:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   12dbe:	88 23       	and	r24, r24
   12dc0:	4c f4       	brge	.+18     	; 0x12dd4 <_ZL10lcd_move_zv+0x9e>
   12dc2:	10 92 84 05 	sts	0x0584, r1
   12dc6:	10 92 85 05 	sts	0x0585, r1
   12dca:	10 92 86 05 	sts	0x0586, r1
   12dce:	10 92 87 05 	sts	0x0587, r1
   12dd2:	18 c0       	rjmp	.+48     	; 0x12e04 <_ZL10lcd_move_zv+0xce>
   12dd4:	20 e0       	ldi	r18, 0x00	; 0
   12dd6:	30 e0       	ldi	r19, 0x00	; 0
   12dd8:	48 e4       	ldi	r20, 0x48	; 72
   12dda:	53 e4       	ldi	r21, 0x43	; 67
   12ddc:	6e 2d       	mov	r22, r14
   12dde:	7f 2d       	mov	r23, r15
   12de0:	80 2f       	mov	r24, r16
   12de2:	91 2f       	mov	r25, r17
   12de4:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
   12de8:	18 16       	cp	r1, r24
   12dea:	64 f4       	brge	.+24     	; 0x12e04 <_ZL10lcd_move_zv+0xce>
   12dec:	80 e0       	ldi	r24, 0x00	; 0
   12dee:	90 e0       	ldi	r25, 0x00	; 0
   12df0:	a8 e4       	ldi	r26, 0x48	; 72
   12df2:	b3 e4       	ldi	r27, 0x43	; 67
   12df4:	80 93 84 05 	sts	0x0584, r24
   12df8:	90 93 85 05 	sts	0x0585, r25
   12dfc:	a0 93 86 05 	sts	0x0586, r26
   12e00:	b0 93 87 05 	sts	0x0587, r27
   12e04:	10 92 f4 11 	sts	0x11F4, r1
   12e08:	10 92 f5 11 	sts	0x11F5, r1
   12e0c:	10 92 f6 11 	sts	0x11F6, r1
   12e10:	10 92 f7 11 	sts	0x11F7, r1
   12e14:	0f 2e       	mov	r0, r31
   12e16:	f3 e6       	ldi	r31, 0x63	; 99
   12e18:	cf 2e       	mov	r12, r31
   12e1a:	f5 e0       	ldi	r31, 0x05	; 5
   12e1c:	df 2e       	mov	r13, r31
   12e1e:	f0 2d       	mov	r31, r0
   12e20:	e1 2c       	mov	r14, r1
   12e22:	f1 2c       	mov	r15, r1
   12e24:	00 e8       	ldi	r16, 0x80	; 128
   12e26:	10 e4       	ldi	r17, 0x40	; 64
   12e28:	28 e8       	ldi	r18, 0x88	; 136
   12e2a:	35 e0       	ldi	r19, 0x05	; 5
   12e2c:	44 e8       	ldi	r20, 0x84	; 132
   12e2e:	55 e0       	ldi	r21, 0x05	; 5
   12e30:	60 e8       	ldi	r22, 0x80	; 128
   12e32:	75 e0       	ldi	r23, 0x05	; 5
   12e34:	8c e7       	ldi	r24, 0x7C	; 124
   12e36:	95 e0       	ldi	r25, 0x05	; 5
   12e38:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
   12e3c:	81 e0       	ldi	r24, 0x01	; 1
   12e3e:	80 93 64 02 	sts	0x0264, r24
   12e42:	04 c0       	rjmp	.+8      	; 0x12e4c <_ZL10lcd_move_zv+0x116>
   12e44:	80 91 64 02 	lds	r24, 0x0264
   12e48:	88 23       	and	r24, r24
   12e4a:	39 f0       	breq	.+14     	; 0x12e5a <_ZL10lcd_move_zv+0x124>
   12e4c:	84 e8       	ldi	r24, 0x84	; 132
   12e4e:	95 e0       	ldi	r25, 0x05	; 5
   12e50:	ac de       	rcall	.-680    	; 0x12baa <_Z8ftostr31RKf>
   12e52:	bc 01       	movw	r22, r24
   12e54:	83 e1       	ldi	r24, 0x13	; 19
   12e56:	96 e1       	ldi	r25, 0x16	; 22
   12e58:	cd dc       	rcall	.-1638   	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   12e5a:	80 91 fe 11 	lds	r24, 0x11FE
   12e5e:	82 ff       	sbrs	r24, 2
   12e60:	10 c0       	rjmp	.+32     	; 0x12e82 <_ZL10lcd_move_zv+0x14c>
   12e62:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12e66:	8f e6       	ldi	r24, 0x6F	; 111
   12e68:	96 e8       	ldi	r25, 0x86	; 134
   12e6a:	90 93 66 02 	sts	0x0266, r25
   12e6e:	80 93 65 02 	sts	0x0265, r24
   12e72:	10 92 f4 11 	sts	0x11F4, r1
   12e76:	10 92 f5 11 	sts	0x11F5, r1
   12e7a:	10 92 f6 11 	sts	0x11F6, r1
   12e7e:	10 92 f7 11 	sts	0x11F7, r1
   12e82:	df 91       	pop	r29
   12e84:	cf 91       	pop	r28
   12e86:	1f 91       	pop	r17
   12e88:	0f 91       	pop	r16
   12e8a:	ff 90       	pop	r15
   12e8c:	ef 90       	pop	r14
   12e8e:	df 90       	pop	r13
   12e90:	cf 90       	pop	r12
   12e92:	08 95       	ret

00012e94 <_ZL10lcd_move_yv>:
   12e94:	cf 92       	push	r12
   12e96:	df 92       	push	r13
   12e98:	ef 92       	push	r14
   12e9a:	ff 92       	push	r15
   12e9c:	0f 93       	push	r16
   12e9e:	1f 93       	push	r17
   12ea0:	cf 93       	push	r28
   12ea2:	df 93       	push	r29
   12ea4:	80 91 f4 11 	lds	r24, 0x11F4
   12ea8:	90 91 f5 11 	lds	r25, 0x11F5
   12eac:	a0 91 f6 11 	lds	r26, 0x11F6
   12eb0:	b0 91 f7 11 	lds	r27, 0x11F7
   12eb4:	00 97       	sbiw	r24, 0x00	; 0
   12eb6:	a1 05       	cpc	r26, r1
   12eb8:	b1 05       	cpc	r27, r1
   12eba:	09 f4       	brne	.+2      	; 0x12ebe <_ZL10lcd_move_yv+0x2a>
   12ebc:	72 c0       	rjmp	.+228    	; 0x12fa2 <_ZL10lcd_move_yv+0x10e>
   12ebe:	c0 e8       	ldi	r28, 0x80	; 128
   12ec0:	d5 e0       	ldi	r29, 0x05	; 5
   12ec2:	bc 01       	movw	r22, r24
   12ec4:	88 27       	eor	r24, r24
   12ec6:	77 fd       	sbrc	r23, 7
   12ec8:	80 95       	com	r24
   12eca:	98 2f       	mov	r25, r24
   12ecc:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   12ed0:	20 91 d0 11 	lds	r18, 0x11D0
   12ed4:	30 91 d1 11 	lds	r19, 0x11D1
   12ed8:	40 91 d2 11 	lds	r20, 0x11D2
   12edc:	50 91 d3 11 	lds	r21, 0x11D3
   12ee0:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   12ee4:	28 81       	ld	r18, Y
   12ee6:	39 81       	ldd	r19, Y+1	; 0x01
   12ee8:	4a 81       	ldd	r20, Y+2	; 0x02
   12eea:	5b 81       	ldd	r21, Y+3	; 0x03
   12eec:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   12ef0:	e6 2e       	mov	r14, r22
   12ef2:	f7 2e       	mov	r15, r23
   12ef4:	08 2f       	mov	r16, r24
   12ef6:	19 2f       	mov	r17, r25
   12ef8:	98 2f       	mov	r25, r24
   12efa:	4e 2d       	mov	r20, r14
   12efc:	5f 2d       	mov	r21, r15
   12efe:	69 2f       	mov	r22, r25
   12f00:	71 2f       	mov	r23, r17
   12f02:	48 83       	st	Y, r20
   12f04:	59 83       	std	Y+1, r21	; 0x01
   12f06:	6a 83       	std	Y+2, r22	; 0x02
   12f08:	7b 83       	std	Y+3, r23	; 0x03
   12f0a:	20 e0       	ldi	r18, 0x00	; 0
   12f0c:	30 e0       	ldi	r19, 0x00	; 0
   12f0e:	a9 01       	movw	r20, r18
   12f10:	6e 2d       	mov	r22, r14
   12f12:	7f 2d       	mov	r23, r15
   12f14:	80 2f       	mov	r24, r16
   12f16:	91 2f       	mov	r25, r17
   12f18:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   12f1c:	88 23       	and	r24, r24
   12f1e:	4c f4       	brge	.+18     	; 0x12f32 <_ZL10lcd_move_yv+0x9e>
   12f20:	10 92 80 05 	sts	0x0580, r1
   12f24:	10 92 81 05 	sts	0x0581, r1
   12f28:	10 92 82 05 	sts	0x0582, r1
   12f2c:	10 92 83 05 	sts	0x0583, r1
   12f30:	18 c0       	rjmp	.+48     	; 0x12f62 <_ZL10lcd_move_yv+0xce>
   12f32:	20 e0       	ldi	r18, 0x00	; 0
   12f34:	30 e0       	ldi	r19, 0x00	; 0
   12f36:	4d e4       	ldi	r20, 0x4D	; 77
   12f38:	53 e4       	ldi	r21, 0x43	; 67
   12f3a:	6e 2d       	mov	r22, r14
   12f3c:	7f 2d       	mov	r23, r15
   12f3e:	80 2f       	mov	r24, r16
   12f40:	91 2f       	mov	r25, r17
   12f42:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
   12f46:	18 16       	cp	r1, r24
   12f48:	64 f4       	brge	.+24     	; 0x12f62 <_ZL10lcd_move_yv+0xce>
   12f4a:	80 e0       	ldi	r24, 0x00	; 0
   12f4c:	90 e0       	ldi	r25, 0x00	; 0
   12f4e:	ad e4       	ldi	r26, 0x4D	; 77
   12f50:	b3 e4       	ldi	r27, 0x43	; 67
   12f52:	80 93 80 05 	sts	0x0580, r24
   12f56:	90 93 81 05 	sts	0x0581, r25
   12f5a:	a0 93 82 05 	sts	0x0582, r26
   12f5e:	b0 93 83 05 	sts	0x0583, r27
   12f62:	10 92 f4 11 	sts	0x11F4, r1
   12f66:	10 92 f5 11 	sts	0x11F5, r1
   12f6a:	10 92 f6 11 	sts	0x11F6, r1
   12f6e:	10 92 f7 11 	sts	0x11F7, r1
   12f72:	0f 2e       	mov	r0, r31
   12f74:	f3 e6       	ldi	r31, 0x63	; 99
   12f76:	cf 2e       	mov	r12, r31
   12f78:	f5 e0       	ldi	r31, 0x05	; 5
   12f7a:	df 2e       	mov	r13, r31
   12f7c:	f0 2d       	mov	r31, r0
   12f7e:	e1 2c       	mov	r14, r1
   12f80:	f1 2c       	mov	r15, r1
   12f82:	08 e4       	ldi	r16, 0x48	; 72
   12f84:	12 e4       	ldi	r17, 0x42	; 66
   12f86:	28 e8       	ldi	r18, 0x88	; 136
   12f88:	35 e0       	ldi	r19, 0x05	; 5
   12f8a:	44 e8       	ldi	r20, 0x84	; 132
   12f8c:	55 e0       	ldi	r21, 0x05	; 5
   12f8e:	60 e8       	ldi	r22, 0x80	; 128
   12f90:	75 e0       	ldi	r23, 0x05	; 5
   12f92:	8c e7       	ldi	r24, 0x7C	; 124
   12f94:	95 e0       	ldi	r25, 0x05	; 5
   12f96:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
   12f9a:	81 e0       	ldi	r24, 0x01	; 1
   12f9c:	80 93 64 02 	sts	0x0264, r24
   12fa0:	04 c0       	rjmp	.+8      	; 0x12faa <_ZL10lcd_move_yv+0x116>
   12fa2:	80 91 64 02 	lds	r24, 0x0264
   12fa6:	88 23       	and	r24, r24
   12fa8:	39 f0       	breq	.+14     	; 0x12fb8 <_ZL10lcd_move_yv+0x124>
   12faa:	80 e8       	ldi	r24, 0x80	; 128
   12fac:	95 e0       	ldi	r25, 0x05	; 5
   12fae:	fd dd       	rcall	.-1030   	; 0x12baa <_Z8ftostr31RKf>
   12fb0:	bc 01       	movw	r22, r24
   12fb2:	85 e1       	ldi	r24, 0x15	; 21
   12fb4:	96 e1       	ldi	r25, 0x16	; 22
   12fb6:	1e dc       	rcall	.-1988   	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   12fb8:	80 91 fe 11 	lds	r24, 0x11FE
   12fbc:	82 ff       	sbrs	r24, 2
   12fbe:	10 c0       	rjmp	.+32     	; 0x12fe0 <_ZL10lcd_move_yv+0x14c>
   12fc0:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   12fc4:	8f e6       	ldi	r24, 0x6F	; 111
   12fc6:	96 e8       	ldi	r25, 0x86	; 134
   12fc8:	90 93 66 02 	sts	0x0266, r25
   12fcc:	80 93 65 02 	sts	0x0265, r24
   12fd0:	10 92 f4 11 	sts	0x11F4, r1
   12fd4:	10 92 f5 11 	sts	0x11F5, r1
   12fd8:	10 92 f6 11 	sts	0x11F6, r1
   12fdc:	10 92 f7 11 	sts	0x11F7, r1
   12fe0:	df 91       	pop	r29
   12fe2:	cf 91       	pop	r28
   12fe4:	1f 91       	pop	r17
   12fe6:	0f 91       	pop	r16
   12fe8:	ff 90       	pop	r15
   12fea:	ef 90       	pop	r14
   12fec:	df 90       	pop	r13
   12fee:	cf 90       	pop	r12
   12ff0:	08 95       	ret

00012ff2 <_ZL10lcd_move_xv>:
   12ff2:	cf 92       	push	r12
   12ff4:	df 92       	push	r13
   12ff6:	ef 92       	push	r14
   12ff8:	ff 92       	push	r15
   12ffa:	0f 93       	push	r16
   12ffc:	1f 93       	push	r17
   12ffe:	cf 93       	push	r28
   13000:	df 93       	push	r29
   13002:	80 91 f4 11 	lds	r24, 0x11F4
   13006:	90 91 f5 11 	lds	r25, 0x11F5
   1300a:	a0 91 f6 11 	lds	r26, 0x11F6
   1300e:	b0 91 f7 11 	lds	r27, 0x11F7
   13012:	00 97       	sbiw	r24, 0x00	; 0
   13014:	a1 05       	cpc	r26, r1
   13016:	b1 05       	cpc	r27, r1
   13018:	09 f4       	brne	.+2      	; 0x1301c <_ZL10lcd_move_xv+0x2a>
   1301a:	72 c0       	rjmp	.+228    	; 0x13100 <_ZL10lcd_move_xv+0x10e>
   1301c:	cc e7       	ldi	r28, 0x7C	; 124
   1301e:	d5 e0       	ldi	r29, 0x05	; 5
   13020:	bc 01       	movw	r22, r24
   13022:	88 27       	eor	r24, r24
   13024:	77 fd       	sbrc	r23, 7
   13026:	80 95       	com	r24
   13028:	98 2f       	mov	r25, r24
   1302a:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   1302e:	20 91 d0 11 	lds	r18, 0x11D0
   13032:	30 91 d1 11 	lds	r19, 0x11D1
   13036:	40 91 d2 11 	lds	r20, 0x11D2
   1303a:	50 91 d3 11 	lds	r21, 0x11D3
   1303e:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   13042:	28 81       	ld	r18, Y
   13044:	39 81       	ldd	r19, Y+1	; 0x01
   13046:	4a 81       	ldd	r20, Y+2	; 0x02
   13048:	5b 81       	ldd	r21, Y+3	; 0x03
   1304a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   1304e:	e6 2e       	mov	r14, r22
   13050:	f7 2e       	mov	r15, r23
   13052:	08 2f       	mov	r16, r24
   13054:	19 2f       	mov	r17, r25
   13056:	98 2f       	mov	r25, r24
   13058:	4e 2d       	mov	r20, r14
   1305a:	5f 2d       	mov	r21, r15
   1305c:	69 2f       	mov	r22, r25
   1305e:	71 2f       	mov	r23, r17
   13060:	48 83       	st	Y, r20
   13062:	59 83       	std	Y+1, r21	; 0x01
   13064:	6a 83       	std	Y+2, r22	; 0x02
   13066:	7b 83       	std	Y+3, r23	; 0x03
   13068:	20 e0       	ldi	r18, 0x00	; 0
   1306a:	30 e0       	ldi	r19, 0x00	; 0
   1306c:	a9 01       	movw	r20, r18
   1306e:	6e 2d       	mov	r22, r14
   13070:	7f 2d       	mov	r23, r15
   13072:	80 2f       	mov	r24, r16
   13074:	91 2f       	mov	r25, r17
   13076:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   1307a:	88 23       	and	r24, r24
   1307c:	4c f4       	brge	.+18     	; 0x13090 <_ZL10lcd_move_xv+0x9e>
   1307e:	10 92 7c 05 	sts	0x057C, r1
   13082:	10 92 7d 05 	sts	0x057D, r1
   13086:	10 92 7e 05 	sts	0x057E, r1
   1308a:	10 92 7f 05 	sts	0x057F, r1
   1308e:	18 c0       	rjmp	.+48     	; 0x130c0 <_ZL10lcd_move_xv+0xce>
   13090:	20 e0       	ldi	r18, 0x00	; 0
   13092:	30 e0       	ldi	r19, 0x00	; 0
   13094:	4d e4       	ldi	r20, 0x4D	; 77
   13096:	53 e4       	ldi	r21, 0x43	; 67
   13098:	6e 2d       	mov	r22, r14
   1309a:	7f 2d       	mov	r23, r15
   1309c:	80 2f       	mov	r24, r16
   1309e:	91 2f       	mov	r25, r17
   130a0:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
   130a4:	18 16       	cp	r1, r24
   130a6:	64 f4       	brge	.+24     	; 0x130c0 <_ZL10lcd_move_xv+0xce>
   130a8:	80 e0       	ldi	r24, 0x00	; 0
   130aa:	90 e0       	ldi	r25, 0x00	; 0
   130ac:	ad e4       	ldi	r26, 0x4D	; 77
   130ae:	b3 e4       	ldi	r27, 0x43	; 67
   130b0:	80 93 7c 05 	sts	0x057C, r24
   130b4:	90 93 7d 05 	sts	0x057D, r25
   130b8:	a0 93 7e 05 	sts	0x057E, r26
   130bc:	b0 93 7f 05 	sts	0x057F, r27
   130c0:	10 92 f4 11 	sts	0x11F4, r1
   130c4:	10 92 f5 11 	sts	0x11F5, r1
   130c8:	10 92 f6 11 	sts	0x11F6, r1
   130cc:	10 92 f7 11 	sts	0x11F7, r1
   130d0:	0f 2e       	mov	r0, r31
   130d2:	f3 e6       	ldi	r31, 0x63	; 99
   130d4:	cf 2e       	mov	r12, r31
   130d6:	f5 e0       	ldi	r31, 0x05	; 5
   130d8:	df 2e       	mov	r13, r31
   130da:	f0 2d       	mov	r31, r0
   130dc:	e1 2c       	mov	r14, r1
   130de:	f1 2c       	mov	r15, r1
   130e0:	08 e4       	ldi	r16, 0x48	; 72
   130e2:	12 e4       	ldi	r17, 0x42	; 66
   130e4:	28 e8       	ldi	r18, 0x88	; 136
   130e6:	35 e0       	ldi	r19, 0x05	; 5
   130e8:	44 e8       	ldi	r20, 0x84	; 132
   130ea:	55 e0       	ldi	r21, 0x05	; 5
   130ec:	60 e8       	ldi	r22, 0x80	; 128
   130ee:	75 e0       	ldi	r23, 0x05	; 5
   130f0:	8c e7       	ldi	r24, 0x7C	; 124
   130f2:	95 e0       	ldi	r25, 0x05	; 5
   130f4:	0e 94 0c 4c 	call	0x9818	; 0x9818 <_Z16plan_buffer_lineRKfS0_S0_S0_fRKh>
   130f8:	81 e0       	ldi	r24, 0x01	; 1
   130fa:	80 93 64 02 	sts	0x0264, r24
   130fe:	04 c0       	rjmp	.+8      	; 0x13108 <_ZL10lcd_move_xv+0x116>
   13100:	80 91 64 02 	lds	r24, 0x0264
   13104:	88 23       	and	r24, r24
   13106:	39 f0       	breq	.+14     	; 0x13116 <_ZL10lcd_move_xv+0x124>
   13108:	8c e7       	ldi	r24, 0x7C	; 124
   1310a:	95 e0       	ldi	r25, 0x05	; 5
   1310c:	4e dd       	rcall	.-1380   	; 0x12baa <_Z8ftostr31RKf>
   1310e:	bc 01       	movw	r22, r24
   13110:	87 e1       	ldi	r24, 0x17	; 23
   13112:	96 e1       	ldi	r25, 0x16	; 22
   13114:	6f db       	rcall	.-2338   	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   13116:	80 91 fe 11 	lds	r24, 0x11FE
   1311a:	82 ff       	sbrs	r24, 2
   1311c:	10 c0       	rjmp	.+32     	; 0x1313e <_ZL10lcd_move_xv+0x14c>
   1311e:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13122:	8f e6       	ldi	r24, 0x6F	; 111
   13124:	96 e8       	ldi	r25, 0x86	; 134
   13126:	90 93 66 02 	sts	0x0266, r25
   1312a:	80 93 65 02 	sts	0x0265, r24
   1312e:	10 92 f4 11 	sts	0x11F4, r1
   13132:	10 92 f5 11 	sts	0x11F5, r1
   13136:	10 92 f6 11 	sts	0x11F6, r1
   1313a:	10 92 f7 11 	sts	0x11F7, r1
   1313e:	df 91       	pop	r29
   13140:	cf 91       	pop	r28
   13142:	1f 91       	pop	r17
   13144:	0f 91       	pop	r16
   13146:	ff 90       	pop	r15
   13148:	ef 90       	pop	r14
   1314a:	df 90       	pop	r13
   1314c:	cf 90       	pop	r12
   1314e:	08 95       	ret

00013150 <_Z8ftostr32RKf>:
   13150:	8f 92       	push	r8
   13152:	9f 92       	push	r9
   13154:	af 92       	push	r10
   13156:	bf 92       	push	r11
   13158:	cf 92       	push	r12
   1315a:	df 92       	push	r13
   1315c:	ef 92       	push	r14
   1315e:	ff 92       	push	r15
   13160:	cf 93       	push	r28
   13162:	20 e0       	ldi	r18, 0x00	; 0
   13164:	30 e0       	ldi	r19, 0x00	; 0
   13166:	48 ec       	ldi	r20, 0xC8	; 200
   13168:	52 e4       	ldi	r21, 0x42	; 66
   1316a:	fc 01       	movw	r30, r24
   1316c:	60 81       	ld	r22, Z
   1316e:	71 81       	ldd	r23, Z+1	; 0x01
   13170:	82 81       	ldd	r24, Z+2	; 0x02
   13172:	93 81       	ldd	r25, Z+3	; 0x03
   13174:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   13178:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1317c:	c6 2e       	mov	r12, r22
   1317e:	d7 2e       	mov	r13, r23
   13180:	e8 2e       	mov	r14, r24
   13182:	f9 2e       	mov	r15, r25
   13184:	ff 20       	and	r15, r15
   13186:	a4 f0       	brlt	.+40     	; 0x131b0 <_Z8ftostr32RKf+0x60>
   13188:	c7 01       	movw	r24, r14
   1318a:	b6 01       	movw	r22, r12
   1318c:	20 e1       	ldi	r18, 0x10	; 16
   1318e:	37 e2       	ldi	r19, 0x27	; 39
   13190:	40 e0       	ldi	r20, 0x00	; 0
   13192:	50 e0       	ldi	r21, 0x00	; 0
   13194:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   13198:	ca 01       	movw	r24, r20
   1319a:	b9 01       	movw	r22, r18
   1319c:	2a e0       	ldi	r18, 0x0A	; 10
   1319e:	30 e0       	ldi	r19, 0x00	; 0
   131a0:	40 e0       	ldi	r20, 0x00	; 0
   131a2:	50 e0       	ldi	r21, 0x00	; 0
   131a4:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   131a8:	60 5d       	subi	r22, 0xD0	; 208
   131aa:	60 93 c8 11 	sts	0x11C8, r22
   131ae:	03 c0       	rjmp	.+6      	; 0x131b6 <_Z8ftostr32RKf+0x66>
   131b0:	8d e2       	ldi	r24, 0x2D	; 45
   131b2:	80 93 c8 11 	sts	0x11C8, r24
   131b6:	46 01       	movw	r8, r12
   131b8:	57 01       	movw	r10, r14
   131ba:	ff 20       	and	r15, r15
   131bc:	3c f4       	brge	.+14     	; 0x131cc <_Z8ftostr32RKf+0x7c>
   131be:	88 24       	eor	r8, r8
   131c0:	99 24       	eor	r9, r9
   131c2:	54 01       	movw	r10, r8
   131c4:	8c 18       	sub	r8, r12
   131c6:	9d 08       	sbc	r9, r13
   131c8:	ae 08       	sbc	r10, r14
   131ca:	bf 08       	sbc	r11, r15
   131cc:	c5 01       	movw	r24, r10
   131ce:	b4 01       	movw	r22, r8
   131d0:	28 ee       	ldi	r18, 0xE8	; 232
   131d2:	33 e0       	ldi	r19, 0x03	; 3
   131d4:	40 e0       	ldi	r20, 0x00	; 0
   131d6:	50 e0       	ldi	r21, 0x00	; 0
   131d8:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   131dc:	0f 2e       	mov	r0, r31
   131de:	fa e0       	ldi	r31, 0x0A	; 10
   131e0:	cf 2e       	mov	r12, r31
   131e2:	d1 2c       	mov	r13, r1
   131e4:	e1 2c       	mov	r14, r1
   131e6:	f1 2c       	mov	r15, r1
   131e8:	f0 2d       	mov	r31, r0
   131ea:	ca 01       	movw	r24, r20
   131ec:	b9 01       	movw	r22, r18
   131ee:	a7 01       	movw	r20, r14
   131f0:	96 01       	movw	r18, r12
   131f2:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   131f6:	60 5d       	subi	r22, 0xD0	; 208
   131f8:	60 93 c9 11 	sts	0x11C9, r22
   131fc:	c5 01       	movw	r24, r10
   131fe:	b4 01       	movw	r22, r8
   13200:	24 e6       	ldi	r18, 0x64	; 100
   13202:	30 e0       	ldi	r19, 0x00	; 0
   13204:	40 e0       	ldi	r20, 0x00	; 0
   13206:	50 e0       	ldi	r21, 0x00	; 0
   13208:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1320c:	ca 01       	movw	r24, r20
   1320e:	b9 01       	movw	r22, r18
   13210:	a7 01       	movw	r20, r14
   13212:	96 01       	movw	r18, r12
   13214:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   13218:	60 5d       	subi	r22, 0xD0	; 208
   1321a:	60 93 ca 11 	sts	0x11CA, r22
   1321e:	8e e2       	ldi	r24, 0x2E	; 46
   13220:	80 93 cb 11 	sts	0x11CB, r24
   13224:	c5 01       	movw	r24, r10
   13226:	b4 01       	movw	r22, r8
   13228:	a7 01       	movw	r20, r14
   1322a:	96 01       	movw	r18, r12
   1322c:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   13230:	c6 2f       	mov	r28, r22
   13232:	ca 01       	movw	r24, r20
   13234:	b9 01       	movw	r22, r18
   13236:	a7 01       	movw	r20, r14
   13238:	96 01       	movw	r18, r12
   1323a:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1323e:	60 5d       	subi	r22, 0xD0	; 208
   13240:	60 93 cc 11 	sts	0x11CC, r22
   13244:	c0 5d       	subi	r28, 0xD0	; 208
   13246:	c0 93 cd 11 	sts	0x11CD, r28
   1324a:	10 92 ce 11 	sts	0x11CE, r1
   1324e:	88 ec       	ldi	r24, 0xC8	; 200
   13250:	91 e1       	ldi	r25, 0x11	; 17
   13252:	cf 91       	pop	r28
   13254:	ff 90       	pop	r15
   13256:	ef 90       	pop	r14
   13258:	df 90       	pop	r13
   1325a:	cf 90       	pop	r12
   1325c:	bf 90       	pop	r11
   1325e:	af 90       	pop	r10
   13260:	9f 90       	pop	r9
   13262:	8f 90       	pop	r8
   13264:	08 95       	ret

00013266 <_Z17menu_edit_float32v>:
   13266:	0f 93       	push	r16
   13268:	1f 93       	push	r17
   1326a:	cf 93       	push	r28
   1326c:	df 93       	push	r29
   1326e:	00 d0       	rcall	.+0      	; 0x13270 <_Z17menu_edit_float32v+0xa>
   13270:	1f 92       	push	r1
   13272:	cd b7       	in	r28, 0x3d	; 61
   13274:	de b7       	in	r29, 0x3e	; 62
   13276:	80 91 e2 11 	lds	r24, 0x11E2
   1327a:	90 91 e3 11 	lds	r25, 0x11E3
   1327e:	a0 91 e4 11 	lds	r26, 0x11E4
   13282:	b0 91 e5 11 	lds	r27, 0x11E5
   13286:	40 91 f4 11 	lds	r20, 0x11F4
   1328a:	50 91 f5 11 	lds	r21, 0x11F5
   1328e:	60 91 f6 11 	lds	r22, 0x11F6
   13292:	70 91 f7 11 	lds	r23, 0x11F7
   13296:	48 17       	cp	r20, r24
   13298:	59 07       	cpc	r21, r25
   1329a:	6a 07       	cpc	r22, r26
   1329c:	7b 07       	cpc	r23, r27
   1329e:	44 f4       	brge	.+16     	; 0x132b0 <_Z17menu_edit_float32v+0x4a>
   132a0:	80 93 f4 11 	sts	0x11F4, r24
   132a4:	90 93 f5 11 	sts	0x11F5, r25
   132a8:	a0 93 f6 11 	sts	0x11F6, r26
   132ac:	b0 93 f7 11 	sts	0x11F7, r27
   132b0:	80 91 de 11 	lds	r24, 0x11DE
   132b4:	90 91 df 11 	lds	r25, 0x11DF
   132b8:	a0 91 e0 11 	lds	r26, 0x11E0
   132bc:	b0 91 e1 11 	lds	r27, 0x11E1
   132c0:	40 91 f4 11 	lds	r20, 0x11F4
   132c4:	50 91 f5 11 	lds	r21, 0x11F5
   132c8:	60 91 f6 11 	lds	r22, 0x11F6
   132cc:	70 91 f7 11 	lds	r23, 0x11F7
   132d0:	84 17       	cp	r24, r20
   132d2:	95 07       	cpc	r25, r21
   132d4:	a6 07       	cpc	r26, r22
   132d6:	b7 07       	cpc	r27, r23
   132d8:	44 f4       	brge	.+16     	; 0x132ea <_Z17menu_edit_float32v+0x84>
   132da:	80 93 f4 11 	sts	0x11F4, r24
   132de:	90 93 f5 11 	sts	0x11F5, r25
   132e2:	a0 93 f6 11 	sts	0x11F6, r26
   132e6:	b0 93 f7 11 	sts	0x11F7, r27
   132ea:	80 91 64 02 	lds	r24, 0x0264
   132ee:	88 23       	and	r24, r24
   132f0:	e9 f0       	breq	.+58     	; 0x1332c <_Z17menu_edit_float32v+0xc6>
   132f2:	60 91 f4 11 	lds	r22, 0x11F4
   132f6:	70 91 f5 11 	lds	r23, 0x11F5
   132fa:	80 91 f6 11 	lds	r24, 0x11F6
   132fe:	90 91 f7 11 	lds	r25, 0x11F7
   13302:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   13306:	20 e0       	ldi	r18, 0x00	; 0
   13308:	30 e0       	ldi	r19, 0x00	; 0
   1330a:	48 ec       	ldi	r20, 0xC8	; 200
   1330c:	52 e4       	ldi	r21, 0x42	; 66
   1330e:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   13312:	69 83       	std	Y+1, r22	; 0x01
   13314:	7a 83       	std	Y+2, r23	; 0x02
   13316:	8b 83       	std	Y+3, r24	; 0x03
   13318:	9c 83       	std	Y+4, r25	; 0x04
   1331a:	ce 01       	movw	r24, r28
   1331c:	01 96       	adiw	r24, 0x01	; 1
   1331e:	18 df       	rcall	.-464    	; 0x13150 <_Z8ftostr32RKf>
   13320:	bc 01       	movw	r22, r24
   13322:	80 91 e8 11 	lds	r24, 0x11E8
   13326:	90 91 e9 11 	lds	r25, 0x11E9
   1332a:	64 da       	rcall	.-2872   	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   1332c:	80 91 fe 11 	lds	r24, 0x11FE
   13330:	82 ff       	sbrs	r24, 2
   13332:	31 c0       	rjmp	.+98     	; 0x13396 <_Z17menu_edit_float32v+0x130>
   13334:	00 91 e6 11 	lds	r16, 0x11E6
   13338:	10 91 e7 11 	lds	r17, 0x11E7
   1333c:	60 91 f4 11 	lds	r22, 0x11F4
   13340:	70 91 f5 11 	lds	r23, 0x11F5
   13344:	80 91 f6 11 	lds	r24, 0x11F6
   13348:	90 91 f7 11 	lds	r25, 0x11F7
   1334c:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   13350:	20 e0       	ldi	r18, 0x00	; 0
   13352:	30 e0       	ldi	r19, 0x00	; 0
   13354:	48 ec       	ldi	r20, 0xC8	; 200
   13356:	52 e4       	ldi	r21, 0x42	; 66
   13358:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   1335c:	f8 01       	movw	r30, r16
   1335e:	60 83       	st	Z, r22
   13360:	71 83       	std	Z+1, r23	; 0x01
   13362:	82 83       	std	Z+2, r24	; 0x02
   13364:	93 83       	std	Z+3, r25	; 0x03
   13366:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1336a:	80 91 ec 11 	lds	r24, 0x11EC
   1336e:	90 91 ed 11 	lds	r25, 0x11ED
   13372:	90 93 66 02 	sts	0x0266, r25
   13376:	80 93 65 02 	sts	0x0265, r24
   1337a:	80 91 ea 11 	lds	r24, 0x11EA
   1337e:	90 91 eb 11 	lds	r25, 0x11EB
   13382:	a0 e0       	ldi	r26, 0x00	; 0
   13384:	b0 e0       	ldi	r27, 0x00	; 0
   13386:	80 93 f4 11 	sts	0x11F4, r24
   1338a:	90 93 f5 11 	sts	0x11F5, r25
   1338e:	a0 93 f6 11 	sts	0x11F6, r26
   13392:	b0 93 f7 11 	sts	0x11F7, r27
   13396:	0f 90       	pop	r0
   13398:	0f 90       	pop	r0
   1339a:	0f 90       	pop	r0
   1339c:	0f 90       	pop	r0
   1339e:	df 91       	pop	r29
   133a0:	cf 91       	pop	r28
   133a2:	1f 91       	pop	r17
   133a4:	0f 91       	pop	r16
   133a6:	08 95       	ret

000133a8 <_Z7itostr3RKi>:
   133a8:	fc 01       	movw	r30, r24
   133aa:	80 81       	ld	r24, Z
   133ac:	91 81       	ldd	r25, Z+1	; 0x01
   133ae:	84 36       	cpi	r24, 0x64	; 100
   133b0:	91 05       	cpc	r25, r1
   133b2:	6c f0       	brlt	.+26     	; 0x133ce <_Z7itostr3RKi+0x26>
   133b4:	64 e6       	ldi	r22, 0x64	; 100
   133b6:	70 e0       	ldi	r23, 0x00	; 0
   133b8:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   133bc:	cb 01       	movw	r24, r22
   133be:	6a e0       	ldi	r22, 0x0A	; 10
   133c0:	70 e0       	ldi	r23, 0x00	; 0
   133c2:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   133c6:	80 5d       	subi	r24, 0xD0	; 208
   133c8:	80 93 c8 11 	sts	0x11C8, r24
   133cc:	03 c0       	rjmp	.+6      	; 0x133d4 <_Z7itostr3RKi+0x2c>
   133ce:	80 e2       	ldi	r24, 0x20	; 32
   133d0:	80 93 c8 11 	sts	0x11C8, r24
   133d4:	80 81       	ld	r24, Z
   133d6:	91 81       	ldd	r25, Z+1	; 0x01
   133d8:	8a 30       	cpi	r24, 0x0A	; 10
   133da:	91 05       	cpc	r25, r1
   133dc:	6c f0       	brlt	.+26     	; 0x133f8 <_Z7itostr3RKi+0x50>
   133de:	2a e0       	ldi	r18, 0x0A	; 10
   133e0:	30 e0       	ldi	r19, 0x00	; 0
   133e2:	b9 01       	movw	r22, r18
   133e4:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   133e8:	cb 01       	movw	r24, r22
   133ea:	b9 01       	movw	r22, r18
   133ec:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   133f0:	80 5d       	subi	r24, 0xD0	; 208
   133f2:	80 93 c9 11 	sts	0x11C9, r24
   133f6:	03 c0       	rjmp	.+6      	; 0x133fe <_Z7itostr3RKi+0x56>
   133f8:	80 e2       	ldi	r24, 0x20	; 32
   133fa:	80 93 c9 11 	sts	0x11C9, r24
   133fe:	80 81       	ld	r24, Z
   13400:	91 81       	ldd	r25, Z+1	; 0x01
   13402:	6a e0       	ldi	r22, 0x0A	; 10
   13404:	70 e0       	ldi	r23, 0x00	; 0
   13406:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   1340a:	80 5d       	subi	r24, 0xD0	; 208
   1340c:	80 93 ca 11 	sts	0x11CA, r24
   13410:	10 92 cb 11 	sts	0x11CB, r1
   13414:	88 ec       	ldi	r24, 0xC8	; 200
   13416:	91 e1       	ldi	r25, 0x11	; 17
   13418:	08 95       	ret

0001341a <_ZL49lcd_control_temperature_preheat_abs_settings_menuv>:
   1341a:	7f 92       	push	r7
   1341c:	8f 92       	push	r8
   1341e:	9f 92       	push	r9
   13420:	af 92       	push	r10
   13422:	bf 92       	push	r11
   13424:	cf 92       	push	r12
   13426:	df 92       	push	r13
   13428:	ef 92       	push	r14
   1342a:	ff 92       	push	r15
   1342c:	0f 93       	push	r16
   1342e:	1f 93       	push	r17
   13430:	cf 93       	push	r28
   13432:	df 93       	push	r29
   13434:	80 91 f4 11 	lds	r24, 0x11F4
   13438:	90 91 f5 11 	lds	r25, 0x11F5
   1343c:	a0 91 f6 11 	lds	r26, 0x11F6
   13440:	b0 91 f7 11 	lds	r27, 0x11F7
   13444:	81 30       	cpi	r24, 0x01	; 1
   13446:	90 48       	sbci	r25, 0x80	; 128
   13448:	a1 05       	cpc	r26, r1
   1344a:	b1 05       	cpc	r27, r1
   1344c:	40 f0       	brcs	.+16     	; 0x1345e <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x44>
   1344e:	10 92 f4 11 	sts	0x11F4, r1
   13452:	10 92 f5 11 	sts	0x11F5, r1
   13456:	10 92 f6 11 	sts	0x11F6, r1
   1345a:	10 92 f7 11 	sts	0x11F7, r1
   1345e:	60 91 f4 11 	lds	r22, 0x11F4
   13462:	70 91 f5 11 	lds	r23, 0x11F5
   13466:	80 91 f6 11 	lds	r24, 0x11F6
   1346a:	90 91 f7 11 	lds	r25, 0x11F7
   1346e:	25 e0       	ldi	r18, 0x05	; 5
   13470:	30 e0       	ldi	r19, 0x00	; 0
   13472:	40 e0       	ldi	r20, 0x00	; 0
   13474:	50 e0       	ldi	r21, 0x00	; 0
   13476:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1347a:	80 91 fd 11 	lds	r24, 0x11FD
   1347e:	90 e0       	ldi	r25, 0x00	; 0
   13480:	a0 e0       	ldi	r26, 0x00	; 0
   13482:	b0 e0       	ldi	r27, 0x00	; 0
   13484:	28 17       	cp	r18, r24
   13486:	39 07       	cpc	r19, r25
   13488:	4a 07       	cpc	r20, r26
   1348a:	5b 07       	cpc	r21, r27
   1348c:	10 f4       	brcc	.+4      	; 0x13492 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x78>
   1348e:	20 93 fd 11 	sts	0x11FD, r18
   13492:	c0 91 fd 11 	lds	r28, 0x11FD
   13496:	10 91 fe 11 	lds	r17, 0x11FE
   1349a:	12 fb       	bst	r17, 2
   1349c:	11 27       	eor	r17, r17
   1349e:	10 f9       	bld	r17, 0
   134a0:	d0 e0       	ldi	r29, 0x00	; 0
   134a2:	0f 2e       	mov	r0, r31
   134a4:	f5 e0       	ldi	r31, 0x05	; 5
   134a6:	cf 2e       	mov	r12, r31
   134a8:	d1 2c       	mov	r13, r1
   134aa:	e1 2c       	mov	r14, r1
   134ac:	f1 2c       	mov	r15, r1
   134ae:	f0 2d       	mov	r31, r0
   134b0:	0f 2e       	mov	r0, r31
   134b2:	fe e0       	ldi	r31, 0x0E	; 14
   134b4:	8f 2e       	mov	r8, r31
   134b6:	91 2c       	mov	r9, r1
   134b8:	a1 2c       	mov	r10, r1
   134ba:	b1 2c       	mov	r11, r1
   134bc:	f0 2d       	mov	r31, r0
   134be:	77 24       	eor	r7, r7
   134c0:	73 94       	inc	r7
   134c2:	00 e0       	ldi	r16, 0x00	; 0
   134c4:	c1 11       	cpse	r28, r1
   134c6:	36 c0       	rjmp	.+108    	; 0x13534 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x11a>
   134c8:	80 91 64 02 	lds	r24, 0x0264
   134cc:	88 23       	and	r24, r24
   134ce:	d9 f0       	breq	.+54     	; 0x13506 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xec>
   134d0:	80 91 f4 11 	lds	r24, 0x11F4
   134d4:	90 91 f5 11 	lds	r25, 0x11F5
   134d8:	a0 91 f6 11 	lds	r26, 0x11F6
   134dc:	b0 91 f7 11 	lds	r27, 0x11F7
   134e0:	05 97       	sbiw	r24, 0x05	; 5
   134e2:	a1 05       	cpc	r26, r1
   134e4:	b1 05       	cpc	r27, r1
   134e6:	40 f4       	brcc	.+16     	; 0x134f8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xde>
   134e8:	23 e0       	ldi	r18, 0x03	; 3
   134ea:	43 e0       	ldi	r20, 0x03	; 3
   134ec:	64 ee       	ldi	r22, 0xE4	; 228
   134ee:	74 e1       	ldi	r23, 0x14	; 20
   134f0:	8d 2f       	mov	r24, r29
   134f2:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   134f6:	07 c0       	rjmp	.+14     	; 0x13506 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xec>
   134f8:	23 e0       	ldi	r18, 0x03	; 3
   134fa:	40 e2       	ldi	r20, 0x20	; 32
   134fc:	64 ee       	ldi	r22, 0xE4	; 228
   134fe:	74 e1       	ldi	r23, 0x14	; 20
   13500:	8d 2f       	mov	r24, r29
   13502:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   13506:	11 23       	and	r17, r17
   13508:	09 f4       	brne	.+2      	; 0x1350c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xf2>
   1350a:	b0 c0       	rjmp	.+352    	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   1350c:	80 91 f4 11 	lds	r24, 0x11F4
   13510:	90 91 f5 11 	lds	r25, 0x11F5
   13514:	a0 91 f6 11 	lds	r26, 0x11F6
   13518:	b0 91 f7 11 	lds	r27, 0x11F7
   1351c:	05 97       	sbiw	r24, 0x05	; 5
   1351e:	a1 05       	cpc	r26, r1
   13520:	b1 05       	cpc	r27, r1
   13522:	08 f0       	brcs	.+2      	; 0x13526 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x10c>
   13524:	a3 c0       	rjmp	.+326    	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   13526:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1352a:	8d e6       	ldi	r24, 0x6D	; 109
   1352c:	9e ea       	ldi	r25, 0xAE	; 174
   1352e:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   13532:	d2 c0       	rjmp	.+420    	; 0x136d8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x2be>
   13534:	c1 30       	cpi	r28, 0x01	; 1
   13536:	09 f0       	breq	.+2      	; 0x1353a <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x120>
   13538:	4c c0       	rjmp	.+152    	; 0x135d2 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x1b8>
   1353a:	80 91 64 02 	lds	r24, 0x0264
   1353e:	88 23       	and	r24, r24
   13540:	31 f1       	breq	.+76     	; 0x1358e <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x174>
   13542:	60 91 f4 11 	lds	r22, 0x11F4
   13546:	70 91 f5 11 	lds	r23, 0x11F5
   1354a:	80 91 f6 11 	lds	r24, 0x11F6
   1354e:	90 91 f7 11 	lds	r25, 0x11F7
   13552:	a7 01       	movw	r20, r14
   13554:	96 01       	movw	r18, r12
   13556:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1355a:	21 30       	cpi	r18, 0x01	; 1
   1355c:	31 05       	cpc	r19, r1
   1355e:	41 05       	cpc	r20, r1
   13560:	51 05       	cpc	r21, r1
   13562:	59 f4       	brne	.+22     	; 0x1357a <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x160>
   13564:	88 e1       	ldi	r24, 0x18	; 24
   13566:	92 e1       	ldi	r25, 0x12	; 18
   13568:	1f df       	rcall	.-450    	; 0x133a8 <_Z7itostr3RKi>
   1356a:	9c 01       	movw	r18, r24
   1356c:	4e e3       	ldi	r20, 0x3E	; 62
   1356e:	60 ef       	ldi	r22, 0xF0	; 240
   13570:	74 e1       	ldi	r23, 0x14	; 20
   13572:	8d 2f       	mov	r24, r29
   13574:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13578:	0a c0       	rjmp	.+20     	; 0x1358e <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x174>
   1357a:	88 e1       	ldi	r24, 0x18	; 24
   1357c:	92 e1       	ldi	r25, 0x12	; 18
   1357e:	14 df       	rcall	.-472    	; 0x133a8 <_Z7itostr3RKi>
   13580:	9c 01       	movw	r18, r24
   13582:	40 e2       	ldi	r20, 0x20	; 32
   13584:	60 ef       	ldi	r22, 0xF0	; 240
   13586:	74 e1       	ldi	r23, 0x14	; 20
   13588:	8d 2f       	mov	r24, r29
   1358a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1358e:	11 23       	and	r17, r17
   13590:	09 f4       	brne	.+2      	; 0x13594 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x17a>
   13592:	6c c0       	rjmp	.+216    	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   13594:	60 91 f4 11 	lds	r22, 0x11F4
   13598:	70 91 f5 11 	lds	r23, 0x11F5
   1359c:	80 91 f6 11 	lds	r24, 0x11F6
   135a0:	90 91 f7 11 	lds	r25, 0x11F7
   135a4:	a7 01       	movw	r20, r14
   135a6:	96 01       	movw	r18, r12
   135a8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   135ac:	21 30       	cpi	r18, 0x01	; 1
   135ae:	31 05       	cpc	r19, r1
   135b0:	41 05       	cpc	r20, r1
   135b2:	51 05       	cpc	r21, r1
   135b4:	09 f0       	breq	.+2      	; 0x135b8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x19e>
   135b6:	5a c0       	rjmp	.+180    	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   135b8:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   135bc:	2f ef       	ldi	r18, 0xFF	; 255
   135be:	30 e0       	ldi	r19, 0x00	; 0
   135c0:	40 e0       	ldi	r20, 0x00	; 0
   135c2:	50 e0       	ldi	r21, 0x00	; 0
   135c4:	68 e1       	ldi	r22, 0x18	; 24
   135c6:	72 e1       	ldi	r23, 0x12	; 18
   135c8:	8a ef       	ldi	r24, 0xFA	; 250
   135ca:	94 e1       	ldi	r25, 0x14	; 20
   135cc:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   135d0:	83 c0       	rjmp	.+262    	; 0x136d8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x2be>
   135d2:	c2 30       	cpi	r28, 0x02	; 2
   135d4:	09 f0       	breq	.+2      	; 0x135d8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x1be>
   135d6:	4a c0       	rjmp	.+148    	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   135d8:	80 91 64 02 	lds	r24, 0x0264
   135dc:	88 23       	and	r24, r24
   135de:	31 f1       	breq	.+76     	; 0x1362c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x212>
   135e0:	60 91 f4 11 	lds	r22, 0x11F4
   135e4:	70 91 f5 11 	lds	r23, 0x11F5
   135e8:	80 91 f6 11 	lds	r24, 0x11F6
   135ec:	90 91 f7 11 	lds	r25, 0x11F7
   135f0:	a7 01       	movw	r20, r14
   135f2:	96 01       	movw	r18, r12
   135f4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   135f8:	22 30       	cpi	r18, 0x02	; 2
   135fa:	31 05       	cpc	r19, r1
   135fc:	41 05       	cpc	r20, r1
   135fe:	51 05       	cpc	r21, r1
   13600:	59 f4       	brne	.+22     	; 0x13618 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x1fe>
   13602:	8c e1       	ldi	r24, 0x1C	; 28
   13604:	92 e1       	ldi	r25, 0x12	; 18
   13606:	d0 de       	rcall	.-608    	; 0x133a8 <_Z7itostr3RKi>
   13608:	9c 01       	movw	r18, r24
   1360a:	4e e3       	ldi	r20, 0x3E	; 62
   1360c:	64 e0       	ldi	r22, 0x04	; 4
   1360e:	75 e1       	ldi	r23, 0x15	; 21
   13610:	8d 2f       	mov	r24, r29
   13612:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13616:	0a c0       	rjmp	.+20     	; 0x1362c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x212>
   13618:	8c e1       	ldi	r24, 0x1C	; 28
   1361a:	92 e1       	ldi	r25, 0x12	; 18
   1361c:	c5 de       	rcall	.-630    	; 0x133a8 <_Z7itostr3RKi>
   1361e:	9c 01       	movw	r18, r24
   13620:	40 e2       	ldi	r20, 0x20	; 32
   13622:	64 e0       	ldi	r22, 0x04	; 4
   13624:	75 e1       	ldi	r23, 0x15	; 21
   13626:	8d 2f       	mov	r24, r29
   13628:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1362c:	11 23       	and	r17, r17
   1362e:	f1 f0       	breq	.+60     	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   13630:	60 91 f4 11 	lds	r22, 0x11F4
   13634:	70 91 f5 11 	lds	r23, 0x11F5
   13638:	80 91 f6 11 	lds	r24, 0x11F6
   1363c:	90 91 f7 11 	lds	r25, 0x11F7
   13640:	a7 01       	movw	r20, r14
   13642:	96 01       	movw	r18, r12
   13644:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13648:	22 30       	cpi	r18, 0x02	; 2
   1364a:	31 05       	cpc	r19, r1
   1364c:	41 05       	cpc	r20, r1
   1364e:	51 05       	cpc	r21, r1
   13650:	69 f4       	brne	.+26     	; 0x1366c <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x252>
   13652:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13656:	24 e0       	ldi	r18, 0x04	; 4
   13658:	31 e0       	ldi	r19, 0x01	; 1
   1365a:	40 e0       	ldi	r20, 0x00	; 0
   1365c:	50 e0       	ldi	r21, 0x00	; 0
   1365e:	6c e1       	ldi	r22, 0x1C	; 28
   13660:	72 e1       	ldi	r23, 0x12	; 18
   13662:	8b e0       	ldi	r24, 0x0B	; 11
   13664:	95 e1       	ldi	r25, 0x15	; 21
   13666:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   1366a:	36 c0       	rjmp	.+108    	; 0x136d8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x2be>
   1366c:	80 91 f4 11 	lds	r24, 0x11F4
   13670:	90 91 f5 11 	lds	r25, 0x11F5
   13674:	a0 91 f6 11 	lds	r26, 0x11F6
   13678:	b0 91 f7 11 	lds	r27, 0x11F7
   1367c:	0f 97       	sbiw	r24, 0x0f	; 15
   1367e:	a1 05       	cpc	r26, r1
   13680:	b1 05       	cpc	r27, r1
   13682:	40 f0       	brcs	.+16     	; 0x13694 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x27a>
   13684:	80 92 f4 11 	sts	0x11F4, r8
   13688:	90 92 f5 11 	sts	0x11F5, r9
   1368c:	a0 92 f6 11 	sts	0x11F6, r10
   13690:	b0 92 f7 11 	sts	0x11F7, r11
   13694:	60 91 f4 11 	lds	r22, 0x11F4
   13698:	70 91 f5 11 	lds	r23, 0x11F5
   1369c:	80 91 f6 11 	lds	r24, 0x11F6
   136a0:	90 91 f7 11 	lds	r25, 0x11F7
   136a4:	a7 01       	movw	r20, r14
   136a6:	96 01       	movw	r18, r12
   136a8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   136ac:	42 2f       	mov	r20, r18
   136ae:	50 e0       	ldi	r21, 0x00	; 0
   136b0:	80 91 fd 11 	lds	r24, 0x11FD
   136b4:	90 e0       	ldi	r25, 0x00	; 0
   136b6:	04 96       	adiw	r24, 0x04	; 4
   136b8:	48 17       	cp	r20, r24
   136ba:	59 07       	cpc	r21, r25
   136bc:	44 f0       	brlt	.+16     	; 0x136ce <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x2b4>
   136be:	c2 2f       	mov	r28, r18
   136c0:	c3 50       	subi	r28, 0x03	; 3
   136c2:	c0 93 fd 11 	sts	0x11FD, r28
   136c6:	70 92 64 02 	sts	0x0264, r7
   136ca:	d0 2f       	mov	r29, r16
   136cc:	fb ce       	rjmp	.-522    	; 0x134c4 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xaa>
   136ce:	df 5f       	subi	r29, 0xFF	; 255
   136d0:	cf 5f       	subi	r28, 0xFF	; 255
   136d2:	d4 30       	cpi	r29, 0x04	; 4
   136d4:	08 f4       	brcc	.+2      	; 0x136d8 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0x2be>
   136d6:	f6 ce       	rjmp	.-532    	; 0x134c4 <_ZL49lcd_control_temperature_preheat_abs_settings_menuv+0xaa>
   136d8:	df 91       	pop	r29
   136da:	cf 91       	pop	r28
   136dc:	1f 91       	pop	r17
   136de:	0f 91       	pop	r16
   136e0:	ff 90       	pop	r15
   136e2:	ef 90       	pop	r14
   136e4:	df 90       	pop	r13
   136e6:	cf 90       	pop	r12
   136e8:	bf 90       	pop	r11
   136ea:	af 90       	pop	r10
   136ec:	9f 90       	pop	r9
   136ee:	8f 90       	pop	r8
   136f0:	7f 90       	pop	r7
   136f2:	08 95       	ret

000136f4 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv>:
   136f4:	7f 92       	push	r7
   136f6:	8f 92       	push	r8
   136f8:	9f 92       	push	r9
   136fa:	af 92       	push	r10
   136fc:	bf 92       	push	r11
   136fe:	cf 92       	push	r12
   13700:	df 92       	push	r13
   13702:	ef 92       	push	r14
   13704:	ff 92       	push	r15
   13706:	0f 93       	push	r16
   13708:	1f 93       	push	r17
   1370a:	cf 93       	push	r28
   1370c:	df 93       	push	r29
   1370e:	80 91 f4 11 	lds	r24, 0x11F4
   13712:	90 91 f5 11 	lds	r25, 0x11F5
   13716:	a0 91 f6 11 	lds	r26, 0x11F6
   1371a:	b0 91 f7 11 	lds	r27, 0x11F7
   1371e:	81 30       	cpi	r24, 0x01	; 1
   13720:	90 48       	sbci	r25, 0x80	; 128
   13722:	a1 05       	cpc	r26, r1
   13724:	b1 05       	cpc	r27, r1
   13726:	40 f0       	brcs	.+16     	; 0x13738 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x44>
   13728:	10 92 f4 11 	sts	0x11F4, r1
   1372c:	10 92 f5 11 	sts	0x11F5, r1
   13730:	10 92 f6 11 	sts	0x11F6, r1
   13734:	10 92 f7 11 	sts	0x11F7, r1
   13738:	60 91 f4 11 	lds	r22, 0x11F4
   1373c:	70 91 f5 11 	lds	r23, 0x11F5
   13740:	80 91 f6 11 	lds	r24, 0x11F6
   13744:	90 91 f7 11 	lds	r25, 0x11F7
   13748:	25 e0       	ldi	r18, 0x05	; 5
   1374a:	30 e0       	ldi	r19, 0x00	; 0
   1374c:	40 e0       	ldi	r20, 0x00	; 0
   1374e:	50 e0       	ldi	r21, 0x00	; 0
   13750:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13754:	80 91 fd 11 	lds	r24, 0x11FD
   13758:	90 e0       	ldi	r25, 0x00	; 0
   1375a:	a0 e0       	ldi	r26, 0x00	; 0
   1375c:	b0 e0       	ldi	r27, 0x00	; 0
   1375e:	28 17       	cp	r18, r24
   13760:	39 07       	cpc	r19, r25
   13762:	4a 07       	cpc	r20, r26
   13764:	5b 07       	cpc	r21, r27
   13766:	10 f4       	brcc	.+4      	; 0x1376c <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x78>
   13768:	20 93 fd 11 	sts	0x11FD, r18
   1376c:	c0 91 fd 11 	lds	r28, 0x11FD
   13770:	10 91 fe 11 	lds	r17, 0x11FE
   13774:	12 fb       	bst	r17, 2
   13776:	11 27       	eor	r17, r17
   13778:	10 f9       	bld	r17, 0
   1377a:	d0 e0       	ldi	r29, 0x00	; 0
   1377c:	0f 2e       	mov	r0, r31
   1377e:	f5 e0       	ldi	r31, 0x05	; 5
   13780:	cf 2e       	mov	r12, r31
   13782:	d1 2c       	mov	r13, r1
   13784:	e1 2c       	mov	r14, r1
   13786:	f1 2c       	mov	r15, r1
   13788:	f0 2d       	mov	r31, r0
   1378a:	0f 2e       	mov	r0, r31
   1378c:	fe e0       	ldi	r31, 0x0E	; 14
   1378e:	8f 2e       	mov	r8, r31
   13790:	91 2c       	mov	r9, r1
   13792:	a1 2c       	mov	r10, r1
   13794:	b1 2c       	mov	r11, r1
   13796:	f0 2d       	mov	r31, r0
   13798:	77 24       	eor	r7, r7
   1379a:	73 94       	inc	r7
   1379c:	00 e0       	ldi	r16, 0x00	; 0
   1379e:	c1 11       	cpse	r28, r1
   137a0:	36 c0       	rjmp	.+108    	; 0x1380e <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x11a>
   137a2:	80 91 64 02 	lds	r24, 0x0264
   137a6:	88 23       	and	r24, r24
   137a8:	d9 f0       	breq	.+54     	; 0x137e0 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xec>
   137aa:	80 91 f4 11 	lds	r24, 0x11F4
   137ae:	90 91 f5 11 	lds	r25, 0x11F5
   137b2:	a0 91 f6 11 	lds	r26, 0x11F6
   137b6:	b0 91 f7 11 	lds	r27, 0x11F7
   137ba:	05 97       	sbiw	r24, 0x05	; 5
   137bc:	a1 05       	cpc	r26, r1
   137be:	b1 05       	cpc	r27, r1
   137c0:	40 f4       	brcc	.+16     	; 0x137d2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xde>
   137c2:	23 e0       	ldi	r18, 0x03	; 3
   137c4:	43 e0       	ldi	r20, 0x03	; 3
   137c6:	62 e1       	ldi	r22, 0x12	; 18
   137c8:	75 e1       	ldi	r23, 0x15	; 21
   137ca:	8d 2f       	mov	r24, r29
   137cc:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   137d0:	07 c0       	rjmp	.+14     	; 0x137e0 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xec>
   137d2:	23 e0       	ldi	r18, 0x03	; 3
   137d4:	40 e2       	ldi	r20, 0x20	; 32
   137d6:	62 e1       	ldi	r22, 0x12	; 18
   137d8:	75 e1       	ldi	r23, 0x15	; 21
   137da:	8d 2f       	mov	r24, r29
   137dc:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   137e0:	11 23       	and	r17, r17
   137e2:	09 f4       	brne	.+2      	; 0x137e6 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xf2>
   137e4:	b0 c0       	rjmp	.+352    	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   137e6:	80 91 f4 11 	lds	r24, 0x11F4
   137ea:	90 91 f5 11 	lds	r25, 0x11F5
   137ee:	a0 91 f6 11 	lds	r26, 0x11F6
   137f2:	b0 91 f7 11 	lds	r27, 0x11F7
   137f6:	05 97       	sbiw	r24, 0x05	; 5
   137f8:	a1 05       	cpc	r26, r1
   137fa:	b1 05       	cpc	r27, r1
   137fc:	08 f0       	brcs	.+2      	; 0x13800 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x10c>
   137fe:	a3 c0       	rjmp	.+326    	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   13800:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13804:	8d e6       	ldi	r24, 0x6D	; 109
   13806:	9e ea       	ldi	r25, 0xAE	; 174
   13808:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   1380c:	d2 c0       	rjmp	.+420    	; 0x139b2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x2be>
   1380e:	c1 30       	cpi	r28, 0x01	; 1
   13810:	09 f0       	breq	.+2      	; 0x13814 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x120>
   13812:	4c c0       	rjmp	.+152    	; 0x138ac <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x1b8>
   13814:	80 91 64 02 	lds	r24, 0x0264
   13818:	88 23       	and	r24, r24
   1381a:	31 f1       	breq	.+76     	; 0x13868 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x174>
   1381c:	60 91 f4 11 	lds	r22, 0x11F4
   13820:	70 91 f5 11 	lds	r23, 0x11F5
   13824:	80 91 f6 11 	lds	r24, 0x11F6
   13828:	90 91 f7 11 	lds	r25, 0x11F7
   1382c:	a7 01       	movw	r20, r14
   1382e:	96 01       	movw	r18, r12
   13830:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13834:	21 30       	cpi	r18, 0x01	; 1
   13836:	31 05       	cpc	r19, r1
   13838:	41 05       	cpc	r20, r1
   1383a:	51 05       	cpc	r21, r1
   1383c:	59 f4       	brne	.+22     	; 0x13854 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x160>
   1383e:	8e e1       	ldi	r24, 0x1E	; 30
   13840:	92 e1       	ldi	r25, 0x12	; 18
   13842:	b2 dd       	rcall	.-1180   	; 0x133a8 <_Z7itostr3RKi>
   13844:	9c 01       	movw	r18, r24
   13846:	4e e3       	ldi	r20, 0x3E	; 62
   13848:	6e e1       	ldi	r22, 0x1E	; 30
   1384a:	75 e1       	ldi	r23, 0x15	; 21
   1384c:	8d 2f       	mov	r24, r29
   1384e:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13852:	0a c0       	rjmp	.+20     	; 0x13868 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x174>
   13854:	8e e1       	ldi	r24, 0x1E	; 30
   13856:	92 e1       	ldi	r25, 0x12	; 18
   13858:	a7 dd       	rcall	.-1202   	; 0x133a8 <_Z7itostr3RKi>
   1385a:	9c 01       	movw	r18, r24
   1385c:	40 e2       	ldi	r20, 0x20	; 32
   1385e:	6e e1       	ldi	r22, 0x1E	; 30
   13860:	75 e1       	ldi	r23, 0x15	; 21
   13862:	8d 2f       	mov	r24, r29
   13864:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13868:	11 23       	and	r17, r17
   1386a:	09 f4       	brne	.+2      	; 0x1386e <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x17a>
   1386c:	6c c0       	rjmp	.+216    	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   1386e:	60 91 f4 11 	lds	r22, 0x11F4
   13872:	70 91 f5 11 	lds	r23, 0x11F5
   13876:	80 91 f6 11 	lds	r24, 0x11F6
   1387a:	90 91 f7 11 	lds	r25, 0x11F7
   1387e:	a7 01       	movw	r20, r14
   13880:	96 01       	movw	r18, r12
   13882:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13886:	21 30       	cpi	r18, 0x01	; 1
   13888:	31 05       	cpc	r19, r1
   1388a:	41 05       	cpc	r20, r1
   1388c:	51 05       	cpc	r21, r1
   1388e:	09 f0       	breq	.+2      	; 0x13892 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x19e>
   13890:	5a c0       	rjmp	.+180    	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   13892:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13896:	2f ef       	ldi	r18, 0xFF	; 255
   13898:	30 e0       	ldi	r19, 0x00	; 0
   1389a:	40 e0       	ldi	r20, 0x00	; 0
   1389c:	50 e0       	ldi	r21, 0x00	; 0
   1389e:	6e e1       	ldi	r22, 0x1E	; 30
   138a0:	72 e1       	ldi	r23, 0x12	; 18
   138a2:	88 e2       	ldi	r24, 0x28	; 40
   138a4:	95 e1       	ldi	r25, 0x15	; 21
   138a6:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   138aa:	83 c0       	rjmp	.+262    	; 0x139b2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x2be>
   138ac:	c2 30       	cpi	r28, 0x02	; 2
   138ae:	09 f0       	breq	.+2      	; 0x138b2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x1be>
   138b0:	4a c0       	rjmp	.+148    	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   138b2:	80 91 64 02 	lds	r24, 0x0264
   138b6:	88 23       	and	r24, r24
   138b8:	31 f1       	breq	.+76     	; 0x13906 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x212>
   138ba:	60 91 f4 11 	lds	r22, 0x11F4
   138be:	70 91 f5 11 	lds	r23, 0x11F5
   138c2:	80 91 f6 11 	lds	r24, 0x11F6
   138c6:	90 91 f7 11 	lds	r25, 0x11F7
   138ca:	a7 01       	movw	r20, r14
   138cc:	96 01       	movw	r18, r12
   138ce:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   138d2:	22 30       	cpi	r18, 0x02	; 2
   138d4:	31 05       	cpc	r19, r1
   138d6:	41 05       	cpc	r20, r1
   138d8:	51 05       	cpc	r21, r1
   138da:	59 f4       	brne	.+22     	; 0x138f2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x1fe>
   138dc:	82 e2       	ldi	r24, 0x22	; 34
   138de:	92 e1       	ldi	r25, 0x12	; 18
   138e0:	63 dd       	rcall	.-1338   	; 0x133a8 <_Z7itostr3RKi>
   138e2:	9c 01       	movw	r18, r24
   138e4:	4e e3       	ldi	r20, 0x3E	; 62
   138e6:	62 e3       	ldi	r22, 0x32	; 50
   138e8:	75 e1       	ldi	r23, 0x15	; 21
   138ea:	8d 2f       	mov	r24, r29
   138ec:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   138f0:	0a c0       	rjmp	.+20     	; 0x13906 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x212>
   138f2:	82 e2       	ldi	r24, 0x22	; 34
   138f4:	92 e1       	ldi	r25, 0x12	; 18
   138f6:	58 dd       	rcall	.-1360   	; 0x133a8 <_Z7itostr3RKi>
   138f8:	9c 01       	movw	r18, r24
   138fa:	40 e2       	ldi	r20, 0x20	; 32
   138fc:	62 e3       	ldi	r22, 0x32	; 50
   138fe:	75 e1       	ldi	r23, 0x15	; 21
   13900:	8d 2f       	mov	r24, r29
   13902:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13906:	11 23       	and	r17, r17
   13908:	f1 f0       	breq	.+60     	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   1390a:	60 91 f4 11 	lds	r22, 0x11F4
   1390e:	70 91 f5 11 	lds	r23, 0x11F5
   13912:	80 91 f6 11 	lds	r24, 0x11F6
   13916:	90 91 f7 11 	lds	r25, 0x11F7
   1391a:	a7 01       	movw	r20, r14
   1391c:	96 01       	movw	r18, r12
   1391e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13922:	22 30       	cpi	r18, 0x02	; 2
   13924:	31 05       	cpc	r19, r1
   13926:	41 05       	cpc	r20, r1
   13928:	51 05       	cpc	r21, r1
   1392a:	69 f4       	brne	.+26     	; 0x13946 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x252>
   1392c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13930:	24 e0       	ldi	r18, 0x04	; 4
   13932:	31 e0       	ldi	r19, 0x01	; 1
   13934:	40 e0       	ldi	r20, 0x00	; 0
   13936:	50 e0       	ldi	r21, 0x00	; 0
   13938:	62 e2       	ldi	r22, 0x22	; 34
   1393a:	72 e1       	ldi	r23, 0x12	; 18
   1393c:	89 e3       	ldi	r24, 0x39	; 57
   1393e:	95 e1       	ldi	r25, 0x15	; 21
   13940:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13944:	36 c0       	rjmp	.+108    	; 0x139b2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x2be>
   13946:	80 91 f4 11 	lds	r24, 0x11F4
   1394a:	90 91 f5 11 	lds	r25, 0x11F5
   1394e:	a0 91 f6 11 	lds	r26, 0x11F6
   13952:	b0 91 f7 11 	lds	r27, 0x11F7
   13956:	0f 97       	sbiw	r24, 0x0f	; 15
   13958:	a1 05       	cpc	r26, r1
   1395a:	b1 05       	cpc	r27, r1
   1395c:	40 f0       	brcs	.+16     	; 0x1396e <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x27a>
   1395e:	80 92 f4 11 	sts	0x11F4, r8
   13962:	90 92 f5 11 	sts	0x11F5, r9
   13966:	a0 92 f6 11 	sts	0x11F6, r10
   1396a:	b0 92 f7 11 	sts	0x11F7, r11
   1396e:	60 91 f4 11 	lds	r22, 0x11F4
   13972:	70 91 f5 11 	lds	r23, 0x11F5
   13976:	80 91 f6 11 	lds	r24, 0x11F6
   1397a:	90 91 f7 11 	lds	r25, 0x11F7
   1397e:	a7 01       	movw	r20, r14
   13980:	96 01       	movw	r18, r12
   13982:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13986:	42 2f       	mov	r20, r18
   13988:	50 e0       	ldi	r21, 0x00	; 0
   1398a:	80 91 fd 11 	lds	r24, 0x11FD
   1398e:	90 e0       	ldi	r25, 0x00	; 0
   13990:	04 96       	adiw	r24, 0x04	; 4
   13992:	48 17       	cp	r20, r24
   13994:	59 07       	cpc	r21, r25
   13996:	44 f0       	brlt	.+16     	; 0x139a8 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x2b4>
   13998:	c2 2f       	mov	r28, r18
   1399a:	c3 50       	subi	r28, 0x03	; 3
   1399c:	c0 93 fd 11 	sts	0x11FD, r28
   139a0:	70 92 64 02 	sts	0x0264, r7
   139a4:	d0 2f       	mov	r29, r16
   139a6:	fb ce       	rjmp	.-522    	; 0x1379e <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xaa>
   139a8:	df 5f       	subi	r29, 0xFF	; 255
   139aa:	cf 5f       	subi	r28, 0xFF	; 255
   139ac:	d4 30       	cpi	r29, 0x04	; 4
   139ae:	08 f4       	brcc	.+2      	; 0x139b2 <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0x2be>
   139b0:	f6 ce       	rjmp	.-532    	; 0x1379e <_ZL49lcd_control_temperature_preheat_pla_settings_menuv+0xaa>
   139b2:	df 91       	pop	r29
   139b4:	cf 91       	pop	r28
   139b6:	1f 91       	pop	r17
   139b8:	0f 91       	pop	r16
   139ba:	ff 90       	pop	r15
   139bc:	ef 90       	pop	r14
   139be:	df 90       	pop	r13
   139c0:	cf 90       	pop	r12
   139c2:	bf 90       	pop	r11
   139c4:	af 90       	pop	r10
   139c6:	9f 90       	pop	r9
   139c8:	8f 90       	pop	r8
   139ca:	7f 90       	pop	r7
   139cc:	08 95       	ret

000139ce <_ZL13lcd_tune_menuv>:
   139ce:	7f 92       	push	r7
   139d0:	8f 92       	push	r8
   139d2:	9f 92       	push	r9
   139d4:	af 92       	push	r10
   139d6:	bf 92       	push	r11
   139d8:	cf 92       	push	r12
   139da:	df 92       	push	r13
   139dc:	ef 92       	push	r14
   139de:	ff 92       	push	r15
   139e0:	0f 93       	push	r16
   139e2:	1f 93       	push	r17
   139e4:	cf 93       	push	r28
   139e6:	df 93       	push	r29
   139e8:	80 91 f4 11 	lds	r24, 0x11F4
   139ec:	90 91 f5 11 	lds	r25, 0x11F5
   139f0:	a0 91 f6 11 	lds	r26, 0x11F6
   139f4:	b0 91 f7 11 	lds	r27, 0x11F7
   139f8:	81 30       	cpi	r24, 0x01	; 1
   139fa:	90 48       	sbci	r25, 0x80	; 128
   139fc:	a1 05       	cpc	r26, r1
   139fe:	b1 05       	cpc	r27, r1
   13a00:	40 f0       	brcs	.+16     	; 0x13a12 <_ZL13lcd_tune_menuv+0x44>
   13a02:	10 92 f4 11 	sts	0x11F4, r1
   13a06:	10 92 f5 11 	sts	0x11F5, r1
   13a0a:	10 92 f6 11 	sts	0x11F6, r1
   13a0e:	10 92 f7 11 	sts	0x11F7, r1
   13a12:	60 91 f4 11 	lds	r22, 0x11F4
   13a16:	70 91 f5 11 	lds	r23, 0x11F5
   13a1a:	80 91 f6 11 	lds	r24, 0x11F6
   13a1e:	90 91 f7 11 	lds	r25, 0x11F7
   13a22:	25 e0       	ldi	r18, 0x05	; 5
   13a24:	30 e0       	ldi	r19, 0x00	; 0
   13a26:	40 e0       	ldi	r20, 0x00	; 0
   13a28:	50 e0       	ldi	r21, 0x00	; 0
   13a2a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13a2e:	80 91 fd 11 	lds	r24, 0x11FD
   13a32:	90 e0       	ldi	r25, 0x00	; 0
   13a34:	a0 e0       	ldi	r26, 0x00	; 0
   13a36:	b0 e0       	ldi	r27, 0x00	; 0
   13a38:	28 17       	cp	r18, r24
   13a3a:	39 07       	cpc	r19, r25
   13a3c:	4a 07       	cpc	r20, r26
   13a3e:	5b 07       	cpc	r21, r27
   13a40:	10 f4       	brcc	.+4      	; 0x13a46 <_ZL13lcd_tune_menuv+0x78>
   13a42:	20 93 fd 11 	sts	0x11FD, r18
   13a46:	c0 91 fd 11 	lds	r28, 0x11FD
   13a4a:	10 91 fe 11 	lds	r17, 0x11FE
   13a4e:	12 fb       	bst	r17, 2
   13a50:	11 27       	eor	r17, r17
   13a52:	10 f9       	bld	r17, 0
   13a54:	d0 e0       	ldi	r29, 0x00	; 0
   13a56:	0f 2e       	mov	r0, r31
   13a58:	f5 e0       	ldi	r31, 0x05	; 5
   13a5a:	cf 2e       	mov	r12, r31
   13a5c:	d1 2c       	mov	r13, r1
   13a5e:	e1 2c       	mov	r14, r1
   13a60:	f1 2c       	mov	r15, r1
   13a62:	f0 2d       	mov	r31, r0
   13a64:	0f 2e       	mov	r0, r31
   13a66:	fd e1       	ldi	r31, 0x1D	; 29
   13a68:	8f 2e       	mov	r8, r31
   13a6a:	91 2c       	mov	r9, r1
   13a6c:	a1 2c       	mov	r10, r1
   13a6e:	b1 2c       	mov	r11, r1
   13a70:	f0 2d       	mov	r31, r0
   13a72:	77 24       	eor	r7, r7
   13a74:	73 94       	inc	r7
   13a76:	00 e0       	ldi	r16, 0x00	; 0
   13a78:	c1 11       	cpse	r28, r1
   13a7a:	36 c0       	rjmp	.+108    	; 0x13ae8 <_ZL13lcd_tune_menuv+0x11a>
   13a7c:	80 91 64 02 	lds	r24, 0x0264
   13a80:	88 23       	and	r24, r24
   13a82:	d9 f0       	breq	.+54     	; 0x13aba <_ZL13lcd_tune_menuv+0xec>
   13a84:	80 91 f4 11 	lds	r24, 0x11F4
   13a88:	90 91 f5 11 	lds	r25, 0x11F5
   13a8c:	a0 91 f6 11 	lds	r26, 0x11F6
   13a90:	b0 91 f7 11 	lds	r27, 0x11F7
   13a94:	05 97       	sbiw	r24, 0x05	; 5
   13a96:	a1 05       	cpc	r26, r1
   13a98:	b1 05       	cpc	r27, r1
   13a9a:	40 f4       	brcc	.+16     	; 0x13aac <_ZL13lcd_tune_menuv+0xde>
   13a9c:	23 e0       	ldi	r18, 0x03	; 3
   13a9e:	43 e0       	ldi	r20, 0x03	; 3
   13aa0:	69 e1       	ldi	r22, 0x19	; 25
   13aa2:	76 e1       	ldi	r23, 0x16	; 22
   13aa4:	8d 2f       	mov	r24, r29
   13aa6:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   13aaa:	07 c0       	rjmp	.+14     	; 0x13aba <_ZL13lcd_tune_menuv+0xec>
   13aac:	23 e0       	ldi	r18, 0x03	; 3
   13aae:	40 e2       	ldi	r20, 0x20	; 32
   13ab0:	69 e1       	ldi	r22, 0x19	; 25
   13ab2:	76 e1       	ldi	r23, 0x16	; 22
   13ab4:	8d 2f       	mov	r24, r29
   13ab6:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   13aba:	11 23       	and	r17, r17
   13abc:	09 f4       	brne	.+2      	; 0x13ac0 <_ZL13lcd_tune_menuv+0xf2>
   13abe:	b2 c0       	rjmp	.+356    	; 0x13c24 <_ZL13lcd_tune_menuv+0x256>
   13ac0:	80 91 f4 11 	lds	r24, 0x11F4
   13ac4:	90 91 f5 11 	lds	r25, 0x11F5
   13ac8:	a0 91 f6 11 	lds	r26, 0x11F6
   13acc:	b0 91 f7 11 	lds	r27, 0x11F7
   13ad0:	05 97       	sbiw	r24, 0x05	; 5
   13ad2:	a1 05       	cpc	r26, r1
   13ad4:	b1 05       	cpc	r27, r1
   13ad6:	08 f0       	brcs	.+2      	; 0x13ada <_ZL13lcd_tune_menuv+0x10c>
   13ad8:	a5 c0       	rjmp	.+330    	; 0x13c24 <_ZL13lcd_tune_menuv+0x256>
   13ada:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13ade:	8a eb       	ldi	r24, 0xBA	; 186
   13ae0:	98 e8       	ldi	r25, 0x88	; 136
   13ae2:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   13ae6:	bf c1       	rjmp	.+894    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13ae8:	c1 30       	cpi	r28, 0x01	; 1
   13aea:	09 f0       	breq	.+2      	; 0x13aee <_ZL13lcd_tune_menuv+0x120>
   13aec:	4c c0       	rjmp	.+152    	; 0x13b86 <_ZL13lcd_tune_menuv+0x1b8>
   13aee:	80 91 64 02 	lds	r24, 0x0264
   13af2:	88 23       	and	r24, r24
   13af4:	31 f1       	breq	.+76     	; 0x13b42 <_ZL13lcd_tune_menuv+0x174>
   13af6:	60 91 f4 11 	lds	r22, 0x11F4
   13afa:	70 91 f5 11 	lds	r23, 0x11F5
   13afe:	80 91 f6 11 	lds	r24, 0x11F6
   13b02:	90 91 f7 11 	lds	r25, 0x11F7
   13b06:	a7 01       	movw	r20, r14
   13b08:	96 01       	movw	r18, r12
   13b0a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13b0e:	21 30       	cpi	r18, 0x01	; 1
   13b10:	31 05       	cpc	r19, r1
   13b12:	41 05       	cpc	r20, r1
   13b14:	51 05       	cpc	r21, r1
   13b16:	59 f4       	brne	.+22     	; 0x13b2e <_ZL13lcd_tune_menuv+0x160>
   13b18:	8f e1       	ldi	r24, 0x1F	; 31
   13b1a:	92 e0       	ldi	r25, 0x02	; 2
   13b1c:	45 dc       	rcall	.-1910   	; 0x133a8 <_Z7itostr3RKi>
   13b1e:	9c 01       	movw	r18, r24
   13b20:	4e e3       	ldi	r20, 0x3E	; 62
   13b22:	6e e1       	ldi	r22, 0x1E	; 30
   13b24:	76 e1       	ldi	r23, 0x16	; 22
   13b26:	8d 2f       	mov	r24, r29
   13b28:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13b2c:	0a c0       	rjmp	.+20     	; 0x13b42 <_ZL13lcd_tune_menuv+0x174>
   13b2e:	8f e1       	ldi	r24, 0x1F	; 31
   13b30:	92 e0       	ldi	r25, 0x02	; 2
   13b32:	3a dc       	rcall	.-1932   	; 0x133a8 <_Z7itostr3RKi>
   13b34:	9c 01       	movw	r18, r24
   13b36:	40 e2       	ldi	r20, 0x20	; 32
   13b38:	6e e1       	ldi	r22, 0x1E	; 30
   13b3a:	76 e1       	ldi	r23, 0x16	; 22
   13b3c:	8d 2f       	mov	r24, r29
   13b3e:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13b42:	11 23       	and	r17, r17
   13b44:	09 f4       	brne	.+2      	; 0x13b48 <_ZL13lcd_tune_menuv+0x17a>
   13b46:	bd c0       	rjmp	.+378    	; 0x13cc2 <_ZL13lcd_tune_menuv+0x2f4>
   13b48:	60 91 f4 11 	lds	r22, 0x11F4
   13b4c:	70 91 f5 11 	lds	r23, 0x11F5
   13b50:	80 91 f6 11 	lds	r24, 0x11F6
   13b54:	90 91 f7 11 	lds	r25, 0x11F7
   13b58:	a7 01       	movw	r20, r14
   13b5a:	96 01       	movw	r18, r12
   13b5c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13b60:	21 30       	cpi	r18, 0x01	; 1
   13b62:	31 05       	cpc	r19, r1
   13b64:	41 05       	cpc	r20, r1
   13b66:	51 05       	cpc	r21, r1
   13b68:	09 f0       	breq	.+2      	; 0x13b6c <_ZL13lcd_tune_menuv+0x19e>
   13b6a:	ab c0       	rjmp	.+342    	; 0x13cc2 <_ZL13lcd_tune_menuv+0x2f4>
   13b6c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13b70:	27 ee       	ldi	r18, 0xE7	; 231
   13b72:	33 e0       	ldi	r19, 0x03	; 3
   13b74:	4a e0       	ldi	r20, 0x0A	; 10
   13b76:	50 e0       	ldi	r21, 0x00	; 0
   13b78:	6f e1       	ldi	r22, 0x1F	; 31
   13b7a:	72 e0       	ldi	r23, 0x02	; 2
   13b7c:	84 e2       	ldi	r24, 0x24	; 36
   13b7e:	96 e1       	ldi	r25, 0x16	; 22
   13b80:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13b84:	70 c1       	rjmp	.+736    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13b86:	c2 30       	cpi	r28, 0x02	; 2
   13b88:	09 f0       	breq	.+2      	; 0x13b8c <_ZL13lcd_tune_menuv+0x1be>
   13b8a:	4c c0       	rjmp	.+152    	; 0x13c24 <_ZL13lcd_tune_menuv+0x256>
   13b8c:	80 91 64 02 	lds	r24, 0x0264
   13b90:	88 23       	and	r24, r24
   13b92:	31 f1       	breq	.+76     	; 0x13be0 <_ZL13lcd_tune_menuv+0x212>
   13b94:	60 91 f4 11 	lds	r22, 0x11F4
   13b98:	70 91 f5 11 	lds	r23, 0x11F5
   13b9c:	80 91 f6 11 	lds	r24, 0x11F6
   13ba0:	90 91 f7 11 	lds	r25, 0x11F7
   13ba4:	a7 01       	movw	r20, r14
   13ba6:	96 01       	movw	r18, r12
   13ba8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13bac:	22 30       	cpi	r18, 0x02	; 2
   13bae:	31 05       	cpc	r19, r1
   13bb0:	41 05       	cpc	r20, r1
   13bb2:	51 05       	cpc	r21, r1
   13bb4:	59 f4       	brne	.+22     	; 0x13bcc <_ZL13lcd_tune_menuv+0x1fe>
   13bb6:	89 e1       	ldi	r24, 0x19	; 25
   13bb8:	91 e1       	ldi	r25, 0x11	; 17
   13bba:	f6 db       	rcall	.-2068   	; 0x133a8 <_Z7itostr3RKi>
   13bbc:	9c 01       	movw	r18, r24
   13bbe:	4e e3       	ldi	r20, 0x3E	; 62
   13bc0:	6a e2       	ldi	r22, 0x2A	; 42
   13bc2:	76 e1       	ldi	r23, 0x16	; 22
   13bc4:	8d 2f       	mov	r24, r29
   13bc6:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13bca:	0a c0       	rjmp	.+20     	; 0x13be0 <_ZL13lcd_tune_menuv+0x212>
   13bcc:	89 e1       	ldi	r24, 0x19	; 25
   13bce:	91 e1       	ldi	r25, 0x11	; 17
   13bd0:	eb db       	rcall	.-2090   	; 0x133a8 <_Z7itostr3RKi>
   13bd2:	9c 01       	movw	r18, r24
   13bd4:	40 e2       	ldi	r20, 0x20	; 32
   13bd6:	6a e2       	ldi	r22, 0x2A	; 42
   13bd8:	76 e1       	ldi	r23, 0x16	; 22
   13bda:	8d 2f       	mov	r24, r29
   13bdc:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13be0:	11 23       	and	r17, r17
   13be2:	09 f4       	brne	.+2      	; 0x13be6 <_ZL13lcd_tune_menuv+0x218>
   13be4:	bd c0       	rjmp	.+378    	; 0x13d60 <_ZL13lcd_tune_menuv+0x392>
   13be6:	60 91 f4 11 	lds	r22, 0x11F4
   13bea:	70 91 f5 11 	lds	r23, 0x11F5
   13bee:	80 91 f6 11 	lds	r24, 0x11F6
   13bf2:	90 91 f7 11 	lds	r25, 0x11F7
   13bf6:	a7 01       	movw	r20, r14
   13bf8:	96 01       	movw	r18, r12
   13bfa:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13bfe:	22 30       	cpi	r18, 0x02	; 2
   13c00:	31 05       	cpc	r19, r1
   13c02:	41 05       	cpc	r20, r1
   13c04:	51 05       	cpc	r21, r1
   13c06:	09 f0       	breq	.+2      	; 0x13c0a <_ZL13lcd_tune_menuv+0x23c>
   13c08:	ab c0       	rjmp	.+342    	; 0x13d60 <_ZL13lcd_tune_menuv+0x392>
   13c0a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13c0e:	24 e0       	ldi	r18, 0x04	; 4
   13c10:	31 e0       	ldi	r19, 0x01	; 1
   13c12:	40 e0       	ldi	r20, 0x00	; 0
   13c14:	50 e0       	ldi	r21, 0x00	; 0
   13c16:	69 e1       	ldi	r22, 0x19	; 25
   13c18:	71 e1       	ldi	r23, 0x11	; 17
   13c1a:	81 e3       	ldi	r24, 0x31	; 49
   13c1c:	96 e1       	ldi	r25, 0x16	; 22
   13c1e:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13c22:	21 c1       	rjmp	.+578    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13c24:	c3 30       	cpi	r28, 0x03	; 3
   13c26:	09 f0       	breq	.+2      	; 0x13c2a <_ZL13lcd_tune_menuv+0x25c>
   13c28:	4c c0       	rjmp	.+152    	; 0x13cc2 <_ZL13lcd_tune_menuv+0x2f4>
   13c2a:	80 91 64 02 	lds	r24, 0x0264
   13c2e:	88 23       	and	r24, r24
   13c30:	31 f1       	breq	.+76     	; 0x13c7e <_ZL13lcd_tune_menuv+0x2b0>
   13c32:	60 91 f4 11 	lds	r22, 0x11F4
   13c36:	70 91 f5 11 	lds	r23, 0x11F5
   13c3a:	80 91 f6 11 	lds	r24, 0x11F6
   13c3e:	90 91 f7 11 	lds	r25, 0x11F7
   13c42:	a7 01       	movw	r20, r14
   13c44:	96 01       	movw	r18, r12
   13c46:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13c4a:	23 30       	cpi	r18, 0x03	; 3
   13c4c:	31 05       	cpc	r19, r1
   13c4e:	41 05       	cpc	r20, r1
   13c50:	51 05       	cpc	r21, r1
   13c52:	59 f4       	brne	.+22     	; 0x13c6a <_ZL13lcd_tune_menuv+0x29c>
   13c54:	8b e1       	ldi	r24, 0x1B	; 27
   13c56:	91 e1       	ldi	r25, 0x11	; 17
   13c58:	a7 db       	rcall	.-2226   	; 0x133a8 <_Z7itostr3RKi>
   13c5a:	9c 01       	movw	r18, r24
   13c5c:	4e e3       	ldi	r20, 0x3E	; 62
   13c5e:	68 e3       	ldi	r22, 0x38	; 56
   13c60:	76 e1       	ldi	r23, 0x16	; 22
   13c62:	8d 2f       	mov	r24, r29
   13c64:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13c68:	0a c0       	rjmp	.+20     	; 0x13c7e <_ZL13lcd_tune_menuv+0x2b0>
   13c6a:	8b e1       	ldi	r24, 0x1B	; 27
   13c6c:	91 e1       	ldi	r25, 0x11	; 17
   13c6e:	9c db       	rcall	.-2248   	; 0x133a8 <_Z7itostr3RKi>
   13c70:	9c 01       	movw	r18, r24
   13c72:	40 e2       	ldi	r20, 0x20	; 32
   13c74:	68 e3       	ldi	r22, 0x38	; 56
   13c76:	76 e1       	ldi	r23, 0x16	; 22
   13c78:	8d 2f       	mov	r24, r29
   13c7a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13c7e:	11 23       	and	r17, r17
   13c80:	09 f4       	brne	.+2      	; 0x13c84 <_ZL13lcd_tune_menuv+0x2b6>
   13c82:	bb c0       	rjmp	.+374    	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13c84:	60 91 f4 11 	lds	r22, 0x11F4
   13c88:	70 91 f5 11 	lds	r23, 0x11F5
   13c8c:	80 91 f6 11 	lds	r24, 0x11F6
   13c90:	90 91 f7 11 	lds	r25, 0x11F7
   13c94:	a7 01       	movw	r20, r14
   13c96:	96 01       	movw	r18, r12
   13c98:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13c9c:	23 30       	cpi	r18, 0x03	; 3
   13c9e:	31 05       	cpc	r19, r1
   13ca0:	41 05       	cpc	r20, r1
   13ca2:	51 05       	cpc	r21, r1
   13ca4:	09 f0       	breq	.+2      	; 0x13ca8 <_ZL13lcd_tune_menuv+0x2da>
   13ca6:	a9 c0       	rjmp	.+338    	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13ca8:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13cac:	24 e0       	ldi	r18, 0x04	; 4
   13cae:	31 e0       	ldi	r19, 0x01	; 1
   13cb0:	40 e0       	ldi	r20, 0x00	; 0
   13cb2:	50 e0       	ldi	r21, 0x00	; 0
   13cb4:	6b e1       	ldi	r22, 0x1B	; 27
   13cb6:	71 e1       	ldi	r23, 0x11	; 17
   13cb8:	80 e4       	ldi	r24, 0x40	; 64
   13cba:	96 e1       	ldi	r25, 0x16	; 22
   13cbc:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13cc0:	d2 c0       	rjmp	.+420    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13cc2:	c4 30       	cpi	r28, 0x04	; 4
   13cc4:	09 f0       	breq	.+2      	; 0x13cc8 <_ZL13lcd_tune_menuv+0x2fa>
   13cc6:	4c c0       	rjmp	.+152    	; 0x13d60 <_ZL13lcd_tune_menuv+0x392>
   13cc8:	80 91 64 02 	lds	r24, 0x0264
   13ccc:	88 23       	and	r24, r24
   13cce:	31 f1       	breq	.+76     	; 0x13d1c <_ZL13lcd_tune_menuv+0x34e>
   13cd0:	60 91 f4 11 	lds	r22, 0x11F4
   13cd4:	70 91 f5 11 	lds	r23, 0x11F5
   13cd8:	80 91 f6 11 	lds	r24, 0x11F6
   13cdc:	90 91 f7 11 	lds	r25, 0x11F7
   13ce0:	a7 01       	movw	r20, r14
   13ce2:	96 01       	movw	r18, r12
   13ce4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13ce8:	24 30       	cpi	r18, 0x04	; 4
   13cea:	31 05       	cpc	r19, r1
   13cec:	41 05       	cpc	r20, r1
   13cee:	51 05       	cpc	r21, r1
   13cf0:	59 f4       	brne	.+22     	; 0x13d08 <_ZL13lcd_tune_menuv+0x33a>
   13cf2:	81 e6       	ldi	r24, 0x61	; 97
   13cf4:	95 e0       	ldi	r25, 0x05	; 5
   13cf6:	58 db       	rcall	.-2384   	; 0x133a8 <_Z7itostr3RKi>
   13cf8:	9c 01       	movw	r18, r24
   13cfa:	4e e3       	ldi	r20, 0x3E	; 62
   13cfc:	68 e4       	ldi	r22, 0x48	; 72
   13cfe:	76 e1       	ldi	r23, 0x16	; 22
   13d00:	8d 2f       	mov	r24, r29
   13d02:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13d06:	0a c0       	rjmp	.+20     	; 0x13d1c <_ZL13lcd_tune_menuv+0x34e>
   13d08:	81 e6       	ldi	r24, 0x61	; 97
   13d0a:	95 e0       	ldi	r25, 0x05	; 5
   13d0c:	4d db       	rcall	.-2406   	; 0x133a8 <_Z7itostr3RKi>
   13d0e:	9c 01       	movw	r18, r24
   13d10:	40 e2       	ldi	r20, 0x20	; 32
   13d12:	68 e4       	ldi	r22, 0x48	; 72
   13d14:	76 e1       	ldi	r23, 0x16	; 22
   13d16:	8d 2f       	mov	r24, r29
   13d18:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13d1c:	11 23       	and	r17, r17
   13d1e:	09 f4       	brne	.+2      	; 0x13d22 <_ZL13lcd_tune_menuv+0x354>
   13d20:	6c c0       	rjmp	.+216    	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13d22:	60 91 f4 11 	lds	r22, 0x11F4
   13d26:	70 91 f5 11 	lds	r23, 0x11F5
   13d2a:	80 91 f6 11 	lds	r24, 0x11F6
   13d2e:	90 91 f7 11 	lds	r25, 0x11F7
   13d32:	a7 01       	movw	r20, r14
   13d34:	96 01       	movw	r18, r12
   13d36:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13d3a:	24 30       	cpi	r18, 0x04	; 4
   13d3c:	31 05       	cpc	r19, r1
   13d3e:	41 05       	cpc	r20, r1
   13d40:	51 05       	cpc	r21, r1
   13d42:	09 f0       	breq	.+2      	; 0x13d46 <_ZL13lcd_tune_menuv+0x378>
   13d44:	5a c0       	rjmp	.+180    	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13d46:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13d4a:	2f ef       	ldi	r18, 0xFF	; 255
   13d4c:	30 e0       	ldi	r19, 0x00	; 0
   13d4e:	40 e0       	ldi	r20, 0x00	; 0
   13d50:	50 e0       	ldi	r21, 0x00	; 0
   13d52:	61 e6       	ldi	r22, 0x61	; 97
   13d54:	75 e0       	ldi	r23, 0x05	; 5
   13d56:	82 e5       	ldi	r24, 0x52	; 82
   13d58:	96 e1       	ldi	r25, 0x16	; 22
   13d5a:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13d5e:	83 c0       	rjmp	.+262    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13d60:	c5 30       	cpi	r28, 0x05	; 5
   13d62:	09 f0       	breq	.+2      	; 0x13d66 <_ZL13lcd_tune_menuv+0x398>
   13d64:	4a c0       	rjmp	.+148    	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13d66:	80 91 64 02 	lds	r24, 0x0264
   13d6a:	88 23       	and	r24, r24
   13d6c:	31 f1       	breq	.+76     	; 0x13dba <_ZL13lcd_tune_menuv+0x3ec>
   13d6e:	60 91 f4 11 	lds	r22, 0x11F4
   13d72:	70 91 f5 11 	lds	r23, 0x11F5
   13d76:	80 91 f6 11 	lds	r24, 0x11F6
   13d7a:	90 91 f7 11 	lds	r25, 0x11F7
   13d7e:	a7 01       	movw	r20, r14
   13d80:	96 01       	movw	r18, r12
   13d82:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13d86:	25 30       	cpi	r18, 0x05	; 5
   13d88:	31 05       	cpc	r19, r1
   13d8a:	41 05       	cpc	r20, r1
   13d8c:	51 05       	cpc	r21, r1
   13d8e:	59 f4       	brne	.+22     	; 0x13da6 <_ZL13lcd_tune_menuv+0x3d8>
   13d90:	8d e1       	ldi	r24, 0x1D	; 29
   13d92:	92 e0       	ldi	r25, 0x02	; 2
   13d94:	09 db       	rcall	.-2542   	; 0x133a8 <_Z7itostr3RKi>
   13d96:	9c 01       	movw	r18, r24
   13d98:	4e e3       	ldi	r20, 0x3E	; 62
   13d9a:	6c e5       	ldi	r22, 0x5C	; 92
   13d9c:	76 e1       	ldi	r23, 0x16	; 22
   13d9e:	8d 2f       	mov	r24, r29
   13da0:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13da4:	0a c0       	rjmp	.+20     	; 0x13dba <_ZL13lcd_tune_menuv+0x3ec>
   13da6:	8d e1       	ldi	r24, 0x1D	; 29
   13da8:	92 e0       	ldi	r25, 0x02	; 2
   13daa:	fe da       	rcall	.-2564   	; 0x133a8 <_Z7itostr3RKi>
   13dac:	9c 01       	movw	r18, r24
   13dae:	40 e2       	ldi	r20, 0x20	; 32
   13db0:	6c e5       	ldi	r22, 0x5C	; 92
   13db2:	76 e1       	ldi	r23, 0x16	; 22
   13db4:	8d 2f       	mov	r24, r29
   13db6:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   13dba:	11 23       	and	r17, r17
   13dbc:	f1 f0       	breq	.+60     	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13dbe:	60 91 f4 11 	lds	r22, 0x11F4
   13dc2:	70 91 f5 11 	lds	r23, 0x11F5
   13dc6:	80 91 f6 11 	lds	r24, 0x11F6
   13dca:	90 91 f7 11 	lds	r25, 0x11F7
   13dce:	a7 01       	movw	r20, r14
   13dd0:	96 01       	movw	r18, r12
   13dd2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13dd6:	25 30       	cpi	r18, 0x05	; 5
   13dd8:	31 05       	cpc	r19, r1
   13dda:	41 05       	cpc	r20, r1
   13ddc:	51 05       	cpc	r21, r1
   13dde:	69 f4       	brne	.+26     	; 0x13dfa <_ZL13lcd_tune_menuv+0x42c>
   13de0:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13de4:	27 ee       	ldi	r18, 0xE7	; 231
   13de6:	33 e0       	ldi	r19, 0x03	; 3
   13de8:	4a e0       	ldi	r20, 0x0A	; 10
   13dea:	50 e0       	ldi	r21, 0x00	; 0
   13dec:	6d e1       	ldi	r22, 0x1D	; 29
   13dee:	72 e0       	ldi	r23, 0x02	; 2
   13df0:	81 e6       	ldi	r24, 0x61	; 97
   13df2:	96 e1       	ldi	r25, 0x16	; 22
   13df4:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   13df8:	36 c0       	rjmp	.+108    	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13dfa:	80 91 f4 11 	lds	r24, 0x11F4
   13dfe:	90 91 f5 11 	lds	r25, 0x11F5
   13e02:	a0 91 f6 11 	lds	r26, 0x11F6
   13e06:	b0 91 f7 11 	lds	r27, 0x11F7
   13e0a:	4e 97       	sbiw	r24, 0x1e	; 30
   13e0c:	a1 05       	cpc	r26, r1
   13e0e:	b1 05       	cpc	r27, r1
   13e10:	40 f0       	brcs	.+16     	; 0x13e22 <_ZL13lcd_tune_menuv+0x454>
   13e12:	80 92 f4 11 	sts	0x11F4, r8
   13e16:	90 92 f5 11 	sts	0x11F5, r9
   13e1a:	a0 92 f6 11 	sts	0x11F6, r10
   13e1e:	b0 92 f7 11 	sts	0x11F7, r11
   13e22:	60 91 f4 11 	lds	r22, 0x11F4
   13e26:	70 91 f5 11 	lds	r23, 0x11F5
   13e2a:	80 91 f6 11 	lds	r24, 0x11F6
   13e2e:	90 91 f7 11 	lds	r25, 0x11F7
   13e32:	a7 01       	movw	r20, r14
   13e34:	96 01       	movw	r18, r12
   13e36:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   13e3a:	42 2f       	mov	r20, r18
   13e3c:	50 e0       	ldi	r21, 0x00	; 0
   13e3e:	80 91 fd 11 	lds	r24, 0x11FD
   13e42:	90 e0       	ldi	r25, 0x00	; 0
   13e44:	04 96       	adiw	r24, 0x04	; 4
   13e46:	48 17       	cp	r20, r24
   13e48:	59 07       	cpc	r21, r25
   13e4a:	44 f0       	brlt	.+16     	; 0x13e5c <_ZL13lcd_tune_menuv+0x48e>
   13e4c:	c2 2f       	mov	r28, r18
   13e4e:	c3 50       	subi	r28, 0x03	; 3
   13e50:	c0 93 fd 11 	sts	0x11FD, r28
   13e54:	70 92 64 02 	sts	0x0264, r7
   13e58:	d0 2f       	mov	r29, r16
   13e5a:	0e ce       	rjmp	.-996    	; 0x13a78 <_ZL13lcd_tune_menuv+0xaa>
   13e5c:	df 5f       	subi	r29, 0xFF	; 255
   13e5e:	cf 5f       	subi	r28, 0xFF	; 255
   13e60:	d4 30       	cpi	r29, 0x04	; 4
   13e62:	08 f4       	brcc	.+2      	; 0x13e66 <_ZL13lcd_tune_menuv+0x498>
   13e64:	09 ce       	rjmp	.-1006   	; 0x13a78 <_ZL13lcd_tune_menuv+0xaa>
   13e66:	df 91       	pop	r29
   13e68:	cf 91       	pop	r28
   13e6a:	1f 91       	pop	r17
   13e6c:	0f 91       	pop	r16
   13e6e:	ff 90       	pop	r15
   13e70:	ef 90       	pop	r14
   13e72:	df 90       	pop	r13
   13e74:	cf 90       	pop	r12
   13e76:	bf 90       	pop	r11
   13e78:	af 90       	pop	r10
   13e7a:	9f 90       	pop	r9
   13e7c:	8f 90       	pop	r8
   13e7e:	7f 90       	pop	r7
   13e80:	08 95       	ret

00013e82 <_Z7ftostr3RKf>:
   13e82:	cf 93       	push	r28
   13e84:	df 93       	push	r29
   13e86:	1f 92       	push	r1
   13e88:	1f 92       	push	r1
   13e8a:	cd b7       	in	r28, 0x3d	; 61
   13e8c:	de b7       	in	r29, 0x3e	; 62
   13e8e:	fc 01       	movw	r30, r24
   13e90:	60 81       	ld	r22, Z
   13e92:	71 81       	ldd	r23, Z+1	; 0x01
   13e94:	82 81       	ldd	r24, Z+2	; 0x02
   13e96:	93 81       	ldd	r25, Z+3	; 0x03
   13e98:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   13e9c:	7a 83       	std	Y+2, r23	; 0x02
   13e9e:	69 83       	std	Y+1, r22	; 0x01
   13ea0:	ce 01       	movw	r24, r28
   13ea2:	01 96       	adiw	r24, 0x01	; 1
   13ea4:	81 da       	rcall	.-2814   	; 0x133a8 <_Z7itostr3RKi>
   13ea6:	0f 90       	pop	r0
   13ea8:	0f 90       	pop	r0
   13eaa:	df 91       	pop	r29
   13eac:	cf 91       	pop	r28
   13eae:	08 95       	ret

00013eb0 <_Z16menu_edit_float3v>:
   13eb0:	0f 93       	push	r16
   13eb2:	1f 93       	push	r17
   13eb4:	cf 93       	push	r28
   13eb6:	df 93       	push	r29
   13eb8:	00 d0       	rcall	.+0      	; 0x13eba <_Z16menu_edit_float3v+0xa>
   13eba:	1f 92       	push	r1
   13ebc:	cd b7       	in	r28, 0x3d	; 61
   13ebe:	de b7       	in	r29, 0x3e	; 62
   13ec0:	80 91 e2 11 	lds	r24, 0x11E2
   13ec4:	90 91 e3 11 	lds	r25, 0x11E3
   13ec8:	a0 91 e4 11 	lds	r26, 0x11E4
   13ecc:	b0 91 e5 11 	lds	r27, 0x11E5
   13ed0:	40 91 f4 11 	lds	r20, 0x11F4
   13ed4:	50 91 f5 11 	lds	r21, 0x11F5
   13ed8:	60 91 f6 11 	lds	r22, 0x11F6
   13edc:	70 91 f7 11 	lds	r23, 0x11F7
   13ee0:	48 17       	cp	r20, r24
   13ee2:	59 07       	cpc	r21, r25
   13ee4:	6a 07       	cpc	r22, r26
   13ee6:	7b 07       	cpc	r23, r27
   13ee8:	44 f4       	brge	.+16     	; 0x13efa <_Z16menu_edit_float3v+0x4a>
   13eea:	80 93 f4 11 	sts	0x11F4, r24
   13eee:	90 93 f5 11 	sts	0x11F5, r25
   13ef2:	a0 93 f6 11 	sts	0x11F6, r26
   13ef6:	b0 93 f7 11 	sts	0x11F7, r27
   13efa:	80 91 de 11 	lds	r24, 0x11DE
   13efe:	90 91 df 11 	lds	r25, 0x11DF
   13f02:	a0 91 e0 11 	lds	r26, 0x11E0
   13f06:	b0 91 e1 11 	lds	r27, 0x11E1
   13f0a:	40 91 f4 11 	lds	r20, 0x11F4
   13f0e:	50 91 f5 11 	lds	r21, 0x11F5
   13f12:	60 91 f6 11 	lds	r22, 0x11F6
   13f16:	70 91 f7 11 	lds	r23, 0x11F7
   13f1a:	84 17       	cp	r24, r20
   13f1c:	95 07       	cpc	r25, r21
   13f1e:	a6 07       	cpc	r26, r22
   13f20:	b7 07       	cpc	r27, r23
   13f22:	44 f4       	brge	.+16     	; 0x13f34 <_Z16menu_edit_float3v+0x84>
   13f24:	80 93 f4 11 	sts	0x11F4, r24
   13f28:	90 93 f5 11 	sts	0x11F5, r25
   13f2c:	a0 93 f6 11 	sts	0x11F6, r26
   13f30:	b0 93 f7 11 	sts	0x11F7, r27
   13f34:	80 91 64 02 	lds	r24, 0x0264
   13f38:	88 23       	and	r24, r24
   13f3a:	c1 f0       	breq	.+48     	; 0x13f6c <_Z16menu_edit_float3v+0xbc>
   13f3c:	60 91 f4 11 	lds	r22, 0x11F4
   13f40:	70 91 f5 11 	lds	r23, 0x11F5
   13f44:	80 91 f6 11 	lds	r24, 0x11F6
   13f48:	90 91 f7 11 	lds	r25, 0x11F7
   13f4c:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   13f50:	69 83       	std	Y+1, r22	; 0x01
   13f52:	7a 83       	std	Y+2, r23	; 0x02
   13f54:	8b 83       	std	Y+3, r24	; 0x03
   13f56:	9c 83       	std	Y+4, r25	; 0x04
   13f58:	ce 01       	movw	r24, r28
   13f5a:	01 96       	adiw	r24, 0x01	; 1
   13f5c:	92 df       	rcall	.-220    	; 0x13e82 <_Z7ftostr3RKf>
   13f5e:	bc 01       	movw	r22, r24
   13f60:	80 91 e8 11 	lds	r24, 0x11E8
   13f64:	90 91 e9 11 	lds	r25, 0x11E9
   13f68:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   13f6c:	80 91 fe 11 	lds	r24, 0x11FE
   13f70:	82 ff       	sbrs	r24, 2
   13f72:	2b c0       	rjmp	.+86     	; 0x13fca <_Z16menu_edit_float3v+0x11a>
   13f74:	00 91 e6 11 	lds	r16, 0x11E6
   13f78:	10 91 e7 11 	lds	r17, 0x11E7
   13f7c:	60 91 f4 11 	lds	r22, 0x11F4
   13f80:	70 91 f5 11 	lds	r23, 0x11F5
   13f84:	80 91 f6 11 	lds	r24, 0x11F6
   13f88:	90 91 f7 11 	lds	r25, 0x11F7
   13f8c:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   13f90:	f8 01       	movw	r30, r16
   13f92:	60 83       	st	Z, r22
   13f94:	71 83       	std	Z+1, r23	; 0x01
   13f96:	82 83       	std	Z+2, r24	; 0x02
   13f98:	93 83       	std	Z+3, r25	; 0x03
   13f9a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   13f9e:	80 91 ec 11 	lds	r24, 0x11EC
   13fa2:	90 91 ed 11 	lds	r25, 0x11ED
   13fa6:	90 93 66 02 	sts	0x0266, r25
   13faa:	80 93 65 02 	sts	0x0265, r24
   13fae:	80 91 ea 11 	lds	r24, 0x11EA
   13fb2:	90 91 eb 11 	lds	r25, 0x11EB
   13fb6:	a0 e0       	ldi	r26, 0x00	; 0
   13fb8:	b0 e0       	ldi	r27, 0x00	; 0
   13fba:	80 93 f4 11 	sts	0x11F4, r24
   13fbe:	90 93 f5 11 	sts	0x11F5, r25
   13fc2:	a0 93 f6 11 	sts	0x11F6, r26
   13fc6:	b0 93 f7 11 	sts	0x11F7, r27
   13fca:	0f 90       	pop	r0
   13fcc:	0f 90       	pop	r0
   13fce:	0f 90       	pop	r0
   13fd0:	0f 90       	pop	r0
   13fd2:	df 91       	pop	r29
   13fd4:	cf 91       	pop	r28
   13fd6:	1f 91       	pop	r17
   13fd8:	0f 91       	pop	r16
   13fda:	08 95       	ret

00013fdc <_Z14menu_edit_int3v>:
   13fdc:	cf 93       	push	r28
   13fde:	df 93       	push	r29
   13fe0:	1f 92       	push	r1
   13fe2:	1f 92       	push	r1
   13fe4:	cd b7       	in	r28, 0x3d	; 61
   13fe6:	de b7       	in	r29, 0x3e	; 62
   13fe8:	80 91 e2 11 	lds	r24, 0x11E2
   13fec:	90 91 e3 11 	lds	r25, 0x11E3
   13ff0:	a0 91 e4 11 	lds	r26, 0x11E4
   13ff4:	b0 91 e5 11 	lds	r27, 0x11E5
   13ff8:	40 91 f4 11 	lds	r20, 0x11F4
   13ffc:	50 91 f5 11 	lds	r21, 0x11F5
   14000:	60 91 f6 11 	lds	r22, 0x11F6
   14004:	70 91 f7 11 	lds	r23, 0x11F7
   14008:	48 17       	cp	r20, r24
   1400a:	59 07       	cpc	r21, r25
   1400c:	6a 07       	cpc	r22, r26
   1400e:	7b 07       	cpc	r23, r27
   14010:	44 f4       	brge	.+16     	; 0x14022 <_Z14menu_edit_int3v+0x46>
   14012:	80 93 f4 11 	sts	0x11F4, r24
   14016:	90 93 f5 11 	sts	0x11F5, r25
   1401a:	a0 93 f6 11 	sts	0x11F6, r26
   1401e:	b0 93 f7 11 	sts	0x11F7, r27
   14022:	80 91 de 11 	lds	r24, 0x11DE
   14026:	90 91 df 11 	lds	r25, 0x11DF
   1402a:	a0 91 e0 11 	lds	r26, 0x11E0
   1402e:	b0 91 e1 11 	lds	r27, 0x11E1
   14032:	40 91 f4 11 	lds	r20, 0x11F4
   14036:	50 91 f5 11 	lds	r21, 0x11F5
   1403a:	60 91 f6 11 	lds	r22, 0x11F6
   1403e:	70 91 f7 11 	lds	r23, 0x11F7
   14042:	84 17       	cp	r24, r20
   14044:	95 07       	cpc	r25, r21
   14046:	a6 07       	cpc	r26, r22
   14048:	b7 07       	cpc	r27, r23
   1404a:	44 f4       	brge	.+16     	; 0x1405c <_Z14menu_edit_int3v+0x80>
   1404c:	80 93 f4 11 	sts	0x11F4, r24
   14050:	90 93 f5 11 	sts	0x11F5, r25
   14054:	a0 93 f6 11 	sts	0x11F6, r26
   14058:	b0 93 f7 11 	sts	0x11F7, r27
   1405c:	80 91 64 02 	lds	r24, 0x0264
   14060:	88 23       	and	r24, r24
   14062:	81 f0       	breq	.+32     	; 0x14084 <_Z14menu_edit_int3v+0xa8>
   14064:	80 91 f4 11 	lds	r24, 0x11F4
   14068:	90 91 f5 11 	lds	r25, 0x11F5
   1406c:	9a 83       	std	Y+2, r25	; 0x02
   1406e:	89 83       	std	Y+1, r24	; 0x01
   14070:	ce 01       	movw	r24, r28
   14072:	01 96       	adiw	r24, 0x01	; 1
   14074:	99 d9       	rcall	.-3278   	; 0x133a8 <_Z7itostr3RKi>
   14076:	bc 01       	movw	r22, r24
   14078:	80 91 e8 11 	lds	r24, 0x11E8
   1407c:	90 91 e9 11 	lds	r25, 0x11E9
   14080:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   14084:	80 91 fe 11 	lds	r24, 0x11FE
   14088:	82 ff       	sbrs	r24, 2
   1408a:	22 c0       	rjmp	.+68     	; 0x140d0 <_Z14menu_edit_int3v+0xf4>
   1408c:	e0 91 e6 11 	lds	r30, 0x11E6
   14090:	f0 91 e7 11 	lds	r31, 0x11E7
   14094:	80 91 f4 11 	lds	r24, 0x11F4
   14098:	90 91 f5 11 	lds	r25, 0x11F5
   1409c:	91 83       	std	Z+1, r25	; 0x01
   1409e:	80 83       	st	Z, r24
   140a0:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   140a4:	80 91 ec 11 	lds	r24, 0x11EC
   140a8:	90 91 ed 11 	lds	r25, 0x11ED
   140ac:	90 93 66 02 	sts	0x0266, r25
   140b0:	80 93 65 02 	sts	0x0265, r24
   140b4:	80 91 ea 11 	lds	r24, 0x11EA
   140b8:	90 91 eb 11 	lds	r25, 0x11EB
   140bc:	a0 e0       	ldi	r26, 0x00	; 0
   140be:	b0 e0       	ldi	r27, 0x00	; 0
   140c0:	80 93 f4 11 	sts	0x11F4, r24
   140c4:	90 93 f5 11 	sts	0x11F5, r25
   140c8:	a0 93 f6 11 	sts	0x11F6, r26
   140cc:	b0 93 f7 11 	sts	0x11F7, r27
   140d0:	0f 90       	pop	r0
   140d2:	0f 90       	pop	r0
   140d4:	df 91       	pop	r29
   140d6:	cf 91       	pop	r28
   140d8:	08 95       	ret

000140da <_Z11itostr3leftRKi>:
   140da:	cf 93       	push	r28
   140dc:	df 93       	push	r29
   140de:	fc 01       	movw	r30, r24
   140e0:	80 81       	ld	r24, Z
   140e2:	91 81       	ldd	r25, Z+1	; 0x01
   140e4:	84 36       	cpi	r24, 0x64	; 100
   140e6:	91 05       	cpc	r25, r1
   140e8:	24 f1       	brlt	.+72     	; 0x14132 <_Z11itostr3leftRKi+0x58>
   140ea:	64 e6       	ldi	r22, 0x64	; 100
   140ec:	70 e0       	ldi	r23, 0x00	; 0
   140ee:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   140f2:	cb 01       	movw	r24, r22
   140f4:	2a e0       	ldi	r18, 0x0A	; 10
   140f6:	30 e0       	ldi	r19, 0x00	; 0
   140f8:	b9 01       	movw	r22, r18
   140fa:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   140fe:	80 5d       	subi	r24, 0xD0	; 208
   14100:	80 93 c8 11 	sts	0x11C8, r24
   14104:	80 81       	ld	r24, Z
   14106:	91 81       	ldd	r25, Z+1	; 0x01
   14108:	b9 01       	movw	r22, r18
   1410a:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   1410e:	cb 01       	movw	r24, r22
   14110:	b9 01       	movw	r22, r18
   14112:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   14116:	80 5d       	subi	r24, 0xD0	; 208
   14118:	80 93 c9 11 	sts	0x11C9, r24
   1411c:	80 81       	ld	r24, Z
   1411e:	91 81       	ldd	r25, Z+1	; 0x01
   14120:	b9 01       	movw	r22, r18
   14122:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   14126:	80 5d       	subi	r24, 0xD0	; 208
   14128:	80 93 ca 11 	sts	0x11CA, r24
   1412c:	10 92 cb 11 	sts	0x11CB, r1
   14130:	23 c0       	rjmp	.+70     	; 0x14178 <_Z11itostr3leftRKi+0x9e>
   14132:	8a 30       	cpi	r24, 0x0A	; 10
   14134:	91 05       	cpc	r25, r1
   14136:	bc f0       	brlt	.+46     	; 0x14166 <_Z11itostr3leftRKi+0x8c>
   14138:	ca e0       	ldi	r28, 0x0A	; 10
   1413a:	d0 e0       	ldi	r29, 0x00	; 0
   1413c:	be 01       	movw	r22, r28
   1413e:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   14142:	cb 01       	movw	r24, r22
   14144:	be 01       	movw	r22, r28
   14146:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   1414a:	80 5d       	subi	r24, 0xD0	; 208
   1414c:	80 93 c8 11 	sts	0x11C8, r24
   14150:	80 81       	ld	r24, Z
   14152:	91 81       	ldd	r25, Z+1	; 0x01
   14154:	be 01       	movw	r22, r28
   14156:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   1415a:	80 5d       	subi	r24, 0xD0	; 208
   1415c:	80 93 c9 11 	sts	0x11C9, r24
   14160:	10 92 ca 11 	sts	0x11CA, r1
   14164:	09 c0       	rjmp	.+18     	; 0x14178 <_Z11itostr3leftRKi+0x9e>
   14166:	6a e0       	ldi	r22, 0x0A	; 10
   14168:	70 e0       	ldi	r23, 0x00	; 0
   1416a:	0e 94 9c c0 	call	0x18138	; 0x18138 <__divmodhi4>
   1416e:	80 5d       	subi	r24, 0xD0	; 208
   14170:	80 93 c8 11 	sts	0x11C8, r24
   14174:	10 92 c9 11 	sts	0x11C9, r1
   14178:	88 ec       	ldi	r24, 0xC8	; 200
   1417a:	91 e1       	ldi	r25, 0x11	; 17
   1417c:	df 91       	pop	r29
   1417e:	cf 91       	pop	r28
   14180:	08 95       	ret

00014182 <_ZL17lcd_status_screenv>:
   14182:	8f 92       	push	r8
   14184:	9f 92       	push	r9
   14186:	af 92       	push	r10
   14188:	bf 92       	push	r11
   1418a:	cf 92       	push	r12
   1418c:	df 92       	push	r13
   1418e:	ef 92       	push	r14
   14190:	ff 92       	push	r15
   14192:	cf 93       	push	r28
   14194:	df 93       	push	r29
   14196:	cd b7       	in	r28, 0x3d	; 61
   14198:	de b7       	in	r29, 0x3e	; 62
   1419a:	28 97       	sbiw	r28, 0x08	; 8
   1419c:	0f b6       	in	r0, 0x3f	; 63
   1419e:	f8 94       	cli
   141a0:	de bf       	out	0x3e, r29	; 62
   141a2:	0f be       	out	0x3f, r0	; 63
   141a4:	cd bf       	out	0x3d, r28	; 61
   141a6:	80 91 ee 11 	lds	r24, 0x11EE
   141aa:	88 23       	and	r24, r24
   141ac:	49 f0       	breq	.+18     	; 0x141c0 <_ZL17lcd_status_screenv+0x3e>
   141ae:	81 50       	subi	r24, 0x01	; 1
   141b0:	80 93 ee 11 	sts	0x11EE, r24
   141b4:	80 91 64 02 	lds	r24, 0x0264
   141b8:	88 23       	and	r24, r24
   141ba:	09 f4       	brne	.+2      	; 0x141be <_ZL17lcd_status_screenv+0x3c>
   141bc:	69 c1       	rjmp	.+722    	; 0x14490 <_ZL17lcd_status_screenv+0x30e>
   141be:	03 c0       	rjmp	.+6      	; 0x141c6 <_ZL17lcd_status_screenv+0x44>
   141c0:	81 e0       	ldi	r24, 0x01	; 1
   141c2:	80 93 64 02 	sts	0x0264, r24
   141c6:	20 e0       	ldi	r18, 0x00	; 0
   141c8:	30 e0       	ldi	r19, 0x00	; 0
   141ca:	40 e0       	ldi	r20, 0x00	; 0
   141cc:	5f e3       	ldi	r21, 0x3F	; 63
   141ce:	60 91 11 11 	lds	r22, 0x1111
   141d2:	70 91 12 11 	lds	r23, 0x1112
   141d6:	80 91 13 11 	lds	r24, 0x1113
   141da:	90 91 14 11 	lds	r25, 0x1114
   141de:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   141e2:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   141e6:	78 87       	std	Y+8, r23	; 0x08
   141e8:	6f 83       	std	Y+7, r22	; 0x07
   141ea:	60 91 19 11 	lds	r22, 0x1119
   141ee:	70 91 1a 11 	lds	r23, 0x111A
   141f2:	88 27       	eor	r24, r24
   141f4:	77 fd       	sbrc	r23, 7
   141f6:	80 95       	com	r24
   141f8:	98 2f       	mov	r25, r24
   141fa:	0e 94 c2 b6 	call	0x16d84	; 0x16d84 <__floatsisf>
   141fe:	20 e0       	ldi	r18, 0x00	; 0
   14200:	30 e0       	ldi	r19, 0x00	; 0
   14202:	40 e0       	ldi	r20, 0x00	; 0
   14204:	5f e3       	ldi	r21, 0x3F	; 63
   14206:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__addsf3>
   1420a:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   1420e:	7e 83       	std	Y+6, r23	; 0x06
   14210:	6d 83       	std	Y+5, r22	; 0x05
   14212:	40 e0       	ldi	r20, 0x00	; 0
   14214:	60 e0       	ldi	r22, 0x00	; 0
   14216:	8f ef       	ldi	r24, 0xFF	; 255
   14218:	91 e1       	ldi	r25, 0x11	; 17
   1421a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1421e:	62 e0       	ldi	r22, 0x02	; 2
   14220:	8f ef       	ldi	r24, 0xFF	; 255
   14222:	91 e1       	ldi	r25, 0x11	; 17
   14224:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   14228:	ce 01       	movw	r24, r28
   1422a:	07 96       	adiw	r24, 0x07	; 7
   1422c:	bd d8       	rcall	.-3718   	; 0x133a8 <_Z7itostr3RKi>
   1422e:	bc 01       	movw	r22, r24
   14230:	8f ef       	ldi	r24, 0xFF	; 255
   14232:	91 e1       	ldi	r25, 0x11	; 17
   14234:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   14238:	6f e2       	ldi	r22, 0x2F	; 47
   1423a:	8f ef       	ldi	r24, 0xFF	; 255
   1423c:	91 e1       	ldi	r25, 0x11	; 17
   1423e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   14242:	ce 01       	movw	r24, r28
   14244:	05 96       	adiw	r24, 0x05	; 5
   14246:	49 df       	rcall	.-366    	; 0x140da <_Z11itostr3leftRKi>
   14248:	bc 01       	movw	r22, r24
   1424a:	8f ef       	ldi	r24, 0xFF	; 255
   1424c:	91 e1       	ldi	r25, 0x11	; 17
   1424e:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   14252:	86 e6       	ldi	r24, 0x66	; 102
   14254:	96 e1       	ldi	r25, 0x16	; 22
   14256:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   1425a:	8d 81       	ldd	r24, Y+5	; 0x05
   1425c:	9e 81       	ldd	r25, Y+6	; 0x06
   1425e:	0a 97       	sbiw	r24, 0x0a	; 10
   14260:	2c f4       	brge	.+10     	; 0x1426c <_ZL17lcd_status_screenv+0xea>
   14262:	60 e2       	ldi	r22, 0x20	; 32
   14264:	8f ef       	ldi	r24, 0xFF	; 255
   14266:	91 e1       	ldi	r25, 0x11	; 17
   14268:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   1426c:	41 e0       	ldi	r20, 0x01	; 1
   1426e:	60 e0       	ldi	r22, 0x00	; 0
   14270:	8f ef       	ldi	r24, 0xFF	; 255
   14272:	91 e1       	ldi	r25, 0x11	; 17
   14274:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   14278:	68 e5       	ldi	r22, 0x58	; 88
   1427a:	8f ef       	ldi	r24, 0xFF	; 255
   1427c:	91 e1       	ldi	r25, 0x11	; 17
   1427e:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   14282:	8c e7       	ldi	r24, 0x7C	; 124
   14284:	95 e0       	ldi	r25, 0x05	; 5
   14286:	fd dd       	rcall	.-1030   	; 0x13e82 <_Z7ftostr3RKf>
   14288:	bc 01       	movw	r22, r24
   1428a:	8f ef       	ldi	r24, 0xFF	; 255
   1428c:	91 e1       	ldi	r25, 0x11	; 17
   1428e:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   14292:	89 e6       	ldi	r24, 0x69	; 105
   14294:	96 e1       	ldi	r25, 0x16	; 22
   14296:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   1429a:	80 e8       	ldi	r24, 0x80	; 128
   1429c:	95 e0       	ldi	r25, 0x05	; 5
   1429e:	f1 dd       	rcall	.-1054   	; 0x13e82 <_Z7ftostr3RKf>
   142a0:	bc 01       	movw	r22, r24
   142a2:	8f ef       	ldi	r24, 0xFF	; 255
   142a4:	91 e1       	ldi	r25, 0x11	; 17
   142a6:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   142aa:	41 e0       	ldi	r20, 0x01	; 1
   142ac:	6c e0       	ldi	r22, 0x0C	; 12
   142ae:	8f ef       	ldi	r24, 0xFF	; 255
   142b0:	91 e1       	ldi	r25, 0x11	; 17
   142b2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   142b6:	6a e5       	ldi	r22, 0x5A	; 90
   142b8:	8f ef       	ldi	r24, 0xFF	; 255
   142ba:	91 e1       	ldi	r25, 0x11	; 17
   142bc:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   142c0:	84 e8       	ldi	r24, 0x84	; 132
   142c2:	95 e0       	ldi	r25, 0x05	; 5
   142c4:	0e 94 a8 98 	call	0x13150	; 0x13150 <_Z8ftostr32RKf>
   142c8:	bc 01       	movw	r22, r24
   142ca:	8f ef       	ldi	r24, 0xFF	; 255
   142cc:	91 e1       	ldi	r25, 0x11	; 17
   142ce:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   142d2:	42 e0       	ldi	r20, 0x02	; 2
   142d4:	60 e0       	ldi	r22, 0x00	; 0
   142d6:	8f ef       	ldi	r24, 0xFF	; 255
   142d8:	91 e1       	ldi	r25, 0x11	; 17
   142da:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   142de:	66 e0       	ldi	r22, 0x06	; 6
   142e0:	8f ef       	ldi	r24, 0xFF	; 255
   142e2:	91 e1       	ldi	r25, 0x11	; 17
   142e4:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   142e8:	8f e1       	ldi	r24, 0x1F	; 31
   142ea:	92 e0       	ldi	r25, 0x02	; 2
   142ec:	5d d8       	rcall	.-3910   	; 0x133a8 <_Z7itostr3RKi>
   142ee:	bc 01       	movw	r22, r24
   142f0:	8f ef       	ldi	r24, 0xFF	; 255
   142f2:	91 e1       	ldi	r25, 0x11	; 17
   142f4:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   142f8:	65 e2       	ldi	r22, 0x25	; 37
   142fa:	8f ef       	ldi	r24, 0xFF	; 255
   142fc:	91 e1       	ldi	r25, 0x11	; 17
   142fe:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   14302:	42 e0       	ldi	r20, 0x02	; 2
   14304:	67 e0       	ldi	r22, 0x07	; 7
   14306:	8f ef       	ldi	r24, 0xFF	; 255
   14308:	91 e1       	ldi	r25, 0x11	; 17
   1430a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1430e:	8c e6       	ldi	r24, 0x6C	; 108
   14310:	96 e1       	ldi	r25, 0x16	; 22
   14312:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   14316:	80 91 94 05 	lds	r24, 0x0594
   1431a:	88 23       	and	r24, r24
   1431c:	a9 f1       	breq	.+106    	; 0x14388 <_ZL17lcd_status_screenv+0x206>
   1431e:	80 91 63 07 	lds	r24, 0x0763
   14322:	88 23       	and	r24, r24
   14324:	19 f1       	breq	.+70     	; 0x1436c <_ZL17lcd_status_screenv+0x1ea>
   14326:	80 91 7b 07 	lds	r24, 0x077B
   1432a:	90 91 7c 07 	lds	r25, 0x077C
   1432e:	a0 91 7d 07 	lds	r26, 0x077D
   14332:	b0 91 7e 07 	lds	r27, 0x077E
   14336:	00 97       	sbiw	r24, 0x00	; 0
   14338:	a1 05       	cpc	r26, r1
   1433a:	b1 05       	cpc	r27, r1
   1433c:	c9 f0       	breq	.+50     	; 0x14370 <_ZL17lcd_status_screenv+0x1ee>
   1433e:	bc 01       	movw	r22, r24
   14340:	cd 01       	movw	r24, r26
   14342:	6d 59       	subi	r22, 0x9D	; 157
   14344:	7f 4f       	sbci	r23, 0xFF	; 255
   14346:	8f 4f       	sbci	r24, 0xFF	; 255
   14348:	9f 4f       	sbci	r25, 0xFF	; 255
   1434a:	24 e6       	ldi	r18, 0x64	; 100
   1434c:	30 e0       	ldi	r19, 0x00	; 0
   1434e:	40 e0       	ldi	r20, 0x00	; 0
   14350:	50 e0       	ldi	r21, 0x00	; 0
   14352:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14356:	60 91 83 07 	lds	r22, 0x0783
   1435a:	70 91 84 07 	lds	r23, 0x0784
   1435e:	80 91 85 07 	lds	r24, 0x0785
   14362:	90 91 86 07 	lds	r25, 0x0786
   14366:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1436a:	03 c0       	rjmp	.+6      	; 0x14372 <_ZL17lcd_status_screenv+0x1f0>
   1436c:	20 e0       	ldi	r18, 0x00	; 0
   1436e:	01 c0       	rjmp	.+2      	; 0x14372 <_ZL17lcd_status_screenv+0x1f0>
   14370:	20 e0       	ldi	r18, 0x00	; 0
   14372:	29 83       	std	Y+1, r18	; 0x01
   14374:	1a 82       	std	Y+2, r1	; 0x02
   14376:	ce 01       	movw	r24, r28
   14378:	01 96       	adiw	r24, 0x01	; 1
   1437a:	16 d8       	rcall	.-4052   	; 0x133a8 <_Z7itostr3RKi>
   1437c:	bc 01       	movw	r22, r24
   1437e:	8f ef       	ldi	r24, 0xFF	; 255
   14380:	91 e1       	ldi	r25, 0x11	; 17
   14382:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   14386:	04 c0       	rjmp	.+8      	; 0x14390 <_ZL17lcd_status_screenv+0x20e>
   14388:	8f e6       	ldi	r24, 0x6F	; 111
   1438a:	96 e1       	ldi	r25, 0x16	; 22
   1438c:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   14390:	65 e2       	ldi	r22, 0x25	; 37
   14392:	8f ef       	ldi	r24, 0xFF	; 255
   14394:	91 e1       	ldi	r25, 0x11	; 17
   14396:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   1439a:	42 e0       	ldi	r20, 0x02	; 2
   1439c:	6e e0       	ldi	r22, 0x0E	; 14
   1439e:	8f ef       	ldi	r24, 0xFF	; 255
   143a0:	91 e1       	ldi	r25, 0x11	; 17
   143a2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   143a6:	67 e0       	ldi	r22, 0x07	; 7
   143a8:	8f ef       	ldi	r24, 0xFF	; 255
   143aa:	91 e1       	ldi	r25, 0x11	; 17
   143ac:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   143b0:	80 91 5d 05 	lds	r24, 0x055D
   143b4:	90 91 5e 05 	lds	r25, 0x055E
   143b8:	a0 91 5f 05 	lds	r26, 0x055F
   143bc:	b0 91 60 05 	lds	r27, 0x0560
   143c0:	89 2b       	or	r24, r25
   143c2:	8a 2b       	or	r24, r26
   143c4:	8b 2b       	or	r24, r27
   143c6:	09 f4       	brne	.+2      	; 0x143ca <_ZL17lcd_status_screenv+0x248>
   143c8:	50 c0       	rjmp	.+160    	; 0x1446a <_ZL17lcd_status_screenv+0x2e8>
   143ca:	0e 94 03 ba 	call	0x17406	; 0x17406 <millis>
   143ce:	0f 2e       	mov	r0, r31
   143d0:	f0 e6       	ldi	r31, 0x60	; 96
   143d2:	cf 2e       	mov	r12, r31
   143d4:	fa ee       	ldi	r31, 0xEA	; 234
   143d6:	df 2e       	mov	r13, r31
   143d8:	e1 2c       	mov	r14, r1
   143da:	f1 2c       	mov	r15, r1
   143dc:	f0 2d       	mov	r31, r0
   143de:	a7 01       	movw	r20, r14
   143e0:	96 01       	movw	r18, r12
   143e2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   143e6:	49 01       	movw	r8, r18
   143e8:	5a 01       	movw	r10, r20
   143ea:	60 91 5d 05 	lds	r22, 0x055D
   143ee:	70 91 5e 05 	lds	r23, 0x055E
   143f2:	80 91 5f 05 	lds	r24, 0x055F
   143f6:	90 91 60 05 	lds	r25, 0x0560
   143fa:	a7 01       	movw	r20, r14
   143fc:	96 01       	movw	r18, r12
   143fe:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14402:	82 1a       	sub	r8, r18
   14404:	93 0a       	sbc	r9, r19
   14406:	94 01       	movw	r18, r8
   14408:	a9 e8       	ldi	r26, 0x89	; 137
   1440a:	b8 e8       	ldi	r27, 0x88	; 136
   1440c:	0e 94 ec c0 	call	0x181d8	; 0x181d8 <__umulhisi3>
   14410:	7c 01       	movw	r14, r24
   14412:	f6 94       	lsr	r15
   14414:	e7 94       	ror	r14
   14416:	f6 94       	lsr	r15
   14418:	e7 94       	ror	r14
   1441a:	f6 94       	lsr	r15
   1441c:	e7 94       	ror	r14
   1441e:	f6 94       	lsr	r15
   14420:	e7 94       	ror	r14
   14422:	f6 94       	lsr	r15
   14424:	e7 94       	ror	r14
   14426:	eb 82       	std	Y+3, r14	; 0x03
   14428:	ce 01       	movw	r24, r28
   1442a:	03 96       	adiw	r24, 0x03	; 3
   1442c:	0e 94 bd 95 	call	0x12b7a	; 0x12b7a <_Z7itostr2RKh>
   14430:	bc 01       	movw	r22, r24
   14432:	8f ef       	ldi	r24, 0xFF	; 255
   14434:	91 e1       	ldi	r25, 0x11	; 17
   14436:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   1443a:	6a e3       	ldi	r22, 0x3A	; 58
   1443c:	8f ef       	ldi	r24, 0xFF	; 255
   1443e:	91 e1       	ldi	r25, 0x11	; 17
   14440:	0e 94 d2 bc 	call	0x179a4	; 0x179a4 <_ZN5Print5printEc>
   14444:	2c e3       	ldi	r18, 0x3C	; 60
   14446:	2e 9d       	mul	r18, r14
   14448:	c0 01       	movw	r24, r0
   1444a:	2f 9d       	mul	r18, r15
   1444c:	90 0d       	add	r25, r0
   1444e:	11 24       	eor	r1, r1
   14450:	88 1a       	sub	r8, r24
   14452:	99 0a       	sbc	r9, r25
   14454:	8c 82       	std	Y+4, r8	; 0x04
   14456:	ce 01       	movw	r24, r28
   14458:	04 96       	adiw	r24, 0x04	; 4
   1445a:	0e 94 bd 95 	call	0x12b7a	; 0x12b7a <_Z7itostr2RKh>
   1445e:	bc 01       	movw	r22, r24
   14460:	8f ef       	ldi	r24, 0xFF	; 255
   14462:	91 e1       	ldi	r25, 0x11	; 17
   14464:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   14468:	04 c0       	rjmp	.+8      	; 0x14472 <_ZL17lcd_status_screenv+0x2f0>
   1446a:	83 e7       	ldi	r24, 0x73	; 115
   1446c:	96 e1       	ldi	r25, 0x16	; 22
   1446e:	0e 94 29 83 	call	0x10652	; 0x10652 <_ZL12lcd_printPGMPKc>
   14472:	43 e0       	ldi	r20, 0x03	; 3
   14474:	60 e0       	ldi	r22, 0x00	; 0
   14476:	8f ef       	ldi	r24, 0xFF	; 255
   14478:	91 e1       	ldi	r25, 0x11	; 17
   1447a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN3LCD9setCursorEhh>
   1447e:	67 e6       	ldi	r22, 0x67	; 103
   14480:	72 e0       	ldi	r23, 0x02	; 2
   14482:	8f ef       	ldi	r24, 0xFF	; 255
   14484:	91 e1       	ldi	r25, 0x11	; 17
   14486:	0e 94 f6 bc 	call	0x179ec	; 0x179ec <_ZN5Print5printEPKc>
   1448a:	8a e0       	ldi	r24, 0x0A	; 10
   1448c:	80 93 ee 11 	sts	0x11EE, r24
   14490:	80 91 fe 11 	lds	r24, 0x11FE
   14494:	82 ff       	sbrs	r24, 2
   14496:	10 c0       	rjmp	.+32     	; 0x144b8 <_ZL17lcd_status_screenv+0x336>
   14498:	8a eb       	ldi	r24, 0xBA	; 186
   1449a:	98 e8       	ldi	r25, 0x88	; 136
   1449c:	90 93 66 02 	sts	0x0266, r25
   144a0:	80 93 65 02 	sts	0x0265, r24
   144a4:	10 92 f4 11 	sts	0x11F4, r1
   144a8:	10 92 f5 11 	sts	0x11F5, r1
   144ac:	10 92 f6 11 	sts	0x11F6, r1
   144b0:	10 92 f7 11 	sts	0x11F7, r1
   144b4:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   144b8:	80 91 1f 02 	lds	r24, 0x021F
   144bc:	90 91 20 02 	lds	r25, 0x0220
   144c0:	84 36       	cpi	r24, 0x64	; 100
   144c2:	91 05       	cpc	r25, r1
   144c4:	4c f4       	brge	.+18     	; 0x144d8 <_ZL17lcd_status_screenv+0x356>
   144c6:	20 91 f4 11 	lds	r18, 0x11F4
   144ca:	30 91 f5 11 	lds	r19, 0x11F5
   144ce:	28 0f       	add	r18, r24
   144d0:	39 1f       	adc	r19, r25
   144d2:	25 36       	cpi	r18, 0x65	; 101
   144d4:	31 05       	cpc	r19, r1
   144d6:	64 f4       	brge	.+24     	; 0x144f0 <_ZL17lcd_status_screenv+0x36e>
   144d8:	85 36       	cpi	r24, 0x65	; 101
   144da:	91 05       	cpc	r25, r1
   144dc:	c4 f0       	brlt	.+48     	; 0x1450e <_ZL17lcd_status_screenv+0x38c>
   144de:	20 91 f4 11 	lds	r18, 0x11F4
   144e2:	30 91 f5 11 	lds	r19, 0x11F5
   144e6:	28 0f       	add	r18, r24
   144e8:	39 1f       	adc	r19, r25
   144ea:	24 36       	cpi	r18, 0x64	; 100
   144ec:	31 05       	cpc	r19, r1
   144ee:	7c f4       	brge	.+30     	; 0x1450e <_ZL17lcd_status_screenv+0x38c>
   144f0:	10 92 f4 11 	sts	0x11F4, r1
   144f4:	10 92 f5 11 	sts	0x11F5, r1
   144f8:	10 92 f6 11 	sts	0x11F6, r1
   144fc:	10 92 f7 11 	sts	0x11F7, r1
   14500:	84 e6       	ldi	r24, 0x64	; 100
   14502:	90 e0       	ldi	r25, 0x00	; 0
   14504:	90 93 20 02 	sts	0x0220, r25
   14508:	80 93 1f 02 	sts	0x021F, r24
   1450c:	03 c0       	rjmp	.+6      	; 0x14514 <_ZL17lcd_status_screenv+0x392>
   1450e:	84 36       	cpi	r24, 0x64	; 100
   14510:	91 05       	cpc	r25, r1
   14512:	49 f5       	brne	.+82     	; 0x14566 <_ZL17lcd_status_screenv+0x3e4>
   14514:	80 91 f4 11 	lds	r24, 0x11F4
   14518:	90 91 f5 11 	lds	r25, 0x11F5
   1451c:	8b 30       	cpi	r24, 0x0B	; 11
   1451e:	91 05       	cpc	r25, r1
   14520:	7c f0       	brlt	.+30     	; 0x14540 <_ZL17lcd_status_screenv+0x3be>
   14522:	86 5a       	subi	r24, 0xA6	; 166
   14524:	9f 4f       	sbci	r25, 0xFF	; 255
   14526:	90 93 20 02 	sts	0x0220, r25
   1452a:	80 93 1f 02 	sts	0x021F, r24
   1452e:	10 92 f4 11 	sts	0x11F4, r1
   14532:	10 92 f5 11 	sts	0x11F5, r1
   14536:	10 92 f6 11 	sts	0x11F6, r1
   1453a:	10 92 f7 11 	sts	0x11F7, r1
   1453e:	25 c0       	rjmp	.+74     	; 0x1458a <_ZL17lcd_status_screenv+0x408>
   14540:	86 3f       	cpi	r24, 0xF6	; 246
   14542:	2f ef       	ldi	r18, 0xFF	; 255
   14544:	92 07       	cpc	r25, r18
   14546:	74 f5       	brge	.+92     	; 0x145a4 <_ZL17lcd_status_screenv+0x422>
   14548:	82 59       	subi	r24, 0x92	; 146
   1454a:	9f 4f       	sbci	r25, 0xFF	; 255
   1454c:	90 93 20 02 	sts	0x0220, r25
   14550:	80 93 1f 02 	sts	0x021F, r24
   14554:	10 92 f4 11 	sts	0x11F4, r1
   14558:	10 92 f5 11 	sts	0x11F5, r1
   1455c:	10 92 f6 11 	sts	0x11F6, r1
   14560:	10 92 f7 11 	sts	0x11F7, r1
   14564:	12 c0       	rjmp	.+36     	; 0x1458a <_ZL17lcd_status_screenv+0x408>
   14566:	20 91 f4 11 	lds	r18, 0x11F4
   1456a:	30 91 f5 11 	lds	r19, 0x11F5
   1456e:	82 0f       	add	r24, r18
   14570:	93 1f       	adc	r25, r19
   14572:	90 93 20 02 	sts	0x0220, r25
   14576:	80 93 1f 02 	sts	0x021F, r24
   1457a:	10 92 f4 11 	sts	0x11F4, r1
   1457e:	10 92 f5 11 	sts	0x11F5, r1
   14582:	10 92 f6 11 	sts	0x11F6, r1
   14586:	10 92 f7 11 	sts	0x11F7, r1
   1458a:	80 91 1f 02 	lds	r24, 0x021F
   1458e:	90 91 20 02 	lds	r25, 0x0220
   14592:	0a 97       	sbiw	r24, 0x0a	; 10
   14594:	3c f4       	brge	.+14     	; 0x145a4 <_ZL17lcd_status_screenv+0x422>
   14596:	8a e0       	ldi	r24, 0x0A	; 10
   14598:	90 e0       	ldi	r25, 0x00	; 0
   1459a:	90 93 20 02 	sts	0x0220, r25
   1459e:	80 93 1f 02 	sts	0x021F, r24
   145a2:	0d c0       	rjmp	.+26     	; 0x145be <_ZL17lcd_status_screenv+0x43c>
   145a4:	80 91 1f 02 	lds	r24, 0x021F
   145a8:	90 91 20 02 	lds	r25, 0x0220
   145ac:	88 3e       	cpi	r24, 0xE8	; 232
   145ae:	93 40       	sbci	r25, 0x03	; 3
   145b0:	34 f0       	brlt	.+12     	; 0x145be <_ZL17lcd_status_screenv+0x43c>
   145b2:	87 ee       	ldi	r24, 0xE7	; 231
   145b4:	93 e0       	ldi	r25, 0x03	; 3
   145b6:	90 93 20 02 	sts	0x0220, r25
   145ba:	80 93 1f 02 	sts	0x021F, r24
   145be:	28 96       	adiw	r28, 0x08	; 8
   145c0:	0f b6       	in	r0, 0x3f	; 63
   145c2:	f8 94       	cli
   145c4:	de bf       	out	0x3e, r29	; 62
   145c6:	0f be       	out	0x3f, r0	; 63
   145c8:	cd bf       	out	0x3d, r28	; 61
   145ca:	df 91       	pop	r29
   145cc:	cf 91       	pop	r28
   145ce:	ff 90       	pop	r15
   145d0:	ef 90       	pop	r14
   145d2:	df 90       	pop	r13
   145d4:	cf 90       	pop	r12
   145d6:	bf 90       	pop	r11
   145d8:	af 90       	pop	r10
   145da:	9f 90       	pop	r9
   145dc:	8f 90       	pop	r8
   145de:	08 95       	ret

000145e0 <_Z7ftostr5RKf>:
   145e0:	8f 92       	push	r8
   145e2:	9f 92       	push	r9
   145e4:	af 92       	push	r10
   145e6:	bf 92       	push	r11
   145e8:	cf 92       	push	r12
   145ea:	df 92       	push	r13
   145ec:	ef 92       	push	r14
   145ee:	ff 92       	push	r15
   145f0:	fc 01       	movw	r30, r24
   145f2:	c0 80       	ld	r12, Z
   145f4:	d1 80       	ldd	r13, Z+1	; 0x01
   145f6:	e2 80       	ldd	r14, Z+2	; 0x02
   145f8:	f3 80       	ldd	r15, Z+3	; 0x03
   145fa:	20 e0       	ldi	r18, 0x00	; 0
   145fc:	30 e0       	ldi	r19, 0x00	; 0
   145fe:	a9 01       	movw	r20, r18
   14600:	c7 01       	movw	r24, r14
   14602:	b6 01       	movw	r22, r12
   14604:	0e 94 23 b8 	call	0x17046	; 0x17046 <__gesf2>
   14608:	18 16       	cp	r1, r24
   1460a:	4c f4       	brge	.+18     	; 0x1461e <_Z7ftostr5RKf+0x3e>
   1460c:	c7 01       	movw	r24, r14
   1460e:	b6 01       	movw	r22, r12
   14610:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   14614:	c6 2e       	mov	r12, r22
   14616:	d7 2e       	mov	r13, r23
   14618:	e8 2e       	mov	r14, r24
   1461a:	f9 2e       	mov	r15, r25
   1461c:	09 c0       	rjmp	.+18     	; 0x14630 <_Z7ftostr5RKf+0x50>
   1461e:	c7 01       	movw	r24, r14
   14620:	b6 01       	movw	r22, r12
   14622:	90 58       	subi	r25, 0x80	; 128
   14624:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   14628:	c6 2e       	mov	r12, r22
   1462a:	d7 2e       	mov	r13, r23
   1462c:	e8 2e       	mov	r14, r24
   1462e:	f9 2e       	mov	r15, r25
   14630:	f0 e1       	ldi	r31, 0x10	; 16
   14632:	cf 16       	cp	r12, r31
   14634:	f7 e2       	ldi	r31, 0x27	; 39
   14636:	df 06       	cpc	r13, r31
   14638:	e1 04       	cpc	r14, r1
   1463a:	f1 04       	cpc	r15, r1
   1463c:	a4 f0       	brlt	.+40     	; 0x14666 <_Z7ftostr5RKf+0x86>
   1463e:	c7 01       	movw	r24, r14
   14640:	b6 01       	movw	r22, r12
   14642:	20 e1       	ldi	r18, 0x10	; 16
   14644:	37 e2       	ldi	r19, 0x27	; 39
   14646:	40 e0       	ldi	r20, 0x00	; 0
   14648:	50 e0       	ldi	r21, 0x00	; 0
   1464a:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1464e:	ca 01       	movw	r24, r20
   14650:	b9 01       	movw	r22, r18
   14652:	2a e0       	ldi	r18, 0x0A	; 10
   14654:	30 e0       	ldi	r19, 0x00	; 0
   14656:	40 e0       	ldi	r20, 0x00	; 0
   14658:	50 e0       	ldi	r21, 0x00	; 0
   1465a:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1465e:	60 5d       	subi	r22, 0xD0	; 208
   14660:	60 93 c8 11 	sts	0x11C8, r22
   14664:	03 c0       	rjmp	.+6      	; 0x1466c <_Z7ftostr5RKf+0x8c>
   14666:	80 e2       	ldi	r24, 0x20	; 32
   14668:	80 93 c8 11 	sts	0x11C8, r24
   1466c:	88 ee       	ldi	r24, 0xE8	; 232
   1466e:	c8 16       	cp	r12, r24
   14670:	83 e0       	ldi	r24, 0x03	; 3
   14672:	d8 06       	cpc	r13, r24
   14674:	e1 04       	cpc	r14, r1
   14676:	f1 04       	cpc	r15, r1
   14678:	a4 f0       	brlt	.+40     	; 0x146a2 <_Z7ftostr5RKf+0xc2>
   1467a:	c7 01       	movw	r24, r14
   1467c:	b6 01       	movw	r22, r12
   1467e:	28 ee       	ldi	r18, 0xE8	; 232
   14680:	33 e0       	ldi	r19, 0x03	; 3
   14682:	40 e0       	ldi	r20, 0x00	; 0
   14684:	50 e0       	ldi	r21, 0x00	; 0
   14686:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1468a:	ca 01       	movw	r24, r20
   1468c:	b9 01       	movw	r22, r18
   1468e:	2a e0       	ldi	r18, 0x0A	; 10
   14690:	30 e0       	ldi	r19, 0x00	; 0
   14692:	40 e0       	ldi	r20, 0x00	; 0
   14694:	50 e0       	ldi	r21, 0x00	; 0
   14696:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   1469a:	60 5d       	subi	r22, 0xD0	; 208
   1469c:	60 93 c9 11 	sts	0x11C9, r22
   146a0:	03 c0       	rjmp	.+6      	; 0x146a8 <_Z7ftostr5RKf+0xc8>
   146a2:	80 e2       	ldi	r24, 0x20	; 32
   146a4:	80 93 c9 11 	sts	0x11C9, r24
   146a8:	e4 e6       	ldi	r30, 0x64	; 100
   146aa:	ce 16       	cp	r12, r30
   146ac:	d1 04       	cpc	r13, r1
   146ae:	e1 04       	cpc	r14, r1
   146b0:	f1 04       	cpc	r15, r1
   146b2:	a4 f0       	brlt	.+40     	; 0x146dc <_Z7ftostr5RKf+0xfc>
   146b4:	c7 01       	movw	r24, r14
   146b6:	b6 01       	movw	r22, r12
   146b8:	24 e6       	ldi	r18, 0x64	; 100
   146ba:	30 e0       	ldi	r19, 0x00	; 0
   146bc:	40 e0       	ldi	r20, 0x00	; 0
   146be:	50 e0       	ldi	r21, 0x00	; 0
   146c0:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   146c4:	ca 01       	movw	r24, r20
   146c6:	b9 01       	movw	r22, r18
   146c8:	2a e0       	ldi	r18, 0x0A	; 10
   146ca:	30 e0       	ldi	r19, 0x00	; 0
   146cc:	40 e0       	ldi	r20, 0x00	; 0
   146ce:	50 e0       	ldi	r21, 0x00	; 0
   146d0:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   146d4:	60 5d       	subi	r22, 0xD0	; 208
   146d6:	60 93 ca 11 	sts	0x11CA, r22
   146da:	03 c0       	rjmp	.+6      	; 0x146e2 <_Z7ftostr5RKf+0x102>
   146dc:	80 e2       	ldi	r24, 0x20	; 32
   146de:	80 93 ca 11 	sts	0x11CA, r24
   146e2:	fa e0       	ldi	r31, 0x0A	; 10
   146e4:	cf 16       	cp	r12, r31
   146e6:	d1 04       	cpc	r13, r1
   146e8:	e1 04       	cpc	r14, r1
   146ea:	f1 04       	cpc	r15, r1
   146ec:	bc f0       	brlt	.+46     	; 0x1471c <_Z7ftostr5RKf+0x13c>
   146ee:	0f 2e       	mov	r0, r31
   146f0:	fa e0       	ldi	r31, 0x0A	; 10
   146f2:	8f 2e       	mov	r8, r31
   146f4:	91 2c       	mov	r9, r1
   146f6:	a1 2c       	mov	r10, r1
   146f8:	b1 2c       	mov	r11, r1
   146fa:	f0 2d       	mov	r31, r0
   146fc:	c7 01       	movw	r24, r14
   146fe:	b6 01       	movw	r22, r12
   14700:	a5 01       	movw	r20, r10
   14702:	94 01       	movw	r18, r8
   14704:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14708:	ca 01       	movw	r24, r20
   1470a:	b9 01       	movw	r22, r18
   1470c:	a5 01       	movw	r20, r10
   1470e:	94 01       	movw	r18, r8
   14710:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14714:	60 5d       	subi	r22, 0xD0	; 208
   14716:	60 93 cb 11 	sts	0x11CB, r22
   1471a:	03 c0       	rjmp	.+6      	; 0x14722 <_Z7ftostr5RKf+0x142>
   1471c:	80 e2       	ldi	r24, 0x20	; 32
   1471e:	80 93 cb 11 	sts	0x11CB, r24
   14722:	c7 01       	movw	r24, r14
   14724:	b6 01       	movw	r22, r12
   14726:	2a e0       	ldi	r18, 0x0A	; 10
   14728:	30 e0       	ldi	r19, 0x00	; 0
   1472a:	40 e0       	ldi	r20, 0x00	; 0
   1472c:	50 e0       	ldi	r21, 0x00	; 0
   1472e:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14732:	60 5d       	subi	r22, 0xD0	; 208
   14734:	60 93 cc 11 	sts	0x11CC, r22
   14738:	10 92 cd 11 	sts	0x11CD, r1
   1473c:	88 ec       	ldi	r24, 0xC8	; 200
   1473e:	91 e1       	ldi	r25, 0x11	; 17
   14740:	ff 90       	pop	r15
   14742:	ef 90       	pop	r14
   14744:	df 90       	pop	r13
   14746:	cf 90       	pop	r12
   14748:	bf 90       	pop	r11
   1474a:	af 90       	pop	r10
   1474c:	9f 90       	pop	r9
   1474e:	8f 90       	pop	r8
   14750:	08 95       	ret

00014752 <_Z24menu_edit_callback_long5v>:
   14752:	0f 93       	push	r16
   14754:	1f 93       	push	r17
   14756:	cf 93       	push	r28
   14758:	df 93       	push	r29
   1475a:	00 d0       	rcall	.+0      	; 0x1475c <_Z24menu_edit_callback_long5v+0xa>
   1475c:	1f 92       	push	r1
   1475e:	cd b7       	in	r28, 0x3d	; 61
   14760:	de b7       	in	r29, 0x3e	; 62
   14762:	80 91 e2 11 	lds	r24, 0x11E2
   14766:	90 91 e3 11 	lds	r25, 0x11E3
   1476a:	a0 91 e4 11 	lds	r26, 0x11E4
   1476e:	b0 91 e5 11 	lds	r27, 0x11E5
   14772:	40 91 f4 11 	lds	r20, 0x11F4
   14776:	50 91 f5 11 	lds	r21, 0x11F5
   1477a:	60 91 f6 11 	lds	r22, 0x11F6
   1477e:	70 91 f7 11 	lds	r23, 0x11F7
   14782:	48 17       	cp	r20, r24
   14784:	59 07       	cpc	r21, r25
   14786:	6a 07       	cpc	r22, r26
   14788:	7b 07       	cpc	r23, r27
   1478a:	44 f4       	brge	.+16     	; 0x1479c <_Z24menu_edit_callback_long5v+0x4a>
   1478c:	80 93 f4 11 	sts	0x11F4, r24
   14790:	90 93 f5 11 	sts	0x11F5, r25
   14794:	a0 93 f6 11 	sts	0x11F6, r26
   14798:	b0 93 f7 11 	sts	0x11F7, r27
   1479c:	80 91 de 11 	lds	r24, 0x11DE
   147a0:	90 91 df 11 	lds	r25, 0x11DF
   147a4:	a0 91 e0 11 	lds	r26, 0x11E0
   147a8:	b0 91 e1 11 	lds	r27, 0x11E1
   147ac:	40 91 f4 11 	lds	r20, 0x11F4
   147b0:	50 91 f5 11 	lds	r21, 0x11F5
   147b4:	60 91 f6 11 	lds	r22, 0x11F6
   147b8:	70 91 f7 11 	lds	r23, 0x11F7
   147bc:	84 17       	cp	r24, r20
   147be:	95 07       	cpc	r25, r21
   147c0:	a6 07       	cpc	r26, r22
   147c2:	b7 07       	cpc	r27, r23
   147c4:	44 f4       	brge	.+16     	; 0x147d6 <_Z24menu_edit_callback_long5v+0x84>
   147c6:	80 93 f4 11 	sts	0x11F4, r24
   147ca:	90 93 f5 11 	sts	0x11F5, r25
   147ce:	a0 93 f6 11 	sts	0x11F6, r26
   147d2:	b0 93 f7 11 	sts	0x11F7, r27
   147d6:	80 91 64 02 	lds	r24, 0x0264
   147da:	88 23       	and	r24, r24
   147dc:	f1 f0       	breq	.+60     	; 0x1481a <_Z24menu_edit_callback_long5v+0xc8>
   147de:	60 91 f4 11 	lds	r22, 0x11F4
   147e2:	70 91 f5 11 	lds	r23, 0x11F5
   147e6:	80 91 f6 11 	lds	r24, 0x11F6
   147ea:	90 91 f7 11 	lds	r25, 0x11F7
   147ee:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   147f2:	2a e0       	ldi	r18, 0x0A	; 10
   147f4:	37 ed       	ldi	r19, 0xD7	; 215
   147f6:	43 e2       	ldi	r20, 0x23	; 35
   147f8:	5c e3       	ldi	r21, 0x3C	; 60
   147fa:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   147fe:	69 83       	std	Y+1, r22	; 0x01
   14800:	7a 83       	std	Y+2, r23	; 0x02
   14802:	8b 83       	std	Y+3, r24	; 0x03
   14804:	9c 83       	std	Y+4, r25	; 0x04
   14806:	ce 01       	movw	r24, r28
   14808:	01 96       	adiw	r24, 0x01	; 1
   1480a:	ea de       	rcall	.-556    	; 0x145e0 <_Z7ftostr5RKf>
   1480c:	bc 01       	movw	r22, r24
   1480e:	80 91 e8 11 	lds	r24, 0x11E8
   14812:	90 91 e9 11 	lds	r25, 0x11E9
   14816:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   1481a:	80 91 fe 11 	lds	r24, 0x11FE
   1481e:	82 ff       	sbrs	r24, 2
   14820:	38 c0       	rjmp	.+112    	; 0x14892 <_Z24menu_edit_callback_long5v+0x140>
   14822:	00 91 e6 11 	lds	r16, 0x11E6
   14826:	10 91 e7 11 	lds	r17, 0x11E7
   1482a:	60 91 f4 11 	lds	r22, 0x11F4
   1482e:	70 91 f5 11 	lds	r23, 0x11F5
   14832:	80 91 f6 11 	lds	r24, 0x11F6
   14836:	90 91 f7 11 	lds	r25, 0x11F7
   1483a:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1483e:	2a e0       	ldi	r18, 0x0A	; 10
   14840:	37 ed       	ldi	r19, 0xD7	; 215
   14842:	43 e2       	ldi	r20, 0x23	; 35
   14844:	5c e3       	ldi	r21, 0x3C	; 60
   14846:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   1484a:	0e 94 94 b6 	call	0x16d28	; 0x16d28 <__fixunssfsi>
   1484e:	f8 01       	movw	r30, r16
   14850:	60 83       	st	Z, r22
   14852:	71 83       	std	Z+1, r23	; 0x01
   14854:	82 83       	std	Z+2, r24	; 0x02
   14856:	93 83       	std	Z+3, r25	; 0x03
   14858:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1485c:	80 91 ec 11 	lds	r24, 0x11EC
   14860:	90 91 ed 11 	lds	r25, 0x11ED
   14864:	90 93 66 02 	sts	0x0266, r25
   14868:	80 93 65 02 	sts	0x0265, r24
   1486c:	80 91 ea 11 	lds	r24, 0x11EA
   14870:	90 91 eb 11 	lds	r25, 0x11EB
   14874:	a0 e0       	ldi	r26, 0x00	; 0
   14876:	b0 e0       	ldi	r27, 0x00	; 0
   14878:	80 93 f4 11 	sts	0x11F4, r24
   1487c:	90 93 f5 11 	sts	0x11F5, r25
   14880:	a0 93 f6 11 	sts	0x11F6, r26
   14884:	b0 93 f7 11 	sts	0x11F7, r27
   14888:	e0 91 dc 11 	lds	r30, 0x11DC
   1488c:	f0 91 dd 11 	lds	r31, 0x11DD
   14890:	19 95       	eicall
   14892:	0f 90       	pop	r0
   14894:	0f 90       	pop	r0
   14896:	0f 90       	pop	r0
   14898:	0f 90       	pop	r0
   1489a:	df 91       	pop	r29
   1489c:	cf 91       	pop	r28
   1489e:	1f 91       	pop	r17
   148a0:	0f 91       	pop	r16
   148a2:	08 95       	ret

000148a4 <_Z16menu_edit_float5v>:
   148a4:	0f 93       	push	r16
   148a6:	1f 93       	push	r17
   148a8:	cf 93       	push	r28
   148aa:	df 93       	push	r29
   148ac:	00 d0       	rcall	.+0      	; 0x148ae <_Z16menu_edit_float5v+0xa>
   148ae:	1f 92       	push	r1
   148b0:	cd b7       	in	r28, 0x3d	; 61
   148b2:	de b7       	in	r29, 0x3e	; 62
   148b4:	80 91 e2 11 	lds	r24, 0x11E2
   148b8:	90 91 e3 11 	lds	r25, 0x11E3
   148bc:	a0 91 e4 11 	lds	r26, 0x11E4
   148c0:	b0 91 e5 11 	lds	r27, 0x11E5
   148c4:	40 91 f4 11 	lds	r20, 0x11F4
   148c8:	50 91 f5 11 	lds	r21, 0x11F5
   148cc:	60 91 f6 11 	lds	r22, 0x11F6
   148d0:	70 91 f7 11 	lds	r23, 0x11F7
   148d4:	48 17       	cp	r20, r24
   148d6:	59 07       	cpc	r21, r25
   148d8:	6a 07       	cpc	r22, r26
   148da:	7b 07       	cpc	r23, r27
   148dc:	44 f4       	brge	.+16     	; 0x148ee <_Z16menu_edit_float5v+0x4a>
   148de:	80 93 f4 11 	sts	0x11F4, r24
   148e2:	90 93 f5 11 	sts	0x11F5, r25
   148e6:	a0 93 f6 11 	sts	0x11F6, r26
   148ea:	b0 93 f7 11 	sts	0x11F7, r27
   148ee:	80 91 de 11 	lds	r24, 0x11DE
   148f2:	90 91 df 11 	lds	r25, 0x11DF
   148f6:	a0 91 e0 11 	lds	r26, 0x11E0
   148fa:	b0 91 e1 11 	lds	r27, 0x11E1
   148fe:	40 91 f4 11 	lds	r20, 0x11F4
   14902:	50 91 f5 11 	lds	r21, 0x11F5
   14906:	60 91 f6 11 	lds	r22, 0x11F6
   1490a:	70 91 f7 11 	lds	r23, 0x11F7
   1490e:	84 17       	cp	r24, r20
   14910:	95 07       	cpc	r25, r21
   14912:	a6 07       	cpc	r26, r22
   14914:	b7 07       	cpc	r27, r23
   14916:	44 f4       	brge	.+16     	; 0x14928 <_Z16menu_edit_float5v+0x84>
   14918:	80 93 f4 11 	sts	0x11F4, r24
   1491c:	90 93 f5 11 	sts	0x11F5, r25
   14920:	a0 93 f6 11 	sts	0x11F6, r26
   14924:	b0 93 f7 11 	sts	0x11F7, r27
   14928:	80 91 64 02 	lds	r24, 0x0264
   1492c:	88 23       	and	r24, r24
   1492e:	f1 f0       	breq	.+60     	; 0x1496c <_Z16menu_edit_float5v+0xc8>
   14930:	60 91 f4 11 	lds	r22, 0x11F4
   14934:	70 91 f5 11 	lds	r23, 0x11F5
   14938:	80 91 f6 11 	lds	r24, 0x11F6
   1493c:	90 91 f7 11 	lds	r25, 0x11F7
   14940:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   14944:	2a e0       	ldi	r18, 0x0A	; 10
   14946:	37 ed       	ldi	r19, 0xD7	; 215
   14948:	43 e2       	ldi	r20, 0x23	; 35
   1494a:	5c e3       	ldi	r21, 0x3C	; 60
   1494c:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   14950:	69 83       	std	Y+1, r22	; 0x01
   14952:	7a 83       	std	Y+2, r23	; 0x02
   14954:	8b 83       	std	Y+3, r24	; 0x03
   14956:	9c 83       	std	Y+4, r25	; 0x04
   14958:	ce 01       	movw	r24, r28
   1495a:	01 96       	adiw	r24, 0x01	; 1
   1495c:	41 de       	rcall	.-894    	; 0x145e0 <_Z7ftostr5RKf>
   1495e:	bc 01       	movw	r22, r24
   14960:	80 91 e8 11 	lds	r24, 0x11E8
   14964:	90 91 e9 11 	lds	r25, 0x11E9
   14968:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   1496c:	80 91 fe 11 	lds	r24, 0x11FE
   14970:	82 ff       	sbrs	r24, 2
   14972:	31 c0       	rjmp	.+98     	; 0x149d6 <_Z16menu_edit_float5v+0x132>
   14974:	00 91 e6 11 	lds	r16, 0x11E6
   14978:	10 91 e7 11 	lds	r17, 0x11E7
   1497c:	60 91 f4 11 	lds	r22, 0x11F4
   14980:	70 91 f5 11 	lds	r23, 0x11F5
   14984:	80 91 f6 11 	lds	r24, 0x11F6
   14988:	90 91 f7 11 	lds	r25, 0x11F7
   1498c:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   14990:	2a e0       	ldi	r18, 0x0A	; 10
   14992:	37 ed       	ldi	r19, 0xD7	; 215
   14994:	43 e2       	ldi	r20, 0x23	; 35
   14996:	5c e3       	ldi	r21, 0x3C	; 60
   14998:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   1499c:	f8 01       	movw	r30, r16
   1499e:	60 83       	st	Z, r22
   149a0:	71 83       	std	Z+1, r23	; 0x01
   149a2:	82 83       	std	Z+2, r24	; 0x02
   149a4:	93 83       	std	Z+3, r25	; 0x03
   149a6:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   149aa:	80 91 ec 11 	lds	r24, 0x11EC
   149ae:	90 91 ed 11 	lds	r25, 0x11ED
   149b2:	90 93 66 02 	sts	0x0266, r25
   149b6:	80 93 65 02 	sts	0x0265, r24
   149ba:	80 91 ea 11 	lds	r24, 0x11EA
   149be:	90 91 eb 11 	lds	r25, 0x11EB
   149c2:	a0 e0       	ldi	r26, 0x00	; 0
   149c4:	b0 e0       	ldi	r27, 0x00	; 0
   149c6:	80 93 f4 11 	sts	0x11F4, r24
   149ca:	90 93 f5 11 	sts	0x11F5, r25
   149ce:	a0 93 f6 11 	sts	0x11F6, r26
   149d2:	b0 93 f7 11 	sts	0x11F7, r27
   149d6:	0f 90       	pop	r0
   149d8:	0f 90       	pop	r0
   149da:	0f 90       	pop	r0
   149dc:	0f 90       	pop	r0
   149de:	df 91       	pop	r29
   149e0:	cf 91       	pop	r28
   149e2:	1f 91       	pop	r17
   149e4:	0f 91       	pop	r16
   149e6:	08 95       	ret

000149e8 <_Z8ftostr51RKf>:
   149e8:	8f 92       	push	r8
   149ea:	9f 92       	push	r9
   149ec:	af 92       	push	r10
   149ee:	bf 92       	push	r11
   149f0:	cf 92       	push	r12
   149f2:	df 92       	push	r13
   149f4:	ef 92       	push	r14
   149f6:	ff 92       	push	r15
   149f8:	cf 93       	push	r28
   149fa:	20 e0       	ldi	r18, 0x00	; 0
   149fc:	30 e0       	ldi	r19, 0x00	; 0
   149fe:	40 e2       	ldi	r20, 0x20	; 32
   14a00:	51 e4       	ldi	r21, 0x41	; 65
   14a02:	fc 01       	movw	r30, r24
   14a04:	60 81       	ld	r22, Z
   14a06:	71 81       	ldd	r23, Z+1	; 0x01
   14a08:	82 81       	ldd	r24, Z+2	; 0x02
   14a0a:	93 81       	ldd	r25, Z+3	; 0x03
   14a0c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   14a10:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   14a14:	46 2f       	mov	r20, r22
   14a16:	57 2f       	mov	r21, r23
   14a18:	68 2f       	mov	r22, r24
   14a1a:	79 2f       	mov	r23, r25
   14a1c:	77 23       	and	r23, r23
   14a1e:	14 f0       	brlt	.+4      	; 0x14a24 <_Z8ftostr51RKf+0x3c>
   14a20:	8b e2       	ldi	r24, 0x2B	; 43
   14a22:	01 c0       	rjmp	.+2      	; 0x14a26 <_Z8ftostr51RKf+0x3e>
   14a24:	8d e2       	ldi	r24, 0x2D	; 45
   14a26:	80 93 c8 11 	sts	0x11C8, r24
   14a2a:	6a 01       	movw	r12, r20
   14a2c:	7b 01       	movw	r14, r22
   14a2e:	77 23       	and	r23, r23
   14a30:	3c f4       	brge	.+14     	; 0x14a40 <_Z8ftostr51RKf+0x58>
   14a32:	cc 24       	eor	r12, r12
   14a34:	dd 24       	eor	r13, r13
   14a36:	76 01       	movw	r14, r12
   14a38:	c4 1a       	sub	r12, r20
   14a3a:	d5 0a       	sbc	r13, r21
   14a3c:	e6 0a       	sbc	r14, r22
   14a3e:	f7 0a       	sbc	r15, r23
   14a40:	c7 01       	movw	r24, r14
   14a42:	b6 01       	movw	r22, r12
   14a44:	20 e1       	ldi	r18, 0x10	; 16
   14a46:	37 e2       	ldi	r19, 0x27	; 39
   14a48:	40 e0       	ldi	r20, 0x00	; 0
   14a4a:	50 e0       	ldi	r21, 0x00	; 0
   14a4c:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14a50:	0f 2e       	mov	r0, r31
   14a52:	fa e0       	ldi	r31, 0x0A	; 10
   14a54:	8f 2e       	mov	r8, r31
   14a56:	91 2c       	mov	r9, r1
   14a58:	a1 2c       	mov	r10, r1
   14a5a:	b1 2c       	mov	r11, r1
   14a5c:	f0 2d       	mov	r31, r0
   14a5e:	ca 01       	movw	r24, r20
   14a60:	b9 01       	movw	r22, r18
   14a62:	a5 01       	movw	r20, r10
   14a64:	94 01       	movw	r18, r8
   14a66:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14a6a:	60 5d       	subi	r22, 0xD0	; 208
   14a6c:	60 93 c9 11 	sts	0x11C9, r22
   14a70:	c7 01       	movw	r24, r14
   14a72:	b6 01       	movw	r22, r12
   14a74:	28 ee       	ldi	r18, 0xE8	; 232
   14a76:	33 e0       	ldi	r19, 0x03	; 3
   14a78:	40 e0       	ldi	r20, 0x00	; 0
   14a7a:	50 e0       	ldi	r21, 0x00	; 0
   14a7c:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14a80:	ca 01       	movw	r24, r20
   14a82:	b9 01       	movw	r22, r18
   14a84:	a5 01       	movw	r20, r10
   14a86:	94 01       	movw	r18, r8
   14a88:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14a8c:	60 5d       	subi	r22, 0xD0	; 208
   14a8e:	60 93 ca 11 	sts	0x11CA, r22
   14a92:	c7 01       	movw	r24, r14
   14a94:	b6 01       	movw	r22, r12
   14a96:	24 e6       	ldi	r18, 0x64	; 100
   14a98:	30 e0       	ldi	r19, 0x00	; 0
   14a9a:	40 e0       	ldi	r20, 0x00	; 0
   14a9c:	50 e0       	ldi	r21, 0x00	; 0
   14a9e:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14aa2:	ca 01       	movw	r24, r20
   14aa4:	b9 01       	movw	r22, r18
   14aa6:	a5 01       	movw	r20, r10
   14aa8:	94 01       	movw	r18, r8
   14aaa:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14aae:	60 5d       	subi	r22, 0xD0	; 208
   14ab0:	60 93 cb 11 	sts	0x11CB, r22
   14ab4:	c7 01       	movw	r24, r14
   14ab6:	b6 01       	movw	r22, r12
   14ab8:	a5 01       	movw	r20, r10
   14aba:	94 01       	movw	r18, r8
   14abc:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14ac0:	c6 2f       	mov	r28, r22
   14ac2:	ca 01       	movw	r24, r20
   14ac4:	b9 01       	movw	r22, r18
   14ac6:	a5 01       	movw	r20, r10
   14ac8:	94 01       	movw	r18, r8
   14aca:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14ace:	60 5d       	subi	r22, 0xD0	; 208
   14ad0:	60 93 cc 11 	sts	0x11CC, r22
   14ad4:	8e e2       	ldi	r24, 0x2E	; 46
   14ad6:	80 93 cd 11 	sts	0x11CD, r24
   14ada:	c0 5d       	subi	r28, 0xD0	; 208
   14adc:	c0 93 ce 11 	sts	0x11CE, r28
   14ae0:	10 92 cf 11 	sts	0x11CF, r1
   14ae4:	88 ec       	ldi	r24, 0xC8	; 200
   14ae6:	91 e1       	ldi	r25, 0x11	; 17
   14ae8:	cf 91       	pop	r28
   14aea:	ff 90       	pop	r15
   14aec:	ef 90       	pop	r14
   14aee:	df 90       	pop	r13
   14af0:	cf 90       	pop	r12
   14af2:	bf 90       	pop	r11
   14af4:	af 90       	pop	r10
   14af6:	9f 90       	pop	r9
   14af8:	8f 90       	pop	r8
   14afa:	08 95       	ret

00014afc <_Z17menu_edit_float51v>:
   14afc:	0f 93       	push	r16
   14afe:	1f 93       	push	r17
   14b00:	cf 93       	push	r28
   14b02:	df 93       	push	r29
   14b04:	00 d0       	rcall	.+0      	; 0x14b06 <_Z17menu_edit_float51v+0xa>
   14b06:	1f 92       	push	r1
   14b08:	cd b7       	in	r28, 0x3d	; 61
   14b0a:	de b7       	in	r29, 0x3e	; 62
   14b0c:	80 91 e2 11 	lds	r24, 0x11E2
   14b10:	90 91 e3 11 	lds	r25, 0x11E3
   14b14:	a0 91 e4 11 	lds	r26, 0x11E4
   14b18:	b0 91 e5 11 	lds	r27, 0x11E5
   14b1c:	40 91 f4 11 	lds	r20, 0x11F4
   14b20:	50 91 f5 11 	lds	r21, 0x11F5
   14b24:	60 91 f6 11 	lds	r22, 0x11F6
   14b28:	70 91 f7 11 	lds	r23, 0x11F7
   14b2c:	48 17       	cp	r20, r24
   14b2e:	59 07       	cpc	r21, r25
   14b30:	6a 07       	cpc	r22, r26
   14b32:	7b 07       	cpc	r23, r27
   14b34:	44 f4       	brge	.+16     	; 0x14b46 <_Z17menu_edit_float51v+0x4a>
   14b36:	80 93 f4 11 	sts	0x11F4, r24
   14b3a:	90 93 f5 11 	sts	0x11F5, r25
   14b3e:	a0 93 f6 11 	sts	0x11F6, r26
   14b42:	b0 93 f7 11 	sts	0x11F7, r27
   14b46:	80 91 de 11 	lds	r24, 0x11DE
   14b4a:	90 91 df 11 	lds	r25, 0x11DF
   14b4e:	a0 91 e0 11 	lds	r26, 0x11E0
   14b52:	b0 91 e1 11 	lds	r27, 0x11E1
   14b56:	40 91 f4 11 	lds	r20, 0x11F4
   14b5a:	50 91 f5 11 	lds	r21, 0x11F5
   14b5e:	60 91 f6 11 	lds	r22, 0x11F6
   14b62:	70 91 f7 11 	lds	r23, 0x11F7
   14b66:	84 17       	cp	r24, r20
   14b68:	95 07       	cpc	r25, r21
   14b6a:	a6 07       	cpc	r26, r22
   14b6c:	b7 07       	cpc	r27, r23
   14b6e:	44 f4       	brge	.+16     	; 0x14b80 <_Z17menu_edit_float51v+0x84>
   14b70:	80 93 f4 11 	sts	0x11F4, r24
   14b74:	90 93 f5 11 	sts	0x11F5, r25
   14b78:	a0 93 f6 11 	sts	0x11F6, r26
   14b7c:	b0 93 f7 11 	sts	0x11F7, r27
   14b80:	80 91 64 02 	lds	r24, 0x0264
   14b84:	88 23       	and	r24, r24
   14b86:	f1 f0       	breq	.+60     	; 0x14bc4 <_Z17menu_edit_float51v+0xc8>
   14b88:	60 91 f4 11 	lds	r22, 0x11F4
   14b8c:	70 91 f5 11 	lds	r23, 0x11F5
   14b90:	80 91 f6 11 	lds	r24, 0x11F6
   14b94:	90 91 f7 11 	lds	r25, 0x11F7
   14b98:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   14b9c:	20 e0       	ldi	r18, 0x00	; 0
   14b9e:	30 e0       	ldi	r19, 0x00	; 0
   14ba0:	40 e2       	ldi	r20, 0x20	; 32
   14ba2:	51 e4       	ldi	r21, 0x41	; 65
   14ba4:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   14ba8:	69 83       	std	Y+1, r22	; 0x01
   14baa:	7a 83       	std	Y+2, r23	; 0x02
   14bac:	8b 83       	std	Y+3, r24	; 0x03
   14bae:	9c 83       	std	Y+4, r25	; 0x04
   14bb0:	ce 01       	movw	r24, r28
   14bb2:	01 96       	adiw	r24, 0x01	; 1
   14bb4:	19 df       	rcall	.-462    	; 0x149e8 <_Z8ftostr51RKf>
   14bb6:	bc 01       	movw	r22, r24
   14bb8:	80 91 e8 11 	lds	r24, 0x11E8
   14bbc:	90 91 e9 11 	lds	r25, 0x11E9
   14bc0:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   14bc4:	80 91 fe 11 	lds	r24, 0x11FE
   14bc8:	82 ff       	sbrs	r24, 2
   14bca:	31 c0       	rjmp	.+98     	; 0x14c2e <_Z17menu_edit_float51v+0x132>
   14bcc:	00 91 e6 11 	lds	r16, 0x11E6
   14bd0:	10 91 e7 11 	lds	r17, 0x11E7
   14bd4:	60 91 f4 11 	lds	r22, 0x11F4
   14bd8:	70 91 f5 11 	lds	r23, 0x11F5
   14bdc:	80 91 f6 11 	lds	r24, 0x11F6
   14be0:	90 91 f7 11 	lds	r25, 0x11F7
   14be4:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   14be8:	20 e0       	ldi	r18, 0x00	; 0
   14bea:	30 e0       	ldi	r19, 0x00	; 0
   14bec:	40 e2       	ldi	r20, 0x20	; 32
   14bee:	51 e4       	ldi	r21, 0x41	; 65
   14bf0:	0e 94 27 b6 	call	0x16c4e	; 0x16c4e <__divsf3>
   14bf4:	f8 01       	movw	r30, r16
   14bf6:	60 83       	st	Z, r22
   14bf8:	71 83       	std	Z+1, r23	; 0x01
   14bfa:	82 83       	std	Z+2, r24	; 0x02
   14bfc:	93 83       	std	Z+3, r25	; 0x03
   14bfe:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   14c02:	80 91 ec 11 	lds	r24, 0x11EC
   14c06:	90 91 ed 11 	lds	r25, 0x11ED
   14c0a:	90 93 66 02 	sts	0x0266, r25
   14c0e:	80 93 65 02 	sts	0x0265, r24
   14c12:	80 91 ea 11 	lds	r24, 0x11EA
   14c16:	90 91 eb 11 	lds	r25, 0x11EB
   14c1a:	a0 e0       	ldi	r26, 0x00	; 0
   14c1c:	b0 e0       	ldi	r27, 0x00	; 0
   14c1e:	80 93 f4 11 	sts	0x11F4, r24
   14c22:	90 93 f5 11 	sts	0x11F5, r25
   14c26:	a0 93 f6 11 	sts	0x11F6, r26
   14c2a:	b0 93 f7 11 	sts	0x11F7, r27
   14c2e:	0f 90       	pop	r0
   14c30:	0f 90       	pop	r0
   14c32:	0f 90       	pop	r0
   14c34:	0f 90       	pop	r0
   14c36:	df 91       	pop	r29
   14c38:	cf 91       	pop	r28
   14c3a:	1f 91       	pop	r17
   14c3c:	0f 91       	pop	r16
   14c3e:	08 95       	ret

00014c40 <_Z8ftostr52RKf>:
  return conv;
}

//  convert float to string with +123.45 format
char *ftostr52(const float &x)
{
   14c40:	8f 92       	push	r8
   14c42:	9f 92       	push	r9
   14c44:	af 92       	push	r10
   14c46:	bf 92       	push	r11
   14c48:	cf 92       	push	r12
   14c4a:	df 92       	push	r13
   14c4c:	ef 92       	push	r14
   14c4e:	ff 92       	push	r15
   14c50:	cf 93       	push	r28
  long xx=x*100;
   14c52:	20 e0       	ldi	r18, 0x00	; 0
   14c54:	30 e0       	ldi	r19, 0x00	; 0
   14c56:	48 ec       	ldi	r20, 0xC8	; 200
   14c58:	52 e4       	ldi	r21, 0x42	; 66
   14c5a:	fc 01       	movw	r30, r24
   14c5c:	60 81       	ld	r22, Z
   14c5e:	71 81       	ldd	r23, Z+1	; 0x01
   14c60:	82 81       	ldd	r24, Z+2	; 0x02
   14c62:	93 81       	ldd	r25, Z+3	; 0x03
   14c64:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   14c68:	0e 94 8f b6 	call	0x16d1e	; 0x16d1e <__fixsfsi>
   14c6c:	46 2f       	mov	r20, r22
   14c6e:	57 2f       	mov	r21, r23
   14c70:	68 2f       	mov	r22, r24
   14c72:	79 2f       	mov	r23, r25
  conv[0]=(xx>=0)?'+':'-';
   14c74:	77 23       	and	r23, r23
   14c76:	14 f0       	brlt	.+4      	; 0x14c7c <_Z8ftostr52RKf+0x3c>
   14c78:	8b e2       	ldi	r24, 0x2B	; 43
   14c7a:	01 c0       	rjmp	.+2      	; 0x14c7e <_Z8ftostr52RKf+0x3e>
   14c7c:	8d e2       	ldi	r24, 0x2D	; 45
   14c7e:	80 93 c8 11 	sts	0x11C8, r24
  xx=abs(xx);
   14c82:	6a 01       	movw	r12, r20
   14c84:	7b 01       	movw	r14, r22
   14c86:	77 23       	and	r23, r23
   14c88:	3c f4       	brge	.+14     	; 0x14c98 <_Z8ftostr52RKf+0x58>
   14c8a:	cc 24       	eor	r12, r12
   14c8c:	dd 24       	eor	r13, r13
   14c8e:	76 01       	movw	r14, r12
   14c90:	c4 1a       	sub	r12, r20
   14c92:	d5 0a       	sbc	r13, r21
   14c94:	e6 0a       	sbc	r14, r22
   14c96:	f7 0a       	sbc	r15, r23
  conv[1]=(xx/10000)%10+'0';
   14c98:	c7 01       	movw	r24, r14
   14c9a:	b6 01       	movw	r22, r12
   14c9c:	20 e1       	ldi	r18, 0x10	; 16
   14c9e:	37 e2       	ldi	r19, 0x27	; 39
   14ca0:	40 e0       	ldi	r20, 0x00	; 0
   14ca2:	50 e0       	ldi	r21, 0x00	; 0
   14ca4:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14ca8:	0f 2e       	mov	r0, r31
   14caa:	fa e0       	ldi	r31, 0x0A	; 10
   14cac:	8f 2e       	mov	r8, r31
   14cae:	91 2c       	mov	r9, r1
   14cb0:	a1 2c       	mov	r10, r1
   14cb2:	b1 2c       	mov	r11, r1
   14cb4:	f0 2d       	mov	r31, r0
   14cb6:	ca 01       	movw	r24, r20
   14cb8:	b9 01       	movw	r22, r18
   14cba:	a5 01       	movw	r20, r10
   14cbc:	94 01       	movw	r18, r8
   14cbe:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14cc2:	60 5d       	subi	r22, 0xD0	; 208
   14cc4:	60 93 c9 11 	sts	0x11C9, r22
  conv[2]=(xx/1000)%10+'0';
   14cc8:	c7 01       	movw	r24, r14
   14cca:	b6 01       	movw	r22, r12
   14ccc:	28 ee       	ldi	r18, 0xE8	; 232
   14cce:	33 e0       	ldi	r19, 0x03	; 3
   14cd0:	40 e0       	ldi	r20, 0x00	; 0
   14cd2:	50 e0       	ldi	r21, 0x00	; 0
   14cd4:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14cd8:	ca 01       	movw	r24, r20
   14cda:	b9 01       	movw	r22, r18
   14cdc:	a5 01       	movw	r20, r10
   14cde:	94 01       	movw	r18, r8
   14ce0:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14ce4:	60 5d       	subi	r22, 0xD0	; 208
   14ce6:	60 93 ca 11 	sts	0x11CA, r22
  conv[3]=(xx/100)%10+'0';
   14cea:	c7 01       	movw	r24, r14
   14cec:	b6 01       	movw	r22, r12
   14cee:	24 e6       	ldi	r18, 0x64	; 100
   14cf0:	30 e0       	ldi	r19, 0x00	; 0
   14cf2:	40 e0       	ldi	r20, 0x00	; 0
   14cf4:	50 e0       	ldi	r21, 0x00	; 0
   14cf6:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14cfa:	ca 01       	movw	r24, r20
   14cfc:	b9 01       	movw	r22, r18
   14cfe:	a5 01       	movw	r20, r10
   14d00:	94 01       	movw	r18, r8
   14d02:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14d06:	60 5d       	subi	r22, 0xD0	; 208
   14d08:	60 93 cb 11 	sts	0x11CB, r22
  conv[4]='.';
   14d0c:	8e e2       	ldi	r24, 0x2E	; 46
   14d0e:	80 93 cc 11 	sts	0x11CC, r24
  conv[5]=(xx/10)%10+'0';
   14d12:	c7 01       	movw	r24, r14
   14d14:	b6 01       	movw	r22, r12
   14d16:	a5 01       	movw	r20, r10
   14d18:	94 01       	movw	r18, r8
   14d1a:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14d1e:	c6 2f       	mov	r28, r22
   14d20:	ca 01       	movw	r24, r20
   14d22:	b9 01       	movw	r22, r18
   14d24:	a5 01       	movw	r20, r10
   14d26:	94 01       	movw	r18, r8
   14d28:	0e 94 d1 c0 	call	0x181a2	; 0x181a2 <__divmodsi4>
   14d2c:	60 5d       	subi	r22, 0xD0	; 208
   14d2e:	60 93 cd 11 	sts	0x11CD, r22
  conv[6]=(xx)%10+'0';
   14d32:	c0 5d       	subi	r28, 0xD0	; 208
   14d34:	c0 93 ce 11 	sts	0x11CE, r28
  conv[7]=0;
   14d38:	10 92 cf 11 	sts	0x11CF, r1
  return conv;
}
   14d3c:	88 ec       	ldi	r24, 0xC8	; 200
   14d3e:	91 e1       	ldi	r25, 0x11	; 17
   14d40:	cf 91       	pop	r28
   14d42:	ff 90       	pop	r15
   14d44:	ef 90       	pop	r14
   14d46:	df 90       	pop	r13
   14d48:	cf 90       	pop	r12
   14d4a:	bf 90       	pop	r11
   14d4c:	af 90       	pop	r10
   14d4e:	9f 90       	pop	r9
   14d50:	8f 90       	pop	r8
   14d52:	08 95       	ret

00014d54 <_ZL23lcd_control_motion_menuv>:
#endif
    END_MENU();
}

static void lcd_control_motion_menu()
{
   14d54:	2f 92       	push	r2
   14d56:	3f 92       	push	r3
   14d58:	4f 92       	push	r4
   14d5a:	5f 92       	push	r5
   14d5c:	6f 92       	push	r6
   14d5e:	7f 92       	push	r7
   14d60:	8f 92       	push	r8
   14d62:	af 92       	push	r10
   14d64:	bf 92       	push	r11
   14d66:	cf 92       	push	r12
   14d68:	df 92       	push	r13
   14d6a:	ef 92       	push	r14
   14d6c:	ff 92       	push	r15
   14d6e:	0f 93       	push	r16
   14d70:	1f 93       	push	r17
   14d72:	cf 93       	push	r28
   14d74:	df 93       	push	r29
   14d76:	cd b7       	in	r28, 0x3d	; 61
   14d78:	de b7       	in	r29, 0x3e	; 62
   14d7a:	a0 97       	sbiw	r28, 0x20	; 32
   14d7c:	0f b6       	in	r0, 0x3f	; 63
   14d7e:	f8 94       	cli
   14d80:	de bf       	out	0x3e, r29	; 62
   14d82:	0f be       	out	0x3f, r0	; 63
   14d84:	cd bf       	out	0x3d, r28	; 61
    START_MENU();
   14d86:	80 91 f4 11 	lds	r24, 0x11F4
   14d8a:	90 91 f5 11 	lds	r25, 0x11F5
   14d8e:	a0 91 f6 11 	lds	r26, 0x11F6
   14d92:	b0 91 f7 11 	lds	r27, 0x11F7
   14d96:	81 30       	cpi	r24, 0x01	; 1
   14d98:	90 48       	sbci	r25, 0x80	; 128
   14d9a:	a1 05       	cpc	r26, r1
   14d9c:	b1 05       	cpc	r27, r1
   14d9e:	40 f0       	brcs	.+16     	; 0x14db0 <_ZL23lcd_control_motion_menuv+0x5c>
   14da0:	10 92 f4 11 	sts	0x11F4, r1
   14da4:	10 92 f5 11 	sts	0x11F5, r1
   14da8:	10 92 f6 11 	sts	0x11F6, r1
   14dac:	10 92 f7 11 	sts	0x11F7, r1
   14db0:	60 91 f4 11 	lds	r22, 0x11F4
   14db4:	70 91 f5 11 	lds	r23, 0x11F5
   14db8:	80 91 f6 11 	lds	r24, 0x11F6
   14dbc:	90 91 f7 11 	lds	r25, 0x11F7
   14dc0:	25 e0       	ldi	r18, 0x05	; 5
   14dc2:	30 e0       	ldi	r19, 0x00	; 0
   14dc4:	40 e0       	ldi	r20, 0x00	; 0
   14dc6:	50 e0       	ldi	r21, 0x00	; 0
   14dc8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14dcc:	80 91 fd 11 	lds	r24, 0x11FD
   14dd0:	90 e0       	ldi	r25, 0x00	; 0
   14dd2:	a0 e0       	ldi	r26, 0x00	; 0
   14dd4:	b0 e0       	ldi	r27, 0x00	; 0
   14dd6:	28 17       	cp	r18, r24
   14dd8:	39 07       	cpc	r19, r25
   14dda:	4a 07       	cpc	r20, r26
   14ddc:	5b 07       	cpc	r21, r27
   14dde:	10 f4       	brcc	.+4      	; 0x14de4 <_ZL23lcd_control_motion_menuv+0x90>
   14de0:	20 93 fd 11 	sts	0x11FD, r18
   14de4:	00 91 fd 11 	lds	r16, 0x11FD
   14de8:	80 90 fe 11 	lds	r8, 0x11FE
   14dec:	82 fa       	bst	r8, 2
   14dee:	88 24       	eor	r8, r8
   14df0:	80 f8       	bld	r8, 0
   14df2:	10 e0       	ldi	r17, 0x00	; 0
    MENU_ITEM(back, MSG_CONTROL, lcd_control_menu);
    MENU_ITEM_EDIT(float5, MSG_ACC, &acceleration, 500, 99000);
    MENU_ITEM_EDIT(float3, MSG_VXY_JERK, &max_xy_jerk, 1, 990);
   14df4:	0f 2e       	mov	r0, r31
   14df6:	f5 e0       	ldi	r31, 0x05	; 5
   14df8:	4f 2e       	mov	r4, r31
   14dfa:	51 2c       	mov	r5, r1
   14dfc:	61 2c       	mov	r6, r1
   14dfe:	71 2c       	mov	r7, r1
   14e00:	f0 2d       	mov	r31, r0
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_Y, &max_feedrate[Y_AXIS], 1, 999);
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_Z, &max_feedrate[Z_AXIS], 1, 999);
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_E, &max_feedrate[E_AXIS], 1, 999);
    MENU_ITEM_EDIT(float3, MSG_VMIN, &minimumfeedrate, 0, 999);
    MENU_ITEM_EDIT(float3, MSG_VTRAV_MIN, &mintravelfeedrate, 0, 999);
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_X, &max_acceleration_units_per_sq_second[X_AXIS], 100, 99000, reset_acceleration_rates);
   14e02:	0f 2e       	mov	r0, r31
   14e04:	f6 e6       	ldi	r31, 0x66	; 102
   14e06:	cf 2e       	mov	r12, r31
   14e08:	fe e0       	ldi	r31, 0x0E	; 14
   14e0a:	df 2e       	mov	r13, r31
   14e0c:	f0 2d       	mov	r31, r0
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_Y, &max_acceleration_units_per_sq_second[Y_AXIS], 100, 99000, reset_acceleration_rates);
   14e0e:	0f 2e       	mov	r0, r31
   14e10:	fa e6       	ldi	r31, 0x6A	; 106
   14e12:	ef 2e       	mov	r14, r31
   14e14:	fe e0       	ldi	r31, 0x0E	; 14
   14e16:	ff 2e       	mov	r15, r31
   14e18:	f0 2d       	mov	r31, r0
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_Z, &max_acceleration_units_per_sq_second[Z_AXIS], 100, 99000, reset_acceleration_rates);
   14e1a:	0f 2e       	mov	r0, r31
   14e1c:	fe e6       	ldi	r31, 0x6E	; 110
   14e1e:	2f 2e       	mov	r2, r31
   14e20:	fe e0       	ldi	r31, 0x0E	; 14
   14e22:	3f 2e       	mov	r3, r31
   14e24:	f0 2d       	mov	r31, r0
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_E, &max_acceleration_units_per_sq_second[E_AXIS], 100, 99000, reset_acceleration_rates);
   14e26:	0f 2e       	mov	r0, r31
   14e28:	f2 e7       	ldi	r31, 0x72	; 114
   14e2a:	af 2e       	mov	r10, r31
   14e2c:	fe e0       	ldi	r31, 0x0E	; 14
   14e2e:	bf 2e       	mov	r11, r31
   14e30:	f0 2d       	mov	r31, r0
}

static void lcd_control_motion_menu()
{
    START_MENU();
    MENU_ITEM(back, MSG_CONTROL, lcd_control_menu);
   14e32:	01 11       	cpse	r16, r1
   14e34:	36 c0       	rjmp	.+108    	; 0x14ea2 <_ZL23lcd_control_motion_menuv+0x14e>
   14e36:	80 91 64 02 	lds	r24, 0x0264
   14e3a:	88 23       	and	r24, r24
   14e3c:	d9 f0       	breq	.+54     	; 0x14e74 <_ZL23lcd_control_motion_menuv+0x120>
   14e3e:	80 91 f4 11 	lds	r24, 0x11F4
   14e42:	90 91 f5 11 	lds	r25, 0x11F5
   14e46:	a0 91 f6 11 	lds	r26, 0x11F6
   14e4a:	b0 91 f7 11 	lds	r27, 0x11F7
   14e4e:	05 97       	sbiw	r24, 0x05	; 5
   14e50:	a1 05       	cpc	r26, r1
   14e52:	b1 05       	cpc	r27, r1
   14e54:	40 f4       	brcc	.+16     	; 0x14e66 <_ZL23lcd_control_motion_menuv+0x112>
   14e56:	23 e0       	ldi	r18, 0x03	; 3
   14e58:	43 e0       	ldi	r20, 0x03	; 3
   14e5a:	6b ed       	ldi	r22, 0xDB	; 219
   14e5c:	72 e1       	ldi	r23, 0x12	; 18
   14e5e:	81 2f       	mov	r24, r17
   14e60:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   14e64:	07 c0       	rjmp	.+14     	; 0x14e74 <_ZL23lcd_control_motion_menuv+0x120>
   14e66:	23 e0       	ldi	r18, 0x03	; 3
   14e68:	40 e2       	ldi	r20, 0x20	; 32
   14e6a:	6b ed       	ldi	r22, 0xDB	; 219
   14e6c:	72 e1       	ldi	r23, 0x12	; 18
   14e6e:	81 2f       	mov	r24, r17
   14e70:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   14e74:	88 20       	and	r8, r8
   14e76:	09 f4       	brne	.+2      	; 0x14e7a <_ZL23lcd_control_motion_menuv+0x126>
   14e78:	be c0       	rjmp	.+380    	; 0x14ff6 <_ZL23lcd_control_motion_menuv+0x2a2>
   14e7a:	80 91 f4 11 	lds	r24, 0x11F4
   14e7e:	90 91 f5 11 	lds	r25, 0x11F5
   14e82:	a0 91 f6 11 	lds	r26, 0x11F6
   14e86:	b0 91 f7 11 	lds	r27, 0x11F7
   14e8a:	05 97       	sbiw	r24, 0x05	; 5
   14e8c:	a1 05       	cpc	r26, r1
   14e8e:	b1 05       	cpc	r27, r1
   14e90:	08 f0       	brcs	.+2      	; 0x14e94 <_ZL23lcd_control_motion_menuv+0x140>
   14e92:	b1 c0       	rjmp	.+354    	; 0x14ff6 <_ZL23lcd_control_motion_menuv+0x2a2>
   14e94:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   14e98:	81 e6       	ldi	r24, 0x61	; 97
   14e9a:	93 e8       	ldi	r25, 0x83	; 131
   14e9c:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   14ea0:	04 c7       	rjmp	.+3592   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float5, MSG_ACC, &acceleration, 500, 99000);
   14ea2:	01 30       	cpi	r16, 0x01	; 1
   14ea4:	09 f0       	breq	.+2      	; 0x14ea8 <_ZL23lcd_control_motion_menuv+0x154>
   14ea6:	51 c0       	rjmp	.+162    	; 0x14f4a <_ZL23lcd_control_motion_menuv+0x1f6>
   14ea8:	80 91 64 02 	lds	r24, 0x0264
   14eac:	88 23       	and	r24, r24
   14eae:	31 f1       	breq	.+76     	; 0x14efc <_ZL23lcd_control_motion_menuv+0x1a8>
   14eb0:	60 91 f4 11 	lds	r22, 0x11F4
   14eb4:	70 91 f5 11 	lds	r23, 0x11F5
   14eb8:	80 91 f6 11 	lds	r24, 0x11F6
   14ebc:	90 91 f7 11 	lds	r25, 0x11F7
   14ec0:	a3 01       	movw	r20, r6
   14ec2:	92 01       	movw	r18, r4
   14ec4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14ec8:	21 30       	cpi	r18, 0x01	; 1
   14eca:	31 05       	cpc	r19, r1
   14ecc:	41 05       	cpc	r20, r1
   14ece:	51 05       	cpc	r21, r1
   14ed0:	59 f4       	brne	.+22     	; 0x14ee8 <_ZL23lcd_control_motion_menuv+0x194>
   14ed2:	8e e5       	ldi	r24, 0x5E	; 94
   14ed4:	9e e0       	ldi	r25, 0x0E	; 14
   14ed6:	84 db       	rcall	.-2296   	; 0x145e0 <_Z7ftostr5RKf>
   14ed8:	9c 01       	movw	r18, r24
   14eda:	4e e3       	ldi	r20, 0x3E	; 62
   14edc:	63 ee       	ldi	r22, 0xE3	; 227
   14ede:	72 e1       	ldi	r23, 0x12	; 18
   14ee0:	81 2f       	mov	r24, r17
   14ee2:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   14ee6:	0a c0       	rjmp	.+20     	; 0x14efc <_ZL23lcd_control_motion_menuv+0x1a8>
   14ee8:	8e e5       	ldi	r24, 0x5E	; 94
   14eea:	9e e0       	ldi	r25, 0x0E	; 14
   14eec:	79 db       	rcall	.-2318   	; 0x145e0 <_Z7ftostr5RKf>
   14eee:	9c 01       	movw	r18, r24
   14ef0:	40 e2       	ldi	r20, 0x20	; 32
   14ef2:	63 ee       	ldi	r22, 0xE3	; 227
   14ef4:	72 e1       	ldi	r23, 0x12	; 18
   14ef6:	81 2f       	mov	r24, r17
   14ef8:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   14efc:	88 20       	and	r8, r8
   14efe:	09 f4       	brne	.+2      	; 0x14f02 <_ZL23lcd_control_motion_menuv+0x1ae>
   14f00:	ce c0       	rjmp	.+412    	; 0x1509e <_ZL23lcd_control_motion_menuv+0x34a>
   14f02:	60 91 f4 11 	lds	r22, 0x11F4
   14f06:	70 91 f5 11 	lds	r23, 0x11F5
   14f0a:	80 91 f6 11 	lds	r24, 0x11F6
   14f0e:	90 91 f7 11 	lds	r25, 0x11F7
   14f12:	a3 01       	movw	r20, r6
   14f14:	92 01       	movw	r18, r4
   14f16:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14f1a:	21 30       	cpi	r18, 0x01	; 1
   14f1c:	31 05       	cpc	r19, r1
   14f1e:	41 05       	cpc	r20, r1
   14f20:	51 05       	cpc	r21, r1
   14f22:	09 f0       	breq	.+2      	; 0x14f26 <_ZL23lcd_control_motion_menuv+0x1d2>
   14f24:	bc c0       	rjmp	.+376    	; 0x1509e <_ZL23lcd_control_motion_menuv+0x34a>
   14f26:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   14f2a:	e1 2c       	mov	r14, r1
   14f2c:	1c e5       	ldi	r17, 0x5C	; 92
   14f2e:	f1 2e       	mov	r15, r17
   14f30:	01 ec       	ldi	r16, 0xC1	; 193
   14f32:	17 e4       	ldi	r17, 0x47	; 71
   14f34:	20 e0       	ldi	r18, 0x00	; 0
   14f36:	30 e0       	ldi	r19, 0x00	; 0
   14f38:	4a ef       	ldi	r20, 0xFA	; 250
   14f3a:	53 e4       	ldi	r21, 0x43	; 67
   14f3c:	6e e5       	ldi	r22, 0x5E	; 94
   14f3e:	7e e0       	ldi	r23, 0x0E	; 14
   14f40:	89 ee       	ldi	r24, 0xE9	; 233
   14f42:	92 e1       	ldi	r25, 0x12	; 18
   14f44:	0e 94 6f 80 	call	0x100de	; 0x100de <_ZL31menu_action_setting_edit_float5PKcPfff>
   14f48:	b0 c6       	rjmp	.+3424   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VXY_JERK, &max_xy_jerk, 1, 990);
   14f4a:	02 30       	cpi	r16, 0x02	; 2
   14f4c:	09 f0       	breq	.+2      	; 0x14f50 <_ZL23lcd_control_motion_menuv+0x1fc>
   14f4e:	53 c0       	rjmp	.+166    	; 0x14ff6 <_ZL23lcd_control_motion_menuv+0x2a2>
   14f50:	80 91 64 02 	lds	r24, 0x0264
   14f54:	88 23       	and	r24, r24
   14f56:	41 f1       	breq	.+80     	; 0x14fa8 <_ZL23lcd_control_motion_menuv+0x254>
   14f58:	60 91 f4 11 	lds	r22, 0x11F4
   14f5c:	70 91 f5 11 	lds	r23, 0x11F5
   14f60:	80 91 f6 11 	lds	r24, 0x11F6
   14f64:	90 91 f7 11 	lds	r25, 0x11F7
   14f68:	a3 01       	movw	r20, r6
   14f6a:	92 01       	movw	r18, r4
   14f6c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14f70:	22 30       	cpi	r18, 0x02	; 2
   14f72:	31 05       	cpc	r19, r1
   14f74:	41 05       	cpc	r20, r1
   14f76:	51 05       	cpc	r21, r1
   14f78:	61 f4       	brne	.+24     	; 0x14f92 <_ZL23lcd_control_motion_menuv+0x23e>
   14f7a:	86 e5       	ldi	r24, 0x56	; 86
   14f7c:	9e e0       	ldi	r25, 0x0E	; 14
   14f7e:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   14f82:	9c 01       	movw	r18, r24
   14f84:	4e e3       	ldi	r20, 0x3E	; 62
   14f86:	6f ee       	ldi	r22, 0xEF	; 239
   14f88:	72 e1       	ldi	r23, 0x12	; 18
   14f8a:	81 2f       	mov	r24, r17
   14f8c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   14f90:	0b c0       	rjmp	.+22     	; 0x14fa8 <_ZL23lcd_control_motion_menuv+0x254>
   14f92:	86 e5       	ldi	r24, 0x56	; 86
   14f94:	9e e0       	ldi	r25, 0x0E	; 14
   14f96:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   14f9a:	9c 01       	movw	r18, r24
   14f9c:	40 e2       	ldi	r20, 0x20	; 32
   14f9e:	6f ee       	ldi	r22, 0xEF	; 239
   14fa0:	72 e1       	ldi	r23, 0x12	; 18
   14fa2:	81 2f       	mov	r24, r17
   14fa4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   14fa8:	88 20       	and	r8, r8
   14faa:	09 f4       	brne	.+2      	; 0x14fae <_ZL23lcd_control_motion_menuv+0x25a>
   14fac:	ce c0       	rjmp	.+412    	; 0x1514a <_ZL23lcd_control_motion_menuv+0x3f6>
   14fae:	60 91 f4 11 	lds	r22, 0x11F4
   14fb2:	70 91 f5 11 	lds	r23, 0x11F5
   14fb6:	80 91 f6 11 	lds	r24, 0x11F6
   14fba:	90 91 f7 11 	lds	r25, 0x11F7
   14fbe:	a3 01       	movw	r20, r6
   14fc0:	92 01       	movw	r18, r4
   14fc2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   14fc6:	22 30       	cpi	r18, 0x02	; 2
   14fc8:	31 05       	cpc	r19, r1
   14fca:	41 05       	cpc	r20, r1
   14fcc:	51 05       	cpc	r21, r1
   14fce:	09 f0       	breq	.+2      	; 0x14fd2 <_ZL23lcd_control_motion_menuv+0x27e>
   14fd0:	bc c0       	rjmp	.+376    	; 0x1514a <_ZL23lcd_control_motion_menuv+0x3f6>
   14fd2:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   14fd6:	e1 2c       	mov	r14, r1
   14fd8:	10 e8       	ldi	r17, 0x80	; 128
   14fda:	f1 2e       	mov	r15, r17
   14fdc:	07 e7       	ldi	r16, 0x77	; 119
   14fde:	14 e4       	ldi	r17, 0x44	; 68
   14fe0:	20 e0       	ldi	r18, 0x00	; 0
   14fe2:	30 e0       	ldi	r19, 0x00	; 0
   14fe4:	40 e8       	ldi	r20, 0x80	; 128
   14fe6:	5f e3       	ldi	r21, 0x3F	; 63
   14fe8:	66 e5       	ldi	r22, 0x56	; 86
   14fea:	7e e0       	ldi	r23, 0x0E	; 14
   14fec:	88 ef       	ldi	r24, 0xF8	; 248
   14fee:	92 e1       	ldi	r25, 0x12	; 18
   14ff0:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   14ff4:	5a c6       	rjmp	.+3252   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float52, MSG_VZ_JERK, &max_z_jerk, 0.1, 990);
   14ff6:	03 30       	cpi	r16, 0x03	; 3
   14ff8:	09 f0       	breq	.+2      	; 0x14ffc <_ZL23lcd_control_motion_menuv+0x2a8>
   14ffa:	51 c0       	rjmp	.+162    	; 0x1509e <_ZL23lcd_control_motion_menuv+0x34a>
   14ffc:	80 91 64 02 	lds	r24, 0x0264
   15000:	88 23       	and	r24, r24
   15002:	31 f1       	breq	.+76     	; 0x15050 <_ZL23lcd_control_motion_menuv+0x2fc>
   15004:	60 91 f4 11 	lds	r22, 0x11F4
   15008:	70 91 f5 11 	lds	r23, 0x11F5
   1500c:	80 91 f6 11 	lds	r24, 0x11F6
   15010:	90 91 f7 11 	lds	r25, 0x11F7
   15014:	a3 01       	movw	r20, r6
   15016:	92 01       	movw	r18, r4
   15018:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1501c:	23 30       	cpi	r18, 0x03	; 3
   1501e:	31 05       	cpc	r19, r1
   15020:	41 05       	cpc	r20, r1
   15022:	51 05       	cpc	r21, r1
   15024:	59 f4       	brne	.+22     	; 0x1503c <_ZL23lcd_control_motion_menuv+0x2e8>
   15026:	82 e5       	ldi	r24, 0x52	; 82
   15028:	9e e0       	ldi	r25, 0x0E	; 14
   1502a:	0a de       	rcall	.-1004   	; 0x14c40 <_Z8ftostr52RKf>
   1502c:	9c 01       	movw	r18, r24
   1502e:	4e e3       	ldi	r20, 0x3E	; 62
   15030:	61 e0       	ldi	r22, 0x01	; 1
   15032:	73 e1       	ldi	r23, 0x13	; 19
   15034:	81 2f       	mov	r24, r17
   15036:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1503a:	0a c0       	rjmp	.+20     	; 0x15050 <_ZL23lcd_control_motion_menuv+0x2fc>
   1503c:	82 e5       	ldi	r24, 0x52	; 82
   1503e:	9e e0       	ldi	r25, 0x0E	; 14
   15040:	ff dd       	rcall	.-1026   	; 0x14c40 <_Z8ftostr52RKf>
   15042:	9c 01       	movw	r18, r24
   15044:	40 e2       	ldi	r20, 0x20	; 32
   15046:	61 e0       	ldi	r22, 0x01	; 1
   15048:	73 e1       	ldi	r23, 0x13	; 19
   1504a:	81 2f       	mov	r24, r17
   1504c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15050:	88 20       	and	r8, r8
   15052:	09 f4       	brne	.+2      	; 0x15056 <_ZL23lcd_control_motion_menuv+0x302>
   15054:	d0 c0       	rjmp	.+416    	; 0x151f6 <_ZL23lcd_control_motion_menuv+0x4a2>
   15056:	60 91 f4 11 	lds	r22, 0x11F4
   1505a:	70 91 f5 11 	lds	r23, 0x11F5
   1505e:	80 91 f6 11 	lds	r24, 0x11F6
   15062:	90 91 f7 11 	lds	r25, 0x11F7
   15066:	a3 01       	movw	r20, r6
   15068:	92 01       	movw	r18, r4
   1506a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1506e:	23 30       	cpi	r18, 0x03	; 3
   15070:	31 05       	cpc	r19, r1
   15072:	41 05       	cpc	r20, r1
   15074:	51 05       	cpc	r21, r1
   15076:	09 f0       	breq	.+2      	; 0x1507a <_ZL23lcd_control_motion_menuv+0x326>
   15078:	be c0       	rjmp	.+380    	; 0x151f6 <_ZL23lcd_control_motion_menuv+0x4a2>
   1507a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1507e:	e1 2c       	mov	r14, r1
   15080:	10 e8       	ldi	r17, 0x80	; 128
   15082:	f1 2e       	mov	r15, r17
   15084:	07 e7       	ldi	r16, 0x77	; 119
   15086:	14 e4       	ldi	r17, 0x44	; 68
   15088:	2d ec       	ldi	r18, 0xCD	; 205
   1508a:	3c ec       	ldi	r19, 0xCC	; 204
   1508c:	4c ec       	ldi	r20, 0xCC	; 204
   1508e:	5d e3       	ldi	r21, 0x3D	; 61
   15090:	62 e5       	ldi	r22, 0x52	; 82
   15092:	7e e0       	ldi	r23, 0x0E	; 14
   15094:	89 e0       	ldi	r24, 0x09	; 9
   15096:	93 e1       	ldi	r25, 0x13	; 19
   15098:	0e 94 5d 81 	call	0x102ba	; 0x102ba <_ZL32menu_action_setting_edit_float52PKcPfff>
   1509c:	06 c6       	rjmp	.+3084   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VE_JERK, &max_e_jerk, 1, 990);
   1509e:	04 30       	cpi	r16, 0x04	; 4
   150a0:	09 f0       	breq	.+2      	; 0x150a4 <_ZL23lcd_control_motion_menuv+0x350>
   150a2:	53 c0       	rjmp	.+166    	; 0x1514a <_ZL23lcd_control_motion_menuv+0x3f6>
   150a4:	80 91 64 02 	lds	r24, 0x0264
   150a8:	88 23       	and	r24, r24
   150aa:	41 f1       	breq	.+80     	; 0x150fc <_ZL23lcd_control_motion_menuv+0x3a8>
   150ac:	60 91 f4 11 	lds	r22, 0x11F4
   150b0:	70 91 f5 11 	lds	r23, 0x11F5
   150b4:	80 91 f6 11 	lds	r24, 0x11F6
   150b8:	90 91 f7 11 	lds	r25, 0x11F7
   150bc:	a3 01       	movw	r20, r6
   150be:	92 01       	movw	r18, r4
   150c0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   150c4:	24 30       	cpi	r18, 0x04	; 4
   150c6:	31 05       	cpc	r19, r1
   150c8:	41 05       	cpc	r20, r1
   150ca:	51 05       	cpc	r21, r1
   150cc:	61 f4       	brne	.+24     	; 0x150e6 <_ZL23lcd_control_motion_menuv+0x392>
   150ce:	8e e4       	ldi	r24, 0x4E	; 78
   150d0:	9e e0       	ldi	r25, 0x0E	; 14
   150d2:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   150d6:	9c 01       	movw	r18, r24
   150d8:	4e e3       	ldi	r20, 0x3E	; 62
   150da:	61 e1       	ldi	r22, 0x11	; 17
   150dc:	73 e1       	ldi	r23, 0x13	; 19
   150de:	81 2f       	mov	r24, r17
   150e0:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   150e4:	0b c0       	rjmp	.+22     	; 0x150fc <_ZL23lcd_control_motion_menuv+0x3a8>
   150e6:	8e e4       	ldi	r24, 0x4E	; 78
   150e8:	9e e0       	ldi	r25, 0x0E	; 14
   150ea:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   150ee:	9c 01       	movw	r18, r24
   150f0:	40 e2       	ldi	r20, 0x20	; 32
   150f2:	61 e1       	ldi	r22, 0x11	; 17
   150f4:	73 e1       	ldi	r23, 0x13	; 19
   150f6:	81 2f       	mov	r24, r17
   150f8:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   150fc:	88 20       	and	r8, r8
   150fe:	09 f4       	brne	.+2      	; 0x15102 <_ZL23lcd_control_motion_menuv+0x3ae>
   15100:	d0 c0       	rjmp	.+416    	; 0x152a2 <_ZL23lcd_control_motion_menuv+0x54e>
   15102:	60 91 f4 11 	lds	r22, 0x11F4
   15106:	70 91 f5 11 	lds	r23, 0x11F5
   1510a:	80 91 f6 11 	lds	r24, 0x11F6
   1510e:	90 91 f7 11 	lds	r25, 0x11F7
   15112:	a3 01       	movw	r20, r6
   15114:	92 01       	movw	r18, r4
   15116:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1511a:	24 30       	cpi	r18, 0x04	; 4
   1511c:	31 05       	cpc	r19, r1
   1511e:	41 05       	cpc	r20, r1
   15120:	51 05       	cpc	r21, r1
   15122:	09 f0       	breq	.+2      	; 0x15126 <_ZL23lcd_control_motion_menuv+0x3d2>
   15124:	be c0       	rjmp	.+380    	; 0x152a2 <_ZL23lcd_control_motion_menuv+0x54e>
   15126:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1512a:	e1 2c       	mov	r14, r1
   1512c:	10 e8       	ldi	r17, 0x80	; 128
   1512e:	f1 2e       	mov	r15, r17
   15130:	07 e7       	ldi	r16, 0x77	; 119
   15132:	14 e4       	ldi	r17, 0x44	; 68
   15134:	20 e0       	ldi	r18, 0x00	; 0
   15136:	30 e0       	ldi	r19, 0x00	; 0
   15138:	40 e8       	ldi	r20, 0x80	; 128
   1513a:	5f e3       	ldi	r21, 0x3F	; 63
   1513c:	6e e4       	ldi	r22, 0x4E	; 78
   1513e:	7e e0       	ldi	r23, 0x0E	; 14
   15140:	89 e1       	ldi	r24, 0x19	; 25
   15142:	93 e1       	ldi	r25, 0x13	; 19
   15144:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   15148:	b0 c5       	rjmp	.+2912   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_X, &max_feedrate[X_AXIS], 1, 999);
   1514a:	05 30       	cpi	r16, 0x05	; 5
   1514c:	09 f0       	breq	.+2      	; 0x15150 <_ZL23lcd_control_motion_menuv+0x3fc>
   1514e:	53 c0       	rjmp	.+166    	; 0x151f6 <_ZL23lcd_control_motion_menuv+0x4a2>
   15150:	80 91 64 02 	lds	r24, 0x0264
   15154:	88 23       	and	r24, r24
   15156:	41 f1       	breq	.+80     	; 0x151a8 <_ZL23lcd_control_motion_menuv+0x454>
   15158:	60 91 f4 11 	lds	r22, 0x11F4
   1515c:	70 91 f5 11 	lds	r23, 0x11F5
   15160:	80 91 f6 11 	lds	r24, 0x11F6
   15164:	90 91 f7 11 	lds	r25, 0x11F7
   15168:	a3 01       	movw	r20, r6
   1516a:	92 01       	movw	r18, r4
   1516c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15170:	25 30       	cpi	r18, 0x05	; 5
   15172:	31 05       	cpc	r19, r1
   15174:	41 05       	cpc	r20, r1
   15176:	51 05       	cpc	r21, r1
   15178:	61 f4       	brne	.+24     	; 0x15192 <_ZL23lcd_control_motion_menuv+0x43e>
   1517a:	86 e8       	ldi	r24, 0x86	; 134
   1517c:	9e e0       	ldi	r25, 0x0E	; 14
   1517e:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   15182:	9c 01       	movw	r18, r24
   15184:	4e e3       	ldi	r20, 0x3E	; 62
   15186:	61 e2       	ldi	r22, 0x21	; 33
   15188:	73 e1       	ldi	r23, 0x13	; 19
   1518a:	81 2f       	mov	r24, r17
   1518c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15190:	0b c0       	rjmp	.+22     	; 0x151a8 <_ZL23lcd_control_motion_menuv+0x454>
   15192:	86 e8       	ldi	r24, 0x86	; 134
   15194:	9e e0       	ldi	r25, 0x0E	; 14
   15196:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   1519a:	9c 01       	movw	r18, r24
   1519c:	40 e2       	ldi	r20, 0x20	; 32
   1519e:	61 e2       	ldi	r22, 0x21	; 33
   151a0:	73 e1       	ldi	r23, 0x13	; 19
   151a2:	81 2f       	mov	r24, r17
   151a4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   151a8:	88 20       	and	r8, r8
   151aa:	09 f4       	brne	.+2      	; 0x151ae <_ZL23lcd_control_motion_menuv+0x45a>
   151ac:	d0 c0       	rjmp	.+416    	; 0x1534e <_ZL23lcd_control_motion_menuv+0x5fa>
   151ae:	60 91 f4 11 	lds	r22, 0x11F4
   151b2:	70 91 f5 11 	lds	r23, 0x11F5
   151b6:	80 91 f6 11 	lds	r24, 0x11F6
   151ba:	90 91 f7 11 	lds	r25, 0x11F7
   151be:	a3 01       	movw	r20, r6
   151c0:	92 01       	movw	r18, r4
   151c2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   151c6:	25 30       	cpi	r18, 0x05	; 5
   151c8:	31 05       	cpc	r19, r1
   151ca:	41 05       	cpc	r20, r1
   151cc:	51 05       	cpc	r21, r1
   151ce:	09 f0       	breq	.+2      	; 0x151d2 <_ZL23lcd_control_motion_menuv+0x47e>
   151d0:	be c0       	rjmp	.+380    	; 0x1534e <_ZL23lcd_control_motion_menuv+0x5fa>
   151d2:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   151d6:	e1 2c       	mov	r14, r1
   151d8:	10 ec       	ldi	r17, 0xC0	; 192
   151da:	f1 2e       	mov	r15, r17
   151dc:	09 e7       	ldi	r16, 0x79	; 121
   151de:	14 e4       	ldi	r17, 0x44	; 68
   151e0:	20 e0       	ldi	r18, 0x00	; 0
   151e2:	30 e0       	ldi	r19, 0x00	; 0
   151e4:	40 e8       	ldi	r20, 0x80	; 128
   151e6:	5f e3       	ldi	r21, 0x3F	; 63
   151e8:	66 e8       	ldi	r22, 0x86	; 134
   151ea:	7e e0       	ldi	r23, 0x0E	; 14
   151ec:	88 e2       	ldi	r24, 0x28	; 40
   151ee:	93 e1       	ldi	r25, 0x13	; 19
   151f0:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   151f4:	5a c5       	rjmp	.+2740   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_Y, &max_feedrate[Y_AXIS], 1, 999);
   151f6:	06 30       	cpi	r16, 0x06	; 6
   151f8:	09 f0       	breq	.+2      	; 0x151fc <_ZL23lcd_control_motion_menuv+0x4a8>
   151fa:	53 c0       	rjmp	.+166    	; 0x152a2 <_ZL23lcd_control_motion_menuv+0x54e>
   151fc:	80 91 64 02 	lds	r24, 0x0264
   15200:	88 23       	and	r24, r24
   15202:	41 f1       	breq	.+80     	; 0x15254 <_ZL23lcd_control_motion_menuv+0x500>
   15204:	60 91 f4 11 	lds	r22, 0x11F4
   15208:	70 91 f5 11 	lds	r23, 0x11F5
   1520c:	80 91 f6 11 	lds	r24, 0x11F6
   15210:	90 91 f7 11 	lds	r25, 0x11F7
   15214:	a3 01       	movw	r20, r6
   15216:	92 01       	movw	r18, r4
   15218:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1521c:	26 30       	cpi	r18, 0x06	; 6
   1521e:	31 05       	cpc	r19, r1
   15220:	41 05       	cpc	r20, r1
   15222:	51 05       	cpc	r21, r1
   15224:	61 f4       	brne	.+24     	; 0x1523e <_ZL23lcd_control_motion_menuv+0x4ea>
   15226:	8a e8       	ldi	r24, 0x8A	; 138
   15228:	9e e0       	ldi	r25, 0x0E	; 14
   1522a:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   1522e:	9c 01       	movw	r18, r24
   15230:	4e e3       	ldi	r20, 0x3E	; 62
   15232:	6f e2       	ldi	r22, 0x2F	; 47
   15234:	73 e1       	ldi	r23, 0x13	; 19
   15236:	81 2f       	mov	r24, r17
   15238:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1523c:	0b c0       	rjmp	.+22     	; 0x15254 <_ZL23lcd_control_motion_menuv+0x500>
   1523e:	8a e8       	ldi	r24, 0x8A	; 138
   15240:	9e e0       	ldi	r25, 0x0E	; 14
   15242:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   15246:	9c 01       	movw	r18, r24
   15248:	40 e2       	ldi	r20, 0x20	; 32
   1524a:	6f e2       	ldi	r22, 0x2F	; 47
   1524c:	73 e1       	ldi	r23, 0x13	; 19
   1524e:	81 2f       	mov	r24, r17
   15250:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15254:	88 20       	and	r8, r8
   15256:	09 f4       	brne	.+2      	; 0x1525a <_ZL23lcd_control_motion_menuv+0x506>
   15258:	d0 c0       	rjmp	.+416    	; 0x153fa <_ZL23lcd_control_motion_menuv+0x6a6>
   1525a:	60 91 f4 11 	lds	r22, 0x11F4
   1525e:	70 91 f5 11 	lds	r23, 0x11F5
   15262:	80 91 f6 11 	lds	r24, 0x11F6
   15266:	90 91 f7 11 	lds	r25, 0x11F7
   1526a:	a3 01       	movw	r20, r6
   1526c:	92 01       	movw	r18, r4
   1526e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15272:	26 30       	cpi	r18, 0x06	; 6
   15274:	31 05       	cpc	r19, r1
   15276:	41 05       	cpc	r20, r1
   15278:	51 05       	cpc	r21, r1
   1527a:	09 f0       	breq	.+2      	; 0x1527e <_ZL23lcd_control_motion_menuv+0x52a>
   1527c:	be c0       	rjmp	.+380    	; 0x153fa <_ZL23lcd_control_motion_menuv+0x6a6>
   1527e:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15282:	e1 2c       	mov	r14, r1
   15284:	10 ec       	ldi	r17, 0xC0	; 192
   15286:	f1 2e       	mov	r15, r17
   15288:	09 e7       	ldi	r16, 0x79	; 121
   1528a:	14 e4       	ldi	r17, 0x44	; 68
   1528c:	20 e0       	ldi	r18, 0x00	; 0
   1528e:	30 e0       	ldi	r19, 0x00	; 0
   15290:	40 e8       	ldi	r20, 0x80	; 128
   15292:	5f e3       	ldi	r21, 0x3F	; 63
   15294:	6a e8       	ldi	r22, 0x8A	; 138
   15296:	7e e0       	ldi	r23, 0x0E	; 14
   15298:	86 e3       	ldi	r24, 0x36	; 54
   1529a:	93 e1       	ldi	r25, 0x13	; 19
   1529c:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   152a0:	04 c5       	rjmp	.+2568   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_Z, &max_feedrate[Z_AXIS], 1, 999);
   152a2:	07 30       	cpi	r16, 0x07	; 7
   152a4:	09 f0       	breq	.+2      	; 0x152a8 <_ZL23lcd_control_motion_menuv+0x554>
   152a6:	53 c0       	rjmp	.+166    	; 0x1534e <_ZL23lcd_control_motion_menuv+0x5fa>
   152a8:	80 91 64 02 	lds	r24, 0x0264
   152ac:	88 23       	and	r24, r24
   152ae:	41 f1       	breq	.+80     	; 0x15300 <_ZL23lcd_control_motion_menuv+0x5ac>
   152b0:	60 91 f4 11 	lds	r22, 0x11F4
   152b4:	70 91 f5 11 	lds	r23, 0x11F5
   152b8:	80 91 f6 11 	lds	r24, 0x11F6
   152bc:	90 91 f7 11 	lds	r25, 0x11F7
   152c0:	a3 01       	movw	r20, r6
   152c2:	92 01       	movw	r18, r4
   152c4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   152c8:	27 30       	cpi	r18, 0x07	; 7
   152ca:	31 05       	cpc	r19, r1
   152cc:	41 05       	cpc	r20, r1
   152ce:	51 05       	cpc	r21, r1
   152d0:	61 f4       	brne	.+24     	; 0x152ea <_ZL23lcd_control_motion_menuv+0x596>
   152d2:	8e e8       	ldi	r24, 0x8E	; 142
   152d4:	9e e0       	ldi	r25, 0x0E	; 14
   152d6:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   152da:	9c 01       	movw	r18, r24
   152dc:	4e e3       	ldi	r20, 0x3E	; 62
   152de:	6d e3       	ldi	r22, 0x3D	; 61
   152e0:	73 e1       	ldi	r23, 0x13	; 19
   152e2:	81 2f       	mov	r24, r17
   152e4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   152e8:	0b c0       	rjmp	.+22     	; 0x15300 <_ZL23lcd_control_motion_menuv+0x5ac>
   152ea:	8e e8       	ldi	r24, 0x8E	; 142
   152ec:	9e e0       	ldi	r25, 0x0E	; 14
   152ee:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   152f2:	9c 01       	movw	r18, r24
   152f4:	40 e2       	ldi	r20, 0x20	; 32
   152f6:	6d e3       	ldi	r22, 0x3D	; 61
   152f8:	73 e1       	ldi	r23, 0x13	; 19
   152fa:	81 2f       	mov	r24, r17
   152fc:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15300:	88 20       	and	r8, r8
   15302:	09 f4       	brne	.+2      	; 0x15306 <_ZL23lcd_control_motion_menuv+0x5b2>
   15304:	cf c0       	rjmp	.+414    	; 0x154a4 <_ZL23lcd_control_motion_menuv+0x750>
   15306:	60 91 f4 11 	lds	r22, 0x11F4
   1530a:	70 91 f5 11 	lds	r23, 0x11F5
   1530e:	80 91 f6 11 	lds	r24, 0x11F6
   15312:	90 91 f7 11 	lds	r25, 0x11F7
   15316:	a3 01       	movw	r20, r6
   15318:	92 01       	movw	r18, r4
   1531a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1531e:	27 30       	cpi	r18, 0x07	; 7
   15320:	31 05       	cpc	r19, r1
   15322:	41 05       	cpc	r20, r1
   15324:	51 05       	cpc	r21, r1
   15326:	09 f0       	breq	.+2      	; 0x1532a <_ZL23lcd_control_motion_menuv+0x5d6>
   15328:	bd c0       	rjmp	.+378    	; 0x154a4 <_ZL23lcd_control_motion_menuv+0x750>
   1532a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1532e:	e1 2c       	mov	r14, r1
   15330:	10 ec       	ldi	r17, 0xC0	; 192
   15332:	f1 2e       	mov	r15, r17
   15334:	09 e7       	ldi	r16, 0x79	; 121
   15336:	14 e4       	ldi	r17, 0x44	; 68
   15338:	20 e0       	ldi	r18, 0x00	; 0
   1533a:	30 e0       	ldi	r19, 0x00	; 0
   1533c:	40 e8       	ldi	r20, 0x80	; 128
   1533e:	5f e3       	ldi	r21, 0x3F	; 63
   15340:	6e e8       	ldi	r22, 0x8E	; 142
   15342:	7e e0       	ldi	r23, 0x0E	; 14
   15344:	84 e4       	ldi	r24, 0x44	; 68
   15346:	93 e1       	ldi	r25, 0x13	; 19
   15348:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   1534c:	ae c4       	rjmp	.+2396   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VMAX MSG_E, &max_feedrate[E_AXIS], 1, 999);
   1534e:	08 30       	cpi	r16, 0x08	; 8
   15350:	09 f0       	breq	.+2      	; 0x15354 <_ZL23lcd_control_motion_menuv+0x600>
   15352:	53 c0       	rjmp	.+166    	; 0x153fa <_ZL23lcd_control_motion_menuv+0x6a6>
   15354:	80 91 64 02 	lds	r24, 0x0264
   15358:	88 23       	and	r24, r24
   1535a:	41 f1       	breq	.+80     	; 0x153ac <_ZL23lcd_control_motion_menuv+0x658>
   1535c:	60 91 f4 11 	lds	r22, 0x11F4
   15360:	70 91 f5 11 	lds	r23, 0x11F5
   15364:	80 91 f6 11 	lds	r24, 0x11F6
   15368:	90 91 f7 11 	lds	r25, 0x11F7
   1536c:	a3 01       	movw	r20, r6
   1536e:	92 01       	movw	r18, r4
   15370:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15374:	28 30       	cpi	r18, 0x08	; 8
   15376:	31 05       	cpc	r19, r1
   15378:	41 05       	cpc	r20, r1
   1537a:	51 05       	cpc	r21, r1
   1537c:	61 f4       	brne	.+24     	; 0x15396 <_ZL23lcd_control_motion_menuv+0x642>
   1537e:	82 e9       	ldi	r24, 0x92	; 146
   15380:	9e e0       	ldi	r25, 0x0E	; 14
   15382:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   15386:	9c 01       	movw	r18, r24
   15388:	4e e3       	ldi	r20, 0x3E	; 62
   1538a:	6b e4       	ldi	r22, 0x4B	; 75
   1538c:	73 e1       	ldi	r23, 0x13	; 19
   1538e:	81 2f       	mov	r24, r17
   15390:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15394:	0b c0       	rjmp	.+22     	; 0x153ac <_ZL23lcd_control_motion_menuv+0x658>
   15396:	82 e9       	ldi	r24, 0x92	; 146
   15398:	9e e0       	ldi	r25, 0x0E	; 14
   1539a:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   1539e:	9c 01       	movw	r18, r24
   153a0:	40 e2       	ldi	r20, 0x20	; 32
   153a2:	6b e4       	ldi	r22, 0x4B	; 75
   153a4:	73 e1       	ldi	r23, 0x13	; 19
   153a6:	81 2f       	mov	r24, r17
   153a8:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   153ac:	88 20       	and	r8, r8
   153ae:	09 f4       	brne	.+2      	; 0x153b2 <_ZL23lcd_control_motion_menuv+0x65e>
   153b0:	ce c0       	rjmp	.+412    	; 0x1554e <_ZL23lcd_control_motion_menuv+0x7fa>
   153b2:	60 91 f4 11 	lds	r22, 0x11F4
   153b6:	70 91 f5 11 	lds	r23, 0x11F5
   153ba:	80 91 f6 11 	lds	r24, 0x11F6
   153be:	90 91 f7 11 	lds	r25, 0x11F7
   153c2:	a3 01       	movw	r20, r6
   153c4:	92 01       	movw	r18, r4
   153c6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   153ca:	28 30       	cpi	r18, 0x08	; 8
   153cc:	31 05       	cpc	r19, r1
   153ce:	41 05       	cpc	r20, r1
   153d0:	51 05       	cpc	r21, r1
   153d2:	09 f0       	breq	.+2      	; 0x153d6 <_ZL23lcd_control_motion_menuv+0x682>
   153d4:	bc c0       	rjmp	.+376    	; 0x1554e <_ZL23lcd_control_motion_menuv+0x7fa>
   153d6:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   153da:	e1 2c       	mov	r14, r1
   153dc:	10 ec       	ldi	r17, 0xC0	; 192
   153de:	f1 2e       	mov	r15, r17
   153e0:	09 e7       	ldi	r16, 0x79	; 121
   153e2:	14 e4       	ldi	r17, 0x44	; 68
   153e4:	20 e0       	ldi	r18, 0x00	; 0
   153e6:	30 e0       	ldi	r19, 0x00	; 0
   153e8:	40 e8       	ldi	r20, 0x80	; 128
   153ea:	5f e3       	ldi	r21, 0x3F	; 63
   153ec:	62 e9       	ldi	r22, 0x92	; 146
   153ee:	7e e0       	ldi	r23, 0x0E	; 14
   153f0:	82 e5       	ldi	r24, 0x52	; 82
   153f2:	93 e1       	ldi	r25, 0x13	; 19
   153f4:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   153f8:	58 c4       	rjmp	.+2224   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VMIN, &minimumfeedrate, 0, 999);
   153fa:	09 30       	cpi	r16, 0x09	; 9
   153fc:	09 f0       	breq	.+2      	; 0x15400 <_ZL23lcd_control_motion_menuv+0x6ac>
   153fe:	52 c0       	rjmp	.+164    	; 0x154a4 <_ZL23lcd_control_motion_menuv+0x750>
   15400:	80 91 64 02 	lds	r24, 0x0264
   15404:	88 23       	and	r24, r24
   15406:	41 f1       	breq	.+80     	; 0x15458 <_ZL23lcd_control_motion_menuv+0x704>
   15408:	60 91 f4 11 	lds	r22, 0x11F4
   1540c:	70 91 f5 11 	lds	r23, 0x11F5
   15410:	80 91 f6 11 	lds	r24, 0x11F6
   15414:	90 91 f7 11 	lds	r25, 0x11F7
   15418:	a3 01       	movw	r20, r6
   1541a:	92 01       	movw	r18, r4
   1541c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15420:	29 30       	cpi	r18, 0x09	; 9
   15422:	31 05       	cpc	r19, r1
   15424:	41 05       	cpc	r20, r1
   15426:	51 05       	cpc	r21, r1
   15428:	61 f4       	brne	.+24     	; 0x15442 <_ZL23lcd_control_motion_menuv+0x6ee>
   1542a:	82 e6       	ldi	r24, 0x62	; 98
   1542c:	9e e0       	ldi	r25, 0x0E	; 14
   1542e:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   15432:	9c 01       	movw	r18, r24
   15434:	4e e3       	ldi	r20, 0x3E	; 62
   15436:	69 e5       	ldi	r22, 0x59	; 89
   15438:	73 e1       	ldi	r23, 0x13	; 19
   1543a:	81 2f       	mov	r24, r17
   1543c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15440:	0b c0       	rjmp	.+22     	; 0x15458 <_ZL23lcd_control_motion_menuv+0x704>
   15442:	82 e6       	ldi	r24, 0x62	; 98
   15444:	9e e0       	ldi	r25, 0x0E	; 14
   15446:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   1544a:	9c 01       	movw	r18, r24
   1544c:	40 e2       	ldi	r20, 0x20	; 32
   1544e:	69 e5       	ldi	r22, 0x59	; 89
   15450:	73 e1       	ldi	r23, 0x13	; 19
   15452:	81 2f       	mov	r24, r17
   15454:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15458:	88 20       	and	r8, r8
   1545a:	09 f4       	brne	.+2      	; 0x1545e <_ZL23lcd_control_motion_menuv+0x70a>
   1545c:	e9 c0       	rjmp	.+466    	; 0x15630 <_ZL23lcd_control_motion_menuv+0x8dc>
   1545e:	60 91 f4 11 	lds	r22, 0x11F4
   15462:	70 91 f5 11 	lds	r23, 0x11F5
   15466:	80 91 f6 11 	lds	r24, 0x11F6
   1546a:	90 91 f7 11 	lds	r25, 0x11F7
   1546e:	a3 01       	movw	r20, r6
   15470:	92 01       	movw	r18, r4
   15472:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15476:	29 30       	cpi	r18, 0x09	; 9
   15478:	31 05       	cpc	r19, r1
   1547a:	41 05       	cpc	r20, r1
   1547c:	51 05       	cpc	r21, r1
   1547e:	09 f0       	breq	.+2      	; 0x15482 <_ZL23lcd_control_motion_menuv+0x72e>
   15480:	d7 c0       	rjmp	.+430    	; 0x15630 <_ZL23lcd_control_motion_menuv+0x8dc>
   15482:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15486:	e1 2c       	mov	r14, r1
   15488:	10 ec       	ldi	r17, 0xC0	; 192
   1548a:	f1 2e       	mov	r15, r17
   1548c:	09 e7       	ldi	r16, 0x79	; 121
   1548e:	14 e4       	ldi	r17, 0x44	; 68
   15490:	20 e0       	ldi	r18, 0x00	; 0
   15492:	30 e0       	ldi	r19, 0x00	; 0
   15494:	a9 01       	movw	r20, r18
   15496:	62 e6       	ldi	r22, 0x62	; 98
   15498:	7e e0       	ldi	r23, 0x0E	; 14
   1549a:	8e e5       	ldi	r24, 0x5E	; 94
   1549c:	93 e1       	ldi	r25, 0x13	; 19
   1549e:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   154a2:	03 c4       	rjmp	.+2054   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float3, MSG_VTRAV_MIN, &mintravelfeedrate, 0, 999);
   154a4:	0a 30       	cpi	r16, 0x0A	; 10
   154a6:	09 f0       	breq	.+2      	; 0x154aa <_ZL23lcd_control_motion_menuv+0x756>
   154a8:	52 c0       	rjmp	.+164    	; 0x1554e <_ZL23lcd_control_motion_menuv+0x7fa>
   154aa:	80 91 64 02 	lds	r24, 0x0264
   154ae:	88 23       	and	r24, r24
   154b0:	41 f1       	breq	.+80     	; 0x15502 <_ZL23lcd_control_motion_menuv+0x7ae>
   154b2:	60 91 f4 11 	lds	r22, 0x11F4
   154b6:	70 91 f5 11 	lds	r23, 0x11F5
   154ba:	80 91 f6 11 	lds	r24, 0x11F6
   154be:	90 91 f7 11 	lds	r25, 0x11F7
   154c2:	a3 01       	movw	r20, r6
   154c4:	92 01       	movw	r18, r4
   154c6:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   154ca:	2a 30       	cpi	r18, 0x0A	; 10
   154cc:	31 05       	cpc	r19, r1
   154ce:	41 05       	cpc	r20, r1
   154d0:	51 05       	cpc	r21, r1
   154d2:	61 f4       	brne	.+24     	; 0x154ec <_ZL23lcd_control_motion_menuv+0x798>
   154d4:	8a e4       	ldi	r24, 0x4A	; 74
   154d6:	9e e0       	ldi	r25, 0x0E	; 14
   154d8:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   154dc:	9c 01       	movw	r18, r24
   154de:	4e e3       	ldi	r20, 0x3E	; 62
   154e0:	63 e6       	ldi	r22, 0x63	; 99
   154e2:	73 e1       	ldi	r23, 0x13	; 19
   154e4:	81 2f       	mov	r24, r17
   154e6:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   154ea:	0b c0       	rjmp	.+22     	; 0x15502 <_ZL23lcd_control_motion_menuv+0x7ae>
   154ec:	8a e4       	ldi	r24, 0x4A	; 74
   154ee:	9e e0       	ldi	r25, 0x0E	; 14
   154f0:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   154f4:	9c 01       	movw	r18, r24
   154f6:	40 e2       	ldi	r20, 0x20	; 32
   154f8:	63 e6       	ldi	r22, 0x63	; 99
   154fa:	73 e1       	ldi	r23, 0x13	; 19
   154fc:	81 2f       	mov	r24, r17
   154fe:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15502:	88 20       	and	r8, r8
   15504:	09 f4       	brne	.+2      	; 0x15508 <_ZL23lcd_control_motion_menuv+0x7b4>
   15506:	07 c1       	rjmp	.+526    	; 0x15716 <_ZL23lcd_control_motion_menuv+0x9c2>
   15508:	60 91 f4 11 	lds	r22, 0x11F4
   1550c:	70 91 f5 11 	lds	r23, 0x11F5
   15510:	80 91 f6 11 	lds	r24, 0x11F6
   15514:	90 91 f7 11 	lds	r25, 0x11F7
   15518:	a3 01       	movw	r20, r6
   1551a:	92 01       	movw	r18, r4
   1551c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15520:	2a 30       	cpi	r18, 0x0A	; 10
   15522:	31 05       	cpc	r19, r1
   15524:	41 05       	cpc	r20, r1
   15526:	51 05       	cpc	r21, r1
   15528:	09 f0       	breq	.+2      	; 0x1552c <_ZL23lcd_control_motion_menuv+0x7d8>
   1552a:	f5 c0       	rjmp	.+490    	; 0x15716 <_ZL23lcd_control_motion_menuv+0x9c2>
   1552c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15530:	e1 2c       	mov	r14, r1
   15532:	10 ec       	ldi	r17, 0xC0	; 192
   15534:	f1 2e       	mov	r15, r17
   15536:	09 e7       	ldi	r16, 0x79	; 121
   15538:	14 e4       	ldi	r17, 0x44	; 68
   1553a:	20 e0       	ldi	r18, 0x00	; 0
   1553c:	30 e0       	ldi	r19, 0x00	; 0
   1553e:	a9 01       	movw	r20, r18
   15540:	6a e4       	ldi	r22, 0x4A	; 74
   15542:	7e e0       	ldi	r23, 0x0E	; 14
   15544:	8d e6       	ldi	r24, 0x6D	; 109
   15546:	93 e1       	ldi	r25, 0x13	; 19
   15548:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   1554c:	ae c3       	rjmp	.+1884   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_X, &max_acceleration_units_per_sq_second[X_AXIS], 100, 99000, reset_acceleration_rates);
   1554e:	0b 30       	cpi	r16, 0x0B	; 11
   15550:	09 f0       	breq	.+2      	; 0x15554 <_ZL23lcd_control_motion_menuv+0x800>
   15552:	6e c0       	rjmp	.+220    	; 0x15630 <_ZL23lcd_control_motion_menuv+0x8dc>
   15554:	80 91 64 02 	lds	r24, 0x0264
   15558:	88 23       	and	r24, r24
   1555a:	e1 f1       	breq	.+120    	; 0x155d4 <_ZL23lcd_control_motion_menuv+0x880>
   1555c:	60 91 f4 11 	lds	r22, 0x11F4
   15560:	70 91 f5 11 	lds	r23, 0x11F5
   15564:	80 91 f6 11 	lds	r24, 0x11F6
   15568:	90 91 f7 11 	lds	r25, 0x11F7
   1556c:	a3 01       	movw	r20, r6
   1556e:	92 01       	movw	r18, r4
   15570:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15574:	2b 30       	cpi	r18, 0x0B	; 11
   15576:	31 05       	cpc	r19, r1
   15578:	41 05       	cpc	r20, r1
   1557a:	51 05       	cpc	r21, r1
   1557c:	b1 f4       	brne	.+44     	; 0x155aa <_ZL23lcd_control_motion_menuv+0x856>
   1557e:	f6 01       	movw	r30, r12
   15580:	60 81       	ld	r22, Z
   15582:	71 81       	ldd	r23, Z+1	; 0x01
   15584:	82 81       	ldd	r24, Z+2	; 0x02
   15586:	93 81       	ldd	r25, Z+3	; 0x03
   15588:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1558c:	6d 8f       	std	Y+29, r22	; 0x1d
   1558e:	7e 8f       	std	Y+30, r23	; 0x1e
   15590:	8f 8f       	std	Y+31, r24	; 0x1f
   15592:	98 a3       	std	Y+32, r25	; 0x20
   15594:	ce 01       	movw	r24, r28
   15596:	4d 96       	adiw	r24, 0x1d	; 29
   15598:	23 d8       	rcall	.-4026   	; 0x145e0 <_Z7ftostr5RKf>
   1559a:	9c 01       	movw	r18, r24
   1559c:	4e e3       	ldi	r20, 0x3E	; 62
   1559e:	67 e7       	ldi	r22, 0x77	; 119
   155a0:	73 e1       	ldi	r23, 0x13	; 19
   155a2:	81 2f       	mov	r24, r17
   155a4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   155a8:	15 c0       	rjmp	.+42     	; 0x155d4 <_ZL23lcd_control_motion_menuv+0x880>
   155aa:	f6 01       	movw	r30, r12
   155ac:	60 81       	ld	r22, Z
   155ae:	71 81       	ldd	r23, Z+1	; 0x01
   155b0:	82 81       	ldd	r24, Z+2	; 0x02
   155b2:	93 81       	ldd	r25, Z+3	; 0x03
   155b4:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   155b8:	69 8f       	std	Y+25, r22	; 0x19
   155ba:	7a 8f       	std	Y+26, r23	; 0x1a
   155bc:	8b 8f       	std	Y+27, r24	; 0x1b
   155be:	9c 8f       	std	Y+28, r25	; 0x1c
   155c0:	ce 01       	movw	r24, r28
   155c2:	49 96       	adiw	r24, 0x19	; 25
   155c4:	0d d8       	rcall	.-4070   	; 0x145e0 <_Z7ftostr5RKf>
   155c6:	9c 01       	movw	r18, r24
   155c8:	40 e2       	ldi	r20, 0x20	; 32
   155ca:	67 e7       	ldi	r22, 0x77	; 119
   155cc:	73 e1       	ldi	r23, 0x13	; 19
   155ce:	81 2f       	mov	r24, r17
   155d0:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   155d4:	88 20       	and	r8, r8
   155d6:	09 f4       	brne	.+2      	; 0x155da <_ZL23lcd_control_motion_menuv+0x886>
   155d8:	11 c1       	rjmp	.+546    	; 0x157fc <_ZL23lcd_control_motion_menuv+0xaa8>
   155da:	60 91 f4 11 	lds	r22, 0x11F4
   155de:	70 91 f5 11 	lds	r23, 0x11F5
   155e2:	80 91 f6 11 	lds	r24, 0x11F6
   155e6:	90 91 f7 11 	lds	r25, 0x11F7
   155ea:	a3 01       	movw	r20, r6
   155ec:	92 01       	movw	r18, r4
   155ee:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   155f2:	2b 30       	cpi	r18, 0x0B	; 11
   155f4:	31 05       	cpc	r19, r1
   155f6:	41 05       	cpc	r20, r1
   155f8:	51 05       	cpc	r21, r1
   155fa:	09 f0       	breq	.+2      	; 0x155fe <_ZL23lcd_control_motion_menuv+0x8aa>
   155fc:	ff c0       	rjmp	.+510    	; 0x157fc <_ZL23lcd_control_motion_menuv+0xaa8>
   155fe:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15602:	0f 2e       	mov	r0, r31
   15604:	fa ea       	ldi	r31, 0xAA	; 170
   15606:	cf 2e       	mov	r12, r31
   15608:	f7 e5       	ldi	r31, 0x57	; 87
   1560a:	df 2e       	mov	r13, r31
   1560c:	f0 2d       	mov	r31, r0
   1560e:	18 eb       	ldi	r17, 0xB8	; 184
   15610:	e1 2e       	mov	r14, r17
   15612:	12 e8       	ldi	r17, 0x82	; 130
   15614:	f1 2e       	mov	r15, r17
   15616:	01 e0       	ldi	r16, 0x01	; 1
   15618:	10 e0       	ldi	r17, 0x00	; 0
   1561a:	24 e6       	ldi	r18, 0x64	; 100
   1561c:	30 e0       	ldi	r19, 0x00	; 0
   1561e:	40 e0       	ldi	r20, 0x00	; 0
   15620:	50 e0       	ldi	r21, 0x00	; 0
   15622:	66 e6       	ldi	r22, 0x66	; 102
   15624:	7e e0       	ldi	r23, 0x0E	; 14
   15626:	8e e7       	ldi	r24, 0x7E	; 126
   15628:	93 e1       	ldi	r25, 0x13	; 19
   1562a:	0e 94 55 82 	call	0x104aa	; 0x104aa <_ZL39menu_action_setting_edit_callback_long5PKcPmmmPFvvE>
   1562e:	3d c3       	rjmp	.+1658   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_Y, &max_acceleration_units_per_sq_second[Y_AXIS], 100, 99000, reset_acceleration_rates);
   15630:	0c 30       	cpi	r16, 0x0C	; 12
   15632:	09 f0       	breq	.+2      	; 0x15636 <_ZL23lcd_control_motion_menuv+0x8e2>
   15634:	70 c0       	rjmp	.+224    	; 0x15716 <_ZL23lcd_control_motion_menuv+0x9c2>
   15636:	80 91 64 02 	lds	r24, 0x0264
   1563a:	88 23       	and	r24, r24
   1563c:	f1 f1       	breq	.+124    	; 0x156ba <_ZL23lcd_control_motion_menuv+0x966>
   1563e:	60 91 f4 11 	lds	r22, 0x11F4
   15642:	70 91 f5 11 	lds	r23, 0x11F5
   15646:	80 91 f6 11 	lds	r24, 0x11F6
   1564a:	90 91 f7 11 	lds	r25, 0x11F7
   1564e:	a3 01       	movw	r20, r6
   15650:	92 01       	movw	r18, r4
   15652:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15656:	2c 30       	cpi	r18, 0x0C	; 12
   15658:	31 05       	cpc	r19, r1
   1565a:	41 05       	cpc	r20, r1
   1565c:	51 05       	cpc	r21, r1
   1565e:	b9 f4       	brne	.+46     	; 0x1568e <_ZL23lcd_control_motion_menuv+0x93a>
   15660:	f7 01       	movw	r30, r14
   15662:	60 81       	ld	r22, Z
   15664:	71 81       	ldd	r23, Z+1	; 0x01
   15666:	82 81       	ldd	r24, Z+2	; 0x02
   15668:	93 81       	ldd	r25, Z+3	; 0x03
   1566a:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1566e:	6d 8b       	std	Y+21, r22	; 0x15
   15670:	7e 8b       	std	Y+22, r23	; 0x16
   15672:	8f 8b       	std	Y+23, r24	; 0x17
   15674:	98 8f       	std	Y+24, r25	; 0x18
   15676:	ce 01       	movw	r24, r28
   15678:	45 96       	adiw	r24, 0x15	; 21
   1567a:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   1567e:	9c 01       	movw	r18, r24
   15680:	4e e3       	ldi	r20, 0x3E	; 62
   15682:	65 e8       	ldi	r22, 0x85	; 133
   15684:	73 e1       	ldi	r23, 0x13	; 19
   15686:	81 2f       	mov	r24, r17
   15688:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1568c:	16 c0       	rjmp	.+44     	; 0x156ba <_ZL23lcd_control_motion_menuv+0x966>
   1568e:	f7 01       	movw	r30, r14
   15690:	60 81       	ld	r22, Z
   15692:	71 81       	ldd	r23, Z+1	; 0x01
   15694:	82 81       	ldd	r24, Z+2	; 0x02
   15696:	93 81       	ldd	r25, Z+3	; 0x03
   15698:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1569c:	69 8b       	std	Y+17, r22	; 0x11
   1569e:	7a 8b       	std	Y+18, r23	; 0x12
   156a0:	8b 8b       	std	Y+19, r24	; 0x13
   156a2:	9c 8b       	std	Y+20, r25	; 0x14
   156a4:	ce 01       	movw	r24, r28
   156a6:	41 96       	adiw	r24, 0x11	; 17
   156a8:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   156ac:	9c 01       	movw	r18, r24
   156ae:	40 e2       	ldi	r20, 0x20	; 32
   156b0:	65 e8       	ldi	r22, 0x85	; 133
   156b2:	73 e1       	ldi	r23, 0x13	; 19
   156b4:	81 2f       	mov	r24, r17
   156b6:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   156ba:	88 20       	and	r8, r8
   156bc:	09 f4       	brne	.+2      	; 0x156c0 <_ZL23lcd_control_motion_menuv+0x96c>
   156be:	11 c1       	rjmp	.+546    	; 0x158e2 <_ZL23lcd_control_motion_menuv+0xb8e>
   156c0:	60 91 f4 11 	lds	r22, 0x11F4
   156c4:	70 91 f5 11 	lds	r23, 0x11F5
   156c8:	80 91 f6 11 	lds	r24, 0x11F6
   156cc:	90 91 f7 11 	lds	r25, 0x11F7
   156d0:	a3 01       	movw	r20, r6
   156d2:	92 01       	movw	r18, r4
   156d4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   156d8:	2c 30       	cpi	r18, 0x0C	; 12
   156da:	31 05       	cpc	r19, r1
   156dc:	41 05       	cpc	r20, r1
   156de:	51 05       	cpc	r21, r1
   156e0:	09 f0       	breq	.+2      	; 0x156e4 <_ZL23lcd_control_motion_menuv+0x990>
   156e2:	ff c0       	rjmp	.+510    	; 0x158e2 <_ZL23lcd_control_motion_menuv+0xb8e>
   156e4:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   156e8:	0f 2e       	mov	r0, r31
   156ea:	fa ea       	ldi	r31, 0xAA	; 170
   156ec:	cf 2e       	mov	r12, r31
   156ee:	f7 e5       	ldi	r31, 0x57	; 87
   156f0:	df 2e       	mov	r13, r31
   156f2:	f0 2d       	mov	r31, r0
   156f4:	18 eb       	ldi	r17, 0xB8	; 184
   156f6:	e1 2e       	mov	r14, r17
   156f8:	12 e8       	ldi	r17, 0x82	; 130
   156fa:	f1 2e       	mov	r15, r17
   156fc:	01 e0       	ldi	r16, 0x01	; 1
   156fe:	10 e0       	ldi	r17, 0x00	; 0
   15700:	24 e6       	ldi	r18, 0x64	; 100
   15702:	30 e0       	ldi	r19, 0x00	; 0
   15704:	40 e0       	ldi	r20, 0x00	; 0
   15706:	50 e0       	ldi	r21, 0x00	; 0
   15708:	6a e6       	ldi	r22, 0x6A	; 106
   1570a:	7e e0       	ldi	r23, 0x0E	; 14
   1570c:	8c e8       	ldi	r24, 0x8C	; 140
   1570e:	93 e1       	ldi	r25, 0x13	; 19
   15710:	0e 94 55 82 	call	0x104aa	; 0x104aa <_ZL39menu_action_setting_edit_callback_long5PKcPmmmPFvvE>
   15714:	ca c2       	rjmp	.+1428   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_Z, &max_acceleration_units_per_sq_second[Z_AXIS], 100, 99000, reset_acceleration_rates);
   15716:	0d 30       	cpi	r16, 0x0D	; 13
   15718:	09 f0       	breq	.+2      	; 0x1571c <_ZL23lcd_control_motion_menuv+0x9c8>
   1571a:	70 c0       	rjmp	.+224    	; 0x157fc <_ZL23lcd_control_motion_menuv+0xaa8>
   1571c:	80 91 64 02 	lds	r24, 0x0264
   15720:	88 23       	and	r24, r24
   15722:	f1 f1       	breq	.+124    	; 0x157a0 <_ZL23lcd_control_motion_menuv+0xa4c>
   15724:	60 91 f4 11 	lds	r22, 0x11F4
   15728:	70 91 f5 11 	lds	r23, 0x11F5
   1572c:	80 91 f6 11 	lds	r24, 0x11F6
   15730:	90 91 f7 11 	lds	r25, 0x11F7
   15734:	a3 01       	movw	r20, r6
   15736:	92 01       	movw	r18, r4
   15738:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1573c:	2d 30       	cpi	r18, 0x0D	; 13
   1573e:	31 05       	cpc	r19, r1
   15740:	41 05       	cpc	r20, r1
   15742:	51 05       	cpc	r21, r1
   15744:	b9 f4       	brne	.+46     	; 0x15774 <_ZL23lcd_control_motion_menuv+0xa20>
   15746:	f1 01       	movw	r30, r2
   15748:	60 81       	ld	r22, Z
   1574a:	71 81       	ldd	r23, Z+1	; 0x01
   1574c:	82 81       	ldd	r24, Z+2	; 0x02
   1574e:	93 81       	ldd	r25, Z+3	; 0x03
   15750:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   15754:	6d 87       	std	Y+13, r22	; 0x0d
   15756:	7e 87       	std	Y+14, r23	; 0x0e
   15758:	8f 87       	std	Y+15, r24	; 0x0f
   1575a:	98 8b       	std	Y+16, r25	; 0x10
   1575c:	ce 01       	movw	r24, r28
   1575e:	0d 96       	adiw	r24, 0x0d	; 13
   15760:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   15764:	9c 01       	movw	r18, r24
   15766:	4e e3       	ldi	r20, 0x3E	; 62
   15768:	63 e9       	ldi	r22, 0x93	; 147
   1576a:	73 e1       	ldi	r23, 0x13	; 19
   1576c:	81 2f       	mov	r24, r17
   1576e:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15772:	16 c0       	rjmp	.+44     	; 0x157a0 <_ZL23lcd_control_motion_menuv+0xa4c>
   15774:	f1 01       	movw	r30, r2
   15776:	60 81       	ld	r22, Z
   15778:	71 81       	ldd	r23, Z+1	; 0x01
   1577a:	82 81       	ldd	r24, Z+2	; 0x02
   1577c:	93 81       	ldd	r25, Z+3	; 0x03
   1577e:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   15782:	69 87       	std	Y+9, r22	; 0x09
   15784:	7a 87       	std	Y+10, r23	; 0x0a
   15786:	8b 87       	std	Y+11, r24	; 0x0b
   15788:	9c 87       	std	Y+12, r25	; 0x0c
   1578a:	ce 01       	movw	r24, r28
   1578c:	09 96       	adiw	r24, 0x09	; 9
   1578e:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   15792:	9c 01       	movw	r18, r24
   15794:	40 e2       	ldi	r20, 0x20	; 32
   15796:	63 e9       	ldi	r22, 0x93	; 147
   15798:	73 e1       	ldi	r23, 0x13	; 19
   1579a:	81 2f       	mov	r24, r17
   1579c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   157a0:	88 20       	and	r8, r8
   157a2:	09 f4       	brne	.+2      	; 0x157a6 <_ZL23lcd_control_motion_menuv+0xa52>
   157a4:	f4 c0       	rjmp	.+488    	; 0x1598e <_ZL23lcd_control_motion_menuv+0xc3a>
   157a6:	60 91 f4 11 	lds	r22, 0x11F4
   157aa:	70 91 f5 11 	lds	r23, 0x11F5
   157ae:	80 91 f6 11 	lds	r24, 0x11F6
   157b2:	90 91 f7 11 	lds	r25, 0x11F7
   157b6:	a3 01       	movw	r20, r6
   157b8:	92 01       	movw	r18, r4
   157ba:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   157be:	2d 30       	cpi	r18, 0x0D	; 13
   157c0:	31 05       	cpc	r19, r1
   157c2:	41 05       	cpc	r20, r1
   157c4:	51 05       	cpc	r21, r1
   157c6:	09 f0       	breq	.+2      	; 0x157ca <_ZL23lcd_control_motion_menuv+0xa76>
   157c8:	e2 c0       	rjmp	.+452    	; 0x1598e <_ZL23lcd_control_motion_menuv+0xc3a>
   157ca:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   157ce:	0f 2e       	mov	r0, r31
   157d0:	fa ea       	ldi	r31, 0xAA	; 170
   157d2:	cf 2e       	mov	r12, r31
   157d4:	f7 e5       	ldi	r31, 0x57	; 87
   157d6:	df 2e       	mov	r13, r31
   157d8:	f0 2d       	mov	r31, r0
   157da:	18 eb       	ldi	r17, 0xB8	; 184
   157dc:	e1 2e       	mov	r14, r17
   157de:	12 e8       	ldi	r17, 0x82	; 130
   157e0:	f1 2e       	mov	r15, r17
   157e2:	01 e0       	ldi	r16, 0x01	; 1
   157e4:	10 e0       	ldi	r17, 0x00	; 0
   157e6:	24 e6       	ldi	r18, 0x64	; 100
   157e8:	30 e0       	ldi	r19, 0x00	; 0
   157ea:	40 e0       	ldi	r20, 0x00	; 0
   157ec:	50 e0       	ldi	r21, 0x00	; 0
   157ee:	6e e6       	ldi	r22, 0x6E	; 110
   157f0:	7e e0       	ldi	r23, 0x0E	; 14
   157f2:	8a e9       	ldi	r24, 0x9A	; 154
   157f4:	93 e1       	ldi	r25, 0x13	; 19
   157f6:	0e 94 55 82 	call	0x104aa	; 0x104aa <_ZL39menu_action_setting_edit_callback_long5PKcPmmmPFvvE>
   157fa:	57 c2       	rjmp	.+1198   	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT_CALLBACK(long5, MSG_AMAX MSG_E, &max_acceleration_units_per_sq_second[E_AXIS], 100, 99000, reset_acceleration_rates);
   157fc:	0e 30       	cpi	r16, 0x0E	; 14
   157fe:	09 f0       	breq	.+2      	; 0x15802 <_ZL23lcd_control_motion_menuv+0xaae>
   15800:	70 c0       	rjmp	.+224    	; 0x158e2 <_ZL23lcd_control_motion_menuv+0xb8e>
   15802:	80 91 64 02 	lds	r24, 0x0264
   15806:	88 23       	and	r24, r24
   15808:	f1 f1       	breq	.+124    	; 0x15886 <_ZL23lcd_control_motion_menuv+0xb32>
   1580a:	60 91 f4 11 	lds	r22, 0x11F4
   1580e:	70 91 f5 11 	lds	r23, 0x11F5
   15812:	80 91 f6 11 	lds	r24, 0x11F6
   15816:	90 91 f7 11 	lds	r25, 0x11F7
   1581a:	a3 01       	movw	r20, r6
   1581c:	92 01       	movw	r18, r4
   1581e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15822:	2e 30       	cpi	r18, 0x0E	; 14
   15824:	31 05       	cpc	r19, r1
   15826:	41 05       	cpc	r20, r1
   15828:	51 05       	cpc	r21, r1
   1582a:	b9 f4       	brne	.+46     	; 0x1585a <_ZL23lcd_control_motion_menuv+0xb06>
   1582c:	f5 01       	movw	r30, r10
   1582e:	60 81       	ld	r22, Z
   15830:	71 81       	ldd	r23, Z+1	; 0x01
   15832:	82 81       	ldd	r24, Z+2	; 0x02
   15834:	93 81       	ldd	r25, Z+3	; 0x03
   15836:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   1583a:	6d 83       	std	Y+5, r22	; 0x05
   1583c:	7e 83       	std	Y+6, r23	; 0x06
   1583e:	8f 83       	std	Y+7, r24	; 0x07
   15840:	98 87       	std	Y+8, r25	; 0x08
   15842:	ce 01       	movw	r24, r28
   15844:	05 96       	adiw	r24, 0x05	; 5
   15846:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   1584a:	9c 01       	movw	r18, r24
   1584c:	4e e3       	ldi	r20, 0x3E	; 62
   1584e:	61 ea       	ldi	r22, 0xA1	; 161
   15850:	73 e1       	ldi	r23, 0x13	; 19
   15852:	81 2f       	mov	r24, r17
   15854:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15858:	16 c0       	rjmp	.+44     	; 0x15886 <_ZL23lcd_control_motion_menuv+0xb32>
   1585a:	f5 01       	movw	r30, r10
   1585c:	60 81       	ld	r22, Z
   1585e:	71 81       	ldd	r23, Z+1	; 0x01
   15860:	82 81       	ldd	r24, Z+2	; 0x02
   15862:	93 81       	ldd	r25, Z+3	; 0x03
   15864:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   15868:	69 83       	std	Y+1, r22	; 0x01
   1586a:	7a 83       	std	Y+2, r23	; 0x02
   1586c:	8b 83       	std	Y+3, r24	; 0x03
   1586e:	9c 83       	std	Y+4, r25	; 0x04
   15870:	ce 01       	movw	r24, r28
   15872:	01 96       	adiw	r24, 0x01	; 1
   15874:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   15878:	9c 01       	movw	r18, r24
   1587a:	40 e2       	ldi	r20, 0x20	; 32
   1587c:	61 ea       	ldi	r22, 0xA1	; 161
   1587e:	73 e1       	ldi	r23, 0x13	; 19
   15880:	81 2f       	mov	r24, r17
   15882:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15886:	88 20       	and	r8, r8
   15888:	09 f4       	brne	.+2      	; 0x1588c <_ZL23lcd_control_motion_menuv+0xb38>
   1588a:	d5 c0       	rjmp	.+426    	; 0x15a36 <_ZL23lcd_control_motion_menuv+0xce2>
   1588c:	60 91 f4 11 	lds	r22, 0x11F4
   15890:	70 91 f5 11 	lds	r23, 0x11F5
   15894:	80 91 f6 11 	lds	r24, 0x11F6
   15898:	90 91 f7 11 	lds	r25, 0x11F7
   1589c:	a3 01       	movw	r20, r6
   1589e:	92 01       	movw	r18, r4
   158a0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   158a4:	2e 30       	cpi	r18, 0x0E	; 14
   158a6:	31 05       	cpc	r19, r1
   158a8:	41 05       	cpc	r20, r1
   158aa:	51 05       	cpc	r21, r1
   158ac:	09 f0       	breq	.+2      	; 0x158b0 <_ZL23lcd_control_motion_menuv+0xb5c>
   158ae:	c3 c0       	rjmp	.+390    	; 0x15a36 <_ZL23lcd_control_motion_menuv+0xce2>
   158b0:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   158b4:	0f 2e       	mov	r0, r31
   158b6:	fa ea       	ldi	r31, 0xAA	; 170
   158b8:	cf 2e       	mov	r12, r31
   158ba:	f7 e5       	ldi	r31, 0x57	; 87
   158bc:	df 2e       	mov	r13, r31
   158be:	f0 2d       	mov	r31, r0
   158c0:	18 eb       	ldi	r17, 0xB8	; 184
   158c2:	e1 2e       	mov	r14, r17
   158c4:	12 e8       	ldi	r17, 0x82	; 130
   158c6:	f1 2e       	mov	r15, r17
   158c8:	01 e0       	ldi	r16, 0x01	; 1
   158ca:	10 e0       	ldi	r17, 0x00	; 0
   158cc:	24 e6       	ldi	r18, 0x64	; 100
   158ce:	30 e0       	ldi	r19, 0x00	; 0
   158d0:	40 e0       	ldi	r20, 0x00	; 0
   158d2:	50 e0       	ldi	r21, 0x00	; 0
   158d4:	62 e7       	ldi	r22, 0x72	; 114
   158d6:	7e e0       	ldi	r23, 0x0E	; 14
   158d8:	88 ea       	ldi	r24, 0xA8	; 168
   158da:	93 e1       	ldi	r25, 0x13	; 19
   158dc:	0e 94 55 82 	call	0x104aa	; 0x104aa <_ZL39menu_action_setting_edit_callback_long5PKcPmmmPFvvE>
   158e0:	e4 c1       	rjmp	.+968    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float5, MSG_A_RETRACT, &retract_acceleration, 100, 99000);
   158e2:	0f 30       	cpi	r16, 0x0F	; 15
   158e4:	09 f0       	breq	.+2      	; 0x158e8 <_ZL23lcd_control_motion_menuv+0xb94>
   158e6:	53 c0       	rjmp	.+166    	; 0x1598e <_ZL23lcd_control_motion_menuv+0xc3a>
   158e8:	80 91 64 02 	lds	r24, 0x0264
   158ec:	88 23       	and	r24, r24
   158ee:	41 f1       	breq	.+80     	; 0x15940 <_ZL23lcd_control_motion_menuv+0xbec>
   158f0:	60 91 f4 11 	lds	r22, 0x11F4
   158f4:	70 91 f5 11 	lds	r23, 0x11F5
   158f8:	80 91 f6 11 	lds	r24, 0x11F6
   158fc:	90 91 f7 11 	lds	r25, 0x11F7
   15900:	a3 01       	movw	r20, r6
   15902:	92 01       	movw	r18, r4
   15904:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15908:	2f 30       	cpi	r18, 0x0F	; 15
   1590a:	31 05       	cpc	r19, r1
   1590c:	41 05       	cpc	r20, r1
   1590e:	51 05       	cpc	r21, r1
   15910:	61 f4       	brne	.+24     	; 0x1592a <_ZL23lcd_control_motion_menuv+0xbd6>
   15912:	8a e5       	ldi	r24, 0x5A	; 90
   15914:	9e e0       	ldi	r25, 0x0E	; 14
   15916:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   1591a:	9c 01       	movw	r18, r24
   1591c:	4e e3       	ldi	r20, 0x3E	; 62
   1591e:	6f ea       	ldi	r22, 0xAF	; 175
   15920:	73 e1       	ldi	r23, 0x13	; 19
   15922:	81 2f       	mov	r24, r17
   15924:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15928:	0b c0       	rjmp	.+22     	; 0x15940 <_ZL23lcd_control_motion_menuv+0xbec>
   1592a:	8a e5       	ldi	r24, 0x5A	; 90
   1592c:	9e e0       	ldi	r25, 0x0E	; 14
   1592e:	0e 94 f0 a2 	call	0x145e0	; 0x145e0 <_Z7ftostr5RKf>
   15932:	9c 01       	movw	r18, r24
   15934:	40 e2       	ldi	r20, 0x20	; 32
   15936:	6f ea       	ldi	r22, 0xAF	; 175
   15938:	73 e1       	ldi	r23, 0x13	; 19
   1593a:	81 2f       	mov	r24, r17
   1593c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15940:	88 20       	and	r8, r8
   15942:	09 f4       	brne	.+2      	; 0x15946 <_ZL23lcd_control_motion_menuv+0xbf2>
   15944:	cc c0       	rjmp	.+408    	; 0x15ade <_ZL23lcd_control_motion_menuv+0xd8a>
   15946:	60 91 f4 11 	lds	r22, 0x11F4
   1594a:	70 91 f5 11 	lds	r23, 0x11F5
   1594e:	80 91 f6 11 	lds	r24, 0x11F6
   15952:	90 91 f7 11 	lds	r25, 0x11F7
   15956:	a3 01       	movw	r20, r6
   15958:	92 01       	movw	r18, r4
   1595a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1595e:	2f 30       	cpi	r18, 0x0F	; 15
   15960:	31 05       	cpc	r19, r1
   15962:	41 05       	cpc	r20, r1
   15964:	51 05       	cpc	r21, r1
   15966:	09 f0       	breq	.+2      	; 0x1596a <_ZL23lcd_control_motion_menuv+0xc16>
   15968:	ba c0       	rjmp	.+372    	; 0x15ade <_ZL23lcd_control_motion_menuv+0xd8a>
   1596a:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1596e:	e1 2c       	mov	r14, r1
   15970:	1c e5       	ldi	r17, 0x5C	; 92
   15972:	f1 2e       	mov	r15, r17
   15974:	01 ec       	ldi	r16, 0xC1	; 193
   15976:	17 e4       	ldi	r17, 0x47	; 71
   15978:	20 e0       	ldi	r18, 0x00	; 0
   1597a:	30 e0       	ldi	r19, 0x00	; 0
   1597c:	48 ec       	ldi	r20, 0xC8	; 200
   1597e:	52 e4       	ldi	r21, 0x42	; 66
   15980:	6a e5       	ldi	r22, 0x5A	; 90
   15982:	7e e0       	ldi	r23, 0x0E	; 14
   15984:	89 eb       	ldi	r24, 0xB9	; 185
   15986:	93 e1       	ldi	r25, 0x13	; 19
   15988:	0e 94 6f 80 	call	0x100de	; 0x100de <_ZL31menu_action_setting_edit_float5PKcPfff>
   1598c:	8e c1       	rjmp	.+796    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float52, MSG_XSTEPS, &axis_steps_per_unit[X_AXIS], 5, 9999);
   1598e:	00 31       	cpi	r16, 0x10	; 16
   15990:	09 f0       	breq	.+2      	; 0x15994 <_ZL23lcd_control_motion_menuv+0xc40>
   15992:	51 c0       	rjmp	.+162    	; 0x15a36 <_ZL23lcd_control_motion_menuv+0xce2>
   15994:	80 91 64 02 	lds	r24, 0x0264
   15998:	88 23       	and	r24, r24
   1599a:	31 f1       	breq	.+76     	; 0x159e8 <_ZL23lcd_control_motion_menuv+0xc94>
   1599c:	60 91 f4 11 	lds	r22, 0x11F4
   159a0:	70 91 f5 11 	lds	r23, 0x11F5
   159a4:	80 91 f6 11 	lds	r24, 0x11F6
   159a8:	90 91 f7 11 	lds	r25, 0x11F7
   159ac:	a3 01       	movw	r20, r6
   159ae:	92 01       	movw	r18, r4
   159b0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   159b4:	20 31       	cpi	r18, 0x10	; 16
   159b6:	31 05       	cpc	r19, r1
   159b8:	41 05       	cpc	r20, r1
   159ba:	51 05       	cpc	r21, r1
   159bc:	59 f4       	brne	.+22     	; 0x159d4 <_ZL23lcd_control_motion_menuv+0xc80>
   159be:	86 e7       	ldi	r24, 0x76	; 118
   159c0:	9e e0       	ldi	r25, 0x0E	; 14
   159c2:	3e d9       	rcall	.-3460   	; 0x14c40 <_Z8ftostr52RKf>
   159c4:	9c 01       	movw	r18, r24
   159c6:	4e e3       	ldi	r20, 0x3E	; 62
   159c8:	63 ec       	ldi	r22, 0xC3	; 195
   159ca:	73 e1       	ldi	r23, 0x13	; 19
   159cc:	81 2f       	mov	r24, r17
   159ce:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   159d2:	0a c0       	rjmp	.+20     	; 0x159e8 <_ZL23lcd_control_motion_menuv+0xc94>
   159d4:	86 e7       	ldi	r24, 0x76	; 118
   159d6:	9e e0       	ldi	r25, 0x0E	; 14
   159d8:	33 d9       	rcall	.-3482   	; 0x14c40 <_Z8ftostr52RKf>
   159da:	9c 01       	movw	r18, r24
   159dc:	40 e2       	ldi	r20, 0x20	; 32
   159de:	63 ec       	ldi	r22, 0xC3	; 195
   159e0:	73 e1       	ldi	r23, 0x13	; 19
   159e2:	81 2f       	mov	r24, r17
   159e4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   159e8:	88 20       	and	r8, r8
   159ea:	09 f4       	brne	.+2      	; 0x159ee <_ZL23lcd_control_motion_menuv+0xc9a>
   159ec:	ce c0       	rjmp	.+412    	; 0x15b8a <_ZL23lcd_control_motion_menuv+0xe36>
   159ee:	60 91 f4 11 	lds	r22, 0x11F4
   159f2:	70 91 f5 11 	lds	r23, 0x11F5
   159f6:	80 91 f6 11 	lds	r24, 0x11F6
   159fa:	90 91 f7 11 	lds	r25, 0x11F7
   159fe:	a3 01       	movw	r20, r6
   15a00:	92 01       	movw	r18, r4
   15a02:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15a06:	20 31       	cpi	r18, 0x10	; 16
   15a08:	31 05       	cpc	r19, r1
   15a0a:	41 05       	cpc	r20, r1
   15a0c:	51 05       	cpc	r21, r1
   15a0e:	09 f0       	breq	.+2      	; 0x15a12 <_ZL23lcd_control_motion_menuv+0xcbe>
   15a10:	bc c0       	rjmp	.+376    	; 0x15b8a <_ZL23lcd_control_motion_menuv+0xe36>
   15a12:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15a16:	e1 2c       	mov	r14, r1
   15a18:	1c e3       	ldi	r17, 0x3C	; 60
   15a1a:	f1 2e       	mov	r15, r17
   15a1c:	0c e1       	ldi	r16, 0x1C	; 28
   15a1e:	16 e4       	ldi	r17, 0x46	; 70
   15a20:	20 e0       	ldi	r18, 0x00	; 0
   15a22:	30 e0       	ldi	r19, 0x00	; 0
   15a24:	40 ea       	ldi	r20, 0xA0	; 160
   15a26:	50 e4       	ldi	r21, 0x40	; 64
   15a28:	66 e7       	ldi	r22, 0x76	; 118
   15a2a:	7e e0       	ldi	r23, 0x0E	; 14
   15a2c:	8d ec       	ldi	r24, 0xCD	; 205
   15a2e:	93 e1       	ldi	r25, 0x13	; 19
   15a30:	0e 94 5d 81 	call	0x102ba	; 0x102ba <_ZL32menu_action_setting_edit_float52PKcPfff>
   15a34:	3a c1       	rjmp	.+628    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float52, MSG_YSTEPS, &axis_steps_per_unit[Y_AXIS], 5, 9999);
   15a36:	01 31       	cpi	r16, 0x11	; 17
   15a38:	09 f0       	breq	.+2      	; 0x15a3c <_ZL23lcd_control_motion_menuv+0xce8>
   15a3a:	51 c0       	rjmp	.+162    	; 0x15ade <_ZL23lcd_control_motion_menuv+0xd8a>
   15a3c:	80 91 64 02 	lds	r24, 0x0264
   15a40:	88 23       	and	r24, r24
   15a42:	31 f1       	breq	.+76     	; 0x15a90 <_ZL23lcd_control_motion_menuv+0xd3c>
   15a44:	60 91 f4 11 	lds	r22, 0x11F4
   15a48:	70 91 f5 11 	lds	r23, 0x11F5
   15a4c:	80 91 f6 11 	lds	r24, 0x11F6
   15a50:	90 91 f7 11 	lds	r25, 0x11F7
   15a54:	a3 01       	movw	r20, r6
   15a56:	92 01       	movw	r18, r4
   15a58:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15a5c:	21 31       	cpi	r18, 0x11	; 17
   15a5e:	31 05       	cpc	r19, r1
   15a60:	41 05       	cpc	r20, r1
   15a62:	51 05       	cpc	r21, r1
   15a64:	59 f4       	brne	.+22     	; 0x15a7c <_ZL23lcd_control_motion_menuv+0xd28>
   15a66:	8a e7       	ldi	r24, 0x7A	; 122
   15a68:	9e e0       	ldi	r25, 0x0E	; 14
   15a6a:	ea d8       	rcall	.-3628   	; 0x14c40 <_Z8ftostr52RKf>
   15a6c:	9c 01       	movw	r18, r24
   15a6e:	4e e3       	ldi	r20, 0x3E	; 62
   15a70:	67 ed       	ldi	r22, 0xD7	; 215
   15a72:	73 e1       	ldi	r23, 0x13	; 19
   15a74:	81 2f       	mov	r24, r17
   15a76:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15a7a:	0a c0       	rjmp	.+20     	; 0x15a90 <_ZL23lcd_control_motion_menuv+0xd3c>
   15a7c:	8a e7       	ldi	r24, 0x7A	; 122
   15a7e:	9e e0       	ldi	r25, 0x0E	; 14
   15a80:	df d8       	rcall	.-3650   	; 0x14c40 <_Z8ftostr52RKf>
   15a82:	9c 01       	movw	r18, r24
   15a84:	40 e2       	ldi	r20, 0x20	; 32
   15a86:	67 ed       	ldi	r22, 0xD7	; 215
   15a88:	73 e1       	ldi	r23, 0x13	; 19
   15a8a:	81 2f       	mov	r24, r17
   15a8c:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15a90:	88 20       	and	r8, r8
   15a92:	09 f4       	brne	.+2      	; 0x15a96 <_ZL23lcd_control_motion_menuv+0xd42>
   15a94:	ce c0       	rjmp	.+412    	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15a96:	60 91 f4 11 	lds	r22, 0x11F4
   15a9a:	70 91 f5 11 	lds	r23, 0x11F5
   15a9e:	80 91 f6 11 	lds	r24, 0x11F6
   15aa2:	90 91 f7 11 	lds	r25, 0x11F7
   15aa6:	a3 01       	movw	r20, r6
   15aa8:	92 01       	movw	r18, r4
   15aaa:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15aae:	21 31       	cpi	r18, 0x11	; 17
   15ab0:	31 05       	cpc	r19, r1
   15ab2:	41 05       	cpc	r20, r1
   15ab4:	51 05       	cpc	r21, r1
   15ab6:	09 f0       	breq	.+2      	; 0x15aba <_ZL23lcd_control_motion_menuv+0xd66>
   15ab8:	bc c0       	rjmp	.+376    	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15aba:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15abe:	e1 2c       	mov	r14, r1
   15ac0:	1c e3       	ldi	r17, 0x3C	; 60
   15ac2:	f1 2e       	mov	r15, r17
   15ac4:	0c e1       	ldi	r16, 0x1C	; 28
   15ac6:	16 e4       	ldi	r17, 0x46	; 70
   15ac8:	20 e0       	ldi	r18, 0x00	; 0
   15aca:	30 e0       	ldi	r19, 0x00	; 0
   15acc:	40 ea       	ldi	r20, 0xA0	; 160
   15ace:	50 e4       	ldi	r21, 0x40	; 64
   15ad0:	6a e7       	ldi	r22, 0x7A	; 122
   15ad2:	7e e0       	ldi	r23, 0x0E	; 14
   15ad4:	81 ee       	ldi	r24, 0xE1	; 225
   15ad6:	93 e1       	ldi	r25, 0x13	; 19
   15ad8:	0e 94 5d 81 	call	0x102ba	; 0x102ba <_ZL32menu_action_setting_edit_float52PKcPfff>
   15adc:	e6 c0       	rjmp	.+460    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float51, MSG_ZSTEPS, &axis_steps_per_unit[Z_AXIS], 5, 9999);
   15ade:	02 31       	cpi	r16, 0x12	; 18
   15ae0:	09 f0       	breq	.+2      	; 0x15ae4 <_ZL23lcd_control_motion_menuv+0xd90>
   15ae2:	53 c0       	rjmp	.+166    	; 0x15b8a <_ZL23lcd_control_motion_menuv+0xe36>
   15ae4:	80 91 64 02 	lds	r24, 0x0264
   15ae8:	88 23       	and	r24, r24
   15aea:	41 f1       	breq	.+80     	; 0x15b3c <_ZL23lcd_control_motion_menuv+0xde8>
   15aec:	60 91 f4 11 	lds	r22, 0x11F4
   15af0:	70 91 f5 11 	lds	r23, 0x11F5
   15af4:	80 91 f6 11 	lds	r24, 0x11F6
   15af8:	90 91 f7 11 	lds	r25, 0x11F7
   15afc:	a3 01       	movw	r20, r6
   15afe:	92 01       	movw	r18, r4
   15b00:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15b04:	22 31       	cpi	r18, 0x12	; 18
   15b06:	31 05       	cpc	r19, r1
   15b08:	41 05       	cpc	r20, r1
   15b0a:	51 05       	cpc	r21, r1
   15b0c:	61 f4       	brne	.+24     	; 0x15b26 <_ZL23lcd_control_motion_menuv+0xdd2>
   15b0e:	8e e7       	ldi	r24, 0x7E	; 126
   15b10:	9e e0       	ldi	r25, 0x0E	; 14
   15b12:	0e 94 f4 a4 	call	0x149e8	; 0x149e8 <_Z8ftostr51RKf>
   15b16:	9c 01       	movw	r18, r24
   15b18:	4e e3       	ldi	r20, 0x3E	; 62
   15b1a:	6b ee       	ldi	r22, 0xEB	; 235
   15b1c:	73 e1       	ldi	r23, 0x13	; 19
   15b1e:	81 2f       	mov	r24, r17
   15b20:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15b24:	0b c0       	rjmp	.+22     	; 0x15b3c <_ZL23lcd_control_motion_menuv+0xde8>
   15b26:	8e e7       	ldi	r24, 0x7E	; 126
   15b28:	9e e0       	ldi	r25, 0x0E	; 14
   15b2a:	0e 94 f4 a4 	call	0x149e8	; 0x149e8 <_Z8ftostr51RKf>
   15b2e:	9c 01       	movw	r18, r24
   15b30:	40 e2       	ldi	r20, 0x20	; 32
   15b32:	6b ee       	ldi	r22, 0xEB	; 235
   15b34:	73 e1       	ldi	r23, 0x13	; 19
   15b36:	81 2f       	mov	r24, r17
   15b38:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15b3c:	88 20       	and	r8, r8
   15b3e:	09 f4       	brne	.+2      	; 0x15b42 <_ZL23lcd_control_motion_menuv+0xdee>
   15b40:	78 c0       	rjmp	.+240    	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15b42:	60 91 f4 11 	lds	r22, 0x11F4
   15b46:	70 91 f5 11 	lds	r23, 0x11F5
   15b4a:	80 91 f6 11 	lds	r24, 0x11F6
   15b4e:	90 91 f7 11 	lds	r25, 0x11F7
   15b52:	a3 01       	movw	r20, r6
   15b54:	92 01       	movw	r18, r4
   15b56:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15b5a:	22 31       	cpi	r18, 0x12	; 18
   15b5c:	31 05       	cpc	r19, r1
   15b5e:	41 05       	cpc	r20, r1
   15b60:	51 05       	cpc	r21, r1
   15b62:	09 f0       	breq	.+2      	; 0x15b66 <_ZL23lcd_control_motion_menuv+0xe12>
   15b64:	66 c0       	rjmp	.+204    	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15b66:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15b6a:	e1 2c       	mov	r14, r1
   15b6c:	1c e3       	ldi	r17, 0x3C	; 60
   15b6e:	f1 2e       	mov	r15, r17
   15b70:	0c e1       	ldi	r16, 0x1C	; 28
   15b72:	16 e4       	ldi	r17, 0x46	; 70
   15b74:	20 e0       	ldi	r18, 0x00	; 0
   15b76:	30 e0       	ldi	r19, 0x00	; 0
   15b78:	40 ea       	ldi	r20, 0xA0	; 160
   15b7a:	50 e4       	ldi	r21, 0x40	; 64
   15b7c:	6e e7       	ldi	r22, 0x7E	; 126
   15b7e:	7e e0       	ldi	r23, 0x0E	; 14
   15b80:	85 ef       	ldi	r24, 0xF5	; 245
   15b82:	93 e1       	ldi	r25, 0x13	; 19
   15b84:	0e 94 e6 80 	call	0x101cc	; 0x101cc <_ZL32menu_action_setting_edit_float51PKcPfff>
   15b88:	90 c0       	rjmp	.+288    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
    MENU_ITEM_EDIT(float51, MSG_ESTEPS, &axis_steps_per_unit[E_AXIS], 5, 9999);    
   15b8a:	03 31       	cpi	r16, 0x13	; 19
   15b8c:	09 f0       	breq	.+2      	; 0x15b90 <_ZL23lcd_control_motion_menuv+0xe3c>
   15b8e:	51 c0       	rjmp	.+162    	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15b90:	80 91 64 02 	lds	r24, 0x0264
   15b94:	88 23       	and	r24, r24
   15b96:	41 f1       	breq	.+80     	; 0x15be8 <_ZL23lcd_control_motion_menuv+0xe94>
   15b98:	60 91 f4 11 	lds	r22, 0x11F4
   15b9c:	70 91 f5 11 	lds	r23, 0x11F5
   15ba0:	80 91 f6 11 	lds	r24, 0x11F6
   15ba4:	90 91 f7 11 	lds	r25, 0x11F7
   15ba8:	a3 01       	movw	r20, r6
   15baa:	92 01       	movw	r18, r4
   15bac:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15bb0:	23 31       	cpi	r18, 0x13	; 19
   15bb2:	31 05       	cpc	r19, r1
   15bb4:	41 05       	cpc	r20, r1
   15bb6:	51 05       	cpc	r21, r1
   15bb8:	61 f4       	brne	.+24     	; 0x15bd2 <_ZL23lcd_control_motion_menuv+0xe7e>
   15bba:	82 e8       	ldi	r24, 0x82	; 130
   15bbc:	9e e0       	ldi	r25, 0x0E	; 14
   15bbe:	0e 94 f4 a4 	call	0x149e8	; 0x149e8 <_Z8ftostr51RKf>
   15bc2:	9c 01       	movw	r18, r24
   15bc4:	4e e3       	ldi	r20, 0x3E	; 62
   15bc6:	6f ef       	ldi	r22, 0xFF	; 255
   15bc8:	73 e1       	ldi	r23, 0x13	; 19
   15bca:	81 2f       	mov	r24, r17
   15bcc:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15bd0:	0b c0       	rjmp	.+22     	; 0x15be8 <_ZL23lcd_control_motion_menuv+0xe94>
   15bd2:	82 e8       	ldi	r24, 0x82	; 130
   15bd4:	9e e0       	ldi	r25, 0x0E	; 14
   15bd6:	0e 94 f4 a4 	call	0x149e8	; 0x149e8 <_Z8ftostr51RKf>
   15bda:	9c 01       	movw	r18, r24
   15bdc:	40 e2       	ldi	r20, 0x20	; 32
   15bde:	6f ef       	ldi	r22, 0xFF	; 255
   15be0:	73 e1       	ldi	r23, 0x13	; 19
   15be2:	81 2f       	mov	r24, r17
   15be4:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15be8:	88 20       	and	r8, r8
   15bea:	19 f1       	breq	.+70     	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15bec:	60 91 f4 11 	lds	r22, 0x11F4
   15bf0:	70 91 f5 11 	lds	r23, 0x11F5
   15bf4:	80 91 f6 11 	lds	r24, 0x11F6
   15bf8:	90 91 f7 11 	lds	r25, 0x11F7
   15bfc:	a3 01       	movw	r20, r6
   15bfe:	92 01       	movw	r18, r4
   15c00:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15c04:	23 31       	cpi	r18, 0x13	; 19
   15c06:	31 05       	cpc	r19, r1
   15c08:	41 05       	cpc	r20, r1
   15c0a:	51 05       	cpc	r21, r1
   15c0c:	91 f4       	brne	.+36     	; 0x15c32 <_ZL23lcd_control_motion_menuv+0xede>
   15c0e:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15c12:	e1 2c       	mov	r14, r1
   15c14:	1c e3       	ldi	r17, 0x3C	; 60
   15c16:	f1 2e       	mov	r15, r17
   15c18:	0c e1       	ldi	r16, 0x1C	; 28
   15c1a:	16 e4       	ldi	r17, 0x46	; 70
   15c1c:	20 e0       	ldi	r18, 0x00	; 0
   15c1e:	30 e0       	ldi	r19, 0x00	; 0
   15c20:	40 ea       	ldi	r20, 0xA0	; 160
   15c22:	50 e4       	ldi	r21, 0x40	; 64
   15c24:	62 e8       	ldi	r22, 0x82	; 130
   15c26:	7e e0       	ldi	r23, 0x0E	; 14
   15c28:	89 e0       	ldi	r24, 0x09	; 9
   15c2a:	94 e1       	ldi	r25, 0x14	; 20
   15c2c:	0e 94 e6 80 	call	0x101cc	; 0x101cc <_ZL32menu_action_setting_edit_float51PKcPfff>
   15c30:	3c c0       	rjmp	.+120    	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
#ifdef ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED
    MENU_ITEM_EDIT(bool, "Endstop abort", &abort_on_endstop_hit);
#endif
    END_MENU();
   15c32:	80 91 f4 11 	lds	r24, 0x11F4
   15c36:	90 91 f5 11 	lds	r25, 0x11F5
   15c3a:	a0 91 f6 11 	lds	r26, 0x11F6
   15c3e:	b0 91 f7 11 	lds	r27, 0x11F7
   15c42:	84 36       	cpi	r24, 0x64	; 100
   15c44:	91 05       	cpc	r25, r1
   15c46:	a1 05       	cpc	r26, r1
   15c48:	b1 05       	cpc	r27, r1
   15c4a:	60 f0       	brcs	.+24     	; 0x15c64 <_ZL23lcd_control_motion_menuv+0xf10>
   15c4c:	83 e6       	ldi	r24, 0x63	; 99
   15c4e:	90 e0       	ldi	r25, 0x00	; 0
   15c50:	a0 e0       	ldi	r26, 0x00	; 0
   15c52:	b0 e0       	ldi	r27, 0x00	; 0
   15c54:	80 93 f4 11 	sts	0x11F4, r24
   15c58:	90 93 f5 11 	sts	0x11F5, r25
   15c5c:	a0 93 f6 11 	sts	0x11F6, r26
   15c60:	b0 93 f7 11 	sts	0x11F7, r27
   15c64:	60 91 f4 11 	lds	r22, 0x11F4
   15c68:	70 91 f5 11 	lds	r23, 0x11F5
   15c6c:	80 91 f6 11 	lds	r24, 0x11F6
   15c70:	90 91 f7 11 	lds	r25, 0x11F7
   15c74:	a3 01       	movw	r20, r6
   15c76:	92 01       	movw	r18, r4
   15c78:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15c7c:	42 2f       	mov	r20, r18
   15c7e:	50 e0       	ldi	r21, 0x00	; 0
   15c80:	80 91 fd 11 	lds	r24, 0x11FD
   15c84:	90 e0       	ldi	r25, 0x00	; 0
   15c86:	04 96       	adiw	r24, 0x04	; 4
   15c88:	48 17       	cp	r20, r24
   15c8a:	59 07       	cpc	r21, r25
   15c8c:	4c f0       	brlt	.+18     	; 0x15ca0 <_ZL23lcd_control_motion_menuv+0xf4c>
   15c8e:	02 2f       	mov	r16, r18
   15c90:	03 50       	subi	r16, 0x03	; 3
   15c92:	00 93 fd 11 	sts	0x11FD, r16
   15c96:	81 e0       	ldi	r24, 0x01	; 1
   15c98:	80 93 64 02 	sts	0x0264, r24
    END_MENU();
}

static void lcd_control_motion_menu()
{
    START_MENU();
   15c9c:	10 e0       	ldi	r17, 0x00	; 0
   15c9e:	c9 c8       	rjmp	.-3694   	; 0x14e32 <_ZL23lcd_control_motion_menuv+0xde>
   15ca0:	1f 5f       	subi	r17, 0xFF	; 255
   15ca2:	0f 5f       	subi	r16, 0xFF	; 255
   15ca4:	14 30       	cpi	r17, 0x04	; 4
   15ca6:	08 f4       	brcc	.+2      	; 0x15caa <_ZL23lcd_control_motion_menuv+0xf56>
   15ca8:	c4 c8       	rjmp	.-3704   	; 0x14e32 <_ZL23lcd_control_motion_menuv+0xde>
    MENU_ITEM_EDIT(float51, MSG_ESTEPS, &axis_steps_per_unit[E_AXIS], 5, 9999);    
#ifdef ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED
    MENU_ITEM_EDIT(bool, "Endstop abort", &abort_on_endstop_hit);
#endif
    END_MENU();
}
   15caa:	a0 96       	adiw	r28, 0x20	; 32
   15cac:	0f b6       	in	r0, 0x3f	; 63
   15cae:	f8 94       	cli
   15cb0:	de bf       	out	0x3e, r29	; 62
   15cb2:	0f be       	out	0x3f, r0	; 63
   15cb4:	cd bf       	out	0x3d, r28	; 61
   15cb6:	df 91       	pop	r29
   15cb8:	cf 91       	pop	r28
   15cba:	1f 91       	pop	r17
   15cbc:	0f 91       	pop	r16
   15cbe:	ff 90       	pop	r15
   15cc0:	ef 90       	pop	r14
   15cc2:	df 90       	pop	r13
   15cc4:	cf 90       	pop	r12
   15cc6:	bf 90       	pop	r11
   15cc8:	af 90       	pop	r10
   15cca:	8f 90       	pop	r8
   15ccc:	7f 90       	pop	r7
   15cce:	6f 90       	pop	r6
   15cd0:	5f 90       	pop	r5
   15cd2:	4f 90       	pop	r4
   15cd4:	3f 90       	pop	r3
   15cd6:	2f 90       	pop	r2
   15cd8:	08 95       	ret

00015cda <_ZL28lcd_control_temperature_menuv>:
    MENU_ITEM(function, MSG_RESTORE_FAILSAFE, Config_ResetDefault);
    END_MENU();
}

static void lcd_control_temperature_menu()
{
   15cda:	3f 92       	push	r3
   15cdc:	4f 92       	push	r4
   15cde:	6f 92       	push	r6
   15ce0:	8f 92       	push	r8
   15ce2:	9f 92       	push	r9
   15ce4:	af 92       	push	r10
   15ce6:	bf 92       	push	r11
   15ce8:	cf 92       	push	r12
   15cea:	df 92       	push	r13
   15cec:	ef 92       	push	r14
   15cee:	ff 92       	push	r15
   15cf0:	0f 93       	push	r16
   15cf2:	1f 93       	push	r17
   15cf4:	cf 93       	push	r28
   15cf6:	df 93       	push	r29
#ifdef PIDTEMP
    // set up temp variables - undo the default scaling
    raw_Ki = unscalePID_i(Ki);
   15cf8:	60 91 57 02 	lds	r22, 0x0257
   15cfc:	70 91 58 02 	lds	r23, 0x0258
   15d00:	80 91 59 02 	lds	r24, 0x0259
   15d04:	90 91 5a 02 	lds	r25, 0x025A
   15d08:	0e 94 90 7d 	call	0xfb20	; 0xfb20 <_Z12unscalePID_if>
   15d0c:	60 93 d8 11 	sts	0x11D8, r22
   15d10:	70 93 d9 11 	sts	0x11D9, r23
   15d14:	80 93 da 11 	sts	0x11DA, r24
   15d18:	90 93 db 11 	sts	0x11DB, r25
    raw_Kd = unscalePID_d(Kd);
   15d1c:	60 91 53 02 	lds	r22, 0x0253
   15d20:	70 91 54 02 	lds	r23, 0x0254
   15d24:	80 91 55 02 	lds	r24, 0x0255
   15d28:	90 91 56 02 	lds	r25, 0x0256
   15d2c:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <_Z12unscalePID_df>
   15d30:	60 93 d4 11 	sts	0x11D4, r22
   15d34:	70 93 d5 11 	sts	0x11D5, r23
   15d38:	80 93 d6 11 	sts	0x11D6, r24
   15d3c:	90 93 d7 11 	sts	0x11D7, r25
#endif

    START_MENU();
   15d40:	80 91 f4 11 	lds	r24, 0x11F4
   15d44:	90 91 f5 11 	lds	r25, 0x11F5
   15d48:	a0 91 f6 11 	lds	r26, 0x11F6
   15d4c:	b0 91 f7 11 	lds	r27, 0x11F7
   15d50:	81 30       	cpi	r24, 0x01	; 1
   15d52:	90 48       	sbci	r25, 0x80	; 128
   15d54:	a1 05       	cpc	r26, r1
   15d56:	b1 05       	cpc	r27, r1
   15d58:	40 f0       	brcs	.+16     	; 0x15d6a <_ZL28lcd_control_temperature_menuv+0x90>
   15d5a:	10 92 f4 11 	sts	0x11F4, r1
   15d5e:	10 92 f5 11 	sts	0x11F5, r1
   15d62:	10 92 f6 11 	sts	0x11F6, r1
   15d66:	10 92 f7 11 	sts	0x11F7, r1
   15d6a:	60 91 f4 11 	lds	r22, 0x11F4
   15d6e:	70 91 f5 11 	lds	r23, 0x11F5
   15d72:	80 91 f6 11 	lds	r24, 0x11F6
   15d76:	90 91 f7 11 	lds	r25, 0x11F7
   15d7a:	25 e0       	ldi	r18, 0x05	; 5
   15d7c:	30 e0       	ldi	r19, 0x00	; 0
   15d7e:	40 e0       	ldi	r20, 0x00	; 0
   15d80:	50 e0       	ldi	r21, 0x00	; 0
   15d82:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15d86:	80 91 fd 11 	lds	r24, 0x11FD
   15d8a:	90 e0       	ldi	r25, 0x00	; 0
   15d8c:	a0 e0       	ldi	r26, 0x00	; 0
   15d8e:	b0 e0       	ldi	r27, 0x00	; 0
   15d90:	28 17       	cp	r18, r24
   15d92:	39 07       	cpc	r19, r25
   15d94:	4a 07       	cpc	r20, r26
   15d96:	5b 07       	cpc	r21, r27
   15d98:	10 f4       	brcc	.+4      	; 0x15d9e <_ZL28lcd_control_temperature_menuv+0xc4>
   15d9a:	20 93 fd 11 	sts	0x11FD, r18
   15d9e:	d0 91 fd 11 	lds	r29, 0x11FD
   15da2:	60 90 fe 11 	lds	r6, 0x11FE
   15da6:	62 fa       	bst	r6, 2
   15da8:	66 24       	eor	r6, r6
   15daa:	60 f8       	bld	r6, 0
   15dac:	c0 e0       	ldi	r28, 0x00	; 0
    MENU_ITEM(back, MSG_CONTROL, lcd_control_menu);
    MENU_ITEM_EDIT(int3, MSG_NOZZLE, &target_temperature[0], 0, HEATER_0_MAXTEMP - 15);
#if TEMP_SENSOR_1 != 0
    MENU_ITEM_EDIT(int3, MSG_NOZZLE1, &target_temperature[1], 0, HEATER_1_MAXTEMP - 15);
   15dae:	0f 2e       	mov	r0, r31
   15db0:	f5 e0       	ldi	r31, 0x05	; 5
   15db2:	cf 2e       	mov	r12, r31
   15db4:	d1 2c       	mov	r13, r1
   15db6:	e1 2c       	mov	r14, r1
   15db8:	f1 2c       	mov	r15, r1
   15dba:	f0 2d       	mov	r31, r0
#if TEMP_SENSOR_BED != 0
    MENU_ITEM_EDIT(int3, MSG_BED, &target_temperature_bed, 0, BED_MAXTEMP - 15);
#endif
    MENU_ITEM_EDIT(int3, MSG_FAN_SPEED, &fanSpeed, 0, 255);
#ifdef AUTOTEMP
    MENU_ITEM_EDIT(bool, MSG_AUTOTEMP, &autotemp_enabled);
   15dbc:	02 e6       	ldi	r16, 0x62	; 98
   15dbe:	14 e1       	ldi	r17, 0x14	; 20
    MENU_ITEM_EDIT(float3, MSG_PID_C, &Kc, 1, 9990);
# endif//PID_ADD_EXTRUSION_RATE
#endif//PIDTEMP
    MENU_ITEM(submenu, MSG_PREHEAT_PLA_SETTINGS, lcd_control_temperature_preheat_pla_settings_menu);
    MENU_ITEM(submenu, MSG_PREHEAT_ABS_SETTINGS, lcd_control_temperature_preheat_abs_settings_menu);
    END_MENU();
   15dc0:	0f 2e       	mov	r0, r31
   15dc2:	f5 e4       	ldi	r31, 0x45	; 69
   15dc4:	8f 2e       	mov	r8, r31
   15dc6:	91 2c       	mov	r9, r1
   15dc8:	a1 2c       	mov	r10, r1
   15dca:	b1 2c       	mov	r11, r1
   15dcc:	f0 2d       	mov	r31, r0
   15dce:	33 24       	eor	r3, r3
   15dd0:	33 94       	inc	r3
    // set up temp variables - undo the default scaling
    raw_Ki = unscalePID_i(Ki);
    raw_Kd = unscalePID_d(Kd);
#endif

    START_MENU();
   15dd2:	41 2c       	mov	r4, r1
    MENU_ITEM(back, MSG_CONTROL, lcd_control_menu);
   15dd4:	d1 11       	cpse	r29, r1
   15dd6:	36 c0       	rjmp	.+108    	; 0x15e44 <_ZL28lcd_control_temperature_menuv+0x16a>
   15dd8:	80 91 64 02 	lds	r24, 0x0264
   15ddc:	88 23       	and	r24, r24
   15dde:	d9 f0       	breq	.+54     	; 0x15e16 <_ZL28lcd_control_temperature_menuv+0x13c>
   15de0:	80 91 f4 11 	lds	r24, 0x11F4
   15de4:	90 91 f5 11 	lds	r25, 0x11F5
   15de8:	a0 91 f6 11 	lds	r26, 0x11F6
   15dec:	b0 91 f7 11 	lds	r27, 0x11F7
   15df0:	05 97       	sbiw	r24, 0x05	; 5
   15df2:	a1 05       	cpc	r26, r1
   15df4:	b1 05       	cpc	r27, r1
   15df6:	40 f4       	brcc	.+16     	; 0x15e08 <_ZL28lcd_control_temperature_menuv+0x12e>
   15df8:	23 e0       	ldi	r18, 0x03	; 3
   15dfa:	43 e0       	ldi	r20, 0x03	; 3
   15dfc:	63 e1       	ldi	r22, 0x13	; 19
   15dfe:	74 e1       	ldi	r23, 0x14	; 20
   15e00:	8c 2f       	mov	r24, r28
   15e02:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   15e06:	07 c0       	rjmp	.+14     	; 0x15e16 <_ZL28lcd_control_temperature_menuv+0x13c>
   15e08:	23 e0       	ldi	r18, 0x03	; 3
   15e0a:	40 e2       	ldi	r20, 0x20	; 32
   15e0c:	63 e1       	ldi	r22, 0x13	; 19
   15e0e:	74 e1       	ldi	r23, 0x14	; 20
   15e10:	8c 2f       	mov	r24, r28
   15e12:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   15e16:	66 20       	and	r6, r6
   15e18:	09 f4       	brne	.+2      	; 0x15e1c <_ZL28lcd_control_temperature_menuv+0x142>
   15e1a:	b6 c0       	rjmp	.+364    	; 0x15f88 <_ZL28lcd_control_temperature_menuv+0x2ae>
   15e1c:	80 91 f4 11 	lds	r24, 0x11F4
   15e20:	90 91 f5 11 	lds	r25, 0x11F5
   15e24:	a0 91 f6 11 	lds	r26, 0x11F6
   15e28:	b0 91 f7 11 	lds	r27, 0x11F7
   15e2c:	05 97       	sbiw	r24, 0x05	; 5
   15e2e:	a1 05       	cpc	r26, r1
   15e30:	b1 05       	cpc	r27, r1
   15e32:	08 f0       	brcs	.+2      	; 0x15e36 <_ZL28lcd_control_temperature_menuv+0x15c>
   15e34:	a9 c0       	rjmp	.+338    	; 0x15f88 <_ZL28lcd_control_temperature_menuv+0x2ae>
   15e36:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15e3a:	81 e6       	ldi	r24, 0x61	; 97
   15e3c:	93 e8       	ldi	r25, 0x83	; 131
   15e3e:	0e 94 d2 82 	call	0x105a4	; 0x105a4 <_ZL16menu_action_backPFvvE>
   15e42:	aa c4       	rjmp	.+2388   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(int3, MSG_NOZZLE, &target_temperature[0], 0, HEATER_0_MAXTEMP - 15);
   15e44:	d1 30       	cpi	r29, 0x01	; 1
   15e46:	09 f0       	breq	.+2      	; 0x15e4a <_ZL28lcd_control_temperature_menuv+0x170>
   15e48:	4e c0       	rjmp	.+156    	; 0x15ee6 <_ZL28lcd_control_temperature_menuv+0x20c>
   15e4a:	80 91 64 02 	lds	r24, 0x0264
   15e4e:	88 23       	and	r24, r24
   15e50:	41 f1       	breq	.+80     	; 0x15ea2 <_ZL28lcd_control_temperature_menuv+0x1c8>
   15e52:	60 91 f4 11 	lds	r22, 0x11F4
   15e56:	70 91 f5 11 	lds	r23, 0x11F5
   15e5a:	80 91 f6 11 	lds	r24, 0x11F6
   15e5e:	90 91 f7 11 	lds	r25, 0x11F7
   15e62:	a7 01       	movw	r20, r14
   15e64:	96 01       	movw	r18, r12
   15e66:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15e6a:	21 30       	cpi	r18, 0x01	; 1
   15e6c:	31 05       	cpc	r19, r1
   15e6e:	41 05       	cpc	r20, r1
   15e70:	51 05       	cpc	r21, r1
   15e72:	61 f4       	brne	.+24     	; 0x15e8c <_ZL28lcd_control_temperature_menuv+0x1b2>
   15e74:	89 e1       	ldi	r24, 0x19	; 25
   15e76:	91 e1       	ldi	r25, 0x11	; 17
   15e78:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15e7c:	9c 01       	movw	r18, r24
   15e7e:	4e e3       	ldi	r20, 0x3E	; 62
   15e80:	6b e1       	ldi	r22, 0x1B	; 27
   15e82:	74 e1       	ldi	r23, 0x14	; 20
   15e84:	8c 2f       	mov	r24, r28
   15e86:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15e8a:	0b c0       	rjmp	.+22     	; 0x15ea2 <_ZL28lcd_control_temperature_menuv+0x1c8>
   15e8c:	89 e1       	ldi	r24, 0x19	; 25
   15e8e:	91 e1       	ldi	r25, 0x11	; 17
   15e90:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15e94:	9c 01       	movw	r18, r24
   15e96:	40 e2       	ldi	r20, 0x20	; 32
   15e98:	6b e1       	ldi	r22, 0x1B	; 27
   15e9a:	74 e1       	ldi	r23, 0x14	; 20
   15e9c:	8c 2f       	mov	r24, r28
   15e9e:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15ea2:	66 20       	and	r6, r6
   15ea4:	09 f4       	brne	.+2      	; 0x15ea8 <_ZL28lcd_control_temperature_menuv+0x1ce>
   15ea6:	c1 c0       	rjmp	.+386    	; 0x1602a <_ZL28lcd_control_temperature_menuv+0x350>
   15ea8:	60 91 f4 11 	lds	r22, 0x11F4
   15eac:	70 91 f5 11 	lds	r23, 0x11F5
   15eb0:	80 91 f6 11 	lds	r24, 0x11F6
   15eb4:	90 91 f7 11 	lds	r25, 0x11F7
   15eb8:	a7 01       	movw	r20, r14
   15eba:	96 01       	movw	r18, r12
   15ebc:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15ec0:	21 30       	cpi	r18, 0x01	; 1
   15ec2:	31 05       	cpc	r19, r1
   15ec4:	41 05       	cpc	r20, r1
   15ec6:	51 05       	cpc	r21, r1
   15ec8:	09 f0       	breq	.+2      	; 0x15ecc <_ZL28lcd_control_temperature_menuv+0x1f2>
   15eca:	af c0       	rjmp	.+350    	; 0x1602a <_ZL28lcd_control_temperature_menuv+0x350>
   15ecc:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15ed0:	24 e0       	ldi	r18, 0x04	; 4
   15ed2:	31 e0       	ldi	r19, 0x01	; 1
   15ed4:	40 e0       	ldi	r20, 0x00	; 0
   15ed6:	50 e0       	ldi	r21, 0x00	; 0
   15ed8:	69 e1       	ldi	r22, 0x19	; 25
   15eda:	71 e1       	ldi	r23, 0x11	; 17
   15edc:	82 e2       	ldi	r24, 0x22	; 34
   15ede:	94 e1       	ldi	r25, 0x14	; 20
   15ee0:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   15ee4:	59 c4       	rjmp	.+2226   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
#if TEMP_SENSOR_1 != 0
    MENU_ITEM_EDIT(int3, MSG_NOZZLE1, &target_temperature[1], 0, HEATER_1_MAXTEMP - 15);
   15ee6:	d2 30       	cpi	r29, 0x02	; 2
   15ee8:	09 f0       	breq	.+2      	; 0x15eec <_ZL28lcd_control_temperature_menuv+0x212>
   15eea:	4e c0       	rjmp	.+156    	; 0x15f88 <_ZL28lcd_control_temperature_menuv+0x2ae>
   15eec:	80 91 64 02 	lds	r24, 0x0264
   15ef0:	88 23       	and	r24, r24
   15ef2:	41 f1       	breq	.+80     	; 0x15f44 <_ZL28lcd_control_temperature_menuv+0x26a>
   15ef4:	60 91 f4 11 	lds	r22, 0x11F4
   15ef8:	70 91 f5 11 	lds	r23, 0x11F5
   15efc:	80 91 f6 11 	lds	r24, 0x11F6
   15f00:	90 91 f7 11 	lds	r25, 0x11F7
   15f04:	a7 01       	movw	r20, r14
   15f06:	96 01       	movw	r18, r12
   15f08:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15f0c:	22 30       	cpi	r18, 0x02	; 2
   15f0e:	31 05       	cpc	r19, r1
   15f10:	41 05       	cpc	r20, r1
   15f12:	51 05       	cpc	r21, r1
   15f14:	61 f4       	brne	.+24     	; 0x15f2e <_ZL28lcd_control_temperature_menuv+0x254>
   15f16:	8b e1       	ldi	r24, 0x1B	; 27
   15f18:	91 e1       	ldi	r25, 0x11	; 17
   15f1a:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15f1e:	9c 01       	movw	r18, r24
   15f20:	4e e3       	ldi	r20, 0x3E	; 62
   15f22:	69 e2       	ldi	r22, 0x29	; 41
   15f24:	74 e1       	ldi	r23, 0x14	; 20
   15f26:	8c 2f       	mov	r24, r28
   15f28:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15f2c:	0b c0       	rjmp	.+22     	; 0x15f44 <_ZL28lcd_control_temperature_menuv+0x26a>
   15f2e:	8b e1       	ldi	r24, 0x1B	; 27
   15f30:	91 e1       	ldi	r25, 0x11	; 17
   15f32:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15f36:	9c 01       	movw	r18, r24
   15f38:	40 e2       	ldi	r20, 0x20	; 32
   15f3a:	69 e2       	ldi	r22, 0x29	; 41
   15f3c:	74 e1       	ldi	r23, 0x14	; 20
   15f3e:	8c 2f       	mov	r24, r28
   15f40:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15f44:	66 20       	and	r6, r6
   15f46:	09 f4       	brne	.+2      	; 0x15f4a <_ZL28lcd_control_temperature_menuv+0x270>
   15f48:	cb c0       	rjmp	.+406    	; 0x160e0 <_ZL28lcd_control_temperature_menuv+0x406>
   15f4a:	60 91 f4 11 	lds	r22, 0x11F4
   15f4e:	70 91 f5 11 	lds	r23, 0x11F5
   15f52:	80 91 f6 11 	lds	r24, 0x11F6
   15f56:	90 91 f7 11 	lds	r25, 0x11F7
   15f5a:	a7 01       	movw	r20, r14
   15f5c:	96 01       	movw	r18, r12
   15f5e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15f62:	22 30       	cpi	r18, 0x02	; 2
   15f64:	31 05       	cpc	r19, r1
   15f66:	41 05       	cpc	r20, r1
   15f68:	51 05       	cpc	r21, r1
   15f6a:	09 f0       	breq	.+2      	; 0x15f6e <_ZL28lcd_control_temperature_menuv+0x294>
   15f6c:	b9 c0       	rjmp	.+370    	; 0x160e0 <_ZL28lcd_control_temperature_menuv+0x406>
   15f6e:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   15f72:	24 e0       	ldi	r18, 0x04	; 4
   15f74:	31 e0       	ldi	r19, 0x01	; 1
   15f76:	40 e0       	ldi	r20, 0x00	; 0
   15f78:	50 e0       	ldi	r21, 0x00	; 0
   15f7a:	6b e1       	ldi	r22, 0x1B	; 27
   15f7c:	71 e1       	ldi	r23, 0x11	; 17
   15f7e:	81 e3       	ldi	r24, 0x31	; 49
   15f80:	94 e1       	ldi	r25, 0x14	; 20
   15f82:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   15f86:	08 c4       	rjmp	.+2064   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(int3, MSG_NOZZLE2, &target_temperature[2], 0, HEATER_2_MAXTEMP - 15);
#endif
#if TEMP_SENSOR_BED != 0
    MENU_ITEM_EDIT(int3, MSG_BED, &target_temperature_bed, 0, BED_MAXTEMP - 15);
#endif
    MENU_ITEM_EDIT(int3, MSG_FAN_SPEED, &fanSpeed, 0, 255);
   15f88:	d3 30       	cpi	r29, 0x03	; 3
   15f8a:	09 f0       	breq	.+2      	; 0x15f8e <_ZL28lcd_control_temperature_menuv+0x2b4>
   15f8c:	4e c0       	rjmp	.+156    	; 0x1602a <_ZL28lcd_control_temperature_menuv+0x350>
   15f8e:	80 91 64 02 	lds	r24, 0x0264
   15f92:	88 23       	and	r24, r24
   15f94:	41 f1       	breq	.+80     	; 0x15fe6 <_ZL28lcd_control_temperature_menuv+0x30c>
   15f96:	60 91 f4 11 	lds	r22, 0x11F4
   15f9a:	70 91 f5 11 	lds	r23, 0x11F5
   15f9e:	80 91 f6 11 	lds	r24, 0x11F6
   15fa2:	90 91 f7 11 	lds	r25, 0x11F7
   15fa6:	a7 01       	movw	r20, r14
   15fa8:	96 01       	movw	r18, r12
   15faa:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   15fae:	23 30       	cpi	r18, 0x03	; 3
   15fb0:	31 05       	cpc	r19, r1
   15fb2:	41 05       	cpc	r20, r1
   15fb4:	51 05       	cpc	r21, r1
   15fb6:	61 f4       	brne	.+24     	; 0x15fd0 <_ZL28lcd_control_temperature_menuv+0x2f6>
   15fb8:	81 e6       	ldi	r24, 0x61	; 97
   15fba:	95 e0       	ldi	r25, 0x05	; 5
   15fbc:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15fc0:	9c 01       	movw	r18, r24
   15fc2:	4e e3       	ldi	r20, 0x3E	; 62
   15fc4:	69 e3       	ldi	r22, 0x39	; 57
   15fc6:	74 e1       	ldi	r23, 0x14	; 20
   15fc8:	8c 2f       	mov	r24, r28
   15fca:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15fce:	0b c0       	rjmp	.+22     	; 0x15fe6 <_ZL28lcd_control_temperature_menuv+0x30c>
   15fd0:	81 e6       	ldi	r24, 0x61	; 97
   15fd2:	95 e0       	ldi	r25, 0x05	; 5
   15fd4:	0e 94 d4 99 	call	0x133a8	; 0x133a8 <_Z7itostr3RKi>
   15fd8:	9c 01       	movw	r18, r24
   15fda:	40 e2       	ldi	r20, 0x20	; 32
   15fdc:	69 e3       	ldi	r22, 0x39	; 57
   15fde:	74 e1       	ldi	r23, 0x14	; 20
   15fe0:	8c 2f       	mov	r24, r28
   15fe2:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   15fe6:	66 20       	and	r6, r6
   15fe8:	09 f4       	brne	.+2      	; 0x15fec <_ZL28lcd_control_temperature_menuv+0x312>
   15fea:	ce c0       	rjmp	.+412    	; 0x16188 <_ZL28lcd_control_temperature_menuv+0x4ae>
   15fec:	60 91 f4 11 	lds	r22, 0x11F4
   15ff0:	70 91 f5 11 	lds	r23, 0x11F5
   15ff4:	80 91 f6 11 	lds	r24, 0x11F6
   15ff8:	90 91 f7 11 	lds	r25, 0x11F7
   15ffc:	a7 01       	movw	r20, r14
   15ffe:	96 01       	movw	r18, r12
   16000:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16004:	23 30       	cpi	r18, 0x03	; 3
   16006:	31 05       	cpc	r19, r1
   16008:	41 05       	cpc	r20, r1
   1600a:	51 05       	cpc	r21, r1
   1600c:	09 f0       	breq	.+2      	; 0x16010 <_ZL28lcd_control_temperature_menuv+0x336>
   1600e:	bc c0       	rjmp	.+376    	; 0x16188 <_ZL28lcd_control_temperature_menuv+0x4ae>
   16010:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16014:	2f ef       	ldi	r18, 0xFF	; 255
   16016:	30 e0       	ldi	r19, 0x00	; 0
   16018:	40 e0       	ldi	r20, 0x00	; 0
   1601a:	50 e0       	ldi	r21, 0x00	; 0
   1601c:	61 e6       	ldi	r22, 0x61	; 97
   1601e:	75 e0       	ldi	r23, 0x05	; 5
   16020:	83 e4       	ldi	r24, 0x43	; 67
   16022:	94 e1       	ldi	r25, 0x14	; 20
   16024:	0e 94 ca 7f 	call	0xff94	; 0xff94 <_ZL29menu_action_setting_edit_int3PKcPiii>
   16028:	b7 c3       	rjmp	.+1902   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
#ifdef AUTOTEMP
    MENU_ITEM_EDIT(bool, MSG_AUTOTEMP, &autotemp_enabled);
   1602a:	d4 30       	cpi	r29, 0x04	; 4
   1602c:	09 f0       	breq	.+2      	; 0x16030 <_ZL28lcd_control_temperature_menuv+0x356>
   1602e:	58 c0       	rjmp	.+176    	; 0x160e0 <_ZL28lcd_control_temperature_menuv+0x406>
   16030:	80 91 64 02 	lds	r24, 0x0264
   16034:	88 23       	and	r24, r24
   16036:	b1 f1       	breq	.+108    	; 0x160a4 <_ZL28lcd_control_temperature_menuv+0x3ca>
   16038:	60 91 f4 11 	lds	r22, 0x11F4
   1603c:	70 91 f5 11 	lds	r23, 0x11F5
   16040:	80 91 f6 11 	lds	r24, 0x11F6
   16044:	90 91 f7 11 	lds	r25, 0x11F7
   16048:	a7 01       	movw	r20, r14
   1604a:	96 01       	movw	r18, r12
   1604c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16050:	24 30       	cpi	r18, 0x04	; 4
   16052:	31 05       	cpc	r19, r1
   16054:	41 05       	cpc	r20, r1
   16056:	51 05       	cpc	r21, r1
   16058:	a1 f4       	brne	.+40     	; 0x16082 <_ZL28lcd_control_temperature_menuv+0x3a8>
   1605a:	80 91 29 0e 	lds	r24, 0x0E29
   1605e:	88 23       	and	r24, r24
   16060:	29 f0       	breq	.+10     	; 0x1606c <_ZL28lcd_control_temperature_menuv+0x392>
   16062:	86 e5       	ldi	r24, 0x56	; 86
   16064:	94 e1       	ldi	r25, 0x14	; 20
   16066:	28 2f       	mov	r18, r24
   16068:	39 2f       	mov	r19, r25
   1606a:	04 c0       	rjmp	.+8      	; 0x16074 <_ZL28lcd_control_temperature_menuv+0x39a>
   1606c:	8a e5       	ldi	r24, 0x5A	; 90
   1606e:	94 e1       	ldi	r25, 0x14	; 20
   16070:	28 2f       	mov	r18, r24
   16072:	39 2f       	mov	r19, r25
   16074:	4e e3       	ldi	r20, 0x3E	; 62
   16076:	6d e4       	ldi	r22, 0x4D	; 77
   16078:	74 e1       	ldi	r23, 0x14	; 20
   1607a:	8c 2f       	mov	r24, r28
   1607c:	0e 94 87 92 	call	0x1250e	; 0x1250e <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_>
   16080:	11 c0       	rjmp	.+34     	; 0x160a4 <_ZL28lcd_control_temperature_menuv+0x3ca>
   16082:	80 91 29 0e 	lds	r24, 0x0E29
   16086:	88 23       	and	r24, r24
   16088:	29 f0       	breq	.+10     	; 0x16094 <_ZL28lcd_control_temperature_menuv+0x3ba>
   1608a:	8e e5       	ldi	r24, 0x5E	; 94
   1608c:	94 e1       	ldi	r25, 0x14	; 20
   1608e:	28 2f       	mov	r18, r24
   16090:	39 2f       	mov	r19, r25
   16092:	02 c0       	rjmp	.+4      	; 0x16098 <_ZL28lcd_control_temperature_menuv+0x3be>
   16094:	20 2f       	mov	r18, r16
   16096:	31 2f       	mov	r19, r17
   16098:	40 e2       	ldi	r20, 0x20	; 32
   1609a:	6d e4       	ldi	r22, 0x4D	; 77
   1609c:	74 e1       	ldi	r23, 0x14	; 20
   1609e:	8c 2f       	mov	r24, r28
   160a0:	0e 94 87 92 	call	0x1250e	; 0x1250e <_ZL50lcd_implementation_drawmenu_setting_edit_generic_PhPKccS0_>
   160a4:	66 20       	and	r6, r6
   160a6:	09 f4       	brne	.+2      	; 0x160aa <_ZL28lcd_control_temperature_menuv+0x3d0>
   160a8:	c3 c0       	rjmp	.+390    	; 0x16230 <_ZL28lcd_control_temperature_menuv+0x556>
   160aa:	60 91 f4 11 	lds	r22, 0x11F4
   160ae:	70 91 f5 11 	lds	r23, 0x11F5
   160b2:	80 91 f6 11 	lds	r24, 0x11F6
   160b6:	90 91 f7 11 	lds	r25, 0x11F7
   160ba:	a7 01       	movw	r20, r14
   160bc:	96 01       	movw	r18, r12
   160be:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   160c2:	24 30       	cpi	r18, 0x04	; 4
   160c4:	31 05       	cpc	r19, r1
   160c6:	41 05       	cpc	r20, r1
   160c8:	51 05       	cpc	r21, r1
   160ca:	09 f0       	breq	.+2      	; 0x160ce <_ZL28lcd_control_temperature_menuv+0x3f4>
   160cc:	b1 c0       	rjmp	.+354    	; 0x16230 <_ZL28lcd_control_temperature_menuv+0x556>
   160ce:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
    card.chdir(filename);
    encoderPosition = 0;
}
static void menu_action_setting_edit_bool(const char* pstr, bool* ptr)
{
    *ptr = !(*ptr);
   160d2:	90 91 29 0e 	lds	r25, 0x0E29
   160d6:	81 e0       	ldi	r24, 0x01	; 1
   160d8:	89 27       	eor	r24, r25
   160da:	80 93 29 0e 	sts	0x0E29, r24
   160de:	5c c3       	rjmp	.+1720   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(int3, MSG_BED, &target_temperature_bed, 0, BED_MAXTEMP - 15);
#endif
    MENU_ITEM_EDIT(int3, MSG_FAN_SPEED, &fanSpeed, 0, 255);
#ifdef AUTOTEMP
    MENU_ITEM_EDIT(bool, MSG_AUTOTEMP, &autotemp_enabled);
    MENU_ITEM_EDIT(float3, MSG_MIN, &autotemp_min, 0, HEATER_0_MAXTEMP - 15);
   160e0:	d5 30       	cpi	r29, 0x05	; 5
   160e2:	09 f0       	breq	.+2      	; 0x160e6 <_ZL28lcd_control_temperature_menuv+0x40c>
   160e4:	51 c0       	rjmp	.+162    	; 0x16188 <_ZL28lcd_control_temperature_menuv+0x4ae>
   160e6:	80 91 64 02 	lds	r24, 0x0264
   160ea:	88 23       	and	r24, r24
   160ec:	41 f1       	breq	.+80     	; 0x1613e <_ZL28lcd_control_temperature_menuv+0x464>
   160ee:	60 91 f4 11 	lds	r22, 0x11F4
   160f2:	70 91 f5 11 	lds	r23, 0x11F5
   160f6:	80 91 f6 11 	lds	r24, 0x11F6
   160fa:	90 91 f7 11 	lds	r25, 0x11F7
   160fe:	a7 01       	movw	r20, r14
   16100:	96 01       	movw	r18, r12
   16102:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16106:	25 30       	cpi	r18, 0x05	; 5
   16108:	31 05       	cpc	r19, r1
   1610a:	41 05       	cpc	r20, r1
   1610c:	51 05       	cpc	r21, r1
   1610e:	61 f4       	brne	.+24     	; 0x16128 <_ZL28lcd_control_temperature_menuv+0x44e>
   16110:	82 e4       	ldi	r24, 0x42	; 66
   16112:	92 e0       	ldi	r25, 0x02	; 2
   16114:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   16118:	9c 01       	movw	r18, r24
   1611a:	4e e3       	ldi	r20, 0x3E	; 62
   1611c:	66 e6       	ldi	r22, 0x66	; 102
   1611e:	74 e1       	ldi	r23, 0x14	; 20
   16120:	8c 2f       	mov	r24, r28
   16122:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   16126:	0b c0       	rjmp	.+22     	; 0x1613e <_ZL28lcd_control_temperature_menuv+0x464>
   16128:	82 e4       	ldi	r24, 0x42	; 66
   1612a:	92 e0       	ldi	r25, 0x02	; 2
   1612c:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   16130:	9c 01       	movw	r18, r24
   16132:	40 e2       	ldi	r20, 0x20	; 32
   16134:	66 e6       	ldi	r22, 0x66	; 102
   16136:	74 e1       	ldi	r23, 0x14	; 20
   16138:	8c 2f       	mov	r24, r28
   1613a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1613e:	66 20       	and	r6, r6
   16140:	09 f4       	brne	.+2      	; 0x16144 <_ZL28lcd_control_temperature_menuv+0x46a>
   16142:	0c c1       	rjmp	.+536    	; 0x1635c <_ZL28lcd_control_temperature_menuv+0x682>
   16144:	60 91 f4 11 	lds	r22, 0x11F4
   16148:	70 91 f5 11 	lds	r23, 0x11F5
   1614c:	80 91 f6 11 	lds	r24, 0x11F6
   16150:	90 91 f7 11 	lds	r25, 0x11F7
   16154:	a7 01       	movw	r20, r14
   16156:	96 01       	movw	r18, r12
   16158:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1615c:	25 30       	cpi	r18, 0x05	; 5
   1615e:	31 05       	cpc	r19, r1
   16160:	41 05       	cpc	r20, r1
   16162:	51 05       	cpc	r21, r1
   16164:	09 f0       	breq	.+2      	; 0x16168 <_ZL28lcd_control_temperature_menuv+0x48e>
   16166:	fa c0       	rjmp	.+500    	; 0x1635c <_ZL28lcd_control_temperature_menuv+0x682>
   16168:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1616c:	e1 2c       	mov	r14, r1
   1616e:	f1 2c       	mov	r15, r1
   16170:	02 e8       	ldi	r16, 0x82	; 130
   16172:	13 e4       	ldi	r17, 0x43	; 67
   16174:	20 e0       	ldi	r18, 0x00	; 0
   16176:	30 e0       	ldi	r19, 0x00	; 0
   16178:	a9 01       	movw	r20, r18
   1617a:	62 e4       	ldi	r22, 0x42	; 66
   1617c:	72 e0       	ldi	r23, 0x02	; 2
   1617e:	8d e6       	ldi	r24, 0x6D	; 109
   16180:	94 e1       	ldi	r25, 0x14	; 20
   16182:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   16186:	08 c3       	rjmp	.+1552   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(float3, MSG_MAX, &autotemp_max, 0, HEATER_0_MAXTEMP - 15);
   16188:	d6 30       	cpi	r29, 0x06	; 6
   1618a:	09 f0       	breq	.+2      	; 0x1618e <_ZL28lcd_control_temperature_menuv+0x4b4>
   1618c:	51 c0       	rjmp	.+162    	; 0x16230 <_ZL28lcd_control_temperature_menuv+0x556>
   1618e:	80 91 64 02 	lds	r24, 0x0264
   16192:	88 23       	and	r24, r24
   16194:	41 f1       	breq	.+80     	; 0x161e6 <_ZL28lcd_control_temperature_menuv+0x50c>
   16196:	60 91 f4 11 	lds	r22, 0x11F4
   1619a:	70 91 f5 11 	lds	r23, 0x11F5
   1619e:	80 91 f6 11 	lds	r24, 0x11F6
   161a2:	90 91 f7 11 	lds	r25, 0x11F7
   161a6:	a7 01       	movw	r20, r14
   161a8:	96 01       	movw	r18, r12
   161aa:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   161ae:	26 30       	cpi	r18, 0x06	; 6
   161b0:	31 05       	cpc	r19, r1
   161b2:	41 05       	cpc	r20, r1
   161b4:	51 05       	cpc	r21, r1
   161b6:	61 f4       	brne	.+24     	; 0x161d0 <_ZL28lcd_control_temperature_menuv+0x4f6>
   161b8:	86 e4       	ldi	r24, 0x46	; 70
   161ba:	92 e0       	ldi	r25, 0x02	; 2
   161bc:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   161c0:	9c 01       	movw	r18, r24
   161c2:	4e e3       	ldi	r20, 0x3E	; 62
   161c4:	64 e7       	ldi	r22, 0x74	; 116
   161c6:	74 e1       	ldi	r23, 0x14	; 20
   161c8:	8c 2f       	mov	r24, r28
   161ca:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   161ce:	0b c0       	rjmp	.+22     	; 0x161e6 <_ZL28lcd_control_temperature_menuv+0x50c>
   161d0:	86 e4       	ldi	r24, 0x46	; 70
   161d2:	92 e0       	ldi	r25, 0x02	; 2
   161d4:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   161d8:	9c 01       	movw	r18, r24
   161da:	40 e2       	ldi	r20, 0x20	; 32
   161dc:	64 e7       	ldi	r22, 0x74	; 116
   161de:	74 e1       	ldi	r23, 0x14	; 20
   161e0:	8c 2f       	mov	r24, r28
   161e2:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   161e6:	66 20       	and	r6, r6
   161e8:	09 f4       	brne	.+2      	; 0x161ec <_ZL28lcd_control_temperature_menuv+0x512>
   161ea:	0e c1       	rjmp	.+540    	; 0x16408 <_ZL28lcd_control_temperature_menuv+0x72e>
   161ec:	60 91 f4 11 	lds	r22, 0x11F4
   161f0:	70 91 f5 11 	lds	r23, 0x11F5
   161f4:	80 91 f6 11 	lds	r24, 0x11F6
   161f8:	90 91 f7 11 	lds	r25, 0x11F7
   161fc:	a7 01       	movw	r20, r14
   161fe:	96 01       	movw	r18, r12
   16200:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16204:	26 30       	cpi	r18, 0x06	; 6
   16206:	31 05       	cpc	r19, r1
   16208:	41 05       	cpc	r20, r1
   1620a:	51 05       	cpc	r21, r1
   1620c:	09 f0       	breq	.+2      	; 0x16210 <_ZL28lcd_control_temperature_menuv+0x536>
   1620e:	fc c0       	rjmp	.+504    	; 0x16408 <_ZL28lcd_control_temperature_menuv+0x72e>
   16210:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16214:	e1 2c       	mov	r14, r1
   16216:	f1 2c       	mov	r15, r1
   16218:	02 e8       	ldi	r16, 0x82	; 130
   1621a:	13 e4       	ldi	r17, 0x43	; 67
   1621c:	20 e0       	ldi	r18, 0x00	; 0
   1621e:	30 e0       	ldi	r19, 0x00	; 0
   16220:	a9 01       	movw	r20, r18
   16222:	66 e4       	ldi	r22, 0x46	; 70
   16224:	72 e0       	ldi	r23, 0x02	; 2
   16226:	8b e7       	ldi	r24, 0x7B	; 123
   16228:	94 e1       	ldi	r25, 0x14	; 20
   1622a:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   1622e:	b4 c2       	rjmp	.+1384   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(float32, MSG_FACTOR, &autotemp_factor, 0.0, 1.0);
   16230:	d7 30       	cpi	r29, 0x07	; 7
   16232:	09 f0       	breq	.+2      	; 0x16236 <_ZL28lcd_control_temperature_menuv+0x55c>
   16234:	93 c0       	rjmp	.+294    	; 0x1635c <_ZL28lcd_control_temperature_menuv+0x682>
   16236:	80 91 64 02 	lds	r24, 0x0264
   1623a:	88 23       	and	r24, r24
   1623c:	41 f1       	breq	.+80     	; 0x1628e <_ZL28lcd_control_temperature_menuv+0x5b4>
   1623e:	60 91 f4 11 	lds	r22, 0x11F4
   16242:	70 91 f5 11 	lds	r23, 0x11F5
   16246:	80 91 f6 11 	lds	r24, 0x11F6
   1624a:	90 91 f7 11 	lds	r25, 0x11F7
   1624e:	a7 01       	movw	r20, r14
   16250:	96 01       	movw	r18, r12
   16252:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16256:	27 30       	cpi	r18, 0x07	; 7
   16258:	31 05       	cpc	r19, r1
   1625a:	41 05       	cpc	r20, r1
   1625c:	51 05       	cpc	r21, r1
   1625e:	61 f4       	brne	.+24     	; 0x16278 <_ZL28lcd_control_temperature_menuv+0x59e>
   16260:	8e e3       	ldi	r24, 0x3E	; 62
   16262:	92 e0       	ldi	r25, 0x02	; 2
   16264:	0e 94 a8 98 	call	0x13150	; 0x13150 <_Z8ftostr32RKf>
   16268:	9c 01       	movw	r18, r24
   1626a:	4e e3       	ldi	r20, 0x3E	; 62
   1626c:	62 e8       	ldi	r22, 0x82	; 130
   1626e:	74 e1       	ldi	r23, 0x14	; 20
   16270:	8c 2f       	mov	r24, r28
   16272:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   16276:	0b c0       	rjmp	.+22     	; 0x1628e <_ZL28lcd_control_temperature_menuv+0x5b4>
   16278:	8e e3       	ldi	r24, 0x3E	; 62
   1627a:	92 e0       	ldi	r25, 0x02	; 2
   1627c:	0e 94 a8 98 	call	0x13150	; 0x13150 <_Z8ftostr32RKf>
   16280:	9c 01       	movw	r18, r24
   16282:	40 e2       	ldi	r20, 0x20	; 32
   16284:	62 e8       	ldi	r22, 0x82	; 130
   16286:	74 e1       	ldi	r23, 0x14	; 20
   16288:	8c 2f       	mov	r24, r28
   1628a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1628e:	66 20       	and	r6, r6
   16290:	09 f4       	brne	.+2      	; 0x16294 <_ZL28lcd_control_temperature_menuv+0x5ba>
   16292:	16 c1       	rjmp	.+556    	; 0x164c0 <_ZL28lcd_control_temperature_menuv+0x7e6>
   16294:	60 91 f4 11 	lds	r22, 0x11F4
   16298:	70 91 f5 11 	lds	r23, 0x11F5
   1629c:	80 91 f6 11 	lds	r24, 0x11F6
   162a0:	90 91 f7 11 	lds	r25, 0x11F7
   162a4:	a7 01       	movw	r20, r14
   162a6:	96 01       	movw	r18, r12
   162a8:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   162ac:	27 30       	cpi	r18, 0x07	; 7
   162ae:	31 05       	cpc	r19, r1
   162b0:	41 05       	cpc	r20, r1
   162b2:	51 05       	cpc	r21, r1
   162b4:	09 f0       	breq	.+2      	; 0x162b8 <_ZL28lcd_control_temperature_menuv+0x5de>
   162b6:	04 c1       	rjmp	.+520    	; 0x164c0 <_ZL28lcd_control_temperature_menuv+0x7e6>
   162b8:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
        encoderPosition = (*ptr) * scale; \
        callbackFunc = callback;\
    }
menu_edit_type(int, int3, itostr3, 1)
menu_edit_type(float, float3, ftostr3, 1)
menu_edit_type(float, float32, ftostr32, 100)
   162bc:	80 91 65 02 	lds	r24, 0x0265
   162c0:	90 91 66 02 	lds	r25, 0x0266
   162c4:	90 93 ed 11 	sts	0x11ED, r25
   162c8:	80 93 ec 11 	sts	0x11EC, r24
   162cc:	80 91 f4 11 	lds	r24, 0x11F4
   162d0:	90 91 f5 11 	lds	r25, 0x11F5
   162d4:	90 93 eb 11 	sts	0x11EB, r25
   162d8:	80 93 ea 11 	sts	0x11EA, r24
   162dc:	82 e0       	ldi	r24, 0x02	; 2
   162de:	80 93 64 02 	sts	0x0264, r24
   162e2:	83 e3       	ldi	r24, 0x33	; 51
   162e4:	99 e9       	ldi	r25, 0x99	; 153
   162e6:	90 93 66 02 	sts	0x0266, r25
   162ea:	80 93 65 02 	sts	0x0265, r24
   162ee:	8a e8       	ldi	r24, 0x8A	; 138
   162f0:	94 e1       	ldi	r25, 0x14	; 20
   162f2:	90 93 e9 11 	sts	0x11E9, r25
   162f6:	80 93 e8 11 	sts	0x11E8, r24
   162fa:	8e e3       	ldi	r24, 0x3E	; 62
   162fc:	92 e0       	ldi	r25, 0x02	; 2
   162fe:	90 93 e7 11 	sts	0x11E7, r25
   16302:	80 93 e6 11 	sts	0x11E6, r24
   16306:	10 92 e2 11 	sts	0x11E2, r1
   1630a:	10 92 e3 11 	sts	0x11E3, r1
   1630e:	10 92 e4 11 	sts	0x11E4, r1
   16312:	10 92 e5 11 	sts	0x11E5, r1
   16316:	84 e6       	ldi	r24, 0x64	; 100
   16318:	90 e0       	ldi	r25, 0x00	; 0
   1631a:	a0 e0       	ldi	r26, 0x00	; 0
   1631c:	b0 e0       	ldi	r27, 0x00	; 0
   1631e:	80 93 de 11 	sts	0x11DE, r24
   16322:	90 93 df 11 	sts	0x11DF, r25
   16326:	a0 93 e0 11 	sts	0x11E0, r26
   1632a:	b0 93 e1 11 	sts	0x11E1, r27
   1632e:	20 e0       	ldi	r18, 0x00	; 0
   16330:	30 e0       	ldi	r19, 0x00	; 0
   16332:	48 ec       	ldi	r20, 0xC8	; 200
   16334:	52 e4       	ldi	r21, 0x42	; 66
   16336:	60 91 3e 02 	lds	r22, 0x023E
   1633a:	70 91 3f 02 	lds	r23, 0x023F
   1633e:	80 91 40 02 	lds	r24, 0x0240
   16342:	90 91 41 02 	lds	r25, 0x0241
   16346:	51 d7       	rcall	.+3746   	; 0x171ea <__mulsf3>
   16348:	ef d4       	rcall	.+2526   	; 0x16d28 <__fixunssfsi>
   1634a:	60 93 f4 11 	sts	0x11F4, r22
   1634e:	70 93 f5 11 	sts	0x11F5, r23
   16352:	80 93 f6 11 	sts	0x11F6, r24
   16356:	90 93 f7 11 	sts	0x11F7, r25
   1635a:	1e c2       	rjmp	.+1084   	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT(float3, MSG_MIN, &autotemp_min, 0, HEATER_0_MAXTEMP - 15);
    MENU_ITEM_EDIT(float3, MSG_MAX, &autotemp_max, 0, HEATER_0_MAXTEMP - 15);
    MENU_ITEM_EDIT(float32, MSG_FACTOR, &autotemp_factor, 0.0, 1.0);
#endif
#ifdef PIDTEMP
    MENU_ITEM_EDIT(float52, MSG_PID_P, &Kp, 1, 9990);
   1635c:	d8 30       	cpi	r29, 0x08	; 8
   1635e:	09 f0       	breq	.+2      	; 0x16362 <_ZL28lcd_control_temperature_menuv+0x688>
   16360:	53 c0       	rjmp	.+166    	; 0x16408 <_ZL28lcd_control_temperature_menuv+0x72e>
   16362:	80 91 64 02 	lds	r24, 0x0264
   16366:	88 23       	and	r24, r24
   16368:	41 f1       	breq	.+80     	; 0x163ba <_ZL28lcd_control_temperature_menuv+0x6e0>
   1636a:	60 91 f4 11 	lds	r22, 0x11F4
   1636e:	70 91 f5 11 	lds	r23, 0x11F5
   16372:	80 91 f6 11 	lds	r24, 0x11F6
   16376:	90 91 f7 11 	lds	r25, 0x11F7
   1637a:	a7 01       	movw	r20, r14
   1637c:	96 01       	movw	r18, r12
   1637e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16382:	28 30       	cpi	r18, 0x08	; 8
   16384:	31 05       	cpc	r19, r1
   16386:	41 05       	cpc	r20, r1
   16388:	51 05       	cpc	r21, r1
   1638a:	61 f4       	brne	.+24     	; 0x163a4 <_ZL28lcd_control_temperature_menuv+0x6ca>
   1638c:	8b e5       	ldi	r24, 0x5B	; 91
   1638e:	92 e0       	ldi	r25, 0x02	; 2
   16390:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   16394:	9c 01       	movw	r18, r24
   16396:	4e e3       	ldi	r20, 0x3E	; 62
   16398:	62 e9       	ldi	r22, 0x92	; 146
   1639a:	74 e1       	ldi	r23, 0x14	; 20
   1639c:	8c 2f       	mov	r24, r28
   1639e:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   163a2:	0b c0       	rjmp	.+22     	; 0x163ba <_ZL28lcd_control_temperature_menuv+0x6e0>
   163a4:	8b e5       	ldi	r24, 0x5B	; 91
   163a6:	92 e0       	ldi	r25, 0x02	; 2
   163a8:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   163ac:	9c 01       	movw	r18, r24
   163ae:	40 e2       	ldi	r20, 0x20	; 32
   163b0:	62 e9       	ldi	r22, 0x92	; 146
   163b2:	74 e1       	ldi	r23, 0x14	; 20
   163b4:	8c 2f       	mov	r24, r28
   163b6:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   163ba:	66 20       	and	r6, r6
   163bc:	09 f4       	brne	.+2      	; 0x163c0 <_ZL28lcd_control_temperature_menuv+0x6e6>
   163be:	dc c0       	rjmp	.+440    	; 0x16578 <_ZL28lcd_control_temperature_menuv+0x89e>
   163c0:	60 91 f4 11 	lds	r22, 0x11F4
   163c4:	70 91 f5 11 	lds	r23, 0x11F5
   163c8:	80 91 f6 11 	lds	r24, 0x11F6
   163cc:	90 91 f7 11 	lds	r25, 0x11F7
   163d0:	a7 01       	movw	r20, r14
   163d2:	96 01       	movw	r18, r12
   163d4:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   163d8:	28 30       	cpi	r18, 0x08	; 8
   163da:	31 05       	cpc	r19, r1
   163dc:	41 05       	cpc	r20, r1
   163de:	51 05       	cpc	r21, r1
   163e0:	09 f0       	breq	.+2      	; 0x163e4 <_ZL28lcd_control_temperature_menuv+0x70a>
   163e2:	ca c0       	rjmp	.+404    	; 0x16578 <_ZL28lcd_control_temperature_menuv+0x89e>
   163e4:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   163e8:	e1 2c       	mov	r14, r1
   163ea:	18 e1       	ldi	r17, 0x18	; 24
   163ec:	f1 2e       	mov	r15, r17
   163ee:	0c e1       	ldi	r16, 0x1C	; 28
   163f0:	16 e4       	ldi	r17, 0x46	; 70
   163f2:	20 e0       	ldi	r18, 0x00	; 0
   163f4:	30 e0       	ldi	r19, 0x00	; 0
   163f6:	40 e8       	ldi	r20, 0x80	; 128
   163f8:	5f e3       	ldi	r21, 0x3F	; 63
   163fa:	6b e5       	ldi	r22, 0x5B	; 91
   163fc:	72 e0       	ldi	r23, 0x02	; 2
   163fe:	88 e9       	ldi	r24, 0x98	; 152
   16400:	94 e1       	ldi	r25, 0x14	; 20
   16402:	0e 94 5d 81 	call	0x102ba	; 0x102ba <_ZL32menu_action_setting_edit_float52PKcPfff>
   16406:	c8 c1       	rjmp	.+912    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    // i is typically a small value so allows values below 1
    MENU_ITEM_EDIT_CALLBACK(float52, MSG_PID_I, &raw_Ki, 0.01, 9990, copy_and_scalePID_i);
   16408:	d9 30       	cpi	r29, 0x09	; 9
   1640a:	09 f0       	breq	.+2      	; 0x1640e <_ZL28lcd_control_temperature_menuv+0x734>
   1640c:	59 c0       	rjmp	.+178    	; 0x164c0 <_ZL28lcd_control_temperature_menuv+0x7e6>
   1640e:	80 91 64 02 	lds	r24, 0x0264
   16412:	88 23       	and	r24, r24
   16414:	41 f1       	breq	.+80     	; 0x16466 <_ZL28lcd_control_temperature_menuv+0x78c>
   16416:	60 91 f4 11 	lds	r22, 0x11F4
   1641a:	70 91 f5 11 	lds	r23, 0x11F5
   1641e:	80 91 f6 11 	lds	r24, 0x11F6
   16422:	90 91 f7 11 	lds	r25, 0x11F7
   16426:	a7 01       	movw	r20, r14
   16428:	96 01       	movw	r18, r12
   1642a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1642e:	29 30       	cpi	r18, 0x09	; 9
   16430:	31 05       	cpc	r19, r1
   16432:	41 05       	cpc	r20, r1
   16434:	51 05       	cpc	r21, r1
   16436:	61 f4       	brne	.+24     	; 0x16450 <_ZL28lcd_control_temperature_menuv+0x776>
   16438:	88 ed       	ldi	r24, 0xD8	; 216
   1643a:	91 e1       	ldi	r25, 0x11	; 17
   1643c:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   16440:	9c 01       	movw	r18, r24
   16442:	4e e3       	ldi	r20, 0x3E	; 62
   16444:	6e e9       	ldi	r22, 0x9E	; 158
   16446:	74 e1       	ldi	r23, 0x14	; 20
   16448:	8c 2f       	mov	r24, r28
   1644a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1644e:	0b c0       	rjmp	.+22     	; 0x16466 <_ZL28lcd_control_temperature_menuv+0x78c>
   16450:	88 ed       	ldi	r24, 0xD8	; 216
   16452:	91 e1       	ldi	r25, 0x11	; 17
   16454:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   16458:	9c 01       	movw	r18, r24
   1645a:	40 e2       	ldi	r20, 0x20	; 32
   1645c:	6e e9       	ldi	r22, 0x9E	; 158
   1645e:	74 e1       	ldi	r23, 0x14	; 20
   16460:	8c 2f       	mov	r24, r28
   16462:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   16466:	66 20       	and	r6, r6
   16468:	09 f4       	brne	.+2      	; 0x1646c <_ZL28lcd_control_temperature_menuv+0x792>
   1646a:	dc c0       	rjmp	.+440    	; 0x16624 <_ZL28lcd_control_temperature_menuv+0x94a>
   1646c:	60 91 f4 11 	lds	r22, 0x11F4
   16470:	70 91 f5 11 	lds	r23, 0x11F5
   16474:	80 91 f6 11 	lds	r24, 0x11F6
   16478:	90 91 f7 11 	lds	r25, 0x11F7
   1647c:	a7 01       	movw	r20, r14
   1647e:	96 01       	movw	r18, r12
   16480:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16484:	29 30       	cpi	r18, 0x09	; 9
   16486:	31 05       	cpc	r19, r1
   16488:	41 05       	cpc	r20, r1
   1648a:	51 05       	cpc	r21, r1
   1648c:	09 f0       	breq	.+2      	; 0x16490 <_ZL28lcd_control_temperature_menuv+0x7b6>
   1648e:	ca c0       	rjmp	.+404    	; 0x16624 <_ZL28lcd_control_temperature_menuv+0x94a>
   16490:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16494:	0f 2e       	mov	r0, r31
   16496:	f6 ee       	ldi	r31, 0xE6	; 230
   16498:	cf 2e       	mov	r12, r31
   1649a:	f2 e9       	ldi	r31, 0x92	; 146
   1649c:	df 2e       	mov	r13, r31
   1649e:	f0 2d       	mov	r31, r0
   164a0:	e1 2c       	mov	r14, r1
   164a2:	18 e1       	ldi	r17, 0x18	; 24
   164a4:	f1 2e       	mov	r15, r17
   164a6:	0c e1       	ldi	r16, 0x1C	; 28
   164a8:	16 e4       	ldi	r17, 0x46	; 70
   164aa:	2a e0       	ldi	r18, 0x0A	; 10
   164ac:	37 ed       	ldi	r19, 0xD7	; 215
   164ae:	43 e2       	ldi	r20, 0x23	; 35
   164b0:	5c e3       	ldi	r21, 0x3C	; 60
   164b2:	68 ed       	ldi	r22, 0xD8	; 216
   164b4:	71 e1       	ldi	r23, 0x11	; 17
   164b6:	84 ea       	ldi	r24, 0xA4	; 164
   164b8:	94 e1       	ldi	r25, 0x14	; 20
   164ba:	0e 94 d4 81 	call	0x103a8	; 0x103a8 <_ZL41menu_action_setting_edit_callback_float52PKcPfffPFvvE>
   164be:	6c c1       	rjmp	.+728    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM_EDIT_CALLBACK(float52, MSG_PID_D, &raw_Kd, 1, 9990, copy_and_scalePID_d);
   164c0:	da 30       	cpi	r29, 0x0A	; 10
   164c2:	09 f0       	breq	.+2      	; 0x164c6 <_ZL28lcd_control_temperature_menuv+0x7ec>
   164c4:	59 c0       	rjmp	.+178    	; 0x16578 <_ZL28lcd_control_temperature_menuv+0x89e>
   164c6:	80 91 64 02 	lds	r24, 0x0264
   164ca:	88 23       	and	r24, r24
   164cc:	41 f1       	breq	.+80     	; 0x1651e <_ZL28lcd_control_temperature_menuv+0x844>
   164ce:	60 91 f4 11 	lds	r22, 0x11F4
   164d2:	70 91 f5 11 	lds	r23, 0x11F5
   164d6:	80 91 f6 11 	lds	r24, 0x11F6
   164da:	90 91 f7 11 	lds	r25, 0x11F7
   164de:	a7 01       	movw	r20, r14
   164e0:	96 01       	movw	r18, r12
   164e2:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   164e6:	2a 30       	cpi	r18, 0x0A	; 10
   164e8:	31 05       	cpc	r19, r1
   164ea:	41 05       	cpc	r20, r1
   164ec:	51 05       	cpc	r21, r1
   164ee:	61 f4       	brne	.+24     	; 0x16508 <_ZL28lcd_control_temperature_menuv+0x82e>
   164f0:	84 ed       	ldi	r24, 0xD4	; 212
   164f2:	91 e1       	ldi	r25, 0x11	; 17
   164f4:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   164f8:	9c 01       	movw	r18, r24
   164fa:	4e e3       	ldi	r20, 0x3E	; 62
   164fc:	6a ea       	ldi	r22, 0xAA	; 170
   164fe:	74 e1       	ldi	r23, 0x14	; 20
   16500:	8c 2f       	mov	r24, r28
   16502:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   16506:	0b c0       	rjmp	.+22     	; 0x1651e <_ZL28lcd_control_temperature_menuv+0x844>
   16508:	84 ed       	ldi	r24, 0xD4	; 212
   1650a:	91 e1       	ldi	r25, 0x11	; 17
   1650c:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   16510:	9c 01       	movw	r18, r24
   16512:	40 e2       	ldi	r20, 0x20	; 32
   16514:	6a ea       	ldi	r22, 0xAA	; 170
   16516:	74 e1       	ldi	r23, 0x14	; 20
   16518:	8c 2f       	mov	r24, r28
   1651a:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   1651e:	66 20       	and	r6, r6
   16520:	09 f4       	brne	.+2      	; 0x16524 <_ZL28lcd_control_temperature_menuv+0x84a>
   16522:	c3 c0       	rjmp	.+390    	; 0x166aa <_ZL28lcd_control_temperature_menuv+0x9d0>
   16524:	60 91 f4 11 	lds	r22, 0x11F4
   16528:	70 91 f5 11 	lds	r23, 0x11F5
   1652c:	80 91 f6 11 	lds	r24, 0x11F6
   16530:	90 91 f7 11 	lds	r25, 0x11F7
   16534:	a7 01       	movw	r20, r14
   16536:	96 01       	movw	r18, r12
   16538:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1653c:	2a 30       	cpi	r18, 0x0A	; 10
   1653e:	31 05       	cpc	r19, r1
   16540:	41 05       	cpc	r20, r1
   16542:	51 05       	cpc	r21, r1
   16544:	09 f0       	breq	.+2      	; 0x16548 <_ZL28lcd_control_temperature_menuv+0x86e>
   16546:	b1 c0       	rjmp	.+354    	; 0x166aa <_ZL28lcd_control_temperature_menuv+0x9d0>
   16548:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   1654c:	0f 2e       	mov	r0, r31
   1654e:	f2 ed       	ldi	r31, 0xD2	; 210
   16550:	cf 2e       	mov	r12, r31
   16552:	f2 e9       	ldi	r31, 0x92	; 146
   16554:	df 2e       	mov	r13, r31
   16556:	f0 2d       	mov	r31, r0
   16558:	e1 2c       	mov	r14, r1
   1655a:	18 e1       	ldi	r17, 0x18	; 24
   1655c:	f1 2e       	mov	r15, r17
   1655e:	0c e1       	ldi	r16, 0x1C	; 28
   16560:	16 e4       	ldi	r17, 0x46	; 70
   16562:	20 e0       	ldi	r18, 0x00	; 0
   16564:	30 e0       	ldi	r19, 0x00	; 0
   16566:	40 e8       	ldi	r20, 0x80	; 128
   16568:	5f e3       	ldi	r21, 0x3F	; 63
   1656a:	64 ed       	ldi	r22, 0xD4	; 212
   1656c:	71 e1       	ldi	r23, 0x11	; 17
   1656e:	80 eb       	ldi	r24, 0xB0	; 176
   16570:	94 e1       	ldi	r25, 0x14	; 20
   16572:	0e 94 d4 81 	call	0x103a8	; 0x103a8 <_ZL41menu_action_setting_edit_callback_float52PKcPfffPFvvE>
   16576:	10 c1       	rjmp	.+544    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
# ifdef PID_ADD_EXTRUSION_RATE
    MENU_ITEM_EDIT(float3, MSG_PID_C, &Kc, 1, 9990);
   16578:	db 30       	cpi	r29, 0x0B	; 11
   1657a:	09 f0       	breq	.+2      	; 0x1657e <_ZL28lcd_control_temperature_menuv+0x8a4>
   1657c:	53 c0       	rjmp	.+166    	; 0x16624 <_ZL28lcd_control_temperature_menuv+0x94a>
   1657e:	80 91 64 02 	lds	r24, 0x0264
   16582:	88 23       	and	r24, r24
   16584:	41 f1       	breq	.+80     	; 0x165d6 <_ZL28lcd_control_temperature_menuv+0x8fc>
   16586:	60 91 f4 11 	lds	r22, 0x11F4
   1658a:	70 91 f5 11 	lds	r23, 0x11F5
   1658e:	80 91 f6 11 	lds	r24, 0x11F6
   16592:	90 91 f7 11 	lds	r25, 0x11F7
   16596:	a7 01       	movw	r20, r14
   16598:	96 01       	movw	r18, r12
   1659a:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1659e:	2b 30       	cpi	r18, 0x0B	; 11
   165a0:	31 05       	cpc	r19, r1
   165a2:	41 05       	cpc	r20, r1
   165a4:	51 05       	cpc	r21, r1
   165a6:	61 f4       	brne	.+24     	; 0x165c0 <_ZL28lcd_control_temperature_menuv+0x8e6>
   165a8:	8f e4       	ldi	r24, 0x4F	; 79
   165aa:	92 e0       	ldi	r25, 0x02	; 2
   165ac:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   165b0:	9c 01       	movw	r18, r24
   165b2:	4e e3       	ldi	r20, 0x3E	; 62
   165b4:	66 eb       	ldi	r22, 0xB6	; 182
   165b6:	74 e1       	ldi	r23, 0x14	; 20
   165b8:	8c 2f       	mov	r24, r28
   165ba:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   165be:	0b c0       	rjmp	.+22     	; 0x165d6 <_ZL28lcd_control_temperature_menuv+0x8fc>
   165c0:	8f e4       	ldi	r24, 0x4F	; 79
   165c2:	92 e0       	ldi	r25, 0x02	; 2
   165c4:	0e 94 41 9f 	call	0x13e82	; 0x13e82 <_Z7ftostr3RKf>
   165c8:	9c 01       	movw	r18, r24
   165ca:	40 e2       	ldi	r20, 0x20	; 32
   165cc:	66 eb       	ldi	r22, 0xB6	; 182
   165ce:	74 e1       	ldi	r23, 0x14	; 20
   165d0:	8c 2f       	mov	r24, r28
   165d2:	0e 94 38 92 	call	0x12470	; 0x12470 <_ZL48lcd_implementation_drawmenu_setting_edit_generichPKccPc>
   165d6:	66 20       	and	r6, r6
   165d8:	09 f4       	brne	.+2      	; 0x165dc <_ZL28lcd_control_temperature_menuv+0x902>
   165da:	a7 c0       	rjmp	.+334    	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   165dc:	60 91 f4 11 	lds	r22, 0x11F4
   165e0:	70 91 f5 11 	lds	r23, 0x11F5
   165e4:	80 91 f6 11 	lds	r24, 0x11F6
   165e8:	90 91 f7 11 	lds	r25, 0x11F7
   165ec:	a7 01       	movw	r20, r14
   165ee:	96 01       	movw	r18, r12
   165f0:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   165f4:	2b 30       	cpi	r18, 0x0B	; 11
   165f6:	31 05       	cpc	r19, r1
   165f8:	41 05       	cpc	r20, r1
   165fa:	51 05       	cpc	r21, r1
   165fc:	09 f0       	breq	.+2      	; 0x16600 <_ZL28lcd_control_temperature_menuv+0x926>
   165fe:	95 c0       	rjmp	.+298    	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   16600:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16604:	e1 2c       	mov	r14, r1
   16606:	18 e1       	ldi	r17, 0x18	; 24
   16608:	f1 2e       	mov	r15, r17
   1660a:	0c e1       	ldi	r16, 0x1C	; 28
   1660c:	16 e4       	ldi	r17, 0x46	; 70
   1660e:	20 e0       	ldi	r18, 0x00	; 0
   16610:	30 e0       	ldi	r19, 0x00	; 0
   16612:	40 e8       	ldi	r20, 0x80	; 128
   16614:	5f e3       	ldi	r21, 0x3F	; 63
   16616:	6f e4       	ldi	r22, 0x4F	; 79
   16618:	72 e0       	ldi	r23, 0x02	; 2
   1661a:	8c eb       	ldi	r24, 0xBC	; 188
   1661c:	94 e1       	ldi	r25, 0x14	; 20
   1661e:	0e 94 14 80 	call	0x10028	; 0x10028 <_ZL31menu_action_setting_edit_float3PKcPfff>
   16622:	ba c0       	rjmp	.+372    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
# endif//PID_ADD_EXTRUSION_RATE
#endif//PIDTEMP
    MENU_ITEM(submenu, MSG_PREHEAT_PLA_SETTINGS, lcd_control_temperature_preheat_pla_settings_menu);
   16624:	dc 30       	cpi	r29, 0x0C	; 12
   16626:	09 f0       	breq	.+2      	; 0x1662a <_ZL28lcd_control_temperature_menuv+0x950>
   16628:	40 c0       	rjmp	.+128    	; 0x166aa <_ZL28lcd_control_temperature_menuv+0x9d0>
   1662a:	80 91 64 02 	lds	r24, 0x0264
   1662e:	88 23       	and	r24, r24
   16630:	01 f1       	breq	.+64     	; 0x16672 <_ZL28lcd_control_temperature_menuv+0x998>
   16632:	60 91 f4 11 	lds	r22, 0x11F4
   16636:	70 91 f5 11 	lds	r23, 0x11F5
   1663a:	80 91 f6 11 	lds	r24, 0x11F6
   1663e:	90 91 f7 11 	lds	r25, 0x11F7
   16642:	a7 01       	movw	r20, r14
   16644:	96 01       	movw	r18, r12
   16646:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1664a:	2c 30       	cpi	r18, 0x0C	; 12
   1664c:	31 05       	cpc	r19, r1
   1664e:	41 05       	cpc	r20, r1
   16650:	51 05       	cpc	r21, r1
   16652:	41 f4       	brne	.+16     	; 0x16664 <_ZL28lcd_control_temperature_menuv+0x98a>
   16654:	2e e7       	ldi	r18, 0x7E	; 126
   16656:	4e e3       	ldi	r20, 0x3E	; 62
   16658:	62 ec       	ldi	r22, 0xC2	; 194
   1665a:	74 e1       	ldi	r23, 0x14	; 20
   1665c:	8c 2f       	mov	r24, r28
   1665e:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   16662:	07 c0       	rjmp	.+14     	; 0x16672 <_ZL28lcd_control_temperature_menuv+0x998>
   16664:	2e e7       	ldi	r18, 0x7E	; 126
   16666:	40 e2       	ldi	r20, 0x20	; 32
   16668:	62 ec       	ldi	r22, 0xC2	; 194
   1666a:	74 e1       	ldi	r23, 0x14	; 20
   1666c:	8c 2f       	mov	r24, r28
   1666e:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   16672:	66 20       	and	r6, r6
   16674:	09 f4       	brne	.+2      	; 0x16678 <_ZL28lcd_control_temperature_menuv+0x99e>
   16676:	59 c0       	rjmp	.+178    	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   16678:	60 91 f4 11 	lds	r22, 0x11F4
   1667c:	70 91 f5 11 	lds	r23, 0x11F5
   16680:	80 91 f6 11 	lds	r24, 0x11F6
   16684:	90 91 f7 11 	lds	r25, 0x11F7
   16688:	a7 01       	movw	r20, r14
   1668a:	96 01       	movw	r18, r12
   1668c:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16690:	2c 30       	cpi	r18, 0x0C	; 12
   16692:	31 05       	cpc	r19, r1
   16694:	41 05       	cpc	r20, r1
   16696:	51 05       	cpc	r21, r1
   16698:	09 f0       	breq	.+2      	; 0x1669c <_ZL28lcd_control_temperature_menuv+0x9c2>
   1669a:	47 c0       	rjmp	.+142    	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   1669c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   166a0:	8a e7       	ldi	r24, 0x7A	; 122
   166a2:	9b e9       	ldi	r25, 0x9B	; 155
   166a4:	0e 94 df 82 	call	0x105be	; 0x105be <_ZL19menu_action_submenuPFvvE>
   166a8:	77 c0       	rjmp	.+238    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    MENU_ITEM(submenu, MSG_PREHEAT_ABS_SETTINGS, lcd_control_temperature_preheat_abs_settings_menu);
   166aa:	dd 30       	cpi	r29, 0x0D	; 13
   166ac:	f1 f5       	brne	.+124    	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   166ae:	80 91 64 02 	lds	r24, 0x0264
   166b2:	88 23       	and	r24, r24
   166b4:	01 f1       	breq	.+64     	; 0x166f6 <_ZL28lcd_control_temperature_menuv+0xa1c>
   166b6:	60 91 f4 11 	lds	r22, 0x11F4
   166ba:	70 91 f5 11 	lds	r23, 0x11F5
   166be:	80 91 f6 11 	lds	r24, 0x11F6
   166c2:	90 91 f7 11 	lds	r25, 0x11F7
   166c6:	a7 01       	movw	r20, r14
   166c8:	96 01       	movw	r18, r12
   166ca:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   166ce:	2d 30       	cpi	r18, 0x0D	; 13
   166d0:	31 05       	cpc	r19, r1
   166d2:	41 05       	cpc	r20, r1
   166d4:	51 05       	cpc	r21, r1
   166d6:	41 f4       	brne	.+16     	; 0x166e8 <_ZL28lcd_control_temperature_menuv+0xa0e>
   166d8:	2e e7       	ldi	r18, 0x7E	; 126
   166da:	4e e3       	ldi	r20, 0x3E	; 62
   166dc:	63 ed       	ldi	r22, 0xD3	; 211
   166de:	74 e1       	ldi	r23, 0x14	; 20
   166e0:	8c 2f       	mov	r24, r28
   166e2:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   166e6:	07 c0       	rjmp	.+14     	; 0x166f6 <_ZL28lcd_control_temperature_menuv+0xa1c>
   166e8:	2e e7       	ldi	r18, 0x7E	; 126
   166ea:	40 e2       	ldi	r20, 0x20	; 32
   166ec:	63 ed       	ldi	r22, 0xD3	; 211
   166ee:	74 e1       	ldi	r23, 0x14	; 20
   166f0:	8c 2f       	mov	r24, r28
   166f2:	0e 94 ef 82 	call	0x105de	; 0x105de <_ZL35lcd_implementation_drawmenu_generichPKccc>
   166f6:	66 20       	and	r6, r6
   166f8:	c1 f0       	breq	.+48     	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   166fa:	60 91 f4 11 	lds	r22, 0x11F4
   166fe:	70 91 f5 11 	lds	r23, 0x11F5
   16702:	80 91 f6 11 	lds	r24, 0x11F6
   16706:	90 91 f7 11 	lds	r25, 0x11F7
   1670a:	a7 01       	movw	r20, r14
   1670c:	96 01       	movw	r18, r12
   1670e:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   16712:	2d 30       	cpi	r18, 0x0D	; 13
   16714:	31 05       	cpc	r19, r1
   16716:	41 05       	cpc	r20, r1
   16718:	51 05       	cpc	r21, r1
   1671a:	39 f4       	brne	.+14     	; 0x1672a <_ZL28lcd_control_temperature_menuv+0xa50>
   1671c:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16720:	8d e0       	ldi	r24, 0x0D	; 13
   16722:	9a e9       	ldi	r25, 0x9A	; 154
   16724:	0e 94 df 82 	call	0x105be	; 0x105be <_ZL19menu_action_submenuPFvvE>
   16728:	37 c0       	rjmp	.+110    	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
    END_MENU();
   1672a:	80 91 f4 11 	lds	r24, 0x11F4
   1672e:	90 91 f5 11 	lds	r25, 0x11F5
   16732:	a0 91 f6 11 	lds	r26, 0x11F6
   16736:	b0 91 f7 11 	lds	r27, 0x11F7
   1673a:	86 34       	cpi	r24, 0x46	; 70
   1673c:	91 05       	cpc	r25, r1
   1673e:	a1 05       	cpc	r26, r1
   16740:	b1 05       	cpc	r27, r1
   16742:	40 f0       	brcs	.+16     	; 0x16754 <_ZL28lcd_control_temperature_menuv+0xa7a>
   16744:	80 92 f4 11 	sts	0x11F4, r8
   16748:	90 92 f5 11 	sts	0x11F5, r9
   1674c:	a0 92 f6 11 	sts	0x11F6, r10
   16750:	b0 92 f7 11 	sts	0x11F7, r11
   16754:	60 91 f4 11 	lds	r22, 0x11F4
   16758:	70 91 f5 11 	lds	r23, 0x11F5
   1675c:	80 91 f6 11 	lds	r24, 0x11F6
   16760:	90 91 f7 11 	lds	r25, 0x11F7
   16764:	a7 01       	movw	r20, r14
   16766:	96 01       	movw	r18, r12
   16768:	0e 94 af c0 	call	0x1815e	; 0x1815e <__udivmodsi4>
   1676c:	42 2f       	mov	r20, r18
   1676e:	50 e0       	ldi	r21, 0x00	; 0
   16770:	80 91 fd 11 	lds	r24, 0x11FD
   16774:	90 e0       	ldi	r25, 0x00	; 0
   16776:	04 96       	adiw	r24, 0x04	; 4
   16778:	48 17       	cp	r20, r24
   1677a:	59 07       	cpc	r21, r25
   1677c:	44 f0       	brlt	.+16     	; 0x1678e <_ZL28lcd_control_temperature_menuv+0xab4>
   1677e:	d2 2f       	mov	r29, r18
   16780:	d3 50       	subi	r29, 0x03	; 3
   16782:	d0 93 fd 11 	sts	0x11FD, r29
   16786:	30 92 64 02 	sts	0x0264, r3
    // set up temp variables - undo the default scaling
    raw_Ki = unscalePID_i(Ki);
    raw_Kd = unscalePID_d(Kd);
#endif

    START_MENU();
   1678a:	c4 2d       	mov	r28, r4
   1678c:	23 cb       	rjmp	.-2490   	; 0x15dd4 <_ZL28lcd_control_temperature_menuv+0xfa>
   1678e:	cf 5f       	subi	r28, 0xFF	; 255
   16790:	df 5f       	subi	r29, 0xFF	; 255
   16792:	c4 30       	cpi	r28, 0x04	; 4
   16794:	08 f4       	brcc	.+2      	; 0x16798 <_ZL28lcd_control_temperature_menuv+0xabe>
   16796:	1e cb       	rjmp	.-2500   	; 0x15dd4 <_ZL28lcd_control_temperature_menuv+0xfa>
# endif//PID_ADD_EXTRUSION_RATE
#endif//PIDTEMP
    MENU_ITEM(submenu, MSG_PREHEAT_PLA_SETTINGS, lcd_control_temperature_preheat_pla_settings_menu);
    MENU_ITEM(submenu, MSG_PREHEAT_ABS_SETTINGS, lcd_control_temperature_preheat_abs_settings_menu);
    END_MENU();
}
   16798:	df 91       	pop	r29
   1679a:	cf 91       	pop	r28
   1679c:	1f 91       	pop	r17
   1679e:	0f 91       	pop	r16
   167a0:	ff 90       	pop	r15
   167a2:	ef 90       	pop	r14
   167a4:	df 90       	pop	r13
   167a6:	cf 90       	pop	r12
   167a8:	bf 90       	pop	r11
   167aa:	af 90       	pop	r10
   167ac:	9f 90       	pop	r9
   167ae:	8f 90       	pop	r8
   167b0:	6f 90       	pop	r6
   167b2:	4f 90       	pop	r4
   167b4:	3f 90       	pop	r3
   167b6:	08 95       	ret

000167b8 <_Z26menu_edit_callback_float52v>:
menu_edit_type(int, int3, itostr3, 1)
menu_edit_type(float, float3, ftostr3, 1)
menu_edit_type(float, float32, ftostr32, 100)
menu_edit_type(float, float5, ftostr5, 0.01)
menu_edit_type(float, float51, ftostr51, 10)
menu_edit_type(float, float52, ftostr52, 100)
   167b8:	0f 93       	push	r16
   167ba:	1f 93       	push	r17
   167bc:	cf 93       	push	r28
   167be:	df 93       	push	r29
   167c0:	00 d0       	rcall	.+0      	; 0x167c2 <_Z26menu_edit_callback_float52v+0xa>
   167c2:	1f 92       	push	r1
   167c4:	cd b7       	in	r28, 0x3d	; 61
   167c6:	de b7       	in	r29, 0x3e	; 62
   167c8:	80 91 e2 11 	lds	r24, 0x11E2
   167cc:	90 91 e3 11 	lds	r25, 0x11E3
   167d0:	a0 91 e4 11 	lds	r26, 0x11E4
   167d4:	b0 91 e5 11 	lds	r27, 0x11E5
   167d8:	40 91 f4 11 	lds	r20, 0x11F4
   167dc:	50 91 f5 11 	lds	r21, 0x11F5
   167e0:	60 91 f6 11 	lds	r22, 0x11F6
   167e4:	70 91 f7 11 	lds	r23, 0x11F7
   167e8:	48 17       	cp	r20, r24
   167ea:	59 07       	cpc	r21, r25
   167ec:	6a 07       	cpc	r22, r26
   167ee:	7b 07       	cpc	r23, r27
   167f0:	44 f4       	brge	.+16     	; 0x16802 <_Z26menu_edit_callback_float52v+0x4a>
   167f2:	80 93 f4 11 	sts	0x11F4, r24
   167f6:	90 93 f5 11 	sts	0x11F5, r25
   167fa:	a0 93 f6 11 	sts	0x11F6, r26
   167fe:	b0 93 f7 11 	sts	0x11F7, r27
   16802:	80 91 de 11 	lds	r24, 0x11DE
   16806:	90 91 df 11 	lds	r25, 0x11DF
   1680a:	a0 91 e0 11 	lds	r26, 0x11E0
   1680e:	b0 91 e1 11 	lds	r27, 0x11E1
   16812:	40 91 f4 11 	lds	r20, 0x11F4
   16816:	50 91 f5 11 	lds	r21, 0x11F5
   1681a:	60 91 f6 11 	lds	r22, 0x11F6
   1681e:	70 91 f7 11 	lds	r23, 0x11F7
   16822:	84 17       	cp	r24, r20
   16824:	95 07       	cpc	r25, r21
   16826:	a6 07       	cpc	r26, r22
   16828:	b7 07       	cpc	r27, r23
   1682a:	44 f4       	brge	.+16     	; 0x1683c <_Z26menu_edit_callback_float52v+0x84>
   1682c:	80 93 f4 11 	sts	0x11F4, r24
   16830:	90 93 f5 11 	sts	0x11F5, r25
   16834:	a0 93 f6 11 	sts	0x11F6, r26
   16838:	b0 93 f7 11 	sts	0x11F7, r27
   1683c:	80 91 64 02 	lds	r24, 0x0264
   16840:	88 23       	and	r24, r24
   16842:	e9 f0       	breq	.+58     	; 0x1687e <_Z26menu_edit_callback_float52v+0xc6>
   16844:	60 91 f4 11 	lds	r22, 0x11F4
   16848:	70 91 f5 11 	lds	r23, 0x11F5
   1684c:	80 91 f6 11 	lds	r24, 0x11F6
   16850:	90 91 f7 11 	lds	r25, 0x11F7
   16854:	95 d2       	rcall	.+1322   	; 0x16d80 <__floatunsisf>
   16856:	20 e0       	ldi	r18, 0x00	; 0
   16858:	30 e0       	ldi	r19, 0x00	; 0
   1685a:	48 ec       	ldi	r20, 0xC8	; 200
   1685c:	52 e4       	ldi	r21, 0x42	; 66
   1685e:	f7 d1       	rcall	.+1006   	; 0x16c4e <__divsf3>
   16860:	69 83       	std	Y+1, r22	; 0x01
   16862:	7a 83       	std	Y+2, r23	; 0x02
   16864:	8b 83       	std	Y+3, r24	; 0x03
   16866:	9c 83       	std	Y+4, r25	; 0x04
   16868:	ce 01       	movw	r24, r28
   1686a:	01 96       	adiw	r24, 0x01	; 1
   1686c:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   16870:	bc 01       	movw	r22, r24
   16872:	80 91 e8 11 	lds	r24, 0x11E8
   16876:	90 91 e9 11 	lds	r25, 0x11E9
   1687a:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   1687e:	80 91 fe 11 	lds	r24, 0x11FE
   16882:	82 ff       	sbrs	r24, 2
   16884:	34 c0       	rjmp	.+104    	; 0x168ee <_Z26menu_edit_callback_float52v+0x136>
   16886:	00 91 e6 11 	lds	r16, 0x11E6
   1688a:	10 91 e7 11 	lds	r17, 0x11E7
   1688e:	60 91 f4 11 	lds	r22, 0x11F4
   16892:	70 91 f5 11 	lds	r23, 0x11F5
   16896:	80 91 f6 11 	lds	r24, 0x11F6
   1689a:	90 91 f7 11 	lds	r25, 0x11F7
   1689e:	70 d2       	rcall	.+1248   	; 0x16d80 <__floatunsisf>
   168a0:	20 e0       	ldi	r18, 0x00	; 0
   168a2:	30 e0       	ldi	r19, 0x00	; 0
   168a4:	48 ec       	ldi	r20, 0xC8	; 200
   168a6:	52 e4       	ldi	r21, 0x42	; 66
   168a8:	d2 d1       	rcall	.+932    	; 0x16c4e <__divsf3>
   168aa:	f8 01       	movw	r30, r16
   168ac:	60 83       	st	Z, r22
   168ae:	71 83       	std	Z+1, r23	; 0x01
   168b0:	82 83       	std	Z+2, r24	; 0x02
   168b2:	93 83       	std	Z+3, r25	; 0x03
   168b4:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   168b8:	80 91 ec 11 	lds	r24, 0x11EC
   168bc:	90 91 ed 11 	lds	r25, 0x11ED
   168c0:	90 93 66 02 	sts	0x0266, r25
   168c4:	80 93 65 02 	sts	0x0265, r24
   168c8:	80 91 ea 11 	lds	r24, 0x11EA
   168cc:	90 91 eb 11 	lds	r25, 0x11EB
   168d0:	a0 e0       	ldi	r26, 0x00	; 0
   168d2:	b0 e0       	ldi	r27, 0x00	; 0
   168d4:	80 93 f4 11 	sts	0x11F4, r24
   168d8:	90 93 f5 11 	sts	0x11F5, r25
   168dc:	a0 93 f6 11 	sts	0x11F6, r26
   168e0:	b0 93 f7 11 	sts	0x11F7, r27
   168e4:	e0 91 dc 11 	lds	r30, 0x11DC
   168e8:	f0 91 dd 11 	lds	r31, 0x11DD
   168ec:	19 95       	eicall
   168ee:	0f 90       	pop	r0
   168f0:	0f 90       	pop	r0
   168f2:	0f 90       	pop	r0
   168f4:	0f 90       	pop	r0
   168f6:	df 91       	pop	r29
   168f8:	cf 91       	pop	r28
   168fa:	1f 91       	pop	r17
   168fc:	0f 91       	pop	r16
   168fe:	08 95       	ret

00016900 <_Z17menu_edit_float52v>:
   16900:	0f 93       	push	r16
   16902:	1f 93       	push	r17
   16904:	cf 93       	push	r28
   16906:	df 93       	push	r29
   16908:	00 d0       	rcall	.+0      	; 0x1690a <_Z17menu_edit_float52v+0xa>
   1690a:	1f 92       	push	r1
   1690c:	cd b7       	in	r28, 0x3d	; 61
   1690e:	de b7       	in	r29, 0x3e	; 62
   16910:	80 91 e2 11 	lds	r24, 0x11E2
   16914:	90 91 e3 11 	lds	r25, 0x11E3
   16918:	a0 91 e4 11 	lds	r26, 0x11E4
   1691c:	b0 91 e5 11 	lds	r27, 0x11E5
   16920:	40 91 f4 11 	lds	r20, 0x11F4
   16924:	50 91 f5 11 	lds	r21, 0x11F5
   16928:	60 91 f6 11 	lds	r22, 0x11F6
   1692c:	70 91 f7 11 	lds	r23, 0x11F7
   16930:	48 17       	cp	r20, r24
   16932:	59 07       	cpc	r21, r25
   16934:	6a 07       	cpc	r22, r26
   16936:	7b 07       	cpc	r23, r27
   16938:	44 f4       	brge	.+16     	; 0x1694a <_Z17menu_edit_float52v+0x4a>
   1693a:	80 93 f4 11 	sts	0x11F4, r24
   1693e:	90 93 f5 11 	sts	0x11F5, r25
   16942:	a0 93 f6 11 	sts	0x11F6, r26
   16946:	b0 93 f7 11 	sts	0x11F7, r27
   1694a:	80 91 de 11 	lds	r24, 0x11DE
   1694e:	90 91 df 11 	lds	r25, 0x11DF
   16952:	a0 91 e0 11 	lds	r26, 0x11E0
   16956:	b0 91 e1 11 	lds	r27, 0x11E1
   1695a:	40 91 f4 11 	lds	r20, 0x11F4
   1695e:	50 91 f5 11 	lds	r21, 0x11F5
   16962:	60 91 f6 11 	lds	r22, 0x11F6
   16966:	70 91 f7 11 	lds	r23, 0x11F7
   1696a:	84 17       	cp	r24, r20
   1696c:	95 07       	cpc	r25, r21
   1696e:	a6 07       	cpc	r26, r22
   16970:	b7 07       	cpc	r27, r23
   16972:	44 f4       	brge	.+16     	; 0x16984 <_Z17menu_edit_float52v+0x84>
   16974:	80 93 f4 11 	sts	0x11F4, r24
   16978:	90 93 f5 11 	sts	0x11F5, r25
   1697c:	a0 93 f6 11 	sts	0x11F6, r26
   16980:	b0 93 f7 11 	sts	0x11F7, r27
   16984:	80 91 64 02 	lds	r24, 0x0264
   16988:	88 23       	and	r24, r24
   1698a:	e9 f0       	breq	.+58     	; 0x169c6 <_Z17menu_edit_float52v+0xc6>
   1698c:	60 91 f4 11 	lds	r22, 0x11F4
   16990:	70 91 f5 11 	lds	r23, 0x11F5
   16994:	80 91 f6 11 	lds	r24, 0x11F6
   16998:	90 91 f7 11 	lds	r25, 0x11F7
   1699c:	f1 d1       	rcall	.+994    	; 0x16d80 <__floatunsisf>
   1699e:	20 e0       	ldi	r18, 0x00	; 0
   169a0:	30 e0       	ldi	r19, 0x00	; 0
   169a2:	48 ec       	ldi	r20, 0xC8	; 200
   169a4:	52 e4       	ldi	r21, 0x42	; 66
   169a6:	53 d1       	rcall	.+678    	; 0x16c4e <__divsf3>
   169a8:	69 83       	std	Y+1, r22	; 0x01
   169aa:	7a 83       	std	Y+2, r23	; 0x02
   169ac:	8b 83       	std	Y+3, r24	; 0x03
   169ae:	9c 83       	std	Y+4, r25	; 0x04
   169b0:	ce 01       	movw	r24, r28
   169b2:	01 96       	adiw	r24, 0x01	; 1
   169b4:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_Z8ftostr52RKf>
   169b8:	bc 01       	movw	r22, r24
   169ba:	80 91 e8 11 	lds	r24, 0x11E8
   169be:	90 91 e9 11 	lds	r25, 0x11E9
   169c2:	0e 94 fa 93 	call	0x127f4	; 0x127f4 <_Z27lcd_implementation_draweditPKcPc>
   169c6:	80 91 fe 11 	lds	r24, 0x11FE
   169ca:	82 ff       	sbrs	r24, 2
   169cc:	2f c0       	rjmp	.+94     	; 0x16a2c <_Z17menu_edit_float52v+0x12c>
   169ce:	00 91 e6 11 	lds	r16, 0x11E6
   169d2:	10 91 e7 11 	lds	r17, 0x11E7
   169d6:	60 91 f4 11 	lds	r22, 0x11F4
   169da:	70 91 f5 11 	lds	r23, 0x11F5
   169de:	80 91 f6 11 	lds	r24, 0x11F6
   169e2:	90 91 f7 11 	lds	r25, 0x11F7
   169e6:	cc d1       	rcall	.+920    	; 0x16d80 <__floatunsisf>
   169e8:	20 e0       	ldi	r18, 0x00	; 0
   169ea:	30 e0       	ldi	r19, 0x00	; 0
   169ec:	48 ec       	ldi	r20, 0xC8	; 200
   169ee:	52 e4       	ldi	r21, 0x42	; 66
   169f0:	2e d1       	rcall	.+604    	; 0x16c4e <__divsf3>
   169f2:	f8 01       	movw	r30, r16
   169f4:	60 83       	st	Z, r22
   169f6:	71 83       	std	Z+1, r23	; 0x01
   169f8:	82 83       	std	Z+2, r24	; 0x02
   169fa:	93 83       	std	Z+3, r25	; 0x03
   169fc:	0e 94 3d 83 	call	0x1067a	; 0x1067a <_ZL18lcd_quick_feedbackv>
   16a00:	80 91 ec 11 	lds	r24, 0x11EC
   16a04:	90 91 ed 11 	lds	r25, 0x11ED
   16a08:	90 93 66 02 	sts	0x0266, r25
   16a0c:	80 93 65 02 	sts	0x0265, r24
   16a10:	80 91 ea 11 	lds	r24, 0x11EA
   16a14:	90 91 eb 11 	lds	r25, 0x11EB
   16a18:	a0 e0       	ldi	r26, 0x00	; 0
   16a1a:	b0 e0       	ldi	r27, 0x00	; 0
   16a1c:	80 93 f4 11 	sts	0x11F4, r24
   16a20:	90 93 f5 11 	sts	0x11F5, r25
   16a24:	a0 93 f6 11 	sts	0x11F6, r26
   16a28:	b0 93 f7 11 	sts	0x11F7, r27
   16a2c:	0f 90       	pop	r0
   16a2e:	0f 90       	pop	r0
   16a30:	0f 90       	pop	r0
   16a32:	0f 90       	pop	r0
   16a34:	df 91       	pop	r29
   16a36:	cf 91       	pop	r28
   16a38:	1f 91       	pop	r17
   16a3a:	0f 91       	pop	r16
   16a3c:	08 95       	ret

00016a3e <_GLOBAL__sub_I_encoderDiff>:
{
#ifdef PIDTEMP
  Kd = scalePID_d(raw_Kd);
  updatePID();
#endif
}
   16a3e:	8f 92       	push	r8
   16a40:	af 92       	push	r10
   16a42:	cf 92       	push	r12
   16a44:	ef 92       	push	r14
   16a46:	0f 93       	push	r16

  #include <Wire.h>
  #include <LCD.h>
  #include <LiquidCrystal_I2C.h>
  #define LCD_CLASS LiquidCrystal_I2C
  LCD_CLASS lcd(LCD_I2C_ADDRESS,LCD_I2C_PIN_EN,LCD_I2C_PIN_RW,LCD_I2C_PIN_RS,LCD_I2C_PIN_D4,LCD_I2C_PIN_D5,LCD_I2C_PIN_D6,LCD_I2C_PIN_D7,LCD_I2C_PIN_BL,POSITIVE);
   16a48:	1f 92       	push	r1
   16a4a:	83 e0       	ldi	r24, 0x03	; 3
   16a4c:	8f 93       	push	r24
   16a4e:	0f 2e       	mov	r0, r31
   16a50:	f7 e0       	ldi	r31, 0x07	; 7
   16a52:	8f 2e       	mov	r8, r31
   16a54:	f0 2d       	mov	r31, r0
   16a56:	0f 2e       	mov	r0, r31
   16a58:	f6 e0       	ldi	r31, 0x06	; 6
   16a5a:	af 2e       	mov	r10, r31
   16a5c:	f0 2d       	mov	r31, r0
   16a5e:	0f 2e       	mov	r0, r31
   16a60:	f5 e0       	ldi	r31, 0x05	; 5
   16a62:	cf 2e       	mov	r12, r31
   16a64:	f0 2d       	mov	r31, r0
   16a66:	68 94       	set
   16a68:	ee 24       	eor	r14, r14
   16a6a:	e2 f8       	bld	r14, 2
   16a6c:	00 e0       	ldi	r16, 0x00	; 0
   16a6e:	21 e0       	ldi	r18, 0x01	; 1
   16a70:	42 e0       	ldi	r20, 0x02	; 2
   16a72:	67 e2       	ldi	r22, 0x27	; 39
   16a74:	8f ef       	ldi	r24, 0xFF	; 255
   16a76:	91 e1       	ldi	r25, 0x11	; 17
   16a78:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
   16a7c:	0f 90       	pop	r0
   16a7e:	0f 90       	pop	r0
   16a80:	0f 91       	pop	r16
   16a82:	ef 90       	pop	r14
   16a84:	cf 90       	pop	r12
   16a86:	af 90       	pop	r10
   16a88:	8f 90       	pop	r8
   16a8a:	08 95       	ret

00016a8c <__subsf3>:
   16a8c:	50 58       	subi	r21, 0x80	; 128

00016a8e <__addsf3>:
   16a8e:	bb 27       	eor	r27, r27
   16a90:	aa 27       	eor	r26, r26
   16a92:	0e d0       	rcall	.+28     	; 0x16ab0 <__addsf3x>
   16a94:	76 c2       	rjmp	.+1260   	; 0x16f82 <__fp_round>
   16a96:	3f d2       	rcall	.+1150   	; 0x16f16 <__fp_pscA>
   16a98:	30 f0       	brcs	.+12     	; 0x16aa6 <__addsf3+0x18>
   16a9a:	44 d2       	rcall	.+1160   	; 0x16f24 <__fp_pscB>
   16a9c:	20 f0       	brcs	.+8      	; 0x16aa6 <__addsf3+0x18>
   16a9e:	31 f4       	brne	.+12     	; 0x16aac <__addsf3+0x1e>
   16aa0:	9f 3f       	cpi	r25, 0xFF	; 255
   16aa2:	11 f4       	brne	.+4      	; 0x16aa8 <__addsf3+0x1a>
   16aa4:	1e f4       	brtc	.+6      	; 0x16aac <__addsf3+0x1e>
   16aa6:	0f c2       	rjmp	.+1054   	; 0x16ec6 <__fp_nan>
   16aa8:	0e f4       	brtc	.+2      	; 0x16aac <__addsf3+0x1e>
   16aaa:	e0 95       	com	r30
   16aac:	e7 fb       	bst	r30, 7
   16aae:	dc c1       	rjmp	.+952    	; 0x16e68 <__fp_inf>

00016ab0 <__addsf3x>:
   16ab0:	e9 2f       	mov	r30, r25
   16ab2:	89 d2       	rcall	.+1298   	; 0x16fc6 <__fp_split3>
   16ab4:	80 f3       	brcs	.-32     	; 0x16a96 <__addsf3+0x8>
   16ab6:	ba 17       	cp	r27, r26
   16ab8:	62 07       	cpc	r22, r18
   16aba:	73 07       	cpc	r23, r19
   16abc:	84 07       	cpc	r24, r20
   16abe:	95 07       	cpc	r25, r21
   16ac0:	18 f0       	brcs	.+6      	; 0x16ac8 <__addsf3x+0x18>
   16ac2:	71 f4       	brne	.+28     	; 0x16ae0 <__addsf3x+0x30>
   16ac4:	9e f5       	brtc	.+102    	; 0x16b2c <__addsf3x+0x7c>
   16ac6:	b8 c2       	rjmp	.+1392   	; 0x17038 <__fp_zero>
   16ac8:	0e f4       	brtc	.+2      	; 0x16acc <__addsf3x+0x1c>
   16aca:	e0 95       	com	r30
   16acc:	0b 2e       	mov	r0, r27
   16ace:	ba 2f       	mov	r27, r26
   16ad0:	a0 2d       	mov	r26, r0
   16ad2:	0b 01       	movw	r0, r22
   16ad4:	b9 01       	movw	r22, r18
   16ad6:	90 01       	movw	r18, r0
   16ad8:	0c 01       	movw	r0, r24
   16ada:	ca 01       	movw	r24, r20
   16adc:	a0 01       	movw	r20, r0
   16ade:	11 24       	eor	r1, r1
   16ae0:	ff 27       	eor	r31, r31
   16ae2:	59 1b       	sub	r21, r25
   16ae4:	99 f0       	breq	.+38     	; 0x16b0c <__addsf3x+0x5c>
   16ae6:	59 3f       	cpi	r21, 0xF9	; 249
   16ae8:	50 f4       	brcc	.+20     	; 0x16afe <__addsf3x+0x4e>
   16aea:	50 3e       	cpi	r21, 0xE0	; 224
   16aec:	68 f1       	brcs	.+90     	; 0x16b48 <__addsf3x+0x98>
   16aee:	1a 16       	cp	r1, r26
   16af0:	f0 40       	sbci	r31, 0x00	; 0
   16af2:	a2 2f       	mov	r26, r18
   16af4:	23 2f       	mov	r18, r19
   16af6:	34 2f       	mov	r19, r20
   16af8:	44 27       	eor	r20, r20
   16afa:	58 5f       	subi	r21, 0xF8	; 248
   16afc:	f3 cf       	rjmp	.-26     	; 0x16ae4 <__addsf3x+0x34>
   16afe:	46 95       	lsr	r20
   16b00:	37 95       	ror	r19
   16b02:	27 95       	ror	r18
   16b04:	a7 95       	ror	r26
   16b06:	f0 40       	sbci	r31, 0x00	; 0
   16b08:	53 95       	inc	r21
   16b0a:	c9 f7       	brne	.-14     	; 0x16afe <__addsf3x+0x4e>
   16b0c:	7e f4       	brtc	.+30     	; 0x16b2c <__addsf3x+0x7c>
   16b0e:	1f 16       	cp	r1, r31
   16b10:	ba 0b       	sbc	r27, r26
   16b12:	62 0b       	sbc	r22, r18
   16b14:	73 0b       	sbc	r23, r19
   16b16:	84 0b       	sbc	r24, r20
   16b18:	ba f0       	brmi	.+46     	; 0x16b48 <__addsf3x+0x98>
   16b1a:	91 50       	subi	r25, 0x01	; 1
   16b1c:	a1 f0       	breq	.+40     	; 0x16b46 <__addsf3x+0x96>
   16b1e:	ff 0f       	add	r31, r31
   16b20:	bb 1f       	adc	r27, r27
   16b22:	66 1f       	adc	r22, r22
   16b24:	77 1f       	adc	r23, r23
   16b26:	88 1f       	adc	r24, r24
   16b28:	c2 f7       	brpl	.-16     	; 0x16b1a <__addsf3x+0x6a>
   16b2a:	0e c0       	rjmp	.+28     	; 0x16b48 <__addsf3x+0x98>
   16b2c:	ba 0f       	add	r27, r26
   16b2e:	62 1f       	adc	r22, r18
   16b30:	73 1f       	adc	r23, r19
   16b32:	84 1f       	adc	r24, r20
   16b34:	48 f4       	brcc	.+18     	; 0x16b48 <__addsf3x+0x98>
   16b36:	87 95       	ror	r24
   16b38:	77 95       	ror	r23
   16b3a:	67 95       	ror	r22
   16b3c:	b7 95       	ror	r27
   16b3e:	f7 95       	ror	r31
   16b40:	9e 3f       	cpi	r25, 0xFE	; 254
   16b42:	08 f0       	brcs	.+2      	; 0x16b46 <__addsf3x+0x96>
   16b44:	b3 cf       	rjmp	.-154    	; 0x16aac <__addsf3+0x1e>
   16b46:	93 95       	inc	r25
   16b48:	88 0f       	add	r24, r24
   16b4a:	08 f0       	brcs	.+2      	; 0x16b4e <__addsf3x+0x9e>
   16b4c:	99 27       	eor	r25, r25
   16b4e:	ee 0f       	add	r30, r30
   16b50:	97 95       	ror	r25
   16b52:	87 95       	ror	r24
   16b54:	08 95       	ret
   16b56:	df d1       	rcall	.+958    	; 0x16f16 <__fp_pscA>
   16b58:	58 f0       	brcs	.+22     	; 0x16b70 <__addsf3x+0xc0>
   16b5a:	80 e8       	ldi	r24, 0x80	; 128
   16b5c:	91 e0       	ldi	r25, 0x01	; 1
   16b5e:	09 f4       	brne	.+2      	; 0x16b62 <__addsf3x+0xb2>
   16b60:	9e ef       	ldi	r25, 0xFE	; 254
   16b62:	e0 d1       	rcall	.+960    	; 0x16f24 <__fp_pscB>
   16b64:	28 f0       	brcs	.+10     	; 0x16b70 <__addsf3x+0xc0>
   16b66:	40 e8       	ldi	r20, 0x80	; 128
   16b68:	51 e0       	ldi	r21, 0x01	; 1
   16b6a:	59 f4       	brne	.+22     	; 0x16b82 <atan2+0xe>
   16b6c:	5e ef       	ldi	r21, 0xFE	; 254
   16b6e:	09 c0       	rjmp	.+18     	; 0x16b82 <atan2+0xe>
   16b70:	aa c1       	rjmp	.+852    	; 0x16ec6 <__fp_nan>
   16b72:	62 c2       	rjmp	.+1220   	; 0x17038 <__fp_zero>

00016b74 <atan2>:
   16b74:	e9 2f       	mov	r30, r25
   16b76:	e0 78       	andi	r30, 0x80	; 128
   16b78:	26 d2       	rcall	.+1100   	; 0x16fc6 <__fp_split3>
   16b7a:	68 f3       	brcs	.-38     	; 0x16b56 <__addsf3x+0xa6>
   16b7c:	09 2e       	mov	r0, r25
   16b7e:	05 2a       	or	r0, r21
   16b80:	c1 f3       	breq	.-16     	; 0x16b72 <__addsf3x+0xc2>
   16b82:	26 17       	cp	r18, r22
   16b84:	37 07       	cpc	r19, r23
   16b86:	48 07       	cpc	r20, r24
   16b88:	59 07       	cpc	r21, r25
   16b8a:	38 f0       	brcs	.+14     	; 0x16b9a <atan2+0x26>
   16b8c:	0e 2e       	mov	r0, r30
   16b8e:	07 f8       	bld	r0, 7
   16b90:	e0 25       	eor	r30, r0
   16b92:	69 f0       	breq	.+26     	; 0x16bae <atan2+0x3a>
   16b94:	e0 25       	eor	r30, r0
   16b96:	e0 64       	ori	r30, 0x40	; 64
   16b98:	0a c0       	rjmp	.+20     	; 0x16bae <atan2+0x3a>
   16b9a:	ef 63       	ori	r30, 0x3F	; 63
   16b9c:	07 f8       	bld	r0, 7
   16b9e:	00 94       	com	r0
   16ba0:	07 fa       	bst	r0, 7
   16ba2:	db 01       	movw	r26, r22
   16ba4:	b9 01       	movw	r22, r18
   16ba6:	9d 01       	movw	r18, r26
   16ba8:	dc 01       	movw	r26, r24
   16baa:	ca 01       	movw	r24, r20
   16bac:	ad 01       	movw	r20, r26
   16bae:	ef 93       	push	r30
   16bb0:	5d d0       	rcall	.+186    	; 0x16c6c <__divsf3_pse>
   16bb2:	e7 d1       	rcall	.+974    	; 0x16f82 <__fp_round>
   16bb4:	0a d0       	rcall	.+20     	; 0x16bca <atan>
   16bb6:	5f 91       	pop	r21
   16bb8:	55 23       	and	r21, r21
   16bba:	31 f0       	breq	.+12     	; 0x16bc8 <atan2+0x54>
   16bbc:	2b ed       	ldi	r18, 0xDB	; 219
   16bbe:	3f e0       	ldi	r19, 0x0F	; 15
   16bc0:	49 e4       	ldi	r20, 0x49	; 73
   16bc2:	50 fd       	sbrc	r21, 0
   16bc4:	49 ec       	ldi	r20, 0xC9	; 201
   16bc6:	63 cf       	rjmp	.-314    	; 0x16a8e <__addsf3>
   16bc8:	08 95       	ret

00016bca <atan>:
   16bca:	df 93       	push	r29
   16bcc:	dd 27       	eor	r29, r29
   16bce:	b9 2f       	mov	r27, r25
   16bd0:	bf 77       	andi	r27, 0x7F	; 127
   16bd2:	40 e8       	ldi	r20, 0x80	; 128
   16bd4:	5f e3       	ldi	r21, 0x3F	; 63
   16bd6:	16 16       	cp	r1, r22
   16bd8:	17 06       	cpc	r1, r23
   16bda:	48 07       	cpc	r20, r24
   16bdc:	5b 07       	cpc	r21, r27
   16bde:	10 f4       	brcc	.+4      	; 0x16be4 <atan+0x1a>
   16be0:	d9 2f       	mov	r29, r25
   16be2:	96 d2       	rcall	.+1324   	; 0x17110 <inverse>
   16be4:	9f 93       	push	r25
   16be6:	8f 93       	push	r24
   16be8:	7f 93       	push	r23
   16bea:	6f 93       	push	r22
   16bec:	a9 d3       	rcall	.+1874   	; 0x17340 <square>
   16bee:	e4 ee       	ldi	r30, 0xE4	; 228
   16bf0:	f0 e0       	ldi	r31, 0x00	; 0
   16bf2:	6c d1       	rcall	.+728    	; 0x16ecc <__fp_powser>
   16bf4:	c6 d1       	rcall	.+908    	; 0x16f82 <__fp_round>
   16bf6:	2f 91       	pop	r18
   16bf8:	3f 91       	pop	r19
   16bfa:	4f 91       	pop	r20
   16bfc:	5f 91       	pop	r21
   16bfe:	01 d3       	rcall	.+1538   	; 0x17202 <__mulsf3x>
   16c00:	dd 23       	and	r29, r29
   16c02:	49 f0       	breq	.+18     	; 0x16c16 <atan+0x4c>
   16c04:	90 58       	subi	r25, 0x80	; 128
   16c06:	a2 ea       	ldi	r26, 0xA2	; 162
   16c08:	2a ed       	ldi	r18, 0xDA	; 218
   16c0a:	3f e0       	ldi	r19, 0x0F	; 15
   16c0c:	49 ec       	ldi	r20, 0xC9	; 201
   16c0e:	5f e3       	ldi	r21, 0x3F	; 63
   16c10:	d0 78       	andi	r29, 0x80	; 128
   16c12:	5d 27       	eor	r21, r29
   16c14:	4d df       	rcall	.-358    	; 0x16ab0 <__addsf3x>
   16c16:	df 91       	pop	r29
   16c18:	b4 c1       	rjmp	.+872    	; 0x16f82 <__fp_round>

00016c1a <ceil>:
   16c1a:	f7 d1       	rcall	.+1006   	; 0x1700a <__fp_trunc>
   16c1c:	80 f0       	brcs	.+32     	; 0x16c3e <ceil+0x24>
   16c1e:	9f 37       	cpi	r25, 0x7F	; 127
   16c20:	40 f4       	brcc	.+16     	; 0x16c32 <ceil+0x18>
   16c22:	91 11       	cpse	r25, r1
   16c24:	0e f4       	brtc	.+2      	; 0x16c28 <ceil+0xe>
   16c26:	09 c2       	rjmp	.+1042   	; 0x1703a <__fp_szero>
   16c28:	60 e0       	ldi	r22, 0x00	; 0
   16c2a:	70 e0       	ldi	r23, 0x00	; 0
   16c2c:	80 e8       	ldi	r24, 0x80	; 128
   16c2e:	9f e3       	ldi	r25, 0x3F	; 63
   16c30:	08 95       	ret
   16c32:	26 f0       	brts	.+8      	; 0x16c3c <ceil+0x22>
   16c34:	1b 16       	cp	r1, r27
   16c36:	61 1d       	adc	r22, r1
   16c38:	71 1d       	adc	r23, r1
   16c3a:	81 1d       	adc	r24, r1
   16c3c:	1b c1       	rjmp	.+566    	; 0x16e74 <__fp_mintl>
   16c3e:	35 c1       	rjmp	.+618    	; 0x16eaa <__fp_mpack>

00016c40 <__cmpsf2>:
   16c40:	ef d0       	rcall	.+478    	; 0x16e20 <__fp_cmp>
   16c42:	08 f4       	brcc	.+2      	; 0x16c46 <__cmpsf2+0x6>
   16c44:	81 e0       	ldi	r24, 0x01	; 1
   16c46:	08 95       	ret

00016c48 <cos>:
   16c48:	75 d1       	rcall	.+746    	; 0x16f34 <__fp_rempio2>
   16c4a:	e3 95       	inc	r30
   16c4c:	ab c1       	rjmp	.+854    	; 0x16fa4 <__fp_sinus>

00016c4e <__divsf3>:
   16c4e:	0c d0       	rcall	.+24     	; 0x16c68 <__divsf3x>
   16c50:	98 c1       	rjmp	.+816    	; 0x16f82 <__fp_round>
   16c52:	68 d1       	rcall	.+720    	; 0x16f24 <__fp_pscB>
   16c54:	40 f0       	brcs	.+16     	; 0x16c66 <__divsf3+0x18>
   16c56:	5f d1       	rcall	.+702    	; 0x16f16 <__fp_pscA>
   16c58:	30 f0       	brcs	.+12     	; 0x16c66 <__divsf3+0x18>
   16c5a:	21 f4       	brne	.+8      	; 0x16c64 <__divsf3+0x16>
   16c5c:	5f 3f       	cpi	r21, 0xFF	; 255
   16c5e:	19 f0       	breq	.+6      	; 0x16c66 <__divsf3+0x18>
   16c60:	03 c1       	rjmp	.+518    	; 0x16e68 <__fp_inf>
   16c62:	51 11       	cpse	r21, r1
   16c64:	ea c1       	rjmp	.+980    	; 0x1703a <__fp_szero>
   16c66:	2f c1       	rjmp	.+606    	; 0x16ec6 <__fp_nan>

00016c68 <__divsf3x>:
   16c68:	ae d1       	rcall	.+860    	; 0x16fc6 <__fp_split3>
   16c6a:	98 f3       	brcs	.-26     	; 0x16c52 <__divsf3+0x4>

00016c6c <__divsf3_pse>:
   16c6c:	99 23       	and	r25, r25
   16c6e:	c9 f3       	breq	.-14     	; 0x16c62 <__divsf3+0x14>
   16c70:	55 23       	and	r21, r21
   16c72:	b1 f3       	breq	.-20     	; 0x16c60 <__divsf3+0x12>
   16c74:	95 1b       	sub	r25, r21
   16c76:	55 0b       	sbc	r21, r21
   16c78:	bb 27       	eor	r27, r27
   16c7a:	aa 27       	eor	r26, r26
   16c7c:	62 17       	cp	r22, r18
   16c7e:	73 07       	cpc	r23, r19
   16c80:	84 07       	cpc	r24, r20
   16c82:	38 f0       	brcs	.+14     	; 0x16c92 <__divsf3_pse+0x26>
   16c84:	9f 5f       	subi	r25, 0xFF	; 255
   16c86:	5f 4f       	sbci	r21, 0xFF	; 255
   16c88:	22 0f       	add	r18, r18
   16c8a:	33 1f       	adc	r19, r19
   16c8c:	44 1f       	adc	r20, r20
   16c8e:	aa 1f       	adc	r26, r26
   16c90:	a9 f3       	breq	.-22     	; 0x16c7c <__divsf3_pse+0x10>
   16c92:	33 d0       	rcall	.+102    	; 0x16cfa <__divsf3_pse+0x8e>
   16c94:	0e 2e       	mov	r0, r30
   16c96:	3a f0       	brmi	.+14     	; 0x16ca6 <__divsf3_pse+0x3a>
   16c98:	e0 e8       	ldi	r30, 0x80	; 128
   16c9a:	30 d0       	rcall	.+96     	; 0x16cfc <__divsf3_pse+0x90>
   16c9c:	91 50       	subi	r25, 0x01	; 1
   16c9e:	50 40       	sbci	r21, 0x00	; 0
   16ca0:	e6 95       	lsr	r30
   16ca2:	00 1c       	adc	r0, r0
   16ca4:	ca f7       	brpl	.-14     	; 0x16c98 <__divsf3_pse+0x2c>
   16ca6:	29 d0       	rcall	.+82     	; 0x16cfa <__divsf3_pse+0x8e>
   16ca8:	fe 2f       	mov	r31, r30
   16caa:	27 d0       	rcall	.+78     	; 0x16cfa <__divsf3_pse+0x8e>
   16cac:	66 0f       	add	r22, r22
   16cae:	77 1f       	adc	r23, r23
   16cb0:	88 1f       	adc	r24, r24
   16cb2:	bb 1f       	adc	r27, r27
   16cb4:	26 17       	cp	r18, r22
   16cb6:	37 07       	cpc	r19, r23
   16cb8:	48 07       	cpc	r20, r24
   16cba:	ab 07       	cpc	r26, r27
   16cbc:	b0 e8       	ldi	r27, 0x80	; 128
   16cbe:	09 f0       	breq	.+2      	; 0x16cc2 <__divsf3_pse+0x56>
   16cc0:	bb 0b       	sbc	r27, r27
   16cc2:	80 2d       	mov	r24, r0
   16cc4:	bf 01       	movw	r22, r30
   16cc6:	ff 27       	eor	r31, r31
   16cc8:	93 58       	subi	r25, 0x83	; 131
   16cca:	5f 4f       	sbci	r21, 0xFF	; 255
   16ccc:	2a f0       	brmi	.+10     	; 0x16cd8 <__divsf3_pse+0x6c>
   16cce:	9e 3f       	cpi	r25, 0xFE	; 254
   16cd0:	51 05       	cpc	r21, r1
   16cd2:	68 f0       	brcs	.+26     	; 0x16cee <__divsf3_pse+0x82>
   16cd4:	c9 c0       	rjmp	.+402    	; 0x16e68 <__fp_inf>
   16cd6:	b1 c1       	rjmp	.+866    	; 0x1703a <__fp_szero>
   16cd8:	5f 3f       	cpi	r21, 0xFF	; 255
   16cda:	ec f3       	brlt	.-6      	; 0x16cd6 <__divsf3_pse+0x6a>
   16cdc:	98 3e       	cpi	r25, 0xE8	; 232
   16cde:	dc f3       	brlt	.-10     	; 0x16cd6 <__divsf3_pse+0x6a>
   16ce0:	86 95       	lsr	r24
   16ce2:	77 95       	ror	r23
   16ce4:	67 95       	ror	r22
   16ce6:	b7 95       	ror	r27
   16ce8:	f7 95       	ror	r31
   16cea:	9f 5f       	subi	r25, 0xFF	; 255
   16cec:	c9 f7       	brne	.-14     	; 0x16ce0 <__divsf3_pse+0x74>
   16cee:	88 0f       	add	r24, r24
   16cf0:	91 1d       	adc	r25, r1
   16cf2:	96 95       	lsr	r25
   16cf4:	87 95       	ror	r24
   16cf6:	97 f9       	bld	r25, 7
   16cf8:	08 95       	ret
   16cfa:	e1 e0       	ldi	r30, 0x01	; 1
   16cfc:	66 0f       	add	r22, r22
   16cfe:	77 1f       	adc	r23, r23
   16d00:	88 1f       	adc	r24, r24
   16d02:	bb 1f       	adc	r27, r27
   16d04:	62 17       	cp	r22, r18
   16d06:	73 07       	cpc	r23, r19
   16d08:	84 07       	cpc	r24, r20
   16d0a:	ba 07       	cpc	r27, r26
   16d0c:	20 f0       	brcs	.+8      	; 0x16d16 <__divsf3_pse+0xaa>
   16d0e:	62 1b       	sub	r22, r18
   16d10:	73 0b       	sbc	r23, r19
   16d12:	84 0b       	sbc	r24, r20
   16d14:	ba 0b       	sbc	r27, r26
   16d16:	ee 1f       	adc	r30, r30
   16d18:	88 f7       	brcc	.-30     	; 0x16cfc <__divsf3_pse+0x90>
   16d1a:	e0 95       	com	r30
   16d1c:	08 95       	ret

00016d1e <__fixsfsi>:
   16d1e:	04 d0       	rcall	.+8      	; 0x16d28 <__fixunssfsi>
   16d20:	68 94       	set
   16d22:	b1 11       	cpse	r27, r1
   16d24:	8a c1       	rjmp	.+788    	; 0x1703a <__fp_szero>
   16d26:	08 95       	ret

00016d28 <__fixunssfsi>:
   16d28:	56 d1       	rcall	.+684    	; 0x16fd6 <__fp_splitA>
   16d2a:	88 f0       	brcs	.+34     	; 0x16d4e <__fixunssfsi+0x26>
   16d2c:	9f 57       	subi	r25, 0x7F	; 127
   16d2e:	90 f0       	brcs	.+36     	; 0x16d54 <__fixunssfsi+0x2c>
   16d30:	b9 2f       	mov	r27, r25
   16d32:	99 27       	eor	r25, r25
   16d34:	b7 51       	subi	r27, 0x17	; 23
   16d36:	a0 f0       	brcs	.+40     	; 0x16d60 <__fixunssfsi+0x38>
   16d38:	d1 f0       	breq	.+52     	; 0x16d6e <__fixunssfsi+0x46>
   16d3a:	66 0f       	add	r22, r22
   16d3c:	77 1f       	adc	r23, r23
   16d3e:	88 1f       	adc	r24, r24
   16d40:	99 1f       	adc	r25, r25
   16d42:	1a f0       	brmi	.+6      	; 0x16d4a <__fixunssfsi+0x22>
   16d44:	ba 95       	dec	r27
   16d46:	c9 f7       	brne	.-14     	; 0x16d3a <__fixunssfsi+0x12>
   16d48:	12 c0       	rjmp	.+36     	; 0x16d6e <__fixunssfsi+0x46>
   16d4a:	b1 30       	cpi	r27, 0x01	; 1
   16d4c:	81 f0       	breq	.+32     	; 0x16d6e <__fixunssfsi+0x46>
   16d4e:	74 d1       	rcall	.+744    	; 0x17038 <__fp_zero>
   16d50:	b1 e0       	ldi	r27, 0x01	; 1
   16d52:	08 95       	ret
   16d54:	71 c1       	rjmp	.+738    	; 0x17038 <__fp_zero>
   16d56:	67 2f       	mov	r22, r23
   16d58:	78 2f       	mov	r23, r24
   16d5a:	88 27       	eor	r24, r24
   16d5c:	b8 5f       	subi	r27, 0xF8	; 248
   16d5e:	39 f0       	breq	.+14     	; 0x16d6e <__fixunssfsi+0x46>
   16d60:	b9 3f       	cpi	r27, 0xF9	; 249
   16d62:	cc f3       	brlt	.-14     	; 0x16d56 <__fixunssfsi+0x2e>
   16d64:	86 95       	lsr	r24
   16d66:	77 95       	ror	r23
   16d68:	67 95       	ror	r22
   16d6a:	b3 95       	inc	r27
   16d6c:	d9 f7       	brne	.-10     	; 0x16d64 <__fixunssfsi+0x3c>
   16d6e:	3e f4       	brtc	.+14     	; 0x16d7e <__fixunssfsi+0x56>
   16d70:	90 95       	com	r25
   16d72:	80 95       	com	r24
   16d74:	70 95       	com	r23
   16d76:	61 95       	neg	r22
   16d78:	7f 4f       	sbci	r23, 0xFF	; 255
   16d7a:	8f 4f       	sbci	r24, 0xFF	; 255
   16d7c:	9f 4f       	sbci	r25, 0xFF	; 255
   16d7e:	08 95       	ret

00016d80 <__floatunsisf>:
   16d80:	e8 94       	clt
   16d82:	09 c0       	rjmp	.+18     	; 0x16d96 <__floatsisf+0x12>

00016d84 <__floatsisf>:
   16d84:	97 fb       	bst	r25, 7
   16d86:	3e f4       	brtc	.+14     	; 0x16d96 <__floatsisf+0x12>
   16d88:	90 95       	com	r25
   16d8a:	80 95       	com	r24
   16d8c:	70 95       	com	r23
   16d8e:	61 95       	neg	r22
   16d90:	7f 4f       	sbci	r23, 0xFF	; 255
   16d92:	8f 4f       	sbci	r24, 0xFF	; 255
   16d94:	9f 4f       	sbci	r25, 0xFF	; 255
   16d96:	99 23       	and	r25, r25
   16d98:	a9 f0       	breq	.+42     	; 0x16dc4 <__floatsisf+0x40>
   16d9a:	f9 2f       	mov	r31, r25
   16d9c:	96 e9       	ldi	r25, 0x96	; 150
   16d9e:	bb 27       	eor	r27, r27
   16da0:	93 95       	inc	r25
   16da2:	f6 95       	lsr	r31
   16da4:	87 95       	ror	r24
   16da6:	77 95       	ror	r23
   16da8:	67 95       	ror	r22
   16daa:	b7 95       	ror	r27
   16dac:	f1 11       	cpse	r31, r1
   16dae:	f8 cf       	rjmp	.-16     	; 0x16da0 <__floatsisf+0x1c>
   16db0:	fa f4       	brpl	.+62     	; 0x16df0 <__floatsisf+0x6c>
   16db2:	bb 0f       	add	r27, r27
   16db4:	11 f4       	brne	.+4      	; 0x16dba <__floatsisf+0x36>
   16db6:	60 ff       	sbrs	r22, 0
   16db8:	1b c0       	rjmp	.+54     	; 0x16df0 <__floatsisf+0x6c>
   16dba:	6f 5f       	subi	r22, 0xFF	; 255
   16dbc:	7f 4f       	sbci	r23, 0xFF	; 255
   16dbe:	8f 4f       	sbci	r24, 0xFF	; 255
   16dc0:	9f 4f       	sbci	r25, 0xFF	; 255
   16dc2:	16 c0       	rjmp	.+44     	; 0x16df0 <__floatsisf+0x6c>
   16dc4:	88 23       	and	r24, r24
   16dc6:	11 f0       	breq	.+4      	; 0x16dcc <__floatsisf+0x48>
   16dc8:	96 e9       	ldi	r25, 0x96	; 150
   16dca:	11 c0       	rjmp	.+34     	; 0x16dee <__floatsisf+0x6a>
   16dcc:	77 23       	and	r23, r23
   16dce:	21 f0       	breq	.+8      	; 0x16dd8 <__floatsisf+0x54>
   16dd0:	9e e8       	ldi	r25, 0x8E	; 142
   16dd2:	87 2f       	mov	r24, r23
   16dd4:	76 2f       	mov	r23, r22
   16dd6:	05 c0       	rjmp	.+10     	; 0x16de2 <__floatsisf+0x5e>
   16dd8:	66 23       	and	r22, r22
   16dda:	71 f0       	breq	.+28     	; 0x16df8 <__floatsisf+0x74>
   16ddc:	96 e8       	ldi	r25, 0x86	; 134
   16dde:	86 2f       	mov	r24, r22
   16de0:	70 e0       	ldi	r23, 0x00	; 0
   16de2:	60 e0       	ldi	r22, 0x00	; 0
   16de4:	2a f0       	brmi	.+10     	; 0x16df0 <__floatsisf+0x6c>
   16de6:	9a 95       	dec	r25
   16de8:	66 0f       	add	r22, r22
   16dea:	77 1f       	adc	r23, r23
   16dec:	88 1f       	adc	r24, r24
   16dee:	da f7       	brpl	.-10     	; 0x16de6 <__floatsisf+0x62>
   16df0:	88 0f       	add	r24, r24
   16df2:	96 95       	lsr	r25
   16df4:	87 95       	ror	r24
   16df6:	97 f9       	bld	r25, 7
   16df8:	08 95       	ret

00016dfa <floor>:
   16dfa:	07 d1       	rcall	.+526    	; 0x1700a <__fp_trunc>
   16dfc:	80 f0       	brcs	.+32     	; 0x16e1e <floor+0x24>
   16dfe:	9f 37       	cpi	r25, 0x7F	; 127
   16e00:	40 f4       	brcc	.+16     	; 0x16e12 <floor+0x18>
   16e02:	91 11       	cpse	r25, r1
   16e04:	0e f0       	brts	.+2      	; 0x16e08 <floor+0xe>
   16e06:	19 c1       	rjmp	.+562    	; 0x1703a <__fp_szero>
   16e08:	60 e0       	ldi	r22, 0x00	; 0
   16e0a:	70 e0       	ldi	r23, 0x00	; 0
   16e0c:	80 e8       	ldi	r24, 0x80	; 128
   16e0e:	9f eb       	ldi	r25, 0xBF	; 191
   16e10:	08 95       	ret
   16e12:	26 f4       	brtc	.+8      	; 0x16e1c <floor+0x22>
   16e14:	1b 16       	cp	r1, r27
   16e16:	61 1d       	adc	r22, r1
   16e18:	71 1d       	adc	r23, r1
   16e1a:	81 1d       	adc	r24, r1
   16e1c:	2b c0       	rjmp	.+86     	; 0x16e74 <__fp_mintl>
   16e1e:	45 c0       	rjmp	.+138    	; 0x16eaa <__fp_mpack>

00016e20 <__fp_cmp>:
   16e20:	99 0f       	add	r25, r25
   16e22:	00 08       	sbc	r0, r0
   16e24:	55 0f       	add	r21, r21
   16e26:	aa 0b       	sbc	r26, r26
   16e28:	e0 e8       	ldi	r30, 0x80	; 128
   16e2a:	fe ef       	ldi	r31, 0xFE	; 254
   16e2c:	16 16       	cp	r1, r22
   16e2e:	17 06       	cpc	r1, r23
   16e30:	e8 07       	cpc	r30, r24
   16e32:	f9 07       	cpc	r31, r25
   16e34:	c0 f0       	brcs	.+48     	; 0x16e66 <__fp_cmp+0x46>
   16e36:	12 16       	cp	r1, r18
   16e38:	13 06       	cpc	r1, r19
   16e3a:	e4 07       	cpc	r30, r20
   16e3c:	f5 07       	cpc	r31, r21
   16e3e:	98 f0       	brcs	.+38     	; 0x16e66 <__fp_cmp+0x46>
   16e40:	62 1b       	sub	r22, r18
   16e42:	73 0b       	sbc	r23, r19
   16e44:	84 0b       	sbc	r24, r20
   16e46:	95 0b       	sbc	r25, r21
   16e48:	39 f4       	brne	.+14     	; 0x16e58 <__fp_cmp+0x38>
   16e4a:	0a 26       	eor	r0, r26
   16e4c:	61 f0       	breq	.+24     	; 0x16e66 <__fp_cmp+0x46>
   16e4e:	23 2b       	or	r18, r19
   16e50:	24 2b       	or	r18, r20
   16e52:	25 2b       	or	r18, r21
   16e54:	21 f4       	brne	.+8      	; 0x16e5e <__fp_cmp+0x3e>
   16e56:	08 95       	ret
   16e58:	0a 26       	eor	r0, r26
   16e5a:	09 f4       	brne	.+2      	; 0x16e5e <__fp_cmp+0x3e>
   16e5c:	a1 40       	sbci	r26, 0x01	; 1
   16e5e:	a6 95       	lsr	r26
   16e60:	8f ef       	ldi	r24, 0xFF	; 255
   16e62:	81 1d       	adc	r24, r1
   16e64:	81 1d       	adc	r24, r1
   16e66:	08 95       	ret

00016e68 <__fp_inf>:
   16e68:	97 f9       	bld	r25, 7
   16e6a:	9f 67       	ori	r25, 0x7F	; 127
   16e6c:	80 e8       	ldi	r24, 0x80	; 128
   16e6e:	70 e0       	ldi	r23, 0x00	; 0
   16e70:	60 e0       	ldi	r22, 0x00	; 0
   16e72:	08 95       	ret

00016e74 <__fp_mintl>:
   16e74:	88 23       	and	r24, r24
   16e76:	71 f4       	brne	.+28     	; 0x16e94 <__fp_mintl+0x20>
   16e78:	77 23       	and	r23, r23
   16e7a:	21 f0       	breq	.+8      	; 0x16e84 <__fp_mintl+0x10>
   16e7c:	98 50       	subi	r25, 0x08	; 8
   16e7e:	87 2b       	or	r24, r23
   16e80:	76 2f       	mov	r23, r22
   16e82:	07 c0       	rjmp	.+14     	; 0x16e92 <__fp_mintl+0x1e>
   16e84:	66 23       	and	r22, r22
   16e86:	11 f4       	brne	.+4      	; 0x16e8c <__fp_mintl+0x18>
   16e88:	99 27       	eor	r25, r25
   16e8a:	0d c0       	rjmp	.+26     	; 0x16ea6 <__fp_mintl+0x32>
   16e8c:	90 51       	subi	r25, 0x10	; 16
   16e8e:	86 2b       	or	r24, r22
   16e90:	70 e0       	ldi	r23, 0x00	; 0
   16e92:	60 e0       	ldi	r22, 0x00	; 0
   16e94:	2a f0       	brmi	.+10     	; 0x16ea0 <__fp_mintl+0x2c>
   16e96:	9a 95       	dec	r25
   16e98:	66 0f       	add	r22, r22
   16e9a:	77 1f       	adc	r23, r23
   16e9c:	88 1f       	adc	r24, r24
   16e9e:	da f7       	brpl	.-10     	; 0x16e96 <__fp_mintl+0x22>
   16ea0:	88 0f       	add	r24, r24
   16ea2:	96 95       	lsr	r25
   16ea4:	87 95       	ror	r24
   16ea6:	97 f9       	bld	r25, 7
   16ea8:	08 95       	ret

00016eaa <__fp_mpack>:
   16eaa:	9f 3f       	cpi	r25, 0xFF	; 255
   16eac:	31 f0       	breq	.+12     	; 0x16eba <__fp_mpack_finite+0xc>

00016eae <__fp_mpack_finite>:
   16eae:	91 50       	subi	r25, 0x01	; 1
   16eb0:	20 f4       	brcc	.+8      	; 0x16eba <__fp_mpack_finite+0xc>
   16eb2:	87 95       	ror	r24
   16eb4:	77 95       	ror	r23
   16eb6:	67 95       	ror	r22
   16eb8:	b7 95       	ror	r27
   16eba:	88 0f       	add	r24, r24
   16ebc:	91 1d       	adc	r25, r1
   16ebe:	96 95       	lsr	r25
   16ec0:	87 95       	ror	r24
   16ec2:	97 f9       	bld	r25, 7
   16ec4:	08 95       	ret

00016ec6 <__fp_nan>:
   16ec6:	9f ef       	ldi	r25, 0xFF	; 255
   16ec8:	80 ec       	ldi	r24, 0xC0	; 192
   16eca:	08 95       	ret

00016ecc <__fp_powser>:
   16ecc:	df 93       	push	r29
   16ece:	cf 93       	push	r28
   16ed0:	1f 93       	push	r17
   16ed2:	0f 93       	push	r16
   16ed4:	ff 92       	push	r15
   16ed6:	ef 92       	push	r14
   16ed8:	df 92       	push	r13
   16eda:	7b 01       	movw	r14, r22
   16edc:	8c 01       	movw	r16, r24
   16ede:	68 94       	set
   16ee0:	05 c0       	rjmp	.+10     	; 0x16eec <__fp_powser+0x20>
   16ee2:	da 2e       	mov	r13, r26
   16ee4:	ef 01       	movw	r28, r30
   16ee6:	8d d1       	rcall	.+794    	; 0x17202 <__mulsf3x>
   16ee8:	fe 01       	movw	r30, r28
   16eea:	e8 94       	clt
   16eec:	a5 91       	lpm	r26, Z+
   16eee:	25 91       	lpm	r18, Z+
   16ef0:	35 91       	lpm	r19, Z+
   16ef2:	45 91       	lpm	r20, Z+
   16ef4:	55 91       	lpm	r21, Z+
   16ef6:	ae f3       	brts	.-22     	; 0x16ee2 <__fp_powser+0x16>
   16ef8:	ef 01       	movw	r28, r30
   16efa:	da dd       	rcall	.-1100   	; 0x16ab0 <__addsf3x>
   16efc:	fe 01       	movw	r30, r28
   16efe:	97 01       	movw	r18, r14
   16f00:	a8 01       	movw	r20, r16
   16f02:	da 94       	dec	r13
   16f04:	79 f7       	brne	.-34     	; 0x16ee4 <__fp_powser+0x18>
   16f06:	df 90       	pop	r13
   16f08:	ef 90       	pop	r14
   16f0a:	ff 90       	pop	r15
   16f0c:	0f 91       	pop	r16
   16f0e:	1f 91       	pop	r17
   16f10:	cf 91       	pop	r28
   16f12:	df 91       	pop	r29
   16f14:	08 95       	ret

00016f16 <__fp_pscA>:
   16f16:	00 24       	eor	r0, r0
   16f18:	0a 94       	dec	r0
   16f1a:	16 16       	cp	r1, r22
   16f1c:	17 06       	cpc	r1, r23
   16f1e:	18 06       	cpc	r1, r24
   16f20:	09 06       	cpc	r0, r25
   16f22:	08 95       	ret

00016f24 <__fp_pscB>:
   16f24:	00 24       	eor	r0, r0
   16f26:	0a 94       	dec	r0
   16f28:	12 16       	cp	r1, r18
   16f2a:	13 06       	cpc	r1, r19
   16f2c:	14 06       	cpc	r1, r20
   16f2e:	05 06       	cpc	r0, r21
   16f30:	08 95       	ret
   16f32:	c9 cf       	rjmp	.-110    	; 0x16ec6 <__fp_nan>

00016f34 <__fp_rempio2>:
   16f34:	50 d0       	rcall	.+160    	; 0x16fd6 <__fp_splitA>
   16f36:	e8 f3       	brcs	.-6      	; 0x16f32 <__fp_pscB+0xe>
   16f38:	e8 94       	clt
   16f3a:	e0 e0       	ldi	r30, 0x00	; 0
   16f3c:	bb 27       	eor	r27, r27
   16f3e:	9f 57       	subi	r25, 0x7F	; 127
   16f40:	f0 f0       	brcs	.+60     	; 0x16f7e <__fp_rempio2+0x4a>
   16f42:	2a ed       	ldi	r18, 0xDA	; 218
   16f44:	3f e0       	ldi	r19, 0x0F	; 15
   16f46:	49 ec       	ldi	r20, 0xC9	; 201
   16f48:	06 c0       	rjmp	.+12     	; 0x16f56 <__fp_rempio2+0x22>
   16f4a:	ee 0f       	add	r30, r30
   16f4c:	bb 0f       	add	r27, r27
   16f4e:	66 1f       	adc	r22, r22
   16f50:	77 1f       	adc	r23, r23
   16f52:	88 1f       	adc	r24, r24
   16f54:	28 f0       	brcs	.+10     	; 0x16f60 <__fp_rempio2+0x2c>
   16f56:	b2 3a       	cpi	r27, 0xA2	; 162
   16f58:	62 07       	cpc	r22, r18
   16f5a:	73 07       	cpc	r23, r19
   16f5c:	84 07       	cpc	r24, r20
   16f5e:	28 f0       	brcs	.+10     	; 0x16f6a <__fp_rempio2+0x36>
   16f60:	b2 5a       	subi	r27, 0xA2	; 162
   16f62:	62 0b       	sbc	r22, r18
   16f64:	73 0b       	sbc	r23, r19
   16f66:	84 0b       	sbc	r24, r20
   16f68:	e3 95       	inc	r30
   16f6a:	9a 95       	dec	r25
   16f6c:	72 f7       	brpl	.-36     	; 0x16f4a <__fp_rempio2+0x16>
   16f6e:	80 38       	cpi	r24, 0x80	; 128
   16f70:	30 f4       	brcc	.+12     	; 0x16f7e <__fp_rempio2+0x4a>
   16f72:	9a 95       	dec	r25
   16f74:	bb 0f       	add	r27, r27
   16f76:	66 1f       	adc	r22, r22
   16f78:	77 1f       	adc	r23, r23
   16f7a:	88 1f       	adc	r24, r24
   16f7c:	d2 f7       	brpl	.-12     	; 0x16f72 <__fp_rempio2+0x3e>
   16f7e:	90 48       	sbci	r25, 0x80	; 128
   16f80:	96 cf       	rjmp	.-212    	; 0x16eae <__fp_mpack_finite>

00016f82 <__fp_round>:
   16f82:	09 2e       	mov	r0, r25
   16f84:	03 94       	inc	r0
   16f86:	00 0c       	add	r0, r0
   16f88:	11 f4       	brne	.+4      	; 0x16f8e <__fp_round+0xc>
   16f8a:	88 23       	and	r24, r24
   16f8c:	52 f0       	brmi	.+20     	; 0x16fa2 <__fp_round+0x20>
   16f8e:	bb 0f       	add	r27, r27
   16f90:	40 f4       	brcc	.+16     	; 0x16fa2 <__fp_round+0x20>
   16f92:	bf 2b       	or	r27, r31
   16f94:	11 f4       	brne	.+4      	; 0x16f9a <__fp_round+0x18>
   16f96:	60 ff       	sbrs	r22, 0
   16f98:	04 c0       	rjmp	.+8      	; 0x16fa2 <__fp_round+0x20>
   16f9a:	6f 5f       	subi	r22, 0xFF	; 255
   16f9c:	7f 4f       	sbci	r23, 0xFF	; 255
   16f9e:	8f 4f       	sbci	r24, 0xFF	; 255
   16fa0:	9f 4f       	sbci	r25, 0xFF	; 255
   16fa2:	08 95       	ret

00016fa4 <__fp_sinus>:
   16fa4:	ef 93       	push	r30
   16fa6:	e0 ff       	sbrs	r30, 0
   16fa8:	06 c0       	rjmp	.+12     	; 0x16fb6 <__fp_sinus+0x12>
   16faa:	a2 ea       	ldi	r26, 0xA2	; 162
   16fac:	2a ed       	ldi	r18, 0xDA	; 218
   16fae:	3f e0       	ldi	r19, 0x0F	; 15
   16fb0:	49 ec       	ldi	r20, 0xC9	; 201
   16fb2:	5f eb       	ldi	r21, 0xBF	; 191
   16fb4:	7d dd       	rcall	.-1286   	; 0x16ab0 <__addsf3x>
   16fb6:	e5 df       	rcall	.-54     	; 0x16f82 <__fp_round>
   16fb8:	0f 90       	pop	r0
   16fba:	03 94       	inc	r0
   16fbc:	01 fc       	sbrc	r0, 1
   16fbe:	90 58       	subi	r25, 0x80	; 128
   16fc0:	e1 e1       	ldi	r30, 0x11	; 17
   16fc2:	f1 e0       	ldi	r31, 0x01	; 1
   16fc4:	c7 c1       	rjmp	.+910    	; 0x17354 <__fp_powsodd>

00016fc6 <__fp_split3>:
   16fc6:	57 fd       	sbrc	r21, 7
   16fc8:	90 58       	subi	r25, 0x80	; 128
   16fca:	44 0f       	add	r20, r20
   16fcc:	55 1f       	adc	r21, r21
   16fce:	59 f0       	breq	.+22     	; 0x16fe6 <__fp_splitA+0x10>
   16fd0:	5f 3f       	cpi	r21, 0xFF	; 255
   16fd2:	71 f0       	breq	.+28     	; 0x16ff0 <__fp_splitA+0x1a>
   16fd4:	47 95       	ror	r20

00016fd6 <__fp_splitA>:
   16fd6:	88 0f       	add	r24, r24
   16fd8:	97 fb       	bst	r25, 7
   16fda:	99 1f       	adc	r25, r25
   16fdc:	61 f0       	breq	.+24     	; 0x16ff6 <__fp_splitA+0x20>
   16fde:	9f 3f       	cpi	r25, 0xFF	; 255
   16fe0:	79 f0       	breq	.+30     	; 0x17000 <__fp_splitA+0x2a>
   16fe2:	87 95       	ror	r24
   16fe4:	08 95       	ret
   16fe6:	12 16       	cp	r1, r18
   16fe8:	13 06       	cpc	r1, r19
   16fea:	14 06       	cpc	r1, r20
   16fec:	55 1f       	adc	r21, r21
   16fee:	f2 cf       	rjmp	.-28     	; 0x16fd4 <__fp_split3+0xe>
   16ff0:	46 95       	lsr	r20
   16ff2:	f1 df       	rcall	.-30     	; 0x16fd6 <__fp_splitA>
   16ff4:	08 c0       	rjmp	.+16     	; 0x17006 <__fp_splitA+0x30>
   16ff6:	16 16       	cp	r1, r22
   16ff8:	17 06       	cpc	r1, r23
   16ffa:	18 06       	cpc	r1, r24
   16ffc:	99 1f       	adc	r25, r25
   16ffe:	f1 cf       	rjmp	.-30     	; 0x16fe2 <__fp_splitA+0xc>
   17000:	86 95       	lsr	r24
   17002:	71 05       	cpc	r23, r1
   17004:	61 05       	cpc	r22, r1
   17006:	08 94       	sec
   17008:	08 95       	ret

0001700a <__fp_trunc>:
   1700a:	e5 df       	rcall	.-54     	; 0x16fd6 <__fp_splitA>
   1700c:	a0 f0       	brcs	.+40     	; 0x17036 <__fp_trunc+0x2c>
   1700e:	be e7       	ldi	r27, 0x7E	; 126
   17010:	b9 17       	cp	r27, r25
   17012:	88 f4       	brcc	.+34     	; 0x17036 <__fp_trunc+0x2c>
   17014:	bb 27       	eor	r27, r27
   17016:	9f 38       	cpi	r25, 0x8F	; 143
   17018:	60 f4       	brcc	.+24     	; 0x17032 <__fp_trunc+0x28>
   1701a:	16 16       	cp	r1, r22
   1701c:	b1 1d       	adc	r27, r1
   1701e:	67 2f       	mov	r22, r23
   17020:	78 2f       	mov	r23, r24
   17022:	88 27       	eor	r24, r24
   17024:	98 5f       	subi	r25, 0xF8	; 248
   17026:	f7 cf       	rjmp	.-18     	; 0x17016 <__fp_trunc+0xc>
   17028:	86 95       	lsr	r24
   1702a:	77 95       	ror	r23
   1702c:	67 95       	ror	r22
   1702e:	b1 1d       	adc	r27, r1
   17030:	93 95       	inc	r25
   17032:	96 39       	cpi	r25, 0x96	; 150
   17034:	c8 f3       	brcs	.-14     	; 0x17028 <__fp_trunc+0x1e>
   17036:	08 95       	ret

00017038 <__fp_zero>:
   17038:	e8 94       	clt

0001703a <__fp_szero>:
   1703a:	bb 27       	eor	r27, r27
   1703c:	66 27       	eor	r22, r22
   1703e:	77 27       	eor	r23, r23
   17040:	cb 01       	movw	r24, r22
   17042:	97 f9       	bld	r25, 7
   17044:	08 95       	ret

00017046 <__gesf2>:
   17046:	ec de       	rcall	.-552    	; 0x16e20 <__fp_cmp>
   17048:	08 f4       	brcc	.+2      	; 0x1704c <__gesf2+0x6>
   1704a:	8f ef       	ldi	r24, 0xFF	; 255
   1704c:	08 95       	ret
   1704e:	63 df       	rcall	.-314    	; 0x16f16 <__fp_pscA>
   17050:	19 f0       	breq	.+6      	; 0x17058 <__gesf2+0x12>
   17052:	68 df       	rcall	.-304    	; 0x16f24 <__fp_pscB>
   17054:	09 f0       	breq	.+2      	; 0x17058 <__gesf2+0x12>
   17056:	37 cf       	rjmp	.-402    	; 0x16ec6 <__fp_nan>
   17058:	07 cf       	rjmp	.-498    	; 0x16e68 <__fp_inf>
   1705a:	b9 01       	movw	r22, r18
   1705c:	ca 01       	movw	r24, r20
   1705e:	25 cf       	rjmp	.-438    	; 0x16eaa <__fp_mpack>

00017060 <hypot>:
   17060:	9f 77       	andi	r25, 0x7F	; 127
   17062:	5f 77       	andi	r21, 0x7F	; 127
   17064:	b0 df       	rcall	.-160    	; 0x16fc6 <__fp_split3>
   17066:	98 f3       	brcs	.-26     	; 0x1704e <__gesf2+0x8>
   17068:	99 23       	and	r25, r25
   1706a:	b9 f3       	breq	.-18     	; 0x1705a <__gesf2+0x14>
   1706c:	55 23       	and	r21, r21
   1706e:	b9 f3       	breq	.-18     	; 0x1705e <__gesf2+0x18>
   17070:	ff 27       	eor	r31, r31
   17072:	95 17       	cp	r25, r21
   17074:	58 f4       	brcc	.+22     	; 0x1708c <hypot+0x2c>
   17076:	e5 2f       	mov	r30, r21
   17078:	e9 1b       	sub	r30, r25
   1707a:	ed 30       	cpi	r30, 0x0D	; 13
   1707c:	70 f7       	brcc	.-36     	; 0x1705a <__gesf2+0x14>
   1707e:	5e 3b       	cpi	r21, 0xBE	; 190
   17080:	10 f0       	brcs	.+4      	; 0x17086 <hypot+0x26>
   17082:	f1 e4       	ldi	r31, 0x41	; 65
   17084:	1c c0       	rjmp	.+56     	; 0x170be <hypot+0x5e>
   17086:	90 34       	cpi	r25, 0x40	; 64
   17088:	e0 f4       	brcc	.+56     	; 0x170c2 <hypot+0x62>
   1708a:	0a c0       	rjmp	.+20     	; 0x170a0 <hypot+0x40>
   1708c:	e9 2f       	mov	r30, r25
   1708e:	e5 1b       	sub	r30, r21
   17090:	ed 30       	cpi	r30, 0x0D	; 13
   17092:	28 f7       	brcc	.-54     	; 0x1705e <__gesf2+0x18>
   17094:	9e 3b       	cpi	r25, 0xBE	; 190
   17096:	10 f0       	brcs	.+4      	; 0x1709c <hypot+0x3c>
   17098:	f1 e4       	ldi	r31, 0x41	; 65
   1709a:	11 c0       	rjmp	.+34     	; 0x170be <hypot+0x5e>
   1709c:	50 34       	cpi	r21, 0x40	; 64
   1709e:	88 f4       	brcc	.+34     	; 0x170c2 <hypot+0x62>
   170a0:	f9 ea       	ldi	r31, 0xA9	; 169
   170a2:	88 23       	and	r24, r24
   170a4:	2a f0       	brmi	.+10     	; 0x170b0 <hypot+0x50>
   170a6:	9a 95       	dec	r25
   170a8:	66 0f       	add	r22, r22
   170aa:	77 1f       	adc	r23, r23
   170ac:	88 1f       	adc	r24, r24
   170ae:	da f7       	brpl	.-10     	; 0x170a6 <hypot+0x46>
   170b0:	44 23       	and	r20, r20
   170b2:	2a f0       	brmi	.+10     	; 0x170be <hypot+0x5e>
   170b4:	5a 95       	dec	r21
   170b6:	22 0f       	add	r18, r18
   170b8:	33 1f       	adc	r19, r19
   170ba:	44 1f       	adc	r20, r20
   170bc:	da f7       	brpl	.-10     	; 0x170b4 <hypot+0x54>
   170be:	9f 1b       	sub	r25, r31
   170c0:	5f 1b       	sub	r21, r31
   170c2:	ff 93       	push	r31
   170c4:	1f 93       	push	r17
   170c6:	0f 93       	push	r16
   170c8:	ff 92       	push	r15
   170ca:	ef 92       	push	r14
   170cc:	79 01       	movw	r14, r18
   170ce:	8a 01       	movw	r16, r20
   170d0:	bb 27       	eor	r27, r27
   170d2:	ab 2f       	mov	r26, r27
   170d4:	9b 01       	movw	r18, r22
   170d6:	ac 01       	movw	r20, r24
   170d8:	96 d0       	rcall	.+300    	; 0x17206 <__mulsf3_pse>
   170da:	97 01       	movw	r18, r14
   170dc:	a8 01       	movw	r20, r16
   170de:	bf 93       	push	r27
   170e0:	7b 01       	movw	r14, r22
   170e2:	8c 01       	movw	r16, r24
   170e4:	aa 27       	eor	r26, r26
   170e6:	ba 2f       	mov	r27, r26
   170e8:	b9 01       	movw	r22, r18
   170ea:	ca 01       	movw	r24, r20
   170ec:	8c d0       	rcall	.+280    	; 0x17206 <__mulsf3_pse>
   170ee:	af 91       	pop	r26
   170f0:	97 01       	movw	r18, r14
   170f2:	a8 01       	movw	r20, r16
   170f4:	ef 90       	pop	r14
   170f6:	ff 90       	pop	r15
   170f8:	0f 91       	pop	r16
   170fa:	1f 91       	pop	r17
   170fc:	d9 dc       	rcall	.-1614   	; 0x16ab0 <__addsf3x>
   170fe:	41 df       	rcall	.-382    	; 0x16f82 <__fp_round>
   17100:	e1 d0       	rcall	.+450    	; 0x172c4 <sqrt>
   17102:	4f 91       	pop	r20
   17104:	40 ff       	sbrs	r20, 0
   17106:	08 95       	ret
   17108:	55 27       	eor	r21, r21
   1710a:	47 fd       	sbrc	r20, 7
   1710c:	50 95       	com	r21
   1710e:	09 c0       	rjmp	.+18     	; 0x17122 <ldexp>

00017110 <inverse>:
   17110:	9b 01       	movw	r18, r22
   17112:	ac 01       	movw	r20, r24
   17114:	60 e0       	ldi	r22, 0x00	; 0
   17116:	70 e0       	ldi	r23, 0x00	; 0
   17118:	80 e8       	ldi	r24, 0x80	; 128
   1711a:	9f e3       	ldi	r25, 0x3F	; 63
   1711c:	98 cd       	rjmp	.-1232   	; 0x16c4e <__divsf3>
   1711e:	a4 ce       	rjmp	.-696    	; 0x16e68 <__fp_inf>
   17120:	c4 ce       	rjmp	.-632    	; 0x16eaa <__fp_mpack>

00017122 <ldexp>:
   17122:	59 df       	rcall	.-334    	; 0x16fd6 <__fp_splitA>
   17124:	e8 f3       	brcs	.-6      	; 0x17120 <inverse+0x10>
   17126:	99 23       	and	r25, r25
   17128:	d9 f3       	breq	.-10     	; 0x17120 <inverse+0x10>
   1712a:	94 0f       	add	r25, r20
   1712c:	51 1d       	adc	r21, r1
   1712e:	bb f3       	brvs	.-18     	; 0x1711e <inverse+0xe>
   17130:	91 50       	subi	r25, 0x01	; 1
   17132:	50 40       	sbci	r21, 0x00	; 0
   17134:	94 f0       	brlt	.+36     	; 0x1715a <ldexp+0x38>
   17136:	59 f0       	breq	.+22     	; 0x1714e <ldexp+0x2c>
   17138:	88 23       	and	r24, r24
   1713a:	32 f0       	brmi	.+12     	; 0x17148 <ldexp+0x26>
   1713c:	66 0f       	add	r22, r22
   1713e:	77 1f       	adc	r23, r23
   17140:	88 1f       	adc	r24, r24
   17142:	91 50       	subi	r25, 0x01	; 1
   17144:	50 40       	sbci	r21, 0x00	; 0
   17146:	c1 f7       	brne	.-16     	; 0x17138 <ldexp+0x16>
   17148:	9e 3f       	cpi	r25, 0xFE	; 254
   1714a:	51 05       	cpc	r21, r1
   1714c:	44 f7       	brge	.-48     	; 0x1711e <inverse+0xe>
   1714e:	88 0f       	add	r24, r24
   17150:	91 1d       	adc	r25, r1
   17152:	96 95       	lsr	r25
   17154:	87 95       	ror	r24
   17156:	97 f9       	bld	r25, 7
   17158:	08 95       	ret
   1715a:	5f 3f       	cpi	r21, 0xFF	; 255
   1715c:	ac f0       	brlt	.+42     	; 0x17188 <ldexp+0x66>
   1715e:	98 3e       	cpi	r25, 0xE8	; 232
   17160:	9c f0       	brlt	.+38     	; 0x17188 <ldexp+0x66>
   17162:	bb 27       	eor	r27, r27
   17164:	86 95       	lsr	r24
   17166:	77 95       	ror	r23
   17168:	67 95       	ror	r22
   1716a:	b7 95       	ror	r27
   1716c:	08 f4       	brcc	.+2      	; 0x17170 <ldexp+0x4e>
   1716e:	b1 60       	ori	r27, 0x01	; 1
   17170:	93 95       	inc	r25
   17172:	c1 f7       	brne	.-16     	; 0x17164 <ldexp+0x42>
   17174:	bb 0f       	add	r27, r27
   17176:	58 f7       	brcc	.-42     	; 0x1714e <ldexp+0x2c>
   17178:	11 f4       	brne	.+4      	; 0x1717e <ldexp+0x5c>
   1717a:	60 ff       	sbrs	r22, 0
   1717c:	e8 cf       	rjmp	.-48     	; 0x1714e <ldexp+0x2c>
   1717e:	6f 5f       	subi	r22, 0xFF	; 255
   17180:	7f 4f       	sbci	r23, 0xFF	; 255
   17182:	8f 4f       	sbci	r24, 0xFF	; 255
   17184:	9f 4f       	sbci	r25, 0xFF	; 255
   17186:	e3 cf       	rjmp	.-58     	; 0x1714e <ldexp+0x2c>
   17188:	58 cf       	rjmp	.-336    	; 0x1703a <__fp_szero>

0001718a <lround>:
   1718a:	25 df       	rcall	.-438    	; 0x16fd6 <__fp_splitA>
   1718c:	58 f1       	brcs	.+86     	; 0x171e4 <lround+0x5a>
   1718e:	9e 57       	subi	r25, 0x7E	; 126
   17190:	58 f1       	brcs	.+86     	; 0x171e8 <lround+0x5e>
   17192:	98 51       	subi	r25, 0x18	; 24
   17194:	a0 f0       	brcs	.+40     	; 0x171be <lround+0x34>
   17196:	e9 f0       	breq	.+58     	; 0x171d2 <lround+0x48>
   17198:	98 30       	cpi	r25, 0x08	; 8
   1719a:	20 f5       	brcc	.+72     	; 0x171e4 <lround+0x5a>
   1719c:	09 2e       	mov	r0, r25
   1719e:	99 27       	eor	r25, r25
   171a0:	66 0f       	add	r22, r22
   171a2:	77 1f       	adc	r23, r23
   171a4:	88 1f       	adc	r24, r24
   171a6:	99 1f       	adc	r25, r25
   171a8:	0a 94       	dec	r0
   171aa:	d1 f7       	brne	.-12     	; 0x171a0 <lround+0x16>
   171ac:	12 c0       	rjmp	.+36     	; 0x171d2 <lround+0x48>
   171ae:	06 2e       	mov	r0, r22
   171b0:	67 2f       	mov	r22, r23
   171b2:	78 2f       	mov	r23, r24
   171b4:	88 27       	eor	r24, r24
   171b6:	98 5f       	subi	r25, 0xF8	; 248
   171b8:	11 f4       	brne	.+4      	; 0x171be <lround+0x34>
   171ba:	00 0c       	add	r0, r0
   171bc:	07 c0       	rjmp	.+14     	; 0x171cc <lround+0x42>
   171be:	99 3f       	cpi	r25, 0xF9	; 249
   171c0:	b4 f3       	brlt	.-20     	; 0x171ae <lround+0x24>
   171c2:	86 95       	lsr	r24
   171c4:	77 95       	ror	r23
   171c6:	67 95       	ror	r22
   171c8:	93 95       	inc	r25
   171ca:	d9 f7       	brne	.-10     	; 0x171c2 <lround+0x38>
   171cc:	61 1d       	adc	r22, r1
   171ce:	71 1d       	adc	r23, r1
   171d0:	81 1d       	adc	r24, r1
   171d2:	3e f4       	brtc	.+14     	; 0x171e2 <lround+0x58>
   171d4:	90 95       	com	r25
   171d6:	80 95       	com	r24
   171d8:	70 95       	com	r23
   171da:	61 95       	neg	r22
   171dc:	7f 4f       	sbci	r23, 0xFF	; 255
   171de:	8f 4f       	sbci	r24, 0xFF	; 255
   171e0:	9f 4f       	sbci	r25, 0xFF	; 255
   171e2:	08 95       	ret
   171e4:	68 94       	set
   171e6:	29 cf       	rjmp	.-430    	; 0x1703a <__fp_szero>
   171e8:	27 cf       	rjmp	.-434    	; 0x17038 <__fp_zero>

000171ea <__mulsf3>:
   171ea:	0b d0       	rcall	.+22     	; 0x17202 <__mulsf3x>
   171ec:	ca ce       	rjmp	.-620    	; 0x16f82 <__fp_round>
   171ee:	93 de       	rcall	.-730    	; 0x16f16 <__fp_pscA>
   171f0:	28 f0       	brcs	.+10     	; 0x171fc <__mulsf3+0x12>
   171f2:	98 de       	rcall	.-720    	; 0x16f24 <__fp_pscB>
   171f4:	18 f0       	brcs	.+6      	; 0x171fc <__mulsf3+0x12>
   171f6:	95 23       	and	r25, r21
   171f8:	09 f0       	breq	.+2      	; 0x171fc <__mulsf3+0x12>
   171fa:	36 ce       	rjmp	.-916    	; 0x16e68 <__fp_inf>
   171fc:	64 ce       	rjmp	.-824    	; 0x16ec6 <__fp_nan>
   171fe:	11 24       	eor	r1, r1
   17200:	1c cf       	rjmp	.-456    	; 0x1703a <__fp_szero>

00017202 <__mulsf3x>:
   17202:	e1 de       	rcall	.-574    	; 0x16fc6 <__fp_split3>
   17204:	a0 f3       	brcs	.-24     	; 0x171ee <__mulsf3+0x4>

00017206 <__mulsf3_pse>:
   17206:	95 9f       	mul	r25, r21
   17208:	d1 f3       	breq	.-12     	; 0x171fe <__mulsf3+0x14>
   1720a:	95 0f       	add	r25, r21
   1720c:	50 e0       	ldi	r21, 0x00	; 0
   1720e:	55 1f       	adc	r21, r21
   17210:	62 9f       	mul	r22, r18
   17212:	f0 01       	movw	r30, r0
   17214:	72 9f       	mul	r23, r18
   17216:	bb 27       	eor	r27, r27
   17218:	f0 0d       	add	r31, r0
   1721a:	b1 1d       	adc	r27, r1
   1721c:	63 9f       	mul	r22, r19
   1721e:	aa 27       	eor	r26, r26
   17220:	f0 0d       	add	r31, r0
   17222:	b1 1d       	adc	r27, r1
   17224:	aa 1f       	adc	r26, r26
   17226:	64 9f       	mul	r22, r20
   17228:	66 27       	eor	r22, r22
   1722a:	b0 0d       	add	r27, r0
   1722c:	a1 1d       	adc	r26, r1
   1722e:	66 1f       	adc	r22, r22
   17230:	82 9f       	mul	r24, r18
   17232:	22 27       	eor	r18, r18
   17234:	b0 0d       	add	r27, r0
   17236:	a1 1d       	adc	r26, r1
   17238:	62 1f       	adc	r22, r18
   1723a:	73 9f       	mul	r23, r19
   1723c:	b0 0d       	add	r27, r0
   1723e:	a1 1d       	adc	r26, r1
   17240:	62 1f       	adc	r22, r18
   17242:	83 9f       	mul	r24, r19
   17244:	a0 0d       	add	r26, r0
   17246:	61 1d       	adc	r22, r1
   17248:	22 1f       	adc	r18, r18
   1724a:	74 9f       	mul	r23, r20
   1724c:	33 27       	eor	r19, r19
   1724e:	a0 0d       	add	r26, r0
   17250:	61 1d       	adc	r22, r1
   17252:	23 1f       	adc	r18, r19
   17254:	84 9f       	mul	r24, r20
   17256:	60 0d       	add	r22, r0
   17258:	21 1d       	adc	r18, r1
   1725a:	82 2f       	mov	r24, r18
   1725c:	76 2f       	mov	r23, r22
   1725e:	6a 2f       	mov	r22, r26
   17260:	11 24       	eor	r1, r1
   17262:	9f 57       	subi	r25, 0x7F	; 127
   17264:	50 40       	sbci	r21, 0x00	; 0
   17266:	8a f0       	brmi	.+34     	; 0x1728a <__mulsf3_pse+0x84>
   17268:	e1 f0       	breq	.+56     	; 0x172a2 <__mulsf3_pse+0x9c>
   1726a:	88 23       	and	r24, r24
   1726c:	4a f0       	brmi	.+18     	; 0x17280 <__mulsf3_pse+0x7a>
   1726e:	ee 0f       	add	r30, r30
   17270:	ff 1f       	adc	r31, r31
   17272:	bb 1f       	adc	r27, r27
   17274:	66 1f       	adc	r22, r22
   17276:	77 1f       	adc	r23, r23
   17278:	88 1f       	adc	r24, r24
   1727a:	91 50       	subi	r25, 0x01	; 1
   1727c:	50 40       	sbci	r21, 0x00	; 0
   1727e:	a9 f7       	brne	.-22     	; 0x1726a <__mulsf3_pse+0x64>
   17280:	9e 3f       	cpi	r25, 0xFE	; 254
   17282:	51 05       	cpc	r21, r1
   17284:	70 f0       	brcs	.+28     	; 0x172a2 <__mulsf3_pse+0x9c>
   17286:	f0 cd       	rjmp	.-1056   	; 0x16e68 <__fp_inf>
   17288:	d8 ce       	rjmp	.-592    	; 0x1703a <__fp_szero>
   1728a:	5f 3f       	cpi	r21, 0xFF	; 255
   1728c:	ec f3       	brlt	.-6      	; 0x17288 <__mulsf3_pse+0x82>
   1728e:	98 3e       	cpi	r25, 0xE8	; 232
   17290:	dc f3       	brlt	.-10     	; 0x17288 <__mulsf3_pse+0x82>
   17292:	86 95       	lsr	r24
   17294:	77 95       	ror	r23
   17296:	67 95       	ror	r22
   17298:	b7 95       	ror	r27
   1729a:	f7 95       	ror	r31
   1729c:	e7 95       	ror	r30
   1729e:	9f 5f       	subi	r25, 0xFF	; 255
   172a0:	c1 f7       	brne	.-16     	; 0x17292 <__mulsf3_pse+0x8c>
   172a2:	fe 2b       	or	r31, r30
   172a4:	88 0f       	add	r24, r24
   172a6:	91 1d       	adc	r25, r1
   172a8:	96 95       	lsr	r25
   172aa:	87 95       	ror	r24
   172ac:	97 f9       	bld	r25, 7
   172ae:	08 95       	ret

000172b0 <sin>:
   172b0:	9f 93       	push	r25
   172b2:	40 de       	rcall	.-896    	; 0x16f34 <__fp_rempio2>
   172b4:	0f 90       	pop	r0
   172b6:	07 fc       	sbrc	r0, 7
   172b8:	ee 5f       	subi	r30, 0xFE	; 254
   172ba:	74 ce       	rjmp	.-792    	; 0x16fa4 <__fp_sinus>
   172bc:	11 f4       	brne	.+4      	; 0x172c2 <sin+0x12>
   172be:	0e f4       	brtc	.+2      	; 0x172c2 <sin+0x12>
   172c0:	02 ce       	rjmp	.-1020   	; 0x16ec6 <__fp_nan>
   172c2:	f3 cd       	rjmp	.-1050   	; 0x16eaa <__fp_mpack>

000172c4 <sqrt>:
   172c4:	88 de       	rcall	.-752    	; 0x16fd6 <__fp_splitA>
   172c6:	d0 f3       	brcs	.-12     	; 0x172bc <sin+0xc>
   172c8:	99 23       	and	r25, r25
   172ca:	d9 f3       	breq	.-10     	; 0x172c2 <sin+0x12>
   172cc:	ce f3       	brts	.-14     	; 0x172c0 <sin+0x10>
   172ce:	9f 57       	subi	r25, 0x7F	; 127
   172d0:	55 0b       	sbc	r21, r21
   172d2:	87 ff       	sbrs	r24, 7
   172d4:	38 d0       	rcall	.+112    	; 0x17346 <__fp_norm2>
   172d6:	00 24       	eor	r0, r0
   172d8:	a0 e6       	ldi	r26, 0x60	; 96
   172da:	40 ea       	ldi	r20, 0xA0	; 160
   172dc:	90 01       	movw	r18, r0
   172de:	80 58       	subi	r24, 0x80	; 128
   172e0:	56 95       	lsr	r21
   172e2:	97 95       	ror	r25
   172e4:	28 f4       	brcc	.+10     	; 0x172f0 <sqrt+0x2c>
   172e6:	80 5c       	subi	r24, 0xC0	; 192
   172e8:	66 0f       	add	r22, r22
   172ea:	77 1f       	adc	r23, r23
   172ec:	88 1f       	adc	r24, r24
   172ee:	20 f0       	brcs	.+8      	; 0x172f8 <sqrt+0x34>
   172f0:	26 17       	cp	r18, r22
   172f2:	37 07       	cpc	r19, r23
   172f4:	48 07       	cpc	r20, r24
   172f6:	30 f4       	brcc	.+12     	; 0x17304 <sqrt+0x40>
   172f8:	62 1b       	sub	r22, r18
   172fa:	73 0b       	sbc	r23, r19
   172fc:	84 0b       	sbc	r24, r20
   172fe:	20 29       	or	r18, r0
   17300:	31 29       	or	r19, r1
   17302:	4a 2b       	or	r20, r26
   17304:	a6 95       	lsr	r26
   17306:	17 94       	ror	r1
   17308:	07 94       	ror	r0
   1730a:	20 25       	eor	r18, r0
   1730c:	31 25       	eor	r19, r1
   1730e:	4a 27       	eor	r20, r26
   17310:	58 f7       	brcc	.-42     	; 0x172e8 <sqrt+0x24>
   17312:	66 0f       	add	r22, r22
   17314:	77 1f       	adc	r23, r23
   17316:	88 1f       	adc	r24, r24
   17318:	20 f0       	brcs	.+8      	; 0x17322 <sqrt+0x5e>
   1731a:	26 17       	cp	r18, r22
   1731c:	37 07       	cpc	r19, r23
   1731e:	48 07       	cpc	r20, r24
   17320:	30 f4       	brcc	.+12     	; 0x1732e <sqrt+0x6a>
   17322:	62 0b       	sbc	r22, r18
   17324:	73 0b       	sbc	r23, r19
   17326:	84 0b       	sbc	r24, r20
   17328:	20 0d       	add	r18, r0
   1732a:	31 1d       	adc	r19, r1
   1732c:	41 1d       	adc	r20, r1
   1732e:	a0 95       	com	r26
   17330:	81 f7       	brne	.-32     	; 0x17312 <sqrt+0x4e>
   17332:	b9 01       	movw	r22, r18
   17334:	84 2f       	mov	r24, r20
   17336:	91 58       	subi	r25, 0x81	; 129
   17338:	88 0f       	add	r24, r24
   1733a:	96 95       	lsr	r25
   1733c:	87 95       	ror	r24
   1733e:	08 95       	ret

00017340 <square>:
   17340:	9b 01       	movw	r18, r22
   17342:	ac 01       	movw	r20, r24
   17344:	52 cf       	rjmp	.-348    	; 0x171ea <__mulsf3>

00017346 <__fp_norm2>:
   17346:	91 50       	subi	r25, 0x01	; 1
   17348:	50 40       	sbci	r21, 0x00	; 0
   1734a:	66 0f       	add	r22, r22
   1734c:	77 1f       	adc	r23, r23
   1734e:	88 1f       	adc	r24, r24
   17350:	d2 f7       	brpl	.-12     	; 0x17346 <__fp_norm2>
   17352:	08 95       	ret

00017354 <__fp_powsodd>:
   17354:	9f 93       	push	r25
   17356:	8f 93       	push	r24
   17358:	7f 93       	push	r23
   1735a:	6f 93       	push	r22
   1735c:	ff 93       	push	r31
   1735e:	ef 93       	push	r30
   17360:	9b 01       	movw	r18, r22
   17362:	ac 01       	movw	r20, r24
   17364:	42 df       	rcall	.-380    	; 0x171ea <__mulsf3>
   17366:	ef 91       	pop	r30
   17368:	ff 91       	pop	r31
   1736a:	b0 dd       	rcall	.-1184   	; 0x16ecc <__fp_powser>
   1736c:	2f 91       	pop	r18
   1736e:	3f 91       	pop	r19
   17370:	4f 91       	pop	r20
   17372:	5f 91       	pop	r21
   17374:	3a cf       	rjmp	.-396    	; 0x171ea <__mulsf3>

00017376 <__vector_23>:
#endif

	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
   17376:	1f 92       	push	r1
   17378:	0f 92       	push	r0
   1737a:	0f b6       	in	r0, 0x3f	; 63
   1737c:	0f 92       	push	r0
   1737e:	11 24       	eor	r1, r1
   17380:	2f 93       	push	r18
   17382:	3f 93       	push	r19
   17384:	8f 93       	push	r24
   17386:	9f 93       	push	r25
   17388:	af 93       	push	r26
   1738a:	bf 93       	push	r27
   1738c:	80 91 2d 12 	lds	r24, 0x122D
   17390:	90 91 2e 12 	lds	r25, 0x122E
   17394:	a0 91 2f 12 	lds	r26, 0x122F
   17398:	b0 91 30 12 	lds	r27, 0x1230
   1739c:	30 91 31 12 	lds	r19, 0x1231
   173a0:	01 96       	adiw	r24, 0x01	; 1
   173a2:	a1 1d       	adc	r26, r1
   173a4:	b1 1d       	adc	r27, r1
   173a6:	23 2f       	mov	r18, r19
   173a8:	2d 5f       	subi	r18, 0xFD	; 253
   173aa:	2d 37       	cpi	r18, 0x7D	; 125
   173ac:	20 f0       	brcs	.+8      	; 0x173b6 <__vector_23+0x40>
   173ae:	2d 57       	subi	r18, 0x7D	; 125
   173b0:	01 96       	adiw	r24, 0x01	; 1
   173b2:	a1 1d       	adc	r26, r1
   173b4:	b1 1d       	adc	r27, r1
   173b6:	20 93 31 12 	sts	0x1231, r18
   173ba:	80 93 2d 12 	sts	0x122D, r24
   173be:	90 93 2e 12 	sts	0x122E, r25
   173c2:	a0 93 2f 12 	sts	0x122F, r26
   173c6:	b0 93 30 12 	sts	0x1230, r27
   173ca:	80 91 29 12 	lds	r24, 0x1229
   173ce:	90 91 2a 12 	lds	r25, 0x122A
   173d2:	a0 91 2b 12 	lds	r26, 0x122B
   173d6:	b0 91 2c 12 	lds	r27, 0x122C
   173da:	01 96       	adiw	r24, 0x01	; 1
   173dc:	a1 1d       	adc	r26, r1
   173de:	b1 1d       	adc	r27, r1
   173e0:	80 93 29 12 	sts	0x1229, r24
   173e4:	90 93 2a 12 	sts	0x122A, r25
   173e8:	a0 93 2b 12 	sts	0x122B, r26
   173ec:	b0 93 2c 12 	sts	0x122C, r27
   173f0:	bf 91       	pop	r27
   173f2:	af 91       	pop	r26
   173f4:	9f 91       	pop	r25
   173f6:	8f 91       	pop	r24
   173f8:	3f 91       	pop	r19
   173fa:	2f 91       	pop	r18
   173fc:	0f 90       	pop	r0
   173fe:	0f be       	out	0x3f, r0	; 63
   17400:	0f 90       	pop	r0
   17402:	1f 90       	pop	r1
   17404:	18 95       	reti

00017406 <millis>:
   17406:	8f b7       	in	r24, 0x3f	; 63
   17408:	f8 94       	cli
   1740a:	20 91 2d 12 	lds	r18, 0x122D
   1740e:	30 91 2e 12 	lds	r19, 0x122E
   17412:	40 91 2f 12 	lds	r20, 0x122F
   17416:	50 91 30 12 	lds	r21, 0x1230
   1741a:	8f bf       	out	0x3f, r24	; 63
   1741c:	b9 01       	movw	r22, r18
   1741e:	ca 01       	movw	r24, r20
   17420:	08 95       	ret

00017422 <delay>:

void delay(unsigned long ms)
{
   17422:	9b 01       	movw	r18, r22
   17424:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   17426:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
   17428:	f8 94       	cli
	m = timer0_overflow_count;
   1742a:	80 91 29 12 	lds	r24, 0x1229
   1742e:	90 91 2a 12 	lds	r25, 0x122A
   17432:	a0 91 2b 12 	lds	r26, 0x122B
   17436:	b0 91 2c 12 	lds	r27, 0x122C
#if defined(TCNT0)
	t = TCNT0;
   1743a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
   1743c:	a8 9b       	sbis	0x15, 0	; 21
   1743e:	05 c0       	rjmp	.+10     	; 0x1744a <delay+0x28>
   17440:	6f 3f       	cpi	r22, 0xFF	; 255
   17442:	19 f0       	breq	.+6      	; 0x1744a <delay+0x28>
		m++;
   17444:	01 96       	adiw	r24, 0x01	; 1
   17446:	a1 1d       	adc	r26, r1
   17448:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
   1744a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
   1744c:	ba 2f       	mov	r27, r26
   1744e:	a9 2f       	mov	r26, r25
   17450:	98 2f       	mov	r25, r24
   17452:	88 27       	eor	r24, r24
   17454:	86 0f       	add	r24, r22
   17456:	91 1d       	adc	r25, r1
   17458:	a1 1d       	adc	r26, r1
   1745a:	b1 1d       	adc	r27, r1
   1745c:	62 e0       	ldi	r22, 0x02	; 2
   1745e:	88 0f       	add	r24, r24
   17460:	99 1f       	adc	r25, r25
   17462:	aa 1f       	adc	r26, r26
   17464:	bb 1f       	adc	r27, r27
   17466:	6a 95       	dec	r22
   17468:	d1 f7       	brne	.-12     	; 0x1745e <delay+0x3c>
   1746a:	bc 01       	movw	r22, r24
   1746c:	2d c0       	rjmp	.+90     	; 0x174c8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   1746e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
   17470:	f8 94       	cli
	m = timer0_overflow_count;
   17472:	80 91 29 12 	lds	r24, 0x1229
   17476:	90 91 2a 12 	lds	r25, 0x122A
   1747a:	a0 91 2b 12 	lds	r26, 0x122B
   1747e:	b0 91 2c 12 	lds	r27, 0x122C
#if defined(TCNT0)
	t = TCNT0;
   17482:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
   17484:	a8 9b       	sbis	0x15, 0	; 21
   17486:	05 c0       	rjmp	.+10     	; 0x17492 <delay+0x70>
   17488:	ef 3f       	cpi	r30, 0xFF	; 255
   1748a:	19 f0       	breq	.+6      	; 0x17492 <delay+0x70>
		m++;
   1748c:	01 96       	adiw	r24, 0x01	; 1
   1748e:	a1 1d       	adc	r26, r1
   17490:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
   17492:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
   17494:	ba 2f       	mov	r27, r26
   17496:	a9 2f       	mov	r26, r25
   17498:	98 2f       	mov	r25, r24
   1749a:	88 27       	eor	r24, r24
   1749c:	8e 0f       	add	r24, r30
   1749e:	91 1d       	adc	r25, r1
   174a0:	a1 1d       	adc	r26, r1
   174a2:	b1 1d       	adc	r27, r1
   174a4:	e2 e0       	ldi	r30, 0x02	; 2
   174a6:	88 0f       	add	r24, r24
   174a8:	99 1f       	adc	r25, r25
   174aa:	aa 1f       	adc	r26, r26
   174ac:	bb 1f       	adc	r27, r27
   174ae:	ea 95       	dec	r30
   174b0:	d1 f7       	brne	.-12     	; 0x174a6 <delay+0x84>
   174b2:	86 1b       	sub	r24, r22
   174b4:	97 0b       	sbc	r25, r23
   174b6:	88 5e       	subi	r24, 0xE8	; 232
   174b8:	93 40       	sbci	r25, 0x03	; 3
   174ba:	c8 f2       	brcs	.-78     	; 0x1746e <delay+0x4c>
			ms--;
   174bc:	21 50       	subi	r18, 0x01	; 1
   174be:	30 40       	sbci	r19, 0x00	; 0
   174c0:	40 40       	sbci	r20, 0x00	; 0
   174c2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
   174c4:	68 51       	subi	r22, 0x18	; 24
   174c6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
   174c8:	21 15       	cp	r18, r1
   174ca:	31 05       	cpc	r19, r1
   174cc:	41 05       	cpc	r20, r1
   174ce:	51 05       	cpc	r21, r1
   174d0:	71 f6       	brne	.-100    	; 0x1746e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
   174d2:	08 95       	ret

000174d4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
   174d4:	01 97       	sbiw	r24, 0x01	; 1
   174d6:	39 f0       	breq	.+14     	; 0x174e6 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
   174d8:	88 0f       	add	r24, r24
   174da:	99 1f       	adc	r25, r25
   174dc:	88 0f       	add	r24, r24
   174de:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
   174e0:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
   174e2:	01 97       	sbiw	r24, 0x01	; 1
   174e4:	f1 f7       	brne	.-4      	; 0x174e2 <delayMicroseconds+0xe>
   174e6:	08 95       	ret

000174e8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   174e8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   174ea:	84 b5       	in	r24, 0x24	; 36
   174ec:	82 60       	ori	r24, 0x02	; 2
   174ee:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   174f0:	84 b5       	in	r24, 0x24	; 36
   174f2:	81 60       	ori	r24, 0x01	; 1
   174f4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   174f6:	85 b5       	in	r24, 0x25	; 37
   174f8:	82 60       	ori	r24, 0x02	; 2
   174fa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
   174fc:	85 b5       	in	r24, 0x25	; 37
   174fe:	81 60       	ori	r24, 0x01	; 1
   17500:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
   17502:	ee e6       	ldi	r30, 0x6E	; 110
   17504:	f0 e0       	ldi	r31, 0x00	; 0
   17506:	80 81       	ld	r24, Z
   17508:	81 60       	ori	r24, 0x01	; 1
   1750a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
   1750c:	e1 e8       	ldi	r30, 0x81	; 129
   1750e:	f0 e0       	ldi	r31, 0x00	; 0
   17510:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
   17512:	80 81       	ld	r24, Z
   17514:	82 60       	ori	r24, 0x02	; 2
   17516:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
   17518:	80 81       	ld	r24, Z
   1751a:	81 60       	ori	r24, 0x01	; 1
   1751c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
   1751e:	e0 e8       	ldi	r30, 0x80	; 128
   17520:	f0 e0       	ldi	r31, 0x00	; 0
   17522:	80 81       	ld	r24, Z
   17524:	81 60       	ori	r24, 0x01	; 1
   17526:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
   17528:	e1 eb       	ldi	r30, 0xB1	; 177
   1752a:	f0 e0       	ldi	r31, 0x00	; 0
   1752c:	80 81       	ld	r24, Z
   1752e:	84 60       	ori	r24, 0x04	; 4
   17530:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
   17532:	e0 eb       	ldi	r30, 0xB0	; 176
   17534:	f0 e0       	ldi	r31, 0x00	; 0
   17536:	80 81       	ld	r24, Z
   17538:	81 60       	ori	r24, 0x01	; 1
   1753a:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
   1753c:	e1 e9       	ldi	r30, 0x91	; 145
   1753e:	f0 e0       	ldi	r31, 0x00	; 0
   17540:	80 81       	ld	r24, Z
   17542:	82 60       	ori	r24, 0x02	; 2
   17544:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
   17546:	80 81       	ld	r24, Z
   17548:	81 60       	ori	r24, 0x01	; 1
   1754a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
   1754c:	e0 e9       	ldi	r30, 0x90	; 144
   1754e:	f0 e0       	ldi	r31, 0x00	; 0
   17550:	80 81       	ld	r24, Z
   17552:	81 60       	ori	r24, 0x01	; 1
   17554:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
   17556:	e1 ea       	ldi	r30, 0xA1	; 161
   17558:	f0 e0       	ldi	r31, 0x00	; 0
   1755a:	80 81       	ld	r24, Z
   1755c:	82 60       	ori	r24, 0x02	; 2
   1755e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
   17560:	80 81       	ld	r24, Z
   17562:	81 60       	ori	r24, 0x01	; 1
   17564:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
   17566:	e0 ea       	ldi	r30, 0xA0	; 160
   17568:	f0 e0       	ldi	r31, 0x00	; 0
   1756a:	80 81       	ld	r24, Z
   1756c:	81 60       	ori	r24, 0x01	; 1
   1756e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
   17570:	e1 e2       	ldi	r30, 0x21	; 33
   17572:	f1 e0       	ldi	r31, 0x01	; 1
   17574:	80 81       	ld	r24, Z
   17576:	82 60       	ori	r24, 0x02	; 2
   17578:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
   1757a:	80 81       	ld	r24, Z
   1757c:	81 60       	ori	r24, 0x01	; 1
   1757e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
   17580:	e0 e2       	ldi	r30, 0x20	; 32
   17582:	f1 e0       	ldi	r31, 0x01	; 1
   17584:	80 81       	ld	r24, Z
   17586:	81 60       	ori	r24, 0x01	; 1
   17588:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
   1758a:	ea e7       	ldi	r30, 0x7A	; 122
   1758c:	f0 e0       	ldi	r31, 0x00	; 0
   1758e:	80 81       	ld	r24, Z
   17590:	84 60       	ori	r24, 0x04	; 4
   17592:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
   17594:	80 81       	ld	r24, Z
   17596:	82 60       	ori	r24, 0x02	; 2
   17598:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
   1759a:	80 81       	ld	r24, Z
   1759c:	81 60       	ori	r24, 0x01	; 1
   1759e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
   175a0:	80 81       	ld	r24, Z
   175a2:	80 68       	ori	r24, 0x80	; 128
   175a4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
   175a6:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
   175aa:	08 95       	ret

000175ac <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   175ac:	1f 93       	push	r17
   175ae:	cf 93       	push	r28
   175b0:	df 93       	push	r29
   175b2:	18 2f       	mov	r17, r24
   175b4:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   175b6:	61 e0       	ldi	r22, 0x01	; 1
   175b8:	d7 d0       	rcall	.+430    	; 0x17768 <pinMode>
	if (val == 0)
   175ba:	20 97       	sbiw	r28, 0x00	; 0
   175bc:	09 f4       	brne	.+2      	; 0x175c0 <analogWrite+0x14>
   175be:	ca c0       	rjmp	.+404    	; 0x17754 <analogWrite+0x1a8>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
   175c0:	cf 3f       	cpi	r28, 0xFF	; 255
   175c2:	d1 05       	cpc	r29, r1
   175c4:	09 f4       	brne	.+2      	; 0x175c8 <analogWrite+0x1c>
   175c6:	c9 c0       	rjmp	.+402    	; 0x1775a <analogWrite+0x1ae>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
   175c8:	e1 2f       	mov	r30, r17
   175ca:	f0 e0       	ldi	r31, 0x00	; 0
   175cc:	e2 59       	subi	r30, 0x92	; 146
   175ce:	f8 4e       	sbci	r31, 0xE8	; 232
   175d0:	84 91       	lpm	r24, Z
   175d2:	89 30       	cpi	r24, 0x09	; 9
   175d4:	09 f4       	brne	.+2      	; 0x175d8 <analogWrite+0x2c>
   175d6:	66 c0       	rjmp	.+204    	; 0x176a4 <analogWrite+0xf8>
   175d8:	8a 30       	cpi	r24, 0x0A	; 10
   175da:	b0 f4       	brcc	.+44     	; 0x17608 <analogWrite+0x5c>
   175dc:	84 30       	cpi	r24, 0x04	; 4
   175de:	f1 f1       	breq	.+124    	; 0x1765c <analogWrite+0xb0>
   175e0:	85 30       	cpi	r24, 0x05	; 5
   175e2:	40 f4       	brcc	.+16     	; 0x175f4 <analogWrite+0x48>
   175e4:	82 30       	cpi	r24, 0x02	; 2
   175e6:	59 f1       	breq	.+86     	; 0x1763e <analogWrite+0x92>
   175e8:	83 30       	cpi	r24, 0x03	; 3
   175ea:	70 f5       	brcc	.+92     	; 0x17648 <analogWrite+0x9c>
   175ec:	81 30       	cpi	r24, 0x01	; 1
   175ee:	09 f0       	breq	.+2      	; 0x175f2 <analogWrite+0x46>
   175f0:	ae c0       	rjmp	.+348    	; 0x1774e <analogWrite+0x1a2>
   175f2:	20 c0       	rjmp	.+64     	; 0x17634 <analogWrite+0x88>
   175f4:	87 30       	cpi	r24, 0x07	; 7
   175f6:	09 f4       	brne	.+2      	; 0x175fa <analogWrite+0x4e>
   175f8:	43 c0       	rjmp	.+134    	; 0x17680 <analogWrite+0xd4>
   175fa:	88 30       	cpi	r24, 0x08	; 8
   175fc:	08 f0       	brcs	.+2      	; 0x17600 <analogWrite+0x54>
   175fe:	48 c0       	rjmp	.+144    	; 0x17690 <analogWrite+0xe4>
   17600:	86 30       	cpi	r24, 0x06	; 6
   17602:	09 f0       	breq	.+2      	; 0x17606 <analogWrite+0x5a>
   17604:	a4 c0       	rjmp	.+328    	; 0x1774e <analogWrite+0x1a2>
   17606:	34 c0       	rjmp	.+104    	; 0x17670 <analogWrite+0xc4>
   17608:	8d 30       	cpi	r24, 0x0D	; 13
   1760a:	09 f4       	brne	.+2      	; 0x1760e <analogWrite+0x62>
   1760c:	78 c0       	rjmp	.+240    	; 0x176fe <analogWrite+0x152>
   1760e:	8e 30       	cpi	r24, 0x0E	; 14
   17610:	38 f4       	brcc	.+14     	; 0x17620 <analogWrite+0x74>
   17612:	8b 30       	cpi	r24, 0x0B	; 11
   17614:	09 f4       	brne	.+2      	; 0x17618 <analogWrite+0x6c>
   17616:	5a c0       	rjmp	.+180    	; 0x176cc <analogWrite+0x120>
   17618:	8c 30       	cpi	r24, 0x0C	; 12
   1761a:	08 f0       	brcs	.+2      	; 0x1761e <analogWrite+0x72>
   1761c:	66 c0       	rjmp	.+204    	; 0x176ea <analogWrite+0x13e>
   1761e:	4c c0       	rjmp	.+152    	; 0x176b8 <analogWrite+0x10c>
   17620:	80 31       	cpi	r24, 0x10	; 16
   17622:	09 f4       	brne	.+2      	; 0x17626 <analogWrite+0x7a>
   17624:	80 c0       	rjmp	.+256    	; 0x17726 <analogWrite+0x17a>
   17626:	81 31       	cpi	r24, 0x11	; 17
   17628:	09 f4       	brne	.+2      	; 0x1762c <analogWrite+0x80>
   1762a:	87 c0       	rjmp	.+270    	; 0x1773a <analogWrite+0x18e>
   1762c:	8f 30       	cpi	r24, 0x0F	; 15
   1762e:	09 f0       	breq	.+2      	; 0x17632 <analogWrite+0x86>
   17630:	8e c0       	rjmp	.+284    	; 0x1774e <analogWrite+0x1a2>
   17632:	6f c0       	rjmp	.+222    	; 0x17712 <analogWrite+0x166>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
   17634:	84 b5       	in	r24, 0x24	; 36
   17636:	80 68       	ori	r24, 0x80	; 128
   17638:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
   1763a:	c7 bd       	out	0x27, r28	; 39
   1763c:	91 c0       	rjmp	.+290    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
   1763e:	84 b5       	in	r24, 0x24	; 36
   17640:	80 62       	ori	r24, 0x20	; 32
   17642:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
   17644:	c8 bd       	out	0x28, r28	; 40
   17646:	8c c0       	rjmp	.+280    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
   17648:	80 91 80 00 	lds	r24, 0x0080
   1764c:	80 68       	ori	r24, 0x80	; 128
   1764e:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
   17652:	d0 93 89 00 	sts	0x0089, r29
   17656:	c0 93 88 00 	sts	0x0088, r28
   1765a:	82 c0       	rjmp	.+260    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
   1765c:	80 91 80 00 	lds	r24, 0x0080
   17660:	80 62       	ori	r24, 0x20	; 32
   17662:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
   17666:	d0 93 8b 00 	sts	0x008B, r29
   1766a:	c0 93 8a 00 	sts	0x008A, r28
   1766e:	78 c0       	rjmp	.+240    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
   17670:	80 91 b0 00 	lds	r24, 0x00B0
   17674:	80 68       	ori	r24, 0x80	; 128
   17676:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
   1767a:	c0 93 b3 00 	sts	0x00B3, r28
   1767e:	70 c0       	rjmp	.+224    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
   17680:	80 91 b0 00 	lds	r24, 0x00B0
   17684:	80 62       	ori	r24, 0x20	; 32
   17686:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
   1768a:	c0 93 b4 00 	sts	0x00B4, r28
   1768e:	68 c0       	rjmp	.+208    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
   17690:	80 91 90 00 	lds	r24, 0x0090
   17694:	80 68       	ori	r24, 0x80	; 128
   17696:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
   1769a:	d0 93 99 00 	sts	0x0099, r29
   1769e:	c0 93 98 00 	sts	0x0098, r28
   176a2:	5e c0       	rjmp	.+188    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
   176a4:	80 91 90 00 	lds	r24, 0x0090
   176a8:	80 62       	ori	r24, 0x20	; 32
   176aa:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
   176ae:	d0 93 9b 00 	sts	0x009B, r29
   176b2:	c0 93 9a 00 	sts	0x009A, r28
   176b6:	54 c0       	rjmp	.+168    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
   176b8:	80 91 90 00 	lds	r24, 0x0090
   176bc:	88 60       	ori	r24, 0x08	; 8
   176be:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
   176c2:	d0 93 9d 00 	sts	0x009D, r29
   176c6:	c0 93 9c 00 	sts	0x009C, r28
   176ca:	4a c0       	rjmp	.+148    	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
   176cc:	80 91 a0 00 	lds	r24, 0x00A0
   176d0:	80 68       	ori	r24, 0x80	; 128
   176d2:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
   176d6:	80 91 a0 00 	lds	r24, 0x00A0
   176da:	8f 7b       	andi	r24, 0xBF	; 191
   176dc:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
   176e0:	d0 93 a9 00 	sts	0x00A9, r29
   176e4:	c0 93 a8 00 	sts	0x00A8, r28
   176e8:	3b c0       	rjmp	.+118    	; 0x17760 <analogWrite+0x1b4>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
   176ea:	80 91 a0 00 	lds	r24, 0x00A0
   176ee:	80 62       	ori	r24, 0x20	; 32
   176f0:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
   176f4:	d0 93 ab 00 	sts	0x00AB, r29
   176f8:	c0 93 aa 00 	sts	0x00AA, r28
   176fc:	31 c0       	rjmp	.+98     	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
   176fe:	80 91 a0 00 	lds	r24, 0x00A0
   17702:	88 60       	ori	r24, 0x08	; 8
   17704:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
   17708:	d0 93 ad 00 	sts	0x00AD, r29
   1770c:	c0 93 ac 00 	sts	0x00AC, r28
   17710:	27 c0       	rjmp	.+78     	; 0x17760 <analogWrite+0x1b4>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
   17712:	80 91 20 01 	lds	r24, 0x0120
   17716:	80 68       	ori	r24, 0x80	; 128
   17718:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
   1771c:	d0 93 29 01 	sts	0x0129, r29
   17720:	c0 93 28 01 	sts	0x0128, r28
   17724:	1d c0       	rjmp	.+58     	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
   17726:	80 91 20 01 	lds	r24, 0x0120
   1772a:	80 62       	ori	r24, 0x20	; 32
   1772c:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
   17730:	d0 93 2b 01 	sts	0x012B, r29
   17734:	c0 93 2a 01 	sts	0x012A, r28
   17738:	13 c0       	rjmp	.+38     	; 0x17760 <analogWrite+0x1b4>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
   1773a:	80 91 20 01 	lds	r24, 0x0120
   1773e:	88 60       	ori	r24, 0x08	; 8
   17740:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
   17744:	d0 93 2d 01 	sts	0x012D, r29
   17748:	c0 93 2c 01 	sts	0x012C, r28
   1774c:	09 c0       	rjmp	.+18     	; 0x17760 <analogWrite+0x1b4>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
   1774e:	c0 38       	cpi	r28, 0x80	; 128
   17750:	d1 05       	cpc	r29, r1
   17752:	1c f4       	brge	.+6      	; 0x1775a <analogWrite+0x1ae>
					digitalWrite(pin, LOW);
   17754:	81 2f       	mov	r24, r17
   17756:	60 e0       	ldi	r22, 0x00	; 0
   17758:	02 c0       	rjmp	.+4      	; 0x1775e <analogWrite+0x1b2>
				} else {
					digitalWrite(pin, HIGH);
   1775a:	81 2f       	mov	r24, r17
   1775c:	61 e0       	ldi	r22, 0x01	; 1
   1775e:	b7 d0       	rcall	.+366    	; 0x178ce <digitalWrite>
				}
		}
	}
}
   17760:	df 91       	pop	r29
   17762:	cf 91       	pop	r28
   17764:	1f 91       	pop	r17
   17766:	08 95       	ret

00017768 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   17768:	cf 93       	push	r28
   1776a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
   1776c:	48 2f       	mov	r20, r24
   1776e:	50 e0       	ldi	r21, 0x00	; 0
   17770:	ca 01       	movw	r24, r20
   17772:	88 5d       	subi	r24, 0xD8	; 216
   17774:	98 4e       	sbci	r25, 0xE8	; 232
   17776:	fc 01       	movw	r30, r24
   17778:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
   1777a:	4e 51       	subi	r20, 0x1E	; 30
   1777c:	59 4e       	sbci	r21, 0xE9	; 233
   1777e:	fa 01       	movw	r30, r20
   17780:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
   17782:	88 23       	and	r24, r24
   17784:	69 f1       	breq	.+90     	; 0x177e0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
   17786:	90 e0       	ldi	r25, 0x00	; 0
   17788:	88 0f       	add	r24, r24
   1778a:	99 1f       	adc	r25, r25
   1778c:	fc 01       	movw	r30, r24
   1778e:	ec 56       	subi	r30, 0x6C	; 108
   17790:	f9 4e       	sbci	r31, 0xE9	; 233
   17792:	a5 91       	lpm	r26, Z+
   17794:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
   17796:	fc 01       	movw	r30, r24
   17798:	e2 55       	subi	r30, 0x52	; 82
   1779a:	f9 4e       	sbci	r31, 0xE9	; 233
   1779c:	c5 91       	lpm	r28, Z+
   1779e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
   177a0:	66 23       	and	r22, r22
   177a2:	51 f4       	brne	.+20     	; 0x177b8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
   177a4:	2f b7       	in	r18, 0x3f	; 63
                cli();
   177a6:	f8 94       	cli
		*reg &= ~bit;
   177a8:	8c 91       	ld	r24, X
   177aa:	93 2f       	mov	r25, r19
   177ac:	90 95       	com	r25
   177ae:	89 23       	and	r24, r25
   177b0:	8c 93       	st	X, r24
		*out &= ~bit;
   177b2:	88 81       	ld	r24, Y
   177b4:	89 23       	and	r24, r25
   177b6:	0b c0       	rjmp	.+22     	; 0x177ce <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
   177b8:	62 30       	cpi	r22, 0x02	; 2
   177ba:	61 f4       	brne	.+24     	; 0x177d4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
   177bc:	2f b7       	in	r18, 0x3f	; 63
                cli();
   177be:	f8 94       	cli
		*reg &= ~bit;
   177c0:	8c 91       	ld	r24, X
   177c2:	93 2f       	mov	r25, r19
   177c4:	90 95       	com	r25
   177c6:	89 23       	and	r24, r25
   177c8:	8c 93       	st	X, r24
		*out |= bit;
   177ca:	88 81       	ld	r24, Y
   177cc:	83 2b       	or	r24, r19
   177ce:	88 83       	st	Y, r24
		SREG = oldSREG;
   177d0:	2f bf       	out	0x3f, r18	; 63
   177d2:	06 c0       	rjmp	.+12     	; 0x177e0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
   177d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
   177d6:	f8 94       	cli
		*reg |= bit;
   177d8:	8c 91       	ld	r24, X
   177da:	83 2b       	or	r24, r19
   177dc:	8c 93       	st	X, r24
		SREG = oldSREG;
   177de:	9f bf       	out	0x3f, r25	; 63
	}
}
   177e0:	df 91       	pop	r29
   177e2:	cf 91       	pop	r28
   177e4:	08 95       	ret

000177e6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   177e6:	89 30       	cpi	r24, 0x09	; 9
   177e8:	09 f4       	brne	.+2      	; 0x177ec <turnOffPWM+0x6>
   177ea:	49 c0       	rjmp	.+146    	; 0x1787e <turnOffPWM+0x98>
   177ec:	8a 30       	cpi	r24, 0x0A	; 10
   177ee:	a0 f4       	brcc	.+40     	; 0x17818 <turnOffPWM+0x32>
   177f0:	84 30       	cpi	r24, 0x04	; 4
   177f2:	51 f1       	breq	.+84     	; 0x17848 <turnOffPWM+0x62>
   177f4:	85 30       	cpi	r24, 0x05	; 5
   177f6:	40 f4       	brcc	.+16     	; 0x17808 <turnOffPWM+0x22>
   177f8:	82 30       	cpi	r24, 0x02	; 2
   177fa:	79 f1       	breq	.+94     	; 0x1785a <turnOffPWM+0x74>
   177fc:	83 30       	cpi	r24, 0x03	; 3
   177fe:	00 f5       	brcc	.+64     	; 0x17840 <turnOffPWM+0x5a>
   17800:	81 30       	cpi	r24, 0x01	; 1
   17802:	09 f0       	breq	.+2      	; 0x17806 <turnOffPWM+0x20>
   17804:	63 c0       	rjmp	.+198    	; 0x178cc <turnOffPWM+0xe6>
   17806:	26 c0       	rjmp	.+76     	; 0x17854 <turnOffPWM+0x6e>
   17808:	87 30       	cpi	r24, 0x07	; 7
   1780a:	79 f1       	breq	.+94     	; 0x1786a <turnOffPWM+0x84>
   1780c:	88 30       	cpi	r24, 0x08	; 8
   1780e:	98 f5       	brcc	.+102    	; 0x17876 <turnOffPWM+0x90>
   17810:	86 30       	cpi	r24, 0x06	; 6
   17812:	09 f0       	breq	.+2      	; 0x17816 <turnOffPWM+0x30>
   17814:	5b c0       	rjmp	.+182    	; 0x178cc <turnOffPWM+0xe6>
   17816:	25 c0       	rjmp	.+74     	; 0x17862 <turnOffPWM+0x7c>
   17818:	8d 30       	cpi	r24, 0x0D	; 13
   1781a:	09 f4       	brne	.+2      	; 0x1781e <turnOffPWM+0x38>
   1781c:	42 c0       	rjmp	.+132    	; 0x178a2 <turnOffPWM+0xbc>
   1781e:	8e 30       	cpi	r24, 0x0E	; 14
   17820:	28 f4       	brcc	.+10     	; 0x1782c <turnOffPWM+0x46>
   17822:	8b 30       	cpi	r24, 0x0B	; 11
   17824:	b1 f1       	breq	.+108    	; 0x17892 <turnOffPWM+0xac>
   17826:	8c 30       	cpi	r24, 0x0C	; 12
   17828:	c0 f5       	brcc	.+112    	; 0x1789a <turnOffPWM+0xb4>
   1782a:	2d c0       	rjmp	.+90     	; 0x17886 <turnOffPWM+0xa0>
   1782c:	80 31       	cpi	r24, 0x10	; 16
   1782e:	09 f4       	brne	.+2      	; 0x17832 <turnOffPWM+0x4c>
   17830:	42 c0       	rjmp	.+132    	; 0x178b6 <turnOffPWM+0xd0>
   17832:	81 31       	cpi	r24, 0x11	; 17
   17834:	09 f4       	brne	.+2      	; 0x17838 <turnOffPWM+0x52>
   17836:	45 c0       	rjmp	.+138    	; 0x178c2 <turnOffPWM+0xdc>
   17838:	8f 30       	cpi	r24, 0x0F	; 15
   1783a:	09 f0       	breq	.+2      	; 0x1783e <turnOffPWM+0x58>
   1783c:	47 c0       	rjmp	.+142    	; 0x178cc <turnOffPWM+0xe6>
   1783e:	37 c0       	rjmp	.+110    	; 0x178ae <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
   17840:	80 91 80 00 	lds	r24, 0x0080
   17844:	8f 77       	andi	r24, 0x7F	; 127
   17846:	03 c0       	rjmp	.+6      	; 0x1784e <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
   17848:	80 91 80 00 	lds	r24, 0x0080
   1784c:	8f 7d       	andi	r24, 0xDF	; 223
   1784e:	80 93 80 00 	sts	0x0080, r24
   17852:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
   17854:	84 b5       	in	r24, 0x24	; 36
   17856:	8f 77       	andi	r24, 0x7F	; 127
   17858:	02 c0       	rjmp	.+4      	; 0x1785e <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
   1785a:	84 b5       	in	r24, 0x24	; 36
   1785c:	8f 7d       	andi	r24, 0xDF	; 223
   1785e:	84 bd       	out	0x24, r24	; 36
   17860:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
   17862:	80 91 b0 00 	lds	r24, 0x00B0
   17866:	8f 77       	andi	r24, 0x7F	; 127
   17868:	03 c0       	rjmp	.+6      	; 0x17870 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
   1786a:	80 91 b0 00 	lds	r24, 0x00B0
   1786e:	8f 7d       	andi	r24, 0xDF	; 223
   17870:	80 93 b0 00 	sts	0x00B0, r24
   17874:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
   17876:	80 91 90 00 	lds	r24, 0x0090
   1787a:	8f 77       	andi	r24, 0x7F	; 127
   1787c:	07 c0       	rjmp	.+14     	; 0x1788c <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
   1787e:	80 91 90 00 	lds	r24, 0x0090
   17882:	8f 7d       	andi	r24, 0xDF	; 223
   17884:	03 c0       	rjmp	.+6      	; 0x1788c <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
   17886:	80 91 90 00 	lds	r24, 0x0090
   1788a:	87 7f       	andi	r24, 0xF7	; 247
   1788c:	80 93 90 00 	sts	0x0090, r24
   17890:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
   17892:	80 91 a0 00 	lds	r24, 0x00A0
   17896:	8f 77       	andi	r24, 0x7F	; 127
   17898:	07 c0       	rjmp	.+14     	; 0x178a8 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
   1789a:	80 91 a0 00 	lds	r24, 0x00A0
   1789e:	8f 7d       	andi	r24, 0xDF	; 223
   178a0:	03 c0       	rjmp	.+6      	; 0x178a8 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
   178a2:	80 91 a0 00 	lds	r24, 0x00A0
   178a6:	87 7f       	andi	r24, 0xF7	; 247
   178a8:	80 93 a0 00 	sts	0x00A0, r24
   178ac:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
   178ae:	80 91 20 01 	lds	r24, 0x0120
   178b2:	8f 77       	andi	r24, 0x7F	; 127
   178b4:	03 c0       	rjmp	.+6      	; 0x178bc <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
   178b6:	80 91 20 01 	lds	r24, 0x0120
   178ba:	8f 7d       	andi	r24, 0xDF	; 223
   178bc:	80 93 20 01 	sts	0x0120, r24
   178c0:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
   178c2:	80 91 20 01 	lds	r24, 0x0120
   178c6:	87 7f       	andi	r24, 0xF7	; 247
   178c8:	80 93 20 01 	sts	0x0120, r24
   178cc:	08 95       	ret

000178ce <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   178ce:	ff 92       	push	r15
   178d0:	0f 93       	push	r16
   178d2:	1f 93       	push	r17
   178d4:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
   178d6:	48 2f       	mov	r20, r24
   178d8:	50 e0       	ldi	r21, 0x00	; 0
   178da:	ca 01       	movw	r24, r20
   178dc:	82 59       	subi	r24, 0x92	; 146
   178de:	98 4e       	sbci	r25, 0xE8	; 232
   178e0:	fc 01       	movw	r30, r24
   178e2:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
   178e4:	ca 01       	movw	r24, r20
   178e6:	88 5d       	subi	r24, 0xD8	; 216
   178e8:	98 4e       	sbci	r25, 0xE8	; 232
   178ea:	fc 01       	movw	r30, r24
   178ec:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
   178ee:	4e 51       	subi	r20, 0x1E	; 30
   178f0:	59 4e       	sbci	r21, 0xE9	; 233
   178f2:	fa 01       	movw	r30, r20
   178f4:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
   178f6:	00 23       	and	r16, r16
   178f8:	c1 f0       	breq	.+48     	; 0x1792a <digitalWrite+0x5c>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   178fa:	22 23       	and	r18, r18
   178fc:	11 f0       	breq	.+4      	; 0x17902 <digitalWrite+0x34>
   178fe:	82 2f       	mov	r24, r18
   17900:	72 df       	rcall	.-284    	; 0x177e6 <turnOffPWM>

	out = portOutputRegister(port);
   17902:	e0 2f       	mov	r30, r16
   17904:	f0 e0       	ldi	r31, 0x00	; 0
   17906:	ee 0f       	add	r30, r30
   17908:	ff 1f       	adc	r31, r31
   1790a:	e2 55       	subi	r30, 0x52	; 82
   1790c:	f9 4e       	sbci	r31, 0xE9	; 233
   1790e:	a5 91       	lpm	r26, Z+
   17910:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   17912:	9f b7       	in	r25, 0x3f	; 63
	cli();
   17914:	f8 94       	cli

	if (val == LOW) {
   17916:	ff 20       	and	r15, r15
   17918:	21 f4       	brne	.+8      	; 0x17922 <digitalWrite+0x54>
		*out &= ~bit;
   1791a:	8c 91       	ld	r24, X
   1791c:	10 95       	com	r17
   1791e:	81 23       	and	r24, r17
   17920:	02 c0       	rjmp	.+4      	; 0x17926 <digitalWrite+0x58>
	} else {
		*out |= bit;
   17922:	8c 91       	ld	r24, X
   17924:	81 2b       	or	r24, r17
   17926:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
   17928:	9f bf       	out	0x3f, r25	; 63
}
   1792a:	1f 91       	pop	r17
   1792c:	0f 91       	pop	r16
   1792e:	ff 90       	pop	r15
   17930:	08 95       	ret

00017932 <main>:
#include <Arduino.h>

int main(void)
   17932:	cf 93       	push	r28
   17934:	df 93       	push	r29
{
	init();
   17936:	d8 dd       	rcall	.-1104   	; 0x174e8 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   17938:	0e 94 82 23 	call	0x4704	; 0x4704 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   1793c:	c0 e0       	ldi	r28, 0x00	; 0
   1793e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
   17940:	0e 94 d6 41 	call	0x83ac	; 0x83ac <loop>
		if (serialEventRun) serialEventRun();
   17944:	20 97       	sbiw	r28, 0x00	; 0
   17946:	e1 f3       	breq	.-8      	; 0x17940 <main+0xe>
   17948:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   1794c:	f9 cf       	rjmp	.-14     	; 0x17940 <main+0xe>

0001794e <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   1794e:	08 95       	ret

00017950 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   17950:	cf 92       	push	r12
   17952:	df 92       	push	r13
   17954:	ef 92       	push	r14
   17956:	ff 92       	push	r15
   17958:	0f 93       	push	r16
   1795a:	1f 93       	push	r17
   1795c:	cf 93       	push	r28
   1795e:	df 93       	push	r29
   17960:	7c 01       	movw	r14, r24
   17962:	6b 01       	movw	r12, r22
   17964:	8a 01       	movw	r16, r20
   17966:	c0 e0       	ldi	r28, 0x00	; 0
   17968:	d0 e0       	ldi	r29, 0x00	; 0
   1796a:	0f c0       	rjmp	.+30     	; 0x1798a <_ZN5Print5writeEPKhj+0x3a>
   1796c:	d6 01       	movw	r26, r12
   1796e:	6d 91       	ld	r22, X+
   17970:	6d 01       	movw	r12, r26
   17972:	d7 01       	movw	r26, r14
   17974:	ed 91       	ld	r30, X+
   17976:	fc 91       	ld	r31, X
   17978:	01 90       	ld	r0, Z+
   1797a:	f0 81       	ld	r31, Z
   1797c:	e0 2d       	mov	r30, r0
   1797e:	c7 01       	movw	r24, r14
   17980:	19 95       	eicall
   17982:	c8 0f       	add	r28, r24
   17984:	d9 1f       	adc	r29, r25
   17986:	01 50       	subi	r16, 0x01	; 1
   17988:	10 40       	sbci	r17, 0x00	; 0
   1798a:	01 15       	cp	r16, r1
   1798c:	11 05       	cpc	r17, r1
   1798e:	71 f7       	brne	.-36     	; 0x1796c <_ZN5Print5writeEPKhj+0x1c>
   17990:	ce 01       	movw	r24, r28
   17992:	df 91       	pop	r29
   17994:	cf 91       	pop	r28
   17996:	1f 91       	pop	r17
   17998:	0f 91       	pop	r16
   1799a:	ff 90       	pop	r15
   1799c:	ef 90       	pop	r14
   1799e:	df 90       	pop	r13
   179a0:	cf 90       	pop	r12
   179a2:	08 95       	ret

000179a4 <_ZN5Print5printEc>:
   179a4:	dc 01       	movw	r26, r24
   179a6:	ed 91       	ld	r30, X+
   179a8:	fc 91       	ld	r31, X
   179aa:	01 90       	ld	r0, Z+
   179ac:	f0 81       	ld	r31, Z
   179ae:	e0 2d       	mov	r30, r0
   179b0:	19 95       	eicall
   179b2:	08 95       	ret

000179b4 <_ZN5Print5writeEPKc>:
   179b4:	cf 93       	push	r28
   179b6:	df 93       	push	r29
   179b8:	ec 01       	movw	r28, r24
   179ba:	61 15       	cp	r22, r1
   179bc:	71 05       	cpc	r23, r1
   179be:	19 f4       	brne	.+6      	; 0x179c6 <_ZN5Print5writeEPKc+0x12>
   179c0:	20 e0       	ldi	r18, 0x00	; 0
   179c2:	30 e0       	ldi	r19, 0x00	; 0
   179c4:	0f c0       	rjmp	.+30     	; 0x179e4 <_ZN5Print5writeEPKc+0x30>
   179c6:	db 01       	movw	r26, r22
   179c8:	0d 90       	ld	r0, X+
   179ca:	00 20       	and	r0, r0
   179cc:	e9 f7       	brne	.-6      	; 0x179c8 <_ZN5Print5writeEPKc+0x14>
   179ce:	11 97       	sbiw	r26, 0x01	; 1
   179d0:	a6 1b       	sub	r26, r22
   179d2:	b7 0b       	sbc	r27, r23
   179d4:	e8 81       	ld	r30, Y
   179d6:	f9 81       	ldd	r31, Y+1	; 0x01
   179d8:	02 80       	ldd	r0, Z+2	; 0x02
   179da:	f3 81       	ldd	r31, Z+3	; 0x03
   179dc:	e0 2d       	mov	r30, r0
   179de:	ad 01       	movw	r20, r26
   179e0:	19 95       	eicall
   179e2:	9c 01       	movw	r18, r24
   179e4:	c9 01       	movw	r24, r18
   179e6:	df 91       	pop	r29
   179e8:	cf 91       	pop	r28
   179ea:	08 95       	ret

000179ec <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   179ec:	e3 cf       	rjmp	.-58     	; 0x179b4 <_ZN5Print5writeEPKc>
}
   179ee:	08 95       	ret

000179f0 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
   179f0:	82 30       	cpi	r24, 0x02	; 2
   179f2:	b9 f0       	breq	.+46     	; 0x17a22 <_Z12disableTimerh+0x32>
   179f4:	83 30       	cpi	r24, 0x03	; 3
   179f6:	28 f4       	brcc	.+10     	; 0x17a02 <_Z12disableTimerh+0x12>
   179f8:	88 23       	and	r24, r24
   179fa:	51 f0       	breq	.+20     	; 0x17a10 <_Z12disableTimerh+0x20>
   179fc:	81 30       	cpi	r24, 0x01	; 1
   179fe:	51 f5       	brne	.+84     	; 0x17a54 <_Z12disableTimerh+0x64>
   17a00:	0a c0       	rjmp	.+20     	; 0x17a16 <_Z12disableTimerh+0x26>
   17a02:	84 30       	cpi	r24, 0x04	; 4
   17a04:	11 f1       	breq	.+68     	; 0x17a4a <_Z12disableTimerh+0x5a>
   17a06:	84 30       	cpi	r24, 0x04	; 4
   17a08:	e8 f0       	brcs	.+58     	; 0x17a44 <_Z12disableTimerh+0x54>
   17a0a:	85 30       	cpi	r24, 0x05	; 5
   17a0c:	19 f5       	brne	.+70     	; 0x17a54 <_Z12disableTimerh+0x64>
   17a0e:	20 c0       	rjmp	.+64     	; 0x17a50 <_Z12disableTimerh+0x60>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
   17a10:	10 92 6e 00 	sts	0x006E, r1
   17a14:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
   17a16:	80 91 6f 00 	lds	r24, 0x006F
   17a1a:	8d 7f       	andi	r24, 0xFD	; 253
   17a1c:	80 93 6f 00 	sts	0x006F, r24
   17a20:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
   17a22:	80 91 70 00 	lds	r24, 0x0070
   17a26:	8d 7f       	andi	r24, 0xFD	; 253
   17a28:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
   17a2c:	81 e0       	ldi	r24, 0x01	; 1
   17a2e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
   17a32:	80 91 b1 00 	lds	r24, 0x00B1
   17a36:	88 7f       	andi	r24, 0xF8	; 248
   17a38:	84 60       	ori	r24, 0x04	; 4
   17a3a:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
   17a3e:	10 92 b3 00 	sts	0x00B3, r1
   17a42:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
   17a44:	10 92 71 00 	sts	0x0071, r1
   17a48:	08 95       	ret
      break;
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
   17a4a:	10 92 72 00 	sts	0x0072, r1
   17a4e:	08 95       	ret
      break;
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
   17a50:	10 92 73 00 	sts	0x0073, r1
   17a54:	08 95       	ret

00017a56 <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
   17a56:	1f 93       	push	r17
   17a58:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
   17a5a:	80 91 7c 02 	lds	r24, 0x027C
   17a5e:	81 17       	cp	r24, r17
   17a60:	11 f0       	breq	.+4      	; 0x17a66 <_Z6noToneh+0x10>
   17a62:	9f ef       	ldi	r25, 0xFF	; 255
   17a64:	06 c0       	rjmp	.+12     	; 0x17a72 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
   17a66:	e4 eb       	ldi	r30, 0xB4	; 180
   17a68:	f7 e1       	ldi	r31, 0x17	; 23
   17a6a:	94 91       	lpm	r25, Z
      tone_pins[i] = 255;
   17a6c:	8f ef       	ldi	r24, 0xFF	; 255
   17a6e:	80 93 7c 02 	sts	0x027C, r24
    }
  }
  
  disableTimer(_timer);
   17a72:	89 2f       	mov	r24, r25
   17a74:	bd df       	rcall	.-134    	; 0x179f0 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
   17a76:	81 2f       	mov	r24, r17
   17a78:	60 e0       	ldi	r22, 0x00	; 0
   17a7a:	29 df       	rcall	.-430    	; 0x178ce <digitalWrite>
}
   17a7c:	1f 91       	pop	r17
   17a7e:	08 95       	ret

00017a80 <__vector_13>:
}
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
   17a80:	1f 92       	push	r1
   17a82:	0f 92       	push	r0
   17a84:	0f b6       	in	r0, 0x3f	; 63
   17a86:	0f 92       	push	r0
   17a88:	0b b6       	in	r0, 0x3b	; 59
   17a8a:	0f 92       	push	r0
   17a8c:	11 24       	eor	r1, r1
   17a8e:	2f 93       	push	r18
   17a90:	3f 93       	push	r19
   17a92:	4f 93       	push	r20
   17a94:	5f 93       	push	r21
   17a96:	6f 93       	push	r22
   17a98:	7f 93       	push	r23
   17a9a:	8f 93       	push	r24
   17a9c:	9f 93       	push	r25
   17a9e:	af 93       	push	r26
   17aa0:	bf 93       	push	r27
   17aa2:	ef 93       	push	r30
   17aa4:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
   17aa6:	80 91 40 12 	lds	r24, 0x1240
   17aaa:	90 91 41 12 	lds	r25, 0x1241
   17aae:	a0 91 42 12 	lds	r26, 0x1242
   17ab2:	b0 91 43 12 	lds	r27, 0x1243
   17ab6:	00 97       	sbiw	r24, 0x00	; 0
   17ab8:	a1 05       	cpc	r26, r1
   17aba:	b1 05       	cpc	r27, r1
   17abc:	51 f1       	breq	.+84     	; 0x17b12 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
   17abe:	e0 91 44 12 	lds	r30, 0x1244
   17ac2:	f0 91 45 12 	lds	r31, 0x1245
   17ac6:	80 81       	ld	r24, Z
   17ac8:	90 91 46 12 	lds	r25, 0x1246
   17acc:	89 27       	eor	r24, r25
   17ace:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
   17ad0:	80 91 40 12 	lds	r24, 0x1240
   17ad4:	90 91 41 12 	lds	r25, 0x1241
   17ad8:	a0 91 42 12 	lds	r26, 0x1242
   17adc:	b0 91 43 12 	lds	r27, 0x1243
   17ae0:	18 16       	cp	r1, r24
   17ae2:	19 06       	cpc	r1, r25
   17ae4:	1a 06       	cpc	r1, r26
   17ae6:	1b 06       	cpc	r1, r27
   17ae8:	bc f4       	brge	.+46     	; 0x17b18 <__vector_13+0x98>
      timer2_toggle_count--;
   17aea:	80 91 40 12 	lds	r24, 0x1240
   17aee:	90 91 41 12 	lds	r25, 0x1241
   17af2:	a0 91 42 12 	lds	r26, 0x1242
   17af6:	b0 91 43 12 	lds	r27, 0x1243
   17afa:	01 97       	sbiw	r24, 0x01	; 1
   17afc:	a1 09       	sbc	r26, r1
   17afe:	b1 09       	sbc	r27, r1
   17b00:	80 93 40 12 	sts	0x1240, r24
   17b04:	90 93 41 12 	sts	0x1241, r25
   17b08:	a0 93 42 12 	sts	0x1242, r26
   17b0c:	b0 93 43 12 	sts	0x1243, r27
   17b10:	03 c0       	rjmp	.+6      	; 0x17b18 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
   17b12:	80 91 7c 02 	lds	r24, 0x027C
   17b16:	9f df       	rcall	.-194    	; 0x17a56 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
   17b18:	ff 91       	pop	r31
   17b1a:	ef 91       	pop	r30
   17b1c:	bf 91       	pop	r27
   17b1e:	af 91       	pop	r26
   17b20:	9f 91       	pop	r25
   17b22:	8f 91       	pop	r24
   17b24:	7f 91       	pop	r23
   17b26:	6f 91       	pop	r22
   17b28:	5f 91       	pop	r21
   17b2a:	4f 91       	pop	r20
   17b2c:	3f 91       	pop	r19
   17b2e:	2f 91       	pop	r18
   17b30:	0f 90       	pop	r0
   17b32:	0b be       	out	0x3b, r0	; 59
   17b34:	0f 90       	pop	r0
   17b36:	0f be       	out	0x3f, r0	; 63
   17b38:	0f 90       	pop	r0
   17b3a:	1f 90       	pop	r1
   17b3c:	18 95       	reti

00017b3e <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   17b3e:	2f 92       	push	r2
   17b40:	3f 92       	push	r3
   17b42:	5f 92       	push	r5
   17b44:	6f 92       	push	r6
   17b46:	7f 92       	push	r7
   17b48:	8f 92       	push	r8
   17b4a:	9f 92       	push	r9
   17b4c:	af 92       	push	r10
   17b4e:	bf 92       	push	r11
   17b50:	cf 92       	push	r12
   17b52:	df 92       	push	r13
   17b54:	ef 92       	push	r14
   17b56:	ff 92       	push	r15
   17b58:	0f 93       	push	r16
   17b5a:	1f 93       	push	r17
   17b5c:	df 93       	push	r29
   17b5e:	cf 93       	push	r28
   17b60:	00 d0       	rcall	.+0      	; 0x17b62 <_Z4tonehjm+0x24>
   17b62:	0f 92       	push	r0
   17b64:	cd b7       	in	r28, 0x3d	; 61
   17b66:	de b7       	in	r29, 0x3e	; 62
   17b68:	a8 2f       	mov	r26, r24
   17b6a:	1b 01       	movw	r2, r22
   17b6c:	29 83       	std	Y+1, r18	; 0x01
   17b6e:	3a 83       	std	Y+2, r19	; 0x02
   17b70:	4b 83       	std	Y+3, r20	; 0x03
   17b72:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
   17b74:	80 91 7c 02 	lds	r24, 0x027C
   17b78:	8a 17       	cp	r24, r26
   17b7a:	21 f4       	brne	.+8      	; 0x17b84 <_Z4tonehjm+0x46>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
   17b7c:	e4 eb       	ldi	r30, 0xB4	; 180
   17b7e:	f7 e1       	ldi	r31, 0x17	; 23
   17b80:	54 90       	lpm	r5, Z
   17b82:	03 c1       	rjmp	.+518    	; 0x17d8a <_Z4tonehjm+0x24c>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
   17b84:	8f 3f       	cpi	r24, 0xFF	; 255
   17b86:	09 f0       	breq	.+2      	; 0x17b8a <_Z4tonehjm+0x4c>
   17b88:	b2 c2       	rjmp	.+1380   	; 0x180ee <_Z4tonehjm+0x5b0>
      tone_pins[i] = _pin;
   17b8a:	a0 93 7c 02 	sts	0x027C, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
   17b8e:	e4 eb       	ldi	r30, 0xB4	; 180
   17b90:	f7 e1       	ldi	r31, 0x17	; 23
   17b92:	54 90       	lpm	r5, Z
      break;
    }
  }
  
  if (_timer != -1)
   17b94:	2f ef       	ldi	r18, 0xFF	; 255
   17b96:	52 16       	cp	r5, r18
   17b98:	09 f4       	brne	.+2      	; 0x17b9c <_Z4tonehjm+0x5e>
   17b9a:	a9 c2       	rjmp	.+1362   	; 0x180ee <_Z4tonehjm+0x5b0>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
   17b9c:	82 e0       	ldi	r24, 0x02	; 2
   17b9e:	58 16       	cp	r5, r24
   17ba0:	09 f4       	brne	.+2      	; 0x17ba4 <_Z4tonehjm+0x66>
   17ba2:	5b c0       	rjmp	.+182    	; 0x17c5a <_Z4tonehjm+0x11c>
   17ba4:	85 15       	cp	r24, r5
   17ba6:	3c f0       	brlt	.+14     	; 0x17bb6 <_Z4tonehjm+0x78>
   17ba8:	55 20       	and	r5, r5
   17baa:	89 f0       	breq	.+34     	; 0x17bce <_Z4tonehjm+0x90>
   17bac:	91 e0       	ldi	r25, 0x01	; 1
   17bae:	59 16       	cp	r5, r25
   17bb0:	09 f0       	breq	.+2      	; 0x17bb4 <_Z4tonehjm+0x76>
   17bb2:	eb c0       	rjmp	.+470    	; 0x17d8a <_Z4tonehjm+0x24c>
   17bb4:	2c c0       	rjmp	.+88     	; 0x17c0e <_Z4tonehjm+0xd0>
   17bb6:	b4 e0       	ldi	r27, 0x04	; 4
   17bb8:	5b 16       	cp	r5, r27
   17bba:	09 f4       	brne	.+2      	; 0x17bbe <_Z4tonehjm+0x80>
   17bbc:	9a c0       	rjmp	.+308    	; 0x17cf2 <_Z4tonehjm+0x1b4>
   17bbe:	5b 16       	cp	r5, r27
   17bc0:	0c f4       	brge	.+2      	; 0x17bc4 <_Z4tonehjm+0x86>
   17bc2:	71 c0       	rjmp	.+226    	; 0x17ca6 <_Z4tonehjm+0x168>
   17bc4:	e5 e0       	ldi	r30, 0x05	; 5
   17bc6:	5e 16       	cp	r5, r30
   17bc8:	09 f0       	breq	.+2      	; 0x17bcc <_Z4tonehjm+0x8e>
   17bca:	df c0       	rjmp	.+446    	; 0x17d8a <_Z4tonehjm+0x24c>
   17bcc:	b8 c0       	rjmp	.+368    	; 0x17d3e <_Z4tonehjm+0x200>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
   17bce:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
   17bd0:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
   17bd2:	84 b5       	in	r24, 0x24	; 36
   17bd4:	82 60       	ori	r24, 0x02	; 2
   17bd6:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
   17bd8:	85 b5       	in	r24, 0x25	; 37
   17bda:	81 60       	ori	r24, 0x01	; 1
   17bdc:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17bde:	2a 2f       	mov	r18, r26
   17be0:	30 e0       	ldi	r19, 0x00	; 0
   17be2:	f9 01       	movw	r30, r18
   17be4:	ee 51       	subi	r30, 0x1E	; 30
   17be6:	f9 4e       	sbci	r31, 0xE9	; 233
   17be8:	e4 91       	lpm	r30, Z
   17bea:	f0 e0       	ldi	r31, 0x00	; 0
   17bec:	ee 0f       	add	r30, r30
   17bee:	ff 1f       	adc	r31, r31
   17bf0:	e2 55       	subi	r30, 0x52	; 82
   17bf2:	f9 4e       	sbci	r31, 0xE9	; 233
   17bf4:	85 91       	lpm	r24, Z+
   17bf6:	94 91       	lpm	r25, Z
   17bf8:	90 93 37 12 	sts	0x1237, r25
   17bfc:	80 93 36 12 	sts	0x1236, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
   17c00:	28 5d       	subi	r18, 0xD8	; 216
   17c02:	38 4e       	sbci	r19, 0xE8	; 232
   17c04:	f9 01       	movw	r30, r18
   17c06:	84 91       	lpm	r24, Z
   17c08:	80 93 38 12 	sts	0x1238, r24
   17c0c:	c0 c0       	rjmp	.+384    	; 0x17d8e <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
   17c0e:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
   17c12:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
   17c16:	80 91 81 00 	lds	r24, 0x0081
   17c1a:	88 60       	ori	r24, 0x08	; 8
   17c1c:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
   17c20:	80 91 81 00 	lds	r24, 0x0081
   17c24:	81 60       	ori	r24, 0x01	; 1
   17c26:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17c2a:	2a 2f       	mov	r18, r26
   17c2c:	30 e0       	ldi	r19, 0x00	; 0
   17c2e:	f9 01       	movw	r30, r18
   17c30:	ee 51       	subi	r30, 0x1E	; 30
   17c32:	f9 4e       	sbci	r31, 0xE9	; 233
   17c34:	e4 91       	lpm	r30, Z
   17c36:	f0 e0       	ldi	r31, 0x00	; 0
   17c38:	ee 0f       	add	r30, r30
   17c3a:	ff 1f       	adc	r31, r31
   17c3c:	e2 55       	subi	r30, 0x52	; 82
   17c3e:	f9 4e       	sbci	r31, 0xE9	; 233
   17c40:	85 91       	lpm	r24, Z+
   17c42:	94 91       	lpm	r25, Z
   17c44:	90 93 3e 12 	sts	0x123E, r25
   17c48:	80 93 3d 12 	sts	0x123D, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
   17c4c:	28 5d       	subi	r18, 0xD8	; 216
   17c4e:	38 4e       	sbci	r19, 0xE8	; 232
   17c50:	f9 01       	movw	r30, r18
   17c52:	84 91       	lpm	r24, Z
   17c54:	80 93 3f 12 	sts	0x123F, r24
   17c58:	9a c0       	rjmp	.+308    	; 0x17d8e <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
   17c5a:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
   17c5e:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
   17c62:	80 91 b0 00 	lds	r24, 0x00B0
   17c66:	82 60       	ori	r24, 0x02	; 2
   17c68:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
   17c6c:	80 91 b1 00 	lds	r24, 0x00B1
   17c70:	81 60       	ori	r24, 0x01	; 1
   17c72:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17c76:	2a 2f       	mov	r18, r26
   17c78:	30 e0       	ldi	r19, 0x00	; 0
   17c7a:	f9 01       	movw	r30, r18
   17c7c:	ee 51       	subi	r30, 0x1E	; 30
   17c7e:	f9 4e       	sbci	r31, 0xE9	; 233
   17c80:	e4 91       	lpm	r30, Z
   17c82:	f0 e0       	ldi	r31, 0x00	; 0
   17c84:	ee 0f       	add	r30, r30
   17c86:	ff 1f       	adc	r31, r31
   17c88:	e2 55       	subi	r30, 0x52	; 82
   17c8a:	f9 4e       	sbci	r31, 0xE9	; 233
   17c8c:	85 91       	lpm	r24, Z+
   17c8e:	94 91       	lpm	r25, Z
   17c90:	90 93 45 12 	sts	0x1245, r25
   17c94:	80 93 44 12 	sts	0x1244, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
   17c98:	28 5d       	subi	r18, 0xD8	; 216
   17c9a:	38 4e       	sbci	r19, 0xE8	; 232
   17c9c:	f9 01       	movw	r30, r18
   17c9e:	84 91       	lpm	r24, Z
   17ca0:	80 93 46 12 	sts	0x1246, r24
   17ca4:	74 c0       	rjmp	.+232    	; 0x17d8e <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
   17ca6:	10 92 90 00 	sts	0x0090, r1
        TCCR3B = 0;
   17caa:	10 92 91 00 	sts	0x0091, r1
        bitWrite(TCCR3B, WGM32, 1);
   17cae:	80 91 91 00 	lds	r24, 0x0091
   17cb2:	88 60       	ori	r24, 0x08	; 8
   17cb4:	80 93 91 00 	sts	0x0091, r24
        bitWrite(TCCR3B, CS30, 1);
   17cb8:	80 91 91 00 	lds	r24, 0x0091
   17cbc:	81 60       	ori	r24, 0x01	; 1
   17cbe:	80 93 91 00 	sts	0x0091, r24
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17cc2:	2a 2f       	mov	r18, r26
   17cc4:	30 e0       	ldi	r19, 0x00	; 0
   17cc6:	f9 01       	movw	r30, r18
   17cc8:	ee 51       	subi	r30, 0x1E	; 30
   17cca:	f9 4e       	sbci	r31, 0xE9	; 233
   17ccc:	e4 91       	lpm	r30, Z
   17cce:	f0 e0       	ldi	r31, 0x00	; 0
   17cd0:	ee 0f       	add	r30, r30
   17cd2:	ff 1f       	adc	r31, r31
   17cd4:	e2 55       	subi	r30, 0x52	; 82
   17cd6:	f9 4e       	sbci	r31, 0xE9	; 233
   17cd8:	85 91       	lpm	r24, Z+
   17cda:	94 91       	lpm	r25, Z
   17cdc:	90 93 4c 12 	sts	0x124C, r25
   17ce0:	80 93 4b 12 	sts	0x124B, r24
        timer3_pin_mask = digitalPinToBitMask(_pin);
   17ce4:	28 5d       	subi	r18, 0xD8	; 216
   17ce6:	38 4e       	sbci	r19, 0xE8	; 232
   17ce8:	f9 01       	movw	r30, r18
   17cea:	84 91       	lpm	r24, Z
   17cec:	80 93 4d 12 	sts	0x124D, r24
   17cf0:	4e c0       	rjmp	.+156    	; 0x17d8e <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
   17cf2:	10 92 a0 00 	sts	0x00A0, r1
        TCCR4B = 0;
   17cf6:	10 92 a1 00 	sts	0x00A1, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
   17cfa:	80 91 a1 00 	lds	r24, 0x00A1
   17cfe:	88 60       	ori	r24, 0x08	; 8
   17d00:	80 93 a1 00 	sts	0x00A1, r24
        #elif defined(CS43)
          #warning this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
   17d04:	80 91 a1 00 	lds	r24, 0x00A1
   17d08:	81 60       	ori	r24, 0x01	; 1
   17d0a:	80 93 a1 00 	sts	0x00A1, r24
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17d0e:	2a 2f       	mov	r18, r26
   17d10:	30 e0       	ldi	r19, 0x00	; 0
   17d12:	f9 01       	movw	r30, r18
   17d14:	ee 51       	subi	r30, 0x1E	; 30
   17d16:	f9 4e       	sbci	r31, 0xE9	; 233
   17d18:	e4 91       	lpm	r30, Z
   17d1a:	f0 e0       	ldi	r31, 0x00	; 0
   17d1c:	ee 0f       	add	r30, r30
   17d1e:	ff 1f       	adc	r31, r31
   17d20:	e2 55       	subi	r30, 0x52	; 82
   17d22:	f9 4e       	sbci	r31, 0xE9	; 233
   17d24:	85 91       	lpm	r24, Z+
   17d26:	94 91       	lpm	r25, Z
   17d28:	90 93 53 12 	sts	0x1253, r25
   17d2c:	80 93 52 12 	sts	0x1252, r24
        timer4_pin_mask = digitalPinToBitMask(_pin);
   17d30:	28 5d       	subi	r18, 0xD8	; 216
   17d32:	38 4e       	sbci	r19, 0xE8	; 232
   17d34:	f9 01       	movw	r30, r18
   17d36:	84 91       	lpm	r24, Z
   17d38:	80 93 54 12 	sts	0x1254, r24
   17d3c:	28 c0       	rjmp	.+80     	; 0x17d8e <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
   17d3e:	10 92 20 01 	sts	0x0120, r1
        TCCR5B = 0;
   17d42:	10 92 21 01 	sts	0x0121, r1
        bitWrite(TCCR5B, WGM52, 1);
   17d46:	80 91 21 01 	lds	r24, 0x0121
   17d4a:	88 60       	ori	r24, 0x08	; 8
   17d4c:	80 93 21 01 	sts	0x0121, r24
        bitWrite(TCCR5B, CS50, 1);
   17d50:	80 91 21 01 	lds	r24, 0x0121
   17d54:	81 60       	ori	r24, 0x01	; 1
   17d56:	80 93 21 01 	sts	0x0121, r24
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
   17d5a:	2a 2f       	mov	r18, r26
   17d5c:	30 e0       	ldi	r19, 0x00	; 0
   17d5e:	f9 01       	movw	r30, r18
   17d60:	ee 51       	subi	r30, 0x1E	; 30
   17d62:	f9 4e       	sbci	r31, 0xE9	; 233
   17d64:	e4 91       	lpm	r30, Z
   17d66:	f0 e0       	ldi	r31, 0x00	; 0
   17d68:	ee 0f       	add	r30, r30
   17d6a:	ff 1f       	adc	r31, r31
   17d6c:	e2 55       	subi	r30, 0x52	; 82
   17d6e:	f9 4e       	sbci	r31, 0xE9	; 233
   17d70:	85 91       	lpm	r24, Z+
   17d72:	94 91       	lpm	r25, Z
   17d74:	90 93 5a 12 	sts	0x125A, r25
   17d78:	80 93 59 12 	sts	0x1259, r24
        timer5_pin_mask = digitalPinToBitMask(_pin);
   17d7c:	28 5d       	subi	r18, 0xD8	; 216
   17d7e:	38 4e       	sbci	r19, 0xE8	; 232
   17d80:	f9 01       	movw	r30, r18
   17d82:	84 91       	lpm	r24, Z
   17d84:	80 93 5b 12 	sts	0x125B, r24
   17d88:	02 c0       	rjmp	.+4      	; 0x17d8e <_Z4tonehjm+0x250>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
   17d8a:	57 fc       	sbrc	r5, 7
   17d8c:	b0 c1       	rjmp	.+864    	; 0x180ee <_Z4tonehjm+0x5b0>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
   17d8e:	8a 2f       	mov	r24, r26
   17d90:	61 e0       	ldi	r22, 0x01	; 1
   17d92:	ea dc       	rcall	.-1580   	; 0x17768 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
   17d94:	55 20       	and	r5, r5
   17d96:	21 f0       	breq	.+8      	; 0x17da0 <_Z4tonehjm+0x262>
   17d98:	f2 e0       	ldi	r31, 0x02	; 2
   17d9a:	5f 16       	cp	r5, r31
   17d9c:	09 f0       	breq	.+2      	; 0x17da0 <_Z4tonehjm+0x262>
   17d9e:	b7 c0       	rjmp	.+366    	; 0x17f0e <_Z4tonehjm+0x3d0>
    {
      ocr = F_CPU / frequency / 2 - 1;
   17da0:	31 01       	movw	r6, r2
   17da2:	88 24       	eor	r8, r8
   17da4:	99 24       	eor	r9, r9
   17da6:	60 e0       	ldi	r22, 0x00	; 0
   17da8:	72 e1       	ldi	r23, 0x12	; 18
   17daa:	8a e7       	ldi	r24, 0x7A	; 122
   17dac:	90 e0       	ldi	r25, 0x00	; 0
   17dae:	a4 01       	movw	r20, r8
   17db0:	93 01       	movw	r18, r6
   17db2:	f7 d1       	rcall	.+1006   	; 0x181a2 <__divmodsi4>
   17db4:	59 01       	movw	r10, r18
   17db6:	6a 01       	movw	r12, r20
   17db8:	86 01       	movw	r16, r12
   17dba:	75 01       	movw	r14, r10
   17dbc:	08 94       	sec
   17dbe:	e1 08       	sbc	r14, r1
   17dc0:	f1 08       	sbc	r15, r1
   17dc2:	01 09       	sbc	r16, r1
   17dc4:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
   17dc6:	2f ef       	ldi	r18, 0xFF	; 255
   17dc8:	e2 16       	cp	r14, r18
   17dca:	f1 04       	cpc	r15, r1
   17dcc:	01 05       	cpc	r16, r1
   17dce:	11 05       	cpc	r17, r1
   17dd0:	09 f0       	breq	.+2      	; 0x17dd4 <_Z4tonehjm+0x296>
   17dd2:	08 f4       	brcc	.+2      	; 0x17dd6 <_Z4tonehjm+0x298>
   17dd4:	93 c0       	rjmp	.+294    	; 0x17efc <_Z4tonehjm+0x3be>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
   17dd6:	60 e4       	ldi	r22, 0x40	; 64
   17dd8:	72 e4       	ldi	r23, 0x42	; 66
   17dda:	8f e0       	ldi	r24, 0x0F	; 15
   17ddc:	90 e0       	ldi	r25, 0x00	; 0
   17dde:	a4 01       	movw	r20, r8
   17de0:	93 01       	movw	r18, r6
   17de2:	df d1       	rcall	.+958    	; 0x181a2 <__divmodsi4>
   17de4:	79 01       	movw	r14, r18
   17de6:	8a 01       	movw	r16, r20
   17de8:	08 94       	sec
   17dea:	e1 08       	sbc	r14, r1
   17dec:	f1 08       	sbc	r15, r1
   17dee:	01 09       	sbc	r16, r1
   17df0:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
   17df2:	82 e0       	ldi	r24, 0x02	; 2
   17df4:	58 16       	cp	r5, r24
   17df6:	b9 f4       	brne	.+46     	; 0x17e26 <_Z4tonehjm+0x2e8>
   17df8:	9f ef       	ldi	r25, 0xFF	; 255
   17dfa:	e9 16       	cp	r14, r25
   17dfc:	f1 04       	cpc	r15, r1
   17dfe:	01 05       	cpc	r16, r1
   17e00:	11 05       	cpc	r17, r1
   17e02:	09 f0       	breq	.+2      	; 0x17e06 <_Z4tonehjm+0x2c8>
   17e04:	08 f4       	brcc	.+2      	; 0x17e08 <_Z4tonehjm+0x2ca>
   17e06:	7f c0       	rjmp	.+254    	; 0x17f06 <_Z4tonehjm+0x3c8>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
   17e08:	60 e9       	ldi	r22, 0x90	; 144
   17e0a:	70 ed       	ldi	r23, 0xD0	; 208
   17e0c:	83 e0       	ldi	r24, 0x03	; 3
   17e0e:	90 e0       	ldi	r25, 0x00	; 0
   17e10:	a4 01       	movw	r20, r8
   17e12:	93 01       	movw	r18, r6
   17e14:	c6 d1       	rcall	.+908    	; 0x181a2 <__divmodsi4>
   17e16:	79 01       	movw	r14, r18
   17e18:	8a 01       	movw	r16, r20
   17e1a:	08 94       	sec
   17e1c:	e1 08       	sbc	r14, r1
   17e1e:	f1 08       	sbc	r15, r1
   17e20:	01 09       	sbc	r16, r1
   17e22:	11 09       	sbc	r17, r1
   17e24:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
   17e26:	af ef       	ldi	r26, 0xFF	; 255
   17e28:	ea 16       	cp	r14, r26
   17e2a:	f1 04       	cpc	r15, r1
   17e2c:	01 05       	cpc	r16, r1
   17e2e:	11 05       	cpc	r17, r1
   17e30:	09 f0       	breq	.+2      	; 0x17e34 <_Z4tonehjm+0x2f6>
   17e32:	08 f4       	brcc	.+2      	; 0x17e36 <_Z4tonehjm+0x2f8>
   17e34:	64 c0       	rjmp	.+200    	; 0x17efe <_Z4tonehjm+0x3c0>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
   17e36:	68 e4       	ldi	r22, 0x48	; 72
   17e38:	78 ee       	ldi	r23, 0xE8	; 232
   17e3a:	81 e0       	ldi	r24, 0x01	; 1
   17e3c:	90 e0       	ldi	r25, 0x00	; 0
   17e3e:	a4 01       	movw	r20, r8
   17e40:	93 01       	movw	r18, r6
   17e42:	af d1       	rcall	.+862    	; 0x181a2 <__divmodsi4>
   17e44:	79 01       	movw	r14, r18
   17e46:	8a 01       	movw	r16, r20
   17e48:	08 94       	sec
   17e4a:	e1 08       	sbc	r14, r1
   17e4c:	f1 08       	sbc	r15, r1
   17e4e:	01 09       	sbc	r16, r1
   17e50:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
   17e52:	55 20       	and	r5, r5
   17e54:	11 f4       	brne	.+4      	; 0x17e5a <_Z4tonehjm+0x31c>
   17e56:	83 e0       	ldi	r24, 0x03	; 3
   17e58:	1c c0       	rjmp	.+56     	; 0x17e92 <_Z4tonehjm+0x354>

          if (_timer == 2 && ocr > 255)
   17e5a:	b2 e0       	ldi	r27, 0x02	; 2
   17e5c:	5b 16       	cp	r5, r27
   17e5e:	11 f0       	breq	.+4      	; 0x17e64 <_Z4tonehjm+0x326>
   17e60:	84 e0       	ldi	r24, 0x04	; 4
   17e62:	17 c0       	rjmp	.+46     	; 0x17e92 <_Z4tonehjm+0x354>
   17e64:	ef ef       	ldi	r30, 0xFF	; 255
   17e66:	ee 16       	cp	r14, r30
   17e68:	f1 04       	cpc	r15, r1
   17e6a:	01 05       	cpc	r16, r1
   17e6c:	11 05       	cpc	r17, r1
   17e6e:	09 f0       	breq	.+2      	; 0x17e72 <_Z4tonehjm+0x334>
   17e70:	08 f4       	brcc	.+2      	; 0x17e74 <_Z4tonehjm+0x336>
   17e72:	3b c1       	rjmp	.+630    	; 0x180ea <_Z4tonehjm+0x5ac>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
   17e74:	64 e2       	ldi	r22, 0x24	; 36
   17e76:	74 ef       	ldi	r23, 0xF4	; 244
   17e78:	80 e0       	ldi	r24, 0x00	; 0
   17e7a:	90 e0       	ldi	r25, 0x00	; 0
   17e7c:	a4 01       	movw	r20, r8
   17e7e:	93 01       	movw	r18, r6
   17e80:	90 d1       	rcall	.+800    	; 0x181a2 <__divmodsi4>
   17e82:	79 01       	movw	r14, r18
   17e84:	8a 01       	movw	r16, r20
   17e86:	08 94       	sec
   17e88:	e1 08       	sbc	r14, r1
   17e8a:	f1 08       	sbc	r15, r1
   17e8c:	01 09       	sbc	r16, r1
   17e8e:	11 09       	sbc	r17, r1
   17e90:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
   17e92:	ff ef       	ldi	r31, 0xFF	; 255
   17e94:	ef 16       	cp	r14, r31
   17e96:	f1 04       	cpc	r15, r1
   17e98:	01 05       	cpc	r16, r1
   17e9a:	11 05       	cpc	r17, r1
   17e9c:	81 f1       	breq	.+96     	; 0x17efe <_Z4tonehjm+0x3c0>
   17e9e:	78 f1       	brcs	.+94     	; 0x17efe <_Z4tonehjm+0x3c0>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
   17ea0:	62 e1       	ldi	r22, 0x12	; 18
   17ea2:	7a e7       	ldi	r23, 0x7A	; 122
   17ea4:	80 e0       	ldi	r24, 0x00	; 0
   17ea6:	90 e0       	ldi	r25, 0x00	; 0
   17ea8:	a4 01       	movw	r20, r8
   17eaa:	93 01       	movw	r18, r6
   17eac:	7a d1       	rcall	.+756    	; 0x181a2 <__divmodsi4>
   17eae:	79 01       	movw	r14, r18
   17eb0:	8a 01       	movw	r16, r20
   17eb2:	08 94       	sec
   17eb4:	e1 08       	sbc	r14, r1
   17eb6:	f1 08       	sbc	r15, r1
   17eb8:	01 09       	sbc	r16, r1
   17eba:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
   17ebc:	55 20       	and	r5, r5
   17ebe:	11 f0       	breq	.+4      	; 0x17ec4 <_Z4tonehjm+0x386>
   17ec0:	86 e0       	ldi	r24, 0x06	; 6
   17ec2:	01 c0       	rjmp	.+2      	; 0x17ec6 <_Z4tonehjm+0x388>
   17ec4:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
   17ec6:	2f ef       	ldi	r18, 0xFF	; 255
   17ec8:	e2 16       	cp	r14, r18
   17eca:	f1 04       	cpc	r15, r1
   17ecc:	01 05       	cpc	r16, r1
   17ece:	11 05       	cpc	r17, r1
   17ed0:	b1 f0       	breq	.+44     	; 0x17efe <_Z4tonehjm+0x3c0>
   17ed2:	a8 f0       	brcs	.+42     	; 0x17efe <_Z4tonehjm+0x3c0>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
   17ed4:	c6 01       	movw	r24, r12
   17ed6:	b5 01       	movw	r22, r10
   17ed8:	20 e0       	ldi	r18, 0x00	; 0
   17eda:	34 e0       	ldi	r19, 0x04	; 4
   17edc:	40 e0       	ldi	r20, 0x00	; 0
   17ede:	50 e0       	ldi	r21, 0x00	; 0
   17ee0:	60 d1       	rcall	.+704    	; 0x181a2 <__divmodsi4>
   17ee2:	79 01       	movw	r14, r18
   17ee4:	8a 01       	movw	r16, r20
   17ee6:	08 94       	sec
   17ee8:	e1 08       	sbc	r14, r1
   17eea:	f1 08       	sbc	r15, r1
   17eec:	01 09       	sbc	r16, r1
   17eee:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
   17ef0:	55 20       	and	r5, r5
   17ef2:	11 f0       	breq	.+4      	; 0x17ef8 <_Z4tonehjm+0x3ba>
   17ef4:	87 e0       	ldi	r24, 0x07	; 7
   17ef6:	08 c0       	rjmp	.+16     	; 0x17f08 <_Z4tonehjm+0x3ca>
   17ef8:	85 e0       	ldi	r24, 0x05	; 5
   17efa:	03 c0       	rjmp	.+6      	; 0x17f02 <_Z4tonehjm+0x3c4>
   17efc:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
   17efe:	55 20       	and	r5, r5
   17f00:	19 f4       	brne	.+6      	; 0x17f08 <_Z4tonehjm+0x3ca>
      {
        TCCR0B = prescalarbits;
   17f02:	85 bd       	out	0x25, r24	; 37
   17f04:	56 c0       	rjmp	.+172    	; 0x17fb2 <_Z4tonehjm+0x474>
   17f06:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
   17f08:	80 93 b1 00 	sts	0x00B1, r24
   17f0c:	52 c0       	rjmp	.+164    	; 0x17fb2 <_Z4tonehjm+0x474>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
   17f0e:	51 01       	movw	r10, r2
   17f10:	cc 24       	eor	r12, r12
   17f12:	dd 24       	eor	r13, r13
   17f14:	60 e0       	ldi	r22, 0x00	; 0
   17f16:	72 e1       	ldi	r23, 0x12	; 18
   17f18:	8a e7       	ldi	r24, 0x7A	; 122
   17f1a:	90 e0       	ldi	r25, 0x00	; 0
   17f1c:	a6 01       	movw	r20, r12
   17f1e:	95 01       	movw	r18, r10
   17f20:	40 d1       	rcall	.+640    	; 0x181a2 <__divmodsi4>
   17f22:	79 01       	movw	r14, r18
   17f24:	8a 01       	movw	r16, r20
   17f26:	08 94       	sec
   17f28:	e1 08       	sbc	r14, r1
   17f2a:	f1 08       	sbc	r15, r1
   17f2c:	01 09       	sbc	r16, r1
   17f2e:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
   17f30:	80 e0       	ldi	r24, 0x00	; 0
   17f32:	e8 16       	cp	r14, r24
   17f34:	80 e0       	ldi	r24, 0x00	; 0
   17f36:	f8 06       	cpc	r15, r24
   17f38:	81 e0       	ldi	r24, 0x01	; 1
   17f3a:	08 07       	cpc	r16, r24
   17f3c:	80 e0       	ldi	r24, 0x00	; 0
   17f3e:	18 07       	cpc	r17, r24
   17f40:	10 f4       	brcc	.+4      	; 0x17f46 <_Z4tonehjm+0x408>
   17f42:	91 e0       	ldi	r25, 0x01	; 1
   17f44:	0f c0       	rjmp	.+30     	; 0x17f64 <_Z4tonehjm+0x426>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
   17f46:	68 e4       	ldi	r22, 0x48	; 72
   17f48:	78 ee       	ldi	r23, 0xE8	; 232
   17f4a:	81 e0       	ldi	r24, 0x01	; 1
   17f4c:	90 e0       	ldi	r25, 0x00	; 0
   17f4e:	a6 01       	movw	r20, r12
   17f50:	95 01       	movw	r18, r10
   17f52:	27 d1       	rcall	.+590    	; 0x181a2 <__divmodsi4>
   17f54:	79 01       	movw	r14, r18
   17f56:	8a 01       	movw	r16, r20
   17f58:	08 94       	sec
   17f5a:	e1 08       	sbc	r14, r1
   17f5c:	f1 08       	sbc	r15, r1
   17f5e:	01 09       	sbc	r16, r1
   17f60:	11 09       	sbc	r17, r1
   17f62:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
   17f64:	a1 e0       	ldi	r26, 0x01	; 1
   17f66:	5a 16       	cp	r5, r26
   17f68:	39 f4       	brne	.+14     	; 0x17f78 <_Z4tonehjm+0x43a>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
   17f6a:	80 91 81 00 	lds	r24, 0x0081
   17f6e:	88 7f       	andi	r24, 0xF8	; 248
   17f70:	98 2b       	or	r25, r24
   17f72:	90 93 81 00 	sts	0x0081, r25
   17f76:	1d c0       	rjmp	.+58     	; 0x17fb2 <_Z4tonehjm+0x474>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
   17f78:	b3 e0       	ldi	r27, 0x03	; 3
   17f7a:	5b 16       	cp	r5, r27
   17f7c:	39 f4       	brne	.+14     	; 0x17f8c <_Z4tonehjm+0x44e>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
   17f7e:	80 91 91 00 	lds	r24, 0x0091
   17f82:	88 7f       	andi	r24, 0xF8	; 248
   17f84:	98 2b       	or	r25, r24
   17f86:	90 93 91 00 	sts	0x0091, r25
   17f8a:	13 c0       	rjmp	.+38     	; 0x17fb2 <_Z4tonehjm+0x474>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
   17f8c:	e4 e0       	ldi	r30, 0x04	; 4
   17f8e:	5e 16       	cp	r5, r30
   17f90:	39 f4       	brne	.+14     	; 0x17fa0 <_Z4tonehjm+0x462>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
   17f92:	80 91 a1 00 	lds	r24, 0x00A1
   17f96:	88 7f       	andi	r24, 0xF8	; 248
   17f98:	98 2b       	or	r25, r24
   17f9a:	90 93 a1 00 	sts	0x00A1, r25
   17f9e:	09 c0       	rjmp	.+18     	; 0x17fb2 <_Z4tonehjm+0x474>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
   17fa0:	f5 e0       	ldi	r31, 0x05	; 5
   17fa2:	5f 16       	cp	r5, r31
   17fa4:	31 f4       	brne	.+12     	; 0x17fb2 <_Z4tonehjm+0x474>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
   17fa6:	80 91 21 01 	lds	r24, 0x0121
   17faa:	88 7f       	andi	r24, 0xF8	; 248
   17fac:	98 2b       	or	r25, r24
   17fae:	90 93 21 01 	sts	0x0121, r25

    }
    

    // Calculate the toggle count
    if (duration > 0)
   17fb2:	89 81       	ldd	r24, Y+1	; 0x01
   17fb4:	9a 81       	ldd	r25, Y+2	; 0x02
   17fb6:	ab 81       	ldd	r26, Y+3	; 0x03
   17fb8:	bc 81       	ldd	r27, Y+4	; 0x04
   17fba:	00 97       	sbiw	r24, 0x00	; 0
   17fbc:	a1 05       	cpc	r26, r1
   17fbe:	b1 05       	cpc	r27, r1
   17fc0:	29 f4       	brne	.+10     	; 0x17fcc <_Z4tonehjm+0x48e>
   17fc2:	8f ef       	ldi	r24, 0xFF	; 255
   17fc4:	9f ef       	ldi	r25, 0xFF	; 255
   17fc6:	af ef       	ldi	r26, 0xFF	; 255
   17fc8:	bf ef       	ldi	r27, 0xFF	; 255
   17fca:	11 c0       	rjmp	.+34     	; 0x17fee <_Z4tonehjm+0x4b0>
    {
      toggle_count = 2 * frequency * duration / 1000;
   17fcc:	22 0c       	add	r2, r2
   17fce:	33 1c       	adc	r3, r3
   17fd0:	b1 01       	movw	r22, r2
   17fd2:	80 e0       	ldi	r24, 0x00	; 0
   17fd4:	90 e0       	ldi	r25, 0x00	; 0
   17fd6:	29 81       	ldd	r18, Y+1	; 0x01
   17fd8:	3a 81       	ldd	r19, Y+2	; 0x02
   17fda:	4b 81       	ldd	r20, Y+3	; 0x03
   17fdc:	5c 81       	ldd	r21, Y+4	; 0x04
   17fde:	9d d0       	rcall	.+314    	; 0x1811a <__mulsi3>
   17fe0:	28 ee       	ldi	r18, 0xE8	; 232
   17fe2:	33 e0       	ldi	r19, 0x03	; 3
   17fe4:	40 e0       	ldi	r20, 0x00	; 0
   17fe6:	50 e0       	ldi	r21, 0x00	; 0
   17fe8:	ba d0       	rcall	.+372    	; 0x1815e <__udivmodsi4>
   17fea:	c9 01       	movw	r24, r18
   17fec:	da 01       	movw	r26, r20
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
   17fee:	e2 e0       	ldi	r30, 0x02	; 2
   17ff0:	5e 16       	cp	r5, r30
   17ff2:	a9 f1       	breq	.+106    	; 0x1805e <_Z4tonehjm+0x520>
   17ff4:	e5 15       	cp	r30, r5
   17ff6:	3c f0       	brlt	.+14     	; 0x18006 <_Z4tonehjm+0x4c8>
   17ff8:	55 20       	and	r5, r5
   17ffa:	81 f0       	breq	.+32     	; 0x1801c <_Z4tonehjm+0x4de>
   17ffc:	f1 e0       	ldi	r31, 0x01	; 1
   17ffe:	5f 16       	cp	r5, r31
   18000:	09 f0       	breq	.+2      	; 0x18004 <_Z4tonehjm+0x4c6>
   18002:	75 c0       	rjmp	.+234    	; 0x180ee <_Z4tonehjm+0x5b0>
   18004:	1a c0       	rjmp	.+52     	; 0x1803a <_Z4tonehjm+0x4fc>
   18006:	24 e0       	ldi	r18, 0x04	; 4
   18008:	52 16       	cp	r5, r18
   1800a:	09 f4       	brne	.+2      	; 0x1800e <_Z4tonehjm+0x4d0>
   1800c:	4a c0       	rjmp	.+148    	; 0x180a2 <_Z4tonehjm+0x564>
   1800e:	52 16       	cp	r5, r18
   18010:	b4 f1       	brlt	.+108    	; 0x1807e <_Z4tonehjm+0x540>
   18012:	e5 e0       	ldi	r30, 0x05	; 5
   18014:	5e 16       	cp	r5, r30
   18016:	09 f0       	breq	.+2      	; 0x1801a <_Z4tonehjm+0x4dc>
   18018:	6a c0       	rjmp	.+212    	; 0x180ee <_Z4tonehjm+0x5b0>
   1801a:	55 c0       	rjmp	.+170    	; 0x180c6 <_Z4tonehjm+0x588>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
   1801c:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
   1801e:	80 93 32 12 	sts	0x1232, r24
   18022:	90 93 33 12 	sts	0x1233, r25
   18026:	a0 93 34 12 	sts	0x1234, r26
   1802a:	b0 93 35 12 	sts	0x1235, r27
        bitWrite(TIMSK0, OCIE0A, 1);
   1802e:	80 91 6e 00 	lds	r24, 0x006E
   18032:	82 60       	ori	r24, 0x02	; 2
   18034:	80 93 6e 00 	sts	0x006E, r24
   18038:	5a c0       	rjmp	.+180    	; 0x180ee <_Z4tonehjm+0x5b0>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
   1803a:	f0 92 89 00 	sts	0x0089, r15
   1803e:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
   18042:	80 93 39 12 	sts	0x1239, r24
   18046:	90 93 3a 12 	sts	0x123A, r25
   1804a:	a0 93 3b 12 	sts	0x123B, r26
   1804e:	b0 93 3c 12 	sts	0x123C, r27
        bitWrite(TIMSK1, OCIE1A, 1);
   18052:	80 91 6f 00 	lds	r24, 0x006F
   18056:	82 60       	ori	r24, 0x02	; 2
   18058:	80 93 6f 00 	sts	0x006F, r24
   1805c:	48 c0       	rjmp	.+144    	; 0x180ee <_Z4tonehjm+0x5b0>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
   1805e:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
   18062:	80 93 40 12 	sts	0x1240, r24
   18066:	90 93 41 12 	sts	0x1241, r25
   1806a:	a0 93 42 12 	sts	0x1242, r26
   1806e:	b0 93 43 12 	sts	0x1243, r27
        bitWrite(TIMSK2, OCIE2A, 1);
   18072:	80 91 70 00 	lds	r24, 0x0070
   18076:	82 60       	ori	r24, 0x02	; 2
   18078:	80 93 70 00 	sts	0x0070, r24
   1807c:	38 c0       	rjmp	.+112    	; 0x180ee <_Z4tonehjm+0x5b0>
        break;
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
   1807e:	f0 92 99 00 	sts	0x0099, r15
   18082:	e0 92 98 00 	sts	0x0098, r14
        timer3_toggle_count = toggle_count;
   18086:	80 93 47 12 	sts	0x1247, r24
   1808a:	90 93 48 12 	sts	0x1248, r25
   1808e:	a0 93 49 12 	sts	0x1249, r26
   18092:	b0 93 4a 12 	sts	0x124A, r27
        bitWrite(TIMSK3, OCIE3A, 1);
   18096:	80 91 71 00 	lds	r24, 0x0071
   1809a:	82 60       	ori	r24, 0x02	; 2
   1809c:	80 93 71 00 	sts	0x0071, r24
   180a0:	26 c0       	rjmp	.+76     	; 0x180ee <_Z4tonehjm+0x5b0>
        break;
#endif

#if defined(TIMSK4)
      case 4:
        OCR4A = ocr;
   180a2:	f0 92 a9 00 	sts	0x00A9, r15
   180a6:	e0 92 a8 00 	sts	0x00A8, r14
        timer4_toggle_count = toggle_count;
   180aa:	80 93 4e 12 	sts	0x124E, r24
   180ae:	90 93 4f 12 	sts	0x124F, r25
   180b2:	a0 93 50 12 	sts	0x1250, r26
   180b6:	b0 93 51 12 	sts	0x1251, r27
        bitWrite(TIMSK4, OCIE4A, 1);
   180ba:	80 91 72 00 	lds	r24, 0x0072
   180be:	82 60       	ori	r24, 0x02	; 2
   180c0:	80 93 72 00 	sts	0x0072, r24
   180c4:	14 c0       	rjmp	.+40     	; 0x180ee <_Z4tonehjm+0x5b0>
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
   180c6:	f0 92 29 01 	sts	0x0129, r15
   180ca:	e0 92 28 01 	sts	0x0128, r14
        timer5_toggle_count = toggle_count;
   180ce:	80 93 55 12 	sts	0x1255, r24
   180d2:	90 93 56 12 	sts	0x1256, r25
   180d6:	a0 93 57 12 	sts	0x1257, r26
   180da:	b0 93 58 12 	sts	0x1258, r27
        bitWrite(TIMSK5, OCIE5A, 1);
   180de:	80 91 73 00 	lds	r24, 0x0073
   180e2:	82 60       	ori	r24, 0x02	; 2
   180e4:	80 93 73 00 	sts	0x0073, r24
   180e8:	02 c0       	rjmp	.+4      	; 0x180ee <_Z4tonehjm+0x5b0>
        break;
#endif

    }
  }
}
   180ea:	84 e0       	ldi	r24, 0x04	; 4
   180ec:	0d cf       	rjmp	.-486    	; 0x17f08 <_Z4tonehjm+0x3ca>
   180ee:	0f 90       	pop	r0
   180f0:	0f 90       	pop	r0
   180f2:	0f 90       	pop	r0
   180f4:	0f 90       	pop	r0
   180f6:	cf 91       	pop	r28
   180f8:	df 91       	pop	r29
   180fa:	1f 91       	pop	r17
   180fc:	0f 91       	pop	r16
   180fe:	ff 90       	pop	r15
   18100:	ef 90       	pop	r14
   18102:	df 90       	pop	r13
   18104:	cf 90       	pop	r12
   18106:	bf 90       	pop	r11
   18108:	af 90       	pop	r10
   1810a:	9f 90       	pop	r9
   1810c:	8f 90       	pop	r8
   1810e:	7f 90       	pop	r7
   18110:	6f 90       	pop	r6
   18112:	5f 90       	pop	r5
   18114:	3f 90       	pop	r3
   18116:	2f 90       	pop	r2
   18118:	08 95       	ret

0001811a <__mulsi3>:
   1811a:	db 01       	movw	r26, r22
   1811c:	8f 93       	push	r24
   1811e:	9f 93       	push	r25
   18120:	67 d0       	rcall	.+206    	; 0x181f0 <__muluhisi3>
   18122:	bf 91       	pop	r27
   18124:	af 91       	pop	r26
   18126:	a2 9f       	mul	r26, r18
   18128:	80 0d       	add	r24, r0
   1812a:	91 1d       	adc	r25, r1
   1812c:	a3 9f       	mul	r26, r19
   1812e:	90 0d       	add	r25, r0
   18130:	b2 9f       	mul	r27, r18
   18132:	90 0d       	add	r25, r0
   18134:	11 24       	eor	r1, r1
   18136:	08 95       	ret

00018138 <__divmodhi4>:
   18138:	97 fb       	bst	r25, 7
   1813a:	07 2e       	mov	r0, r23
   1813c:	16 f4       	brtc	.+4      	; 0x18142 <__divmodhi4+0xa>
   1813e:	00 94       	com	r0
   18140:	06 d0       	rcall	.+12     	; 0x1814e <__divmodhi4_neg1>
   18142:	77 fd       	sbrc	r23, 7
   18144:	08 d0       	rcall	.+16     	; 0x18156 <__divmodhi4_neg2>
   18146:	68 d0       	rcall	.+208    	; 0x18218 <__udivmodhi4>
   18148:	07 fc       	sbrc	r0, 7
   1814a:	05 d0       	rcall	.+10     	; 0x18156 <__divmodhi4_neg2>
   1814c:	3e f4       	brtc	.+14     	; 0x1815c <__divmodhi4_exit>

0001814e <__divmodhi4_neg1>:
   1814e:	90 95       	com	r25
   18150:	81 95       	neg	r24
   18152:	9f 4f       	sbci	r25, 0xFF	; 255
   18154:	08 95       	ret

00018156 <__divmodhi4_neg2>:
   18156:	70 95       	com	r23
   18158:	61 95       	neg	r22
   1815a:	7f 4f       	sbci	r23, 0xFF	; 255

0001815c <__divmodhi4_exit>:
   1815c:	08 95       	ret

0001815e <__udivmodsi4>:
   1815e:	a1 e2       	ldi	r26, 0x21	; 33
   18160:	1a 2e       	mov	r1, r26
   18162:	aa 1b       	sub	r26, r26
   18164:	bb 1b       	sub	r27, r27
   18166:	fd 01       	movw	r30, r26
   18168:	0d c0       	rjmp	.+26     	; 0x18184 <__udivmodsi4_ep>

0001816a <__udivmodsi4_loop>:
   1816a:	aa 1f       	adc	r26, r26
   1816c:	bb 1f       	adc	r27, r27
   1816e:	ee 1f       	adc	r30, r30
   18170:	ff 1f       	adc	r31, r31
   18172:	a2 17       	cp	r26, r18
   18174:	b3 07       	cpc	r27, r19
   18176:	e4 07       	cpc	r30, r20
   18178:	f5 07       	cpc	r31, r21
   1817a:	20 f0       	brcs	.+8      	; 0x18184 <__udivmodsi4_ep>
   1817c:	a2 1b       	sub	r26, r18
   1817e:	b3 0b       	sbc	r27, r19
   18180:	e4 0b       	sbc	r30, r20
   18182:	f5 0b       	sbc	r31, r21

00018184 <__udivmodsi4_ep>:
   18184:	66 1f       	adc	r22, r22
   18186:	77 1f       	adc	r23, r23
   18188:	88 1f       	adc	r24, r24
   1818a:	99 1f       	adc	r25, r25
   1818c:	1a 94       	dec	r1
   1818e:	69 f7       	brne	.-38     	; 0x1816a <__udivmodsi4_loop>
   18190:	60 95       	com	r22
   18192:	70 95       	com	r23
   18194:	80 95       	com	r24
   18196:	90 95       	com	r25
   18198:	9b 01       	movw	r18, r22
   1819a:	ac 01       	movw	r20, r24
   1819c:	bd 01       	movw	r22, r26
   1819e:	cf 01       	movw	r24, r30
   181a0:	08 95       	ret

000181a2 <__divmodsi4>:
   181a2:	05 2e       	mov	r0, r21
   181a4:	97 fb       	bst	r25, 7
   181a6:	16 f4       	brtc	.+4      	; 0x181ac <__divmodsi4+0xa>
   181a8:	00 94       	com	r0
   181aa:	06 d0       	rcall	.+12     	; 0x181b8 <__divmodsi4_neg1>
   181ac:	57 fd       	sbrc	r21, 7
   181ae:	0c d0       	rcall	.+24     	; 0x181c8 <__divmodsi4_neg2>
   181b0:	d6 df       	rcall	.-84     	; 0x1815e <__udivmodsi4>
   181b2:	07 fc       	sbrc	r0, 7
   181b4:	09 d0       	rcall	.+18     	; 0x181c8 <__divmodsi4_neg2>
   181b6:	7e f4       	brtc	.+30     	; 0x181d6 <__divmodsi4_exit>

000181b8 <__divmodsi4_neg1>:
   181b8:	90 95       	com	r25
   181ba:	80 95       	com	r24
   181bc:	70 95       	com	r23
   181be:	61 95       	neg	r22
   181c0:	7f 4f       	sbci	r23, 0xFF	; 255
   181c2:	8f 4f       	sbci	r24, 0xFF	; 255
   181c4:	9f 4f       	sbci	r25, 0xFF	; 255
   181c6:	08 95       	ret

000181c8 <__divmodsi4_neg2>:
   181c8:	50 95       	com	r21
   181ca:	40 95       	com	r20
   181cc:	30 95       	com	r19
   181ce:	21 95       	neg	r18
   181d0:	3f 4f       	sbci	r19, 0xFF	; 255
   181d2:	4f 4f       	sbci	r20, 0xFF	; 255
   181d4:	5f 4f       	sbci	r21, 0xFF	; 255

000181d6 <__divmodsi4_exit>:
   181d6:	08 95       	ret

000181d8 <__umulhisi3>:
   181d8:	a2 9f       	mul	r26, r18
   181da:	b0 01       	movw	r22, r0
   181dc:	b3 9f       	mul	r27, r19
   181de:	c0 01       	movw	r24, r0
   181e0:	a3 9f       	mul	r26, r19
   181e2:	01 d0       	rcall	.+2      	; 0x181e6 <__umulhisi3+0xe>
   181e4:	b2 9f       	mul	r27, r18
   181e6:	70 0d       	add	r23, r0
   181e8:	81 1d       	adc	r24, r1
   181ea:	11 24       	eor	r1, r1
   181ec:	91 1d       	adc	r25, r1
   181ee:	08 95       	ret

000181f0 <__muluhisi3>:
   181f0:	f3 df       	rcall	.-26     	; 0x181d8 <__umulhisi3>
   181f2:	a5 9f       	mul	r26, r21
   181f4:	90 0d       	add	r25, r0
   181f6:	b4 9f       	mul	r27, r20
   181f8:	90 0d       	add	r25, r0
   181fa:	a4 9f       	mul	r26, r20
   181fc:	80 0d       	add	r24, r0
   181fe:	91 1d       	adc	r25, r1
   18200:	11 24       	eor	r1, r1
   18202:	08 95       	ret

00018204 <__mulshisi3>:
   18204:	b7 ff       	sbrs	r27, 7
   18206:	f4 cf       	rjmp	.-24     	; 0x181f0 <__muluhisi3>

00018208 <__mulohisi3>:
   18208:	f3 df       	rcall	.-26     	; 0x181f0 <__muluhisi3>
   1820a:	82 1b       	sub	r24, r18
   1820c:	93 0b       	sbc	r25, r19
   1820e:	08 95       	ret

00018210 <__tablejump_elpm__>:
   18210:	07 90       	elpm	r0, Z+
   18212:	f6 91       	elpm	r31, Z
   18214:	e0 2d       	mov	r30, r0
   18216:	19 94       	eijmp

00018218 <__udivmodhi4>:
   18218:	aa 1b       	sub	r26, r26
   1821a:	bb 1b       	sub	r27, r27
   1821c:	51 e1       	ldi	r21, 0x11	; 17
   1821e:	07 c0       	rjmp	.+14     	; 0x1822e <__udivmodhi4_ep>

00018220 <__udivmodhi4_loop>:
   18220:	aa 1f       	adc	r26, r26
   18222:	bb 1f       	adc	r27, r27
   18224:	a6 17       	cp	r26, r22
   18226:	b7 07       	cpc	r27, r23
   18228:	10 f0       	brcs	.+4      	; 0x1822e <__udivmodhi4_ep>
   1822a:	a6 1b       	sub	r26, r22
   1822c:	b7 0b       	sbc	r27, r23

0001822e <__udivmodhi4_ep>:
   1822e:	88 1f       	adc	r24, r24
   18230:	99 1f       	adc	r25, r25
   18232:	5a 95       	dec	r21
   18234:	a9 f7       	brne	.-22     	; 0x18220 <__udivmodhi4_loop>
   18236:	80 95       	com	r24
   18238:	90 95       	com	r25
   1823a:	bc 01       	movw	r22, r24
   1823c:	cd 01       	movw	r24, r26
   1823e:	08 95       	ret

00018240 <strtod>:
   18240:	8f 92       	push	r8
   18242:	9f 92       	push	r9
   18244:	af 92       	push	r10
   18246:	bf 92       	push	r11
   18248:	cf 92       	push	r12
   1824a:	df 92       	push	r13
   1824c:	ef 92       	push	r14
   1824e:	ff 92       	push	r15
   18250:	0f 93       	push	r16
   18252:	1f 93       	push	r17
   18254:	cf 93       	push	r28
   18256:	df 93       	push	r29
   18258:	7b 01       	movw	r14, r22
   1825a:	61 15       	cp	r22, r1
   1825c:	71 05       	cpc	r23, r1
   1825e:	21 f0       	breq	.+8      	; 0x18268 <strtod+0x28>
   18260:	db 01       	movw	r26, r22
   18262:	8c 93       	st	X, r24
   18264:	11 96       	adiw	r26, 0x01	; 1
   18266:	9c 93       	st	X, r25
   18268:	ec 01       	movw	r28, r24
   1826a:	c9 90       	ld	r12, Y+
   1826c:	8e 01       	movw	r16, r28
   1826e:	8c 2d       	mov	r24, r12
   18270:	90 e0       	ldi	r25, 0x00	; 0
   18272:	65 d2       	rcall	.+1226   	; 0x1873e <isspace>
   18274:	89 2b       	or	r24, r25
   18276:	c9 f7       	brne	.-14     	; 0x1826a <strtod+0x2a>
   18278:	bd e2       	ldi	r27, 0x2D	; 45
   1827a:	cb 12       	cpse	r12, r27
   1827c:	06 c0       	rjmp	.+12     	; 0x1828a <strtod+0x4a>
   1827e:	fe 01       	movw	r30, r28
   18280:	c1 90       	ld	r12, Z+
   18282:	8f 01       	movw	r16, r30
   18284:	dd 24       	eor	r13, r13
   18286:	d3 94       	inc	r13
   18288:	07 c0       	rjmp	.+14     	; 0x18298 <strtod+0x58>
   1828a:	fb e2       	ldi	r31, 0x2B	; 43
   1828c:	cf 12       	cpse	r12, r31
   1828e:	03 c0       	rjmp	.+6      	; 0x18296 <strtod+0x56>
   18290:	de 01       	movw	r26, r28
   18292:	cd 90       	ld	r12, X+
   18294:	8d 01       	movw	r16, r26
   18296:	d1 2c       	mov	r13, r1
   18298:	e8 01       	movw	r28, r16
   1829a:	21 97       	sbiw	r28, 0x01	; 1
   1829c:	43 e0       	ldi	r20, 0x03	; 3
   1829e:	50 e0       	ldi	r21, 0x00	; 0
   182a0:	65 eb       	ldi	r22, 0xB5	; 181
   182a2:	77 e1       	ldi	r23, 0x17	; 23
   182a4:	ce 01       	movw	r24, r28
   182a6:	6b d2       	rcall	.+1238   	; 0x1877e <strncasecmp_P>
   182a8:	89 2b       	or	r24, r25
   182aa:	c1 f4       	brne	.+48     	; 0x182dc <strtod+0x9c>
   182ac:	e8 01       	movw	r28, r16
   182ae:	22 96       	adiw	r28, 0x02	; 2
   182b0:	45 e0       	ldi	r20, 0x05	; 5
   182b2:	50 e0       	ldi	r21, 0x00	; 0
   182b4:	68 eb       	ldi	r22, 0xB8	; 184
   182b6:	77 e1       	ldi	r23, 0x17	; 23
   182b8:	ce 01       	movw	r24, r28
   182ba:	61 d2       	rcall	.+1218   	; 0x1877e <strncasecmp_P>
   182bc:	89 2b       	or	r24, r25
   182be:	11 f4       	brne	.+4      	; 0x182c4 <strtod+0x84>
   182c0:	e8 01       	movw	r28, r16
   182c2:	27 96       	adiw	r28, 0x07	; 7
   182c4:	e1 14       	cp	r14, r1
   182c6:	f1 04       	cpc	r15, r1
   182c8:	19 f0       	breq	.+6      	; 0x182d0 <strtod+0x90>
   182ca:	f7 01       	movw	r30, r14
   182cc:	d1 83       	std	Z+1, r29	; 0x01
   182ce:	c0 83       	st	Z, r28
   182d0:	81 2c       	mov	r8, r1
   182d2:	91 2c       	mov	r9, r1
   182d4:	90 e8       	ldi	r25, 0x80	; 128
   182d6:	d1 10       	cpse	r13, r1
   182d8:	f1 c0       	rjmp	.+482    	; 0x184bc <strtod+0x27c>
   182da:	f5 c0       	rjmp	.+490    	; 0x184c6 <strtod+0x286>
   182dc:	43 e0       	ldi	r20, 0x03	; 3
   182de:	50 e0       	ldi	r21, 0x00	; 0
   182e0:	6d eb       	ldi	r22, 0xBD	; 189
   182e2:	77 e1       	ldi	r23, 0x17	; 23
   182e4:	ce 01       	movw	r24, r28
   182e6:	4b d2       	rcall	.+1174   	; 0x1877e <strncasecmp_P>
   182e8:	89 2b       	or	r24, r25
   182ea:	51 f4       	brne	.+20     	; 0x18300 <strtod+0xc0>
   182ec:	e1 14       	cp	r14, r1
   182ee:	f1 04       	cpc	r15, r1
   182f0:	09 f4       	brne	.+2      	; 0x182f4 <strtod+0xb4>
   182f2:	e6 c0       	rjmp	.+460    	; 0x184c0 <strtod+0x280>
   182f4:	0e 5f       	subi	r16, 0xFE	; 254
   182f6:	1f 4f       	sbci	r17, 0xFF	; 255
   182f8:	d7 01       	movw	r26, r14
   182fa:	0d 93       	st	X+, r16
   182fc:	1c 93       	st	X, r17
   182fe:	e0 c0       	rjmp	.+448    	; 0x184c0 <strtod+0x280>
   18300:	60 e0       	ldi	r22, 0x00	; 0
   18302:	70 e0       	ldi	r23, 0x00	; 0
   18304:	cb 01       	movw	r24, r22
   18306:	c0 e0       	ldi	r28, 0x00	; 0
   18308:	d0 e0       	ldi	r29, 0x00	; 0
   1830a:	ec 2d       	mov	r30, r12
   1830c:	e0 53       	subi	r30, 0x30	; 48
   1830e:	ea 30       	cpi	r30, 0x0A	; 10
   18310:	18 f5       	brcc	.+70     	; 0x18358 <strtod+0x118>
   18312:	fd 2d       	mov	r31, r13
   18314:	f2 60       	ori	r31, 0x02	; 2
   18316:	2d 2d       	mov	r18, r13
   18318:	28 70       	andi	r18, 0x08	; 8
   1831a:	d2 fe       	sbrs	r13, 2
   1831c:	04 c0       	rjmp	.+8      	; 0x18326 <strtod+0xe6>
   1831e:	21 11       	cpse	r18, r1
   18320:	21 c0       	rjmp	.+66     	; 0x18364 <strtod+0x124>
   18322:	21 96       	adiw	r28, 0x01	; 1
   18324:	1f c0       	rjmp	.+62     	; 0x18364 <strtod+0x124>
   18326:	21 11       	cpse	r18, r1
   18328:	21 97       	sbiw	r28, 0x01	; 1
   1832a:	a5 e0       	ldi	r26, 0x05	; 5
   1832c:	b0 e0       	ldi	r27, 0x00	; 0
   1832e:	9b 01       	movw	r18, r22
   18330:	ac 01       	movw	r20, r24
   18332:	5e df       	rcall	.-324    	; 0x181f0 <__muluhisi3>
   18334:	66 0f       	add	r22, r22
   18336:	77 1f       	adc	r23, r23
   18338:	88 1f       	adc	r24, r24
   1833a:	99 1f       	adc	r25, r25
   1833c:	6e 0f       	add	r22, r30
   1833e:	71 1d       	adc	r23, r1
   18340:	81 1d       	adc	r24, r1
   18342:	91 1d       	adc	r25, r1
   18344:	68 39       	cpi	r22, 0x98	; 152
   18346:	b9 e9       	ldi	r27, 0x99	; 153
   18348:	7b 07       	cpc	r23, r27
   1834a:	8b 07       	cpc	r24, r27
   1834c:	b9 e1       	ldi	r27, 0x19	; 25
   1834e:	9b 07       	cpc	r25, r27
   18350:	48 f0       	brcs	.+18     	; 0x18364 <strtod+0x124>
   18352:	fd 2d       	mov	r31, r13
   18354:	f6 60       	ori	r31, 0x06	; 6
   18356:	06 c0       	rjmp	.+12     	; 0x18364 <strtod+0x124>
   18358:	ee 3f       	cpi	r30, 0xFE	; 254
   1835a:	49 f4       	brne	.+18     	; 0x1836e <strtod+0x12e>
   1835c:	d3 fc       	sbrc	r13, 3
   1835e:	43 c0       	rjmp	.+134    	; 0x183e6 <strtod+0x1a6>
   18360:	fd 2d       	mov	r31, r13
   18362:	f8 60       	ori	r31, 0x08	; 8
   18364:	d8 01       	movw	r26, r16
   18366:	cd 90       	ld	r12, X+
   18368:	8d 01       	movw	r16, r26
   1836a:	df 2e       	mov	r13, r31
   1836c:	ce cf       	rjmp	.-100    	; 0x1830a <strtod+0xca>
   1836e:	e5 33       	cpi	r30, 0x35	; 53
   18370:	11 f0       	breq	.+4      	; 0x18376 <strtod+0x136>
   18372:	e5 31       	cpi	r30, 0x15	; 21
   18374:	c1 f5       	brne	.+112    	; 0x183e6 <strtod+0x1a6>
   18376:	f8 01       	movw	r30, r16
   18378:	a0 81       	ld	r26, Z
   1837a:	ad 32       	cpi	r26, 0x2D	; 45
   1837c:	19 f4       	brne	.+6      	; 0x18384 <strtod+0x144>
   1837e:	f0 e1       	ldi	r31, 0x10	; 16
   18380:	df 2a       	or	r13, r31
   18382:	07 c0       	rjmp	.+14     	; 0x18392 <strtod+0x152>
   18384:	ab 32       	cpi	r26, 0x2B	; 43
   18386:	29 f0       	breq	.+10     	; 0x18392 <strtod+0x152>
   18388:	0f 5f       	subi	r16, 0xFF	; 255
   1838a:	1f 4f       	sbci	r17, 0xFF	; 255
   1838c:	21 e0       	ldi	r18, 0x01	; 1
   1838e:	30 e0       	ldi	r19, 0x00	; 0
   18390:	06 c0       	rjmp	.+12     	; 0x1839e <strtod+0x15e>
   18392:	f8 01       	movw	r30, r16
   18394:	a1 81       	ldd	r26, Z+1	; 0x01
   18396:	0e 5f       	subi	r16, 0xFE	; 254
   18398:	1f 4f       	sbci	r17, 0xFF	; 255
   1839a:	22 e0       	ldi	r18, 0x02	; 2
   1839c:	30 e0       	ldi	r19, 0x00	; 0
   1839e:	a0 53       	subi	r26, 0x30	; 48
   183a0:	aa 30       	cpi	r26, 0x0A	; 10
   183a2:	18 f0       	brcs	.+6      	; 0x183aa <strtod+0x16a>
   183a4:	02 1b       	sub	r16, r18
   183a6:	13 0b       	sbc	r17, r19
   183a8:	1e c0       	rjmp	.+60     	; 0x183e6 <strtod+0x1a6>
   183aa:	f8 01       	movw	r30, r16
   183ac:	20 e0       	ldi	r18, 0x00	; 0
   183ae:	30 e0       	ldi	r19, 0x00	; 0
   183b0:	20 38       	cpi	r18, 0x80	; 128
   183b2:	4c e0       	ldi	r20, 0x0C	; 12
   183b4:	34 07       	cpc	r19, r20
   183b6:	5c f4       	brge	.+22     	; 0x183ce <strtod+0x18e>
   183b8:	a9 01       	movw	r20, r18
   183ba:	44 0f       	add	r20, r20
   183bc:	55 1f       	adc	r21, r21
   183be:	44 0f       	add	r20, r20
   183c0:	55 1f       	adc	r21, r21
   183c2:	24 0f       	add	r18, r20
   183c4:	35 1f       	adc	r19, r21
   183c6:	22 0f       	add	r18, r18
   183c8:	33 1f       	adc	r19, r19
   183ca:	2a 0f       	add	r18, r26
   183cc:	31 1d       	adc	r19, r1
   183ce:	a1 91       	ld	r26, Z+
   183d0:	a0 53       	subi	r26, 0x30	; 48
   183d2:	8f 01       	movw	r16, r30
   183d4:	aa 30       	cpi	r26, 0x0A	; 10
   183d6:	60 f3       	brcs	.-40     	; 0x183b0 <strtod+0x170>
   183d8:	d4 fe       	sbrs	r13, 4
   183da:	03 c0       	rjmp	.+6      	; 0x183e2 <strtod+0x1a2>
   183dc:	31 95       	neg	r19
   183de:	21 95       	neg	r18
   183e0:	31 09       	sbc	r19, r1
   183e2:	c2 0f       	add	r28, r18
   183e4:	d3 1f       	adc	r29, r19
   183e6:	d1 fe       	sbrs	r13, 1
   183e8:	08 c0       	rjmp	.+16     	; 0x183fa <strtod+0x1ba>
   183ea:	e1 14       	cp	r14, r1
   183ec:	f1 04       	cpc	r15, r1
   183ee:	29 f0       	breq	.+10     	; 0x183fa <strtod+0x1ba>
   183f0:	01 50       	subi	r16, 0x01	; 1
   183f2:	11 09       	sbc	r17, r1
   183f4:	d7 01       	movw	r26, r14
   183f6:	0d 93       	st	X+, r16
   183f8:	1c 93       	st	X, r17
   183fa:	0e 94 c0 b6 	call	0x16d80	; 0x16d80 <__floatunsisf>
   183fe:	2d 2d       	mov	r18, r13
   18400:	23 70       	andi	r18, 0x03	; 3
   18402:	23 30       	cpi	r18, 0x03	; 3
   18404:	19 f0       	breq	.+6      	; 0x1840c <strtod+0x1cc>
   18406:	4b 01       	movw	r8, r22
   18408:	5c 01       	movw	r10, r24
   1840a:	05 c0       	rjmp	.+10     	; 0x18416 <strtod+0x1d6>
   1840c:	dc 01       	movw	r26, r24
   1840e:	cb 01       	movw	r24, r22
   18410:	b0 58       	subi	r27, 0x80	; 128
   18412:	4c 01       	movw	r8, r24
   18414:	5d 01       	movw	r10, r26
   18416:	20 e0       	ldi	r18, 0x00	; 0
   18418:	30 e0       	ldi	r19, 0x00	; 0
   1841a:	a9 01       	movw	r20, r18
   1841c:	68 2d       	mov	r22, r8
   1841e:	79 2d       	mov	r23, r9
   18420:	8a 2d       	mov	r24, r10
   18422:	9b 2d       	mov	r25, r11
   18424:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   18428:	88 23       	and	r24, r24
   1842a:	09 f4       	brne	.+2      	; 0x1842e <strtod+0x1ee>
   1842c:	44 c0       	rjmp	.+136    	; 0x184b6 <strtod+0x276>
   1842e:	d7 ff       	sbrs	r29, 7
   18430:	06 c0       	rjmp	.+12     	; 0x1843e <strtod+0x1fe>
   18432:	d1 95       	neg	r29
   18434:	c1 95       	neg	r28
   18436:	d1 09       	sbc	r29, r1
   18438:	0c ee       	ldi	r16, 0xEC	; 236
   1843a:	17 e1       	ldi	r17, 0x17	; 23
   1843c:	02 c0       	rjmp	.+4      	; 0x18442 <strtod+0x202>
   1843e:	04 ed       	ldi	r16, 0xD4	; 212
   18440:	17 e1       	ldi	r17, 0x17	; 23
   18442:	68 01       	movw	r12, r16
   18444:	b8 e1       	ldi	r27, 0x18	; 24
   18446:	cb 1a       	sub	r12, r27
   18448:	d1 08       	sbc	r13, r1
   1844a:	90 e2       	ldi	r25, 0x20	; 32
   1844c:	e9 2e       	mov	r14, r25
   1844e:	f1 2c       	mov	r15, r1
   18450:	13 c0       	rjmp	.+38     	; 0x18478 <strtod+0x238>
   18452:	f8 01       	movw	r30, r16
   18454:	85 91       	lpm	r24, Z+
   18456:	95 91       	lpm	r25, Z+
   18458:	a5 91       	lpm	r26, Z+
   1845a:	b4 91       	lpm	r27, Z
   1845c:	28 2f       	mov	r18, r24
   1845e:	39 2f       	mov	r19, r25
   18460:	4a 2f       	mov	r20, r26
   18462:	5b 2f       	mov	r21, r27
   18464:	68 2d       	mov	r22, r8
   18466:	79 2d       	mov	r23, r9
   18468:	8a 2d       	mov	r24, r10
   1846a:	9b 2d       	mov	r25, r11
   1846c:	0e 94 f5 b8 	call	0x171ea	; 0x171ea <__mulsf3>
   18470:	4b 01       	movw	r8, r22
   18472:	5c 01       	movw	r10, r24
   18474:	ce 19       	sub	r28, r14
   18476:	df 09       	sbc	r29, r15
   18478:	ce 15       	cp	r28, r14
   1847a:	df 05       	cpc	r29, r15
   1847c:	54 f7       	brge	.-44     	; 0x18452 <strtod+0x212>
   1847e:	04 50       	subi	r16, 0x04	; 4
   18480:	11 09       	sbc	r17, r1
   18482:	f5 94       	asr	r15
   18484:	e7 94       	ror	r14
   18486:	0c 15       	cp	r16, r12
   18488:	1d 05       	cpc	r17, r13
   1848a:	b1 f7       	brne	.-20     	; 0x18478 <strtod+0x238>
   1848c:	b4 01       	movw	r22, r8
   1848e:	c5 01       	movw	r24, r10
   18490:	28 2f       	mov	r18, r24
   18492:	22 0f       	add	r18, r18
   18494:	29 2f       	mov	r18, r25
   18496:	22 1f       	adc	r18, r18
   18498:	2f 3f       	cpi	r18, 0xFF	; 255
   1849a:	39 f0       	breq	.+14     	; 0x184aa <strtod+0x26a>
   1849c:	20 e0       	ldi	r18, 0x00	; 0
   1849e:	30 e0       	ldi	r19, 0x00	; 0
   184a0:	a9 01       	movw	r20, r18
   184a2:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <__cmpsf2>
   184a6:	81 11       	cpse	r24, r1
   184a8:	06 c0       	rjmp	.+12     	; 0x184b6 <strtod+0x276>
   184aa:	82 e2       	ldi	r24, 0x22	; 34
   184ac:	90 e0       	ldi	r25, 0x00	; 0
   184ae:	90 93 61 12 	sts	0x1261, r25
   184b2:	80 93 60 12 	sts	0x1260, r24
   184b6:	9a 2d       	mov	r25, r10
   184b8:	8b 2d       	mov	r24, r11
   184ba:	06 c0       	rjmp	.+12     	; 0x184c8 <strtod+0x288>
   184bc:	8f ef       	ldi	r24, 0xFF	; 255
   184be:	04 c0       	rjmp	.+8      	; 0x184c8 <strtod+0x288>
   184c0:	81 2c       	mov	r8, r1
   184c2:	91 2c       	mov	r9, r1
   184c4:	90 ec       	ldi	r25, 0xC0	; 192
   184c6:	8f e7       	ldi	r24, 0x7F	; 127
   184c8:	9c 01       	movw	r18, r24
   184ca:	68 2d       	mov	r22, r8
   184cc:	79 2d       	mov	r23, r9
   184ce:	83 2f       	mov	r24, r19
   184d0:	92 2f       	mov	r25, r18
   184d2:	df 91       	pop	r29
   184d4:	cf 91       	pop	r28
   184d6:	1f 91       	pop	r17
   184d8:	0f 91       	pop	r16
   184da:	ff 90       	pop	r15
   184dc:	ef 90       	pop	r14
   184de:	df 90       	pop	r13
   184e0:	cf 90       	pop	r12
   184e2:	bf 90       	pop	r11
   184e4:	af 90       	pop	r10
   184e6:	9f 90       	pop	r9
   184e8:	8f 90       	pop	r8
   184ea:	08 95       	ret

000184ec <strtol>:
   184ec:	4f 92       	push	r4
   184ee:	5f 92       	push	r5
   184f0:	6f 92       	push	r6
   184f2:	7f 92       	push	r7
   184f4:	8f 92       	push	r8
   184f6:	9f 92       	push	r9
   184f8:	af 92       	push	r10
   184fa:	bf 92       	push	r11
   184fc:	cf 92       	push	r12
   184fe:	df 92       	push	r13
   18500:	ef 92       	push	r14
   18502:	ff 92       	push	r15
   18504:	0f 93       	push	r16
   18506:	1f 93       	push	r17
   18508:	cf 93       	push	r28
   1850a:	df 93       	push	r29
   1850c:	5b 01       	movw	r10, r22
   1850e:	ea 01       	movw	r28, r20
   18510:	61 15       	cp	r22, r1
   18512:	71 05       	cpc	r23, r1
   18514:	19 f0       	breq	.+6      	; 0x1851c <strtol+0x30>
   18516:	fb 01       	movw	r30, r22
   18518:	80 83       	st	Z, r24
   1851a:	91 83       	std	Z+1, r25	; 0x01
   1851c:	20 97       	sbiw	r28, 0x00	; 0
   1851e:	39 f0       	breq	.+14     	; 0x1852e <strtol+0x42>
   18520:	9e 01       	movw	r18, r28
   18522:	22 50       	subi	r18, 0x02	; 2
   18524:	31 09       	sbc	r19, r1
   18526:	23 32       	cpi	r18, 0x23	; 35
   18528:	31 05       	cpc	r19, r1
   1852a:	08 f0       	brcs	.+2      	; 0x1852e <strtol+0x42>
   1852c:	e3 c0       	rjmp	.+454    	; 0x186f4 <strtol+0x208>
   1852e:	7c 01       	movw	r14, r24
   18530:	f7 01       	movw	r30, r14
   18532:	91 90       	ld	r9, Z+
   18534:	7f 01       	movw	r14, r30
   18536:	8f 01       	movw	r16, r30
   18538:	89 2d       	mov	r24, r9
   1853a:	90 e0       	ldi	r25, 0x00	; 0
   1853c:	00 d1       	rcall	.+512    	; 0x1873e <isspace>
   1853e:	89 2b       	or	r24, r25
   18540:	b9 f7       	brne	.-18     	; 0x18530 <strtol+0x44>
   18542:	fd e2       	ldi	r31, 0x2D	; 45
   18544:	9f 12       	cpse	r9, r31
   18546:	06 c0       	rjmp	.+12     	; 0x18554 <strtol+0x68>
   18548:	f7 01       	movw	r30, r14
   1854a:	91 90       	ld	r9, Z+
   1854c:	8f 01       	movw	r16, r30
   1854e:	88 24       	eor	r8, r8
   18550:	83 94       	inc	r8
   18552:	07 c0       	rjmp	.+14     	; 0x18562 <strtol+0x76>
   18554:	fb e2       	ldi	r31, 0x2B	; 43
   18556:	9f 12       	cpse	r9, r31
   18558:	03 c0       	rjmp	.+6      	; 0x18560 <strtol+0x74>
   1855a:	f7 01       	movw	r30, r14
   1855c:	91 90       	ld	r9, Z+
   1855e:	8f 01       	movw	r16, r30
   18560:	81 2c       	mov	r8, r1
   18562:	20 97       	sbiw	r28, 0x00	; 0
   18564:	09 f4       	brne	.+2      	; 0x18568 <strtol+0x7c>
   18566:	d4 c0       	rjmp	.+424    	; 0x18710 <strtol+0x224>
   18568:	c0 31       	cpi	r28, 0x10	; 16
   1856a:	d1 05       	cpc	r29, r1
   1856c:	81 f4       	brne	.+32     	; 0x1858e <strtol+0xa2>
   1856e:	cc c0       	rjmp	.+408    	; 0x18708 <strtol+0x21c>
   18570:	f8 01       	movw	r30, r16
   18572:	80 81       	ld	r24, Z
   18574:	88 37       	cpi	r24, 0x78	; 120
   18576:	19 f0       	breq	.+6      	; 0x1857e <strtol+0x92>
   18578:	88 35       	cpi	r24, 0x58	; 88
   1857a:	09 f0       	breq	.+2      	; 0x1857e <strtol+0x92>
   1857c:	bf c0       	rjmp	.+382    	; 0x186fc <strtol+0x210>
   1857e:	f8 01       	movw	r30, r16
   18580:	91 80       	ldd	r9, Z+1	; 0x01
   18582:	0e 5f       	subi	r16, 0xFE	; 254
   18584:	1f 4f       	sbci	r17, 0xFF	; 255
   18586:	f2 e0       	ldi	r31, 0x02	; 2
   18588:	8f 2a       	or	r8, r31
   1858a:	c0 e1       	ldi	r28, 0x10	; 16
   1858c:	d0 e0       	ldi	r29, 0x00	; 0
   1858e:	c8 30       	cpi	r28, 0x08	; 8
   18590:	d1 05       	cpc	r29, r1
   18592:	d9 f0       	breq	.+54     	; 0x185ca <strtol+0xde>
   18594:	24 f4       	brge	.+8      	; 0x1859e <strtol+0xb2>
   18596:	c2 30       	cpi	r28, 0x02	; 2
   18598:	d1 05       	cpc	r29, r1
   1859a:	f9 f4       	brne	.+62     	; 0x185da <strtol+0xee>
   1859c:	07 c0       	rjmp	.+14     	; 0x185ac <strtol+0xc0>
   1859e:	ca 30       	cpi	r28, 0x0A	; 10
   185a0:	d1 05       	cpc	r29, r1
   185a2:	51 f0       	breq	.+20     	; 0x185b8 <strtol+0xcc>
   185a4:	c0 31       	cpi	r28, 0x10	; 16
   185a6:	d1 05       	cpc	r29, r1
   185a8:	c1 f4       	brne	.+48     	; 0x185da <strtol+0xee>
   185aa:	24 c0       	rjmp	.+72     	; 0x185f4 <strtol+0x108>
   185ac:	c1 2c       	mov	r12, r1
   185ae:	d1 2c       	mov	r13, r1
   185b0:	e1 2c       	mov	r14, r1
   185b2:	40 e4       	ldi	r20, 0x40	; 64
   185b4:	f4 2e       	mov	r15, r20
   185b6:	23 c0       	rjmp	.+70     	; 0x185fe <strtol+0x112>
   185b8:	ca e0       	ldi	r28, 0x0A	; 10
   185ba:	d0 e0       	ldi	r29, 0x00	; 0
   185bc:	3c ec       	ldi	r19, 0xCC	; 204
   185be:	c3 2e       	mov	r12, r19
   185c0:	dc 2c       	mov	r13, r12
   185c2:	ec 2c       	mov	r14, r12
   185c4:	3c e0       	ldi	r19, 0x0C	; 12
   185c6:	f3 2e       	mov	r15, r19
   185c8:	1a c0       	rjmp	.+52     	; 0x185fe <strtol+0x112>
   185ca:	c8 e0       	ldi	r28, 0x08	; 8
   185cc:	d0 e0       	ldi	r29, 0x00	; 0
   185ce:	c1 2c       	mov	r12, r1
   185d0:	d1 2c       	mov	r13, r1
   185d2:	e1 2c       	mov	r14, r1
   185d4:	20 e1       	ldi	r18, 0x10	; 16
   185d6:	f2 2e       	mov	r15, r18
   185d8:	12 c0       	rjmp	.+36     	; 0x185fe <strtol+0x112>
   185da:	9e 01       	movw	r18, r28
   185dc:	44 27       	eor	r20, r20
   185de:	37 fd       	sbrc	r19, 7
   185e0:	40 95       	com	r20
   185e2:	54 2f       	mov	r21, r20
   185e4:	60 e0       	ldi	r22, 0x00	; 0
   185e6:	70 e0       	ldi	r23, 0x00	; 0
   185e8:	80 e0       	ldi	r24, 0x00	; 0
   185ea:	90 e8       	ldi	r25, 0x80	; 128
   185ec:	b8 dd       	rcall	.-1168   	; 0x1815e <__udivmodsi4>
   185ee:	69 01       	movw	r12, r18
   185f0:	7a 01       	movw	r14, r20
   185f2:	05 c0       	rjmp	.+10     	; 0x185fe <strtol+0x112>
   185f4:	c1 2c       	mov	r12, r1
   185f6:	d1 2c       	mov	r13, r1
   185f8:	e1 2c       	mov	r14, r1
   185fa:	98 e0       	ldi	r25, 0x08	; 8
   185fc:	f9 2e       	mov	r15, r25
   185fe:	40 e0       	ldi	r20, 0x00	; 0
   18600:	60 e0       	ldi	r22, 0x00	; 0
   18602:	70 e0       	ldi	r23, 0x00	; 0
   18604:	cb 01       	movw	r24, r22
   18606:	2e 01       	movw	r4, r28
   18608:	66 24       	eor	r6, r6
   1860a:	57 fc       	sbrc	r5, 7
   1860c:	60 94       	com	r6
   1860e:	76 2c       	mov	r7, r6
   18610:	e9 2d       	mov	r30, r9
   18612:	e0 53       	subi	r30, 0x30	; 48
   18614:	ea 30       	cpi	r30, 0x0A	; 10
   18616:	60 f0       	brcs	.+24     	; 0x18630 <strtol+0x144>
   18618:	29 2d       	mov	r18, r9
   1861a:	21 54       	subi	r18, 0x41	; 65
   1861c:	2a 31       	cpi	r18, 0x1A	; 26
   1861e:	10 f4       	brcc	.+4      	; 0x18624 <strtol+0x138>
   18620:	e7 50       	subi	r30, 0x07	; 7
   18622:	06 c0       	rjmp	.+12     	; 0x18630 <strtol+0x144>
   18624:	29 2d       	mov	r18, r9
   18626:	21 56       	subi	r18, 0x61	; 97
   18628:	2a 31       	cpi	r18, 0x1A	; 26
   1862a:	20 f5       	brcc	.+72     	; 0x18674 <strtol+0x188>
   1862c:	e9 2d       	mov	r30, r9
   1862e:	e7 55       	subi	r30, 0x57	; 87
   18630:	2e 2f       	mov	r18, r30
   18632:	30 e0       	ldi	r19, 0x00	; 0
   18634:	2c 17       	cp	r18, r28
   18636:	3d 07       	cpc	r19, r29
   18638:	ec f4       	brge	.+58     	; 0x18674 <strtol+0x188>
   1863a:	47 fd       	sbrc	r20, 7
   1863c:	17 c0       	rjmp	.+46     	; 0x1866c <strtol+0x180>
   1863e:	c6 16       	cp	r12, r22
   18640:	d7 06       	cpc	r13, r23
   18642:	e8 06       	cpc	r14, r24
   18644:	f9 06       	cpc	r15, r25
   18646:	78 f0       	brcs	.+30     	; 0x18666 <strtol+0x17a>
   18648:	9b 01       	movw	r18, r22
   1864a:	ac 01       	movw	r20, r24
   1864c:	c3 01       	movw	r24, r6
   1864e:	b2 01       	movw	r22, r4
   18650:	64 dd       	rcall	.-1336   	; 0x1811a <__mulsi3>
   18652:	6e 0f       	add	r22, r30
   18654:	71 1d       	adc	r23, r1
   18656:	81 1d       	adc	r24, r1
   18658:	91 1d       	adc	r25, r1
   1865a:	61 30       	cpi	r22, 0x01	; 1
   1865c:	71 05       	cpc	r23, r1
   1865e:	81 05       	cpc	r24, r1
   18660:	20 e8       	ldi	r18, 0x80	; 128
   18662:	92 07       	cpc	r25, r18
   18664:	10 f0       	brcs	.+4      	; 0x1866a <strtol+0x17e>
   18666:	4f ef       	ldi	r20, 0xFF	; 255
   18668:	01 c0       	rjmp	.+2      	; 0x1866c <strtol+0x180>
   1866a:	41 e0       	ldi	r20, 0x01	; 1
   1866c:	f8 01       	movw	r30, r16
   1866e:	91 90       	ld	r9, Z+
   18670:	8f 01       	movw	r16, r30
   18672:	ce cf       	rjmp	.-100    	; 0x18610 <strtol+0x124>
   18674:	a1 14       	cp	r10, r1
   18676:	b1 04       	cpc	r11, r1
   18678:	81 f0       	breq	.+32     	; 0x1869a <strtol+0x1ae>
   1867a:	44 23       	and	r20, r20
   1867c:	31 f0       	breq	.+12     	; 0x1868a <strtol+0x19e>
   1867e:	01 50       	subi	r16, 0x01	; 1
   18680:	11 09       	sbc	r17, r1
   18682:	f5 01       	movw	r30, r10
   18684:	11 83       	std	Z+1, r17	; 0x01
   18686:	00 83       	st	Z, r16
   18688:	08 c0       	rjmp	.+16     	; 0x1869a <strtol+0x1ae>
   1868a:	81 fe       	sbrs	r8, 1
   1868c:	1a c0       	rjmp	.+52     	; 0x186c2 <strtol+0x1d6>
   1868e:	02 50       	subi	r16, 0x02	; 2
   18690:	11 09       	sbc	r17, r1
   18692:	f5 01       	movw	r30, r10
   18694:	11 83       	std	Z+1, r17	; 0x01
   18696:	00 83       	st	Z, r16
   18698:	14 c0       	rjmp	.+40     	; 0x186c2 <strtol+0x1d6>
   1869a:	47 ff       	sbrs	r20, 7
   1869c:	12 c0       	rjmp	.+36     	; 0x186c2 <strtol+0x1d6>
   1869e:	80 fe       	sbrs	r8, 0
   186a0:	05 c0       	rjmp	.+10     	; 0x186ac <strtol+0x1c0>
   186a2:	60 e0       	ldi	r22, 0x00	; 0
   186a4:	70 e0       	ldi	r23, 0x00	; 0
   186a6:	80 e0       	ldi	r24, 0x00	; 0
   186a8:	90 e8       	ldi	r25, 0x80	; 128
   186aa:	04 c0       	rjmp	.+8      	; 0x186b4 <strtol+0x1c8>
   186ac:	6f ef       	ldi	r22, 0xFF	; 255
   186ae:	7f ef       	ldi	r23, 0xFF	; 255
   186b0:	8f ef       	ldi	r24, 0xFF	; 255
   186b2:	9f e7       	ldi	r25, 0x7F	; 127
   186b4:	22 e2       	ldi	r18, 0x22	; 34
   186b6:	30 e0       	ldi	r19, 0x00	; 0
   186b8:	30 93 61 12 	sts	0x1261, r19
   186bc:	20 93 60 12 	sts	0x1260, r18
   186c0:	16 c0       	rjmp	.+44     	; 0x186ee <strtol+0x202>
   186c2:	80 fe       	sbrs	r8, 0
   186c4:	08 c0       	rjmp	.+16     	; 0x186d6 <strtol+0x1ea>
   186c6:	90 95       	com	r25
   186c8:	80 95       	com	r24
   186ca:	70 95       	com	r23
   186cc:	61 95       	neg	r22
   186ce:	7f 4f       	sbci	r23, 0xFF	; 255
   186d0:	8f 4f       	sbci	r24, 0xFF	; 255
   186d2:	9f 4f       	sbci	r25, 0xFF	; 255
   186d4:	0c c0       	rjmp	.+24     	; 0x186ee <strtol+0x202>
   186d6:	97 ff       	sbrs	r25, 7
   186d8:	0a c0       	rjmp	.+20     	; 0x186ee <strtol+0x202>
   186da:	82 e2       	ldi	r24, 0x22	; 34
   186dc:	90 e0       	ldi	r25, 0x00	; 0
   186de:	90 93 61 12 	sts	0x1261, r25
   186e2:	80 93 60 12 	sts	0x1260, r24
   186e6:	6f ef       	ldi	r22, 0xFF	; 255
   186e8:	7f ef       	ldi	r23, 0xFF	; 255
   186ea:	8f ef       	ldi	r24, 0xFF	; 255
   186ec:	9f e7       	ldi	r25, 0x7F	; 127
   186ee:	8b 01       	movw	r16, r22
   186f0:	9c 01       	movw	r18, r24
   186f2:	12 c0       	rjmp	.+36     	; 0x18718 <strtol+0x22c>
   186f4:	00 e0       	ldi	r16, 0x00	; 0
   186f6:	10 e0       	ldi	r17, 0x00	; 0
   186f8:	98 01       	movw	r18, r16
   186fa:	0e c0       	rjmp	.+28     	; 0x18718 <strtol+0x22c>
   186fc:	80 e3       	ldi	r24, 0x30	; 48
   186fe:	98 2e       	mov	r9, r24
   18700:	20 97       	sbiw	r28, 0x00	; 0
   18702:	09 f4       	brne	.+2      	; 0x18706 <strtol+0x21a>
   18704:	62 cf       	rjmp	.-316    	; 0x185ca <strtol+0xde>
   18706:	43 cf       	rjmp	.-378    	; 0x1858e <strtol+0xa2>
   18708:	f0 e3       	ldi	r31, 0x30	; 48
   1870a:	9f 12       	cpse	r9, r31
   1870c:	40 cf       	rjmp	.-384    	; 0x1858e <strtol+0xa2>
   1870e:	30 cf       	rjmp	.-416    	; 0x18570 <strtol+0x84>
   18710:	20 e3       	ldi	r18, 0x30	; 48
   18712:	92 12       	cpse	r9, r18
   18714:	51 cf       	rjmp	.-350    	; 0x185b8 <strtol+0xcc>
   18716:	2c cf       	rjmp	.-424    	; 0x18570 <strtol+0x84>
   18718:	b8 01       	movw	r22, r16
   1871a:	c9 01       	movw	r24, r18
   1871c:	df 91       	pop	r29
   1871e:	cf 91       	pop	r28
   18720:	1f 91       	pop	r17
   18722:	0f 91       	pop	r16
   18724:	ff 90       	pop	r15
   18726:	ef 90       	pop	r14
   18728:	df 90       	pop	r13
   1872a:	cf 90       	pop	r12
   1872c:	bf 90       	pop	r11
   1872e:	af 90       	pop	r10
   18730:	9f 90       	pop	r9
   18732:	8f 90       	pop	r8
   18734:	7f 90       	pop	r7
   18736:	6f 90       	pop	r6
   18738:	5f 90       	pop	r5
   1873a:	4f 90       	pop	r4
   1873c:	08 95       	ret

0001873e <isspace>:
   1873e:	91 11       	cpse	r25, r1
   18740:	d5 c2       	rjmp	.+1450   	; 0x18cec <__ctype_isfalse>
   18742:	80 32       	cpi	r24, 0x20	; 32
   18744:	19 f0       	breq	.+6      	; 0x1874c <isspace+0xe>
   18746:	89 50       	subi	r24, 0x09	; 9
   18748:	85 50       	subi	r24, 0x05	; 5
   1874a:	d0 f7       	brcc	.-12     	; 0x18740 <isspace+0x2>
   1874c:	08 95       	ret

0001874e <tolower>:
   1874e:	91 11       	cpse	r25, r1
   18750:	08 95       	ret
   18752:	81 54       	subi	r24, 0x41	; 65
   18754:	8a 51       	subi	r24, 0x1A	; 26
   18756:	08 f4       	brcc	.+2      	; 0x1875a <tolower+0xc>
   18758:	80 5e       	subi	r24, 0xE0	; 224
   1875a:	85 5a       	subi	r24, 0xA5	; 165
   1875c:	08 95       	ret

0001875e <strcpy_P>:
   1875e:	fb 01       	movw	r30, r22
   18760:	dc 01       	movw	r26, r24
   18762:	05 90       	lpm	r0, Z+
   18764:	0d 92       	st	X+, r0
   18766:	00 20       	and	r0, r0
   18768:	e1 f7       	brne	.-8      	; 0x18762 <strcpy_P+0x4>
   1876a:	08 95       	ret

0001876c <__strlen_P>:
   1876c:	fc 01       	movw	r30, r24
   1876e:	05 90       	lpm	r0, Z+
   18770:	00 20       	and	r0, r0
   18772:	e9 f7       	brne	.-6      	; 0x1876e <__strlen_P+0x2>
   18774:	80 95       	com	r24
   18776:	90 95       	com	r25
   18778:	8e 0f       	add	r24, r30
   1877a:	9f 1f       	adc	r25, r31
   1877c:	08 95       	ret

0001877e <strncasecmp_P>:
   1877e:	fb 01       	movw	r30, r22
   18780:	dc 01       	movw	r26, r24
   18782:	41 50       	subi	r20, 0x01	; 1
   18784:	50 40       	sbci	r21, 0x00	; 0
   18786:	88 f0       	brcs	.+34     	; 0x187aa <strncasecmp_P+0x2c>
   18788:	8d 91       	ld	r24, X+
   1878a:	81 34       	cpi	r24, 0x41	; 65
   1878c:	1c f0       	brlt	.+6      	; 0x18794 <strncasecmp_P+0x16>
   1878e:	8b 35       	cpi	r24, 0x5B	; 91
   18790:	0c f4       	brge	.+2      	; 0x18794 <strncasecmp_P+0x16>
   18792:	80 5e       	subi	r24, 0xE0	; 224
   18794:	65 91       	lpm	r22, Z+
   18796:	61 34       	cpi	r22, 0x41	; 65
   18798:	1c f0       	brlt	.+6      	; 0x187a0 <strncasecmp_P+0x22>
   1879a:	6b 35       	cpi	r22, 0x5B	; 91
   1879c:	0c f4       	brge	.+2      	; 0x187a0 <strncasecmp_P+0x22>
   1879e:	60 5e       	subi	r22, 0xE0	; 224
   187a0:	86 1b       	sub	r24, r22
   187a2:	61 11       	cpse	r22, r1
   187a4:	71 f3       	breq	.-36     	; 0x18782 <strncasecmp_P+0x4>
   187a6:	99 0b       	sbc	r25, r25
   187a8:	08 95       	ret
   187aa:	88 1b       	sub	r24, r24
   187ac:	fc cf       	rjmp	.-8      	; 0x187a6 <strncasecmp_P+0x28>

000187ae <strncpy_P>:
   187ae:	fb 01       	movw	r30, r22
   187b0:	dc 01       	movw	r26, r24
   187b2:	41 50       	subi	r20, 0x01	; 1
   187b4:	50 40       	sbci	r21, 0x00	; 0
   187b6:	48 f0       	brcs	.+18     	; 0x187ca <strncpy_P+0x1c>
   187b8:	05 90       	lpm	r0, Z+
   187ba:	0d 92       	st	X+, r0
   187bc:	00 20       	and	r0, r0
   187be:	c9 f7       	brne	.-14     	; 0x187b2 <strncpy_P+0x4>
   187c0:	01 c0       	rjmp	.+2      	; 0x187c4 <strncpy_P+0x16>
   187c2:	1d 92       	st	X+, r1
   187c4:	41 50       	subi	r20, 0x01	; 1
   187c6:	50 40       	sbci	r21, 0x00	; 0
   187c8:	e0 f7       	brcc	.-8      	; 0x187c2 <strncpy_P+0x14>
   187ca:	08 95       	ret

000187cc <strstr_P>:
   187cc:	fb 01       	movw	r30, r22
   187ce:	55 91       	lpm	r21, Z+
   187d0:	55 23       	and	r21, r21
   187d2:	a9 f0       	breq	.+42     	; 0x187fe <strstr_P+0x32>
   187d4:	bf 01       	movw	r22, r30
   187d6:	dc 01       	movw	r26, r24
   187d8:	4d 91       	ld	r20, X+
   187da:	45 17       	cp	r20, r21
   187dc:	41 11       	cpse	r20, r1
   187de:	e1 f7       	brne	.-8      	; 0x187d8 <strstr_P+0xc>
   187e0:	59 f4       	brne	.+22     	; 0x187f8 <strstr_P+0x2c>
   187e2:	cd 01       	movw	r24, r26
   187e4:	05 90       	lpm	r0, Z+
   187e6:	00 20       	and	r0, r0
   187e8:	49 f0       	breq	.+18     	; 0x187fc <strstr_P+0x30>
   187ea:	4d 91       	ld	r20, X+
   187ec:	40 15       	cp	r20, r0
   187ee:	41 11       	cpse	r20, r1
   187f0:	c9 f3       	breq	.-14     	; 0x187e4 <strstr_P+0x18>
   187f2:	fb 01       	movw	r30, r22
   187f4:	41 11       	cpse	r20, r1
   187f6:	ef cf       	rjmp	.-34     	; 0x187d6 <strstr_P+0xa>
   187f8:	81 e0       	ldi	r24, 0x01	; 1
   187fa:	90 e0       	ldi	r25, 0x00	; 0
   187fc:	01 97       	sbiw	r24, 0x01	; 1
   187fe:	08 95       	ret

00018800 <memcmp>:
   18800:	fb 01       	movw	r30, r22
   18802:	dc 01       	movw	r26, r24
   18804:	04 c0       	rjmp	.+8      	; 0x1880e <memcmp+0xe>
   18806:	8d 91       	ld	r24, X+
   18808:	01 90       	ld	r0, Z+
   1880a:	80 19       	sub	r24, r0
   1880c:	21 f4       	brne	.+8      	; 0x18816 <memcmp+0x16>
   1880e:	41 50       	subi	r20, 0x01	; 1
   18810:	50 40       	sbci	r21, 0x00	; 0
   18812:	c8 f7       	brcc	.-14     	; 0x18806 <memcmp+0x6>
   18814:	88 1b       	sub	r24, r24
   18816:	99 0b       	sbc	r25, r25
   18818:	08 95       	ret

0001881a <memcpy>:
   1881a:	fb 01       	movw	r30, r22
   1881c:	dc 01       	movw	r26, r24
   1881e:	02 c0       	rjmp	.+4      	; 0x18824 <memcpy+0xa>
   18820:	01 90       	ld	r0, Z+
   18822:	0d 92       	st	X+, r0
   18824:	41 50       	subi	r20, 0x01	; 1
   18826:	50 40       	sbci	r21, 0x00	; 0
   18828:	d8 f7       	brcc	.-10     	; 0x18820 <memcpy+0x6>
   1882a:	08 95       	ret

0001882c <strcat>:
   1882c:	fb 01       	movw	r30, r22
   1882e:	dc 01       	movw	r26, r24
   18830:	0d 90       	ld	r0, X+
   18832:	00 20       	and	r0, r0
   18834:	e9 f7       	brne	.-6      	; 0x18830 <strcat+0x4>
   18836:	11 97       	sbiw	r26, 0x01	; 1
   18838:	01 90       	ld	r0, Z+
   1883a:	0d 92       	st	X+, r0
   1883c:	00 20       	and	r0, r0
   1883e:	e1 f7       	brne	.-8      	; 0x18838 <strcat+0xc>
   18840:	08 95       	ret

00018842 <strchr>:
   18842:	fc 01       	movw	r30, r24
   18844:	81 91       	ld	r24, Z+
   18846:	86 17       	cp	r24, r22
   18848:	21 f0       	breq	.+8      	; 0x18852 <strchr+0x10>
   1884a:	88 23       	and	r24, r24
   1884c:	d9 f7       	brne	.-10     	; 0x18844 <strchr+0x2>
   1884e:	99 27       	eor	r25, r25
   18850:	08 95       	ret
   18852:	31 97       	sbiw	r30, 0x01	; 1
   18854:	cf 01       	movw	r24, r30
   18856:	08 95       	ret

00018858 <strcpy>:
   18858:	fb 01       	movw	r30, r22
   1885a:	dc 01       	movw	r26, r24
   1885c:	01 90       	ld	r0, Z+
   1885e:	0d 92       	st	X+, r0
   18860:	00 20       	and	r0, r0
   18862:	e1 f7       	brne	.-8      	; 0x1885c <strcpy+0x4>
   18864:	08 95       	ret

00018866 <strncmp>:
   18866:	fb 01       	movw	r30, r22
   18868:	dc 01       	movw	r26, r24
   1886a:	41 50       	subi	r20, 0x01	; 1
   1886c:	50 40       	sbci	r21, 0x00	; 0
   1886e:	30 f0       	brcs	.+12     	; 0x1887c <strncmp+0x16>
   18870:	8d 91       	ld	r24, X+
   18872:	01 90       	ld	r0, Z+
   18874:	80 19       	sub	r24, r0
   18876:	19 f4       	brne	.+6      	; 0x1887e <strncmp+0x18>
   18878:	00 20       	and	r0, r0
   1887a:	b9 f7       	brne	.-18     	; 0x1886a <strncmp+0x4>
   1887c:	88 1b       	sub	r24, r24
   1887e:	99 0b       	sbc	r25, r25
   18880:	08 95       	ret

00018882 <strncpy>:
   18882:	fb 01       	movw	r30, r22
   18884:	dc 01       	movw	r26, r24
   18886:	41 50       	subi	r20, 0x01	; 1
   18888:	50 40       	sbci	r21, 0x00	; 0
   1888a:	48 f0       	brcs	.+18     	; 0x1889e <strncpy+0x1c>
   1888c:	01 90       	ld	r0, Z+
   1888e:	0d 92       	st	X+, r0
   18890:	00 20       	and	r0, r0
   18892:	c9 f7       	brne	.-14     	; 0x18886 <strncpy+0x4>
   18894:	01 c0       	rjmp	.+2      	; 0x18898 <strncpy+0x16>
   18896:	1d 92       	st	X+, r1
   18898:	41 50       	subi	r20, 0x01	; 1
   1889a:	50 40       	sbci	r21, 0x00	; 0
   1889c:	e0 f7       	brcc	.-8      	; 0x18896 <strncpy+0x14>
   1889e:	08 95       	ret

000188a0 <sprintf_P>:
   188a0:	0f 93       	push	r16
   188a2:	1f 93       	push	r17
   188a4:	cf 93       	push	r28
   188a6:	df 93       	push	r29
   188a8:	cd b7       	in	r28, 0x3d	; 61
   188aa:	de b7       	in	r29, 0x3e	; 62
   188ac:	2e 97       	sbiw	r28, 0x0e	; 14
   188ae:	0f b6       	in	r0, 0x3f	; 63
   188b0:	f8 94       	cli
   188b2:	de bf       	out	0x3e, r29	; 62
   188b4:	0f be       	out	0x3f, r0	; 63
   188b6:	cd bf       	out	0x3d, r28	; 61
   188b8:	0e 89       	ldd	r16, Y+22	; 0x16
   188ba:	1f 89       	ldd	r17, Y+23	; 0x17
   188bc:	8e e0       	ldi	r24, 0x0E	; 14
   188be:	8c 83       	std	Y+4, r24	; 0x04
   188c0:	1a 83       	std	Y+2, r17	; 0x02
   188c2:	09 83       	std	Y+1, r16	; 0x01
   188c4:	8f ef       	ldi	r24, 0xFF	; 255
   188c6:	9f e7       	ldi	r25, 0x7F	; 127
   188c8:	9e 83       	std	Y+6, r25	; 0x06
   188ca:	8d 83       	std	Y+5, r24	; 0x05
   188cc:	ce 01       	movw	r24, r28
   188ce:	4a 96       	adiw	r24, 0x1a	; 26
   188d0:	ac 01       	movw	r20, r24
   188d2:	68 8d       	ldd	r22, Y+24	; 0x18
   188d4:	79 8d       	ldd	r23, Y+25	; 0x19
   188d6:	ce 01       	movw	r24, r28
   188d8:	01 96       	adiw	r24, 0x01	; 1
   188da:	10 d0       	rcall	.+32     	; 0x188fc <vfprintf>
   188dc:	ef 81       	ldd	r30, Y+7	; 0x07
   188de:	f8 85       	ldd	r31, Y+8	; 0x08
   188e0:	e0 0f       	add	r30, r16
   188e2:	f1 1f       	adc	r31, r17
   188e4:	10 82       	st	Z, r1
   188e6:	2e 96       	adiw	r28, 0x0e	; 14
   188e8:	0f b6       	in	r0, 0x3f	; 63
   188ea:	f8 94       	cli
   188ec:	de bf       	out	0x3e, r29	; 62
   188ee:	0f be       	out	0x3f, r0	; 63
   188f0:	cd bf       	out	0x3d, r28	; 61
   188f2:	df 91       	pop	r29
   188f4:	cf 91       	pop	r28
   188f6:	1f 91       	pop	r17
   188f8:	0f 91       	pop	r16
   188fa:	08 95       	ret

000188fc <vfprintf>:
   188fc:	2f 92       	push	r2
   188fe:	3f 92       	push	r3
   18900:	4f 92       	push	r4
   18902:	5f 92       	push	r5
   18904:	6f 92       	push	r6
   18906:	7f 92       	push	r7
   18908:	8f 92       	push	r8
   1890a:	9f 92       	push	r9
   1890c:	af 92       	push	r10
   1890e:	bf 92       	push	r11
   18910:	cf 92       	push	r12
   18912:	df 92       	push	r13
   18914:	ef 92       	push	r14
   18916:	ff 92       	push	r15
   18918:	0f 93       	push	r16
   1891a:	1f 93       	push	r17
   1891c:	cf 93       	push	r28
   1891e:	df 93       	push	r29
   18920:	cd b7       	in	r28, 0x3d	; 61
   18922:	de b7       	in	r29, 0x3e	; 62
   18924:	2c 97       	sbiw	r28, 0x0c	; 12
   18926:	0f b6       	in	r0, 0x3f	; 63
   18928:	f8 94       	cli
   1892a:	de bf       	out	0x3e, r29	; 62
   1892c:	0f be       	out	0x3f, r0	; 63
   1892e:	cd bf       	out	0x3d, r28	; 61
   18930:	7c 01       	movw	r14, r24
   18932:	6b 01       	movw	r12, r22
   18934:	8a 01       	movw	r16, r20
   18936:	fc 01       	movw	r30, r24
   18938:	17 82       	std	Z+7, r1	; 0x07
   1893a:	16 82       	std	Z+6, r1	; 0x06
   1893c:	83 81       	ldd	r24, Z+3	; 0x03
   1893e:	81 ff       	sbrs	r24, 1
   18940:	b9 c1       	rjmp	.+882    	; 0x18cb4 <vfprintf+0x3b8>
   18942:	88 24       	eor	r8, r8
   18944:	83 94       	inc	r8
   18946:	91 2c       	mov	r9, r1
   18948:	8c 0e       	add	r8, r28
   1894a:	9d 1e       	adc	r9, r29
   1894c:	f7 01       	movw	r30, r14
   1894e:	93 81       	ldd	r25, Z+3	; 0x03
   18950:	f6 01       	movw	r30, r12
   18952:	93 fd       	sbrc	r25, 3
   18954:	85 91       	lpm	r24, Z+
   18956:	93 ff       	sbrs	r25, 3
   18958:	81 91       	ld	r24, Z+
   1895a:	6f 01       	movw	r12, r30
   1895c:	88 23       	and	r24, r24
   1895e:	09 f4       	brne	.+2      	; 0x18962 <vfprintf+0x66>
   18960:	a5 c1       	rjmp	.+842    	; 0x18cac <vfprintf+0x3b0>
   18962:	85 32       	cpi	r24, 0x25	; 37
   18964:	39 f4       	brne	.+14     	; 0x18974 <vfprintf+0x78>
   18966:	93 fd       	sbrc	r25, 3
   18968:	85 91       	lpm	r24, Z+
   1896a:	93 ff       	sbrs	r25, 3
   1896c:	81 91       	ld	r24, Z+
   1896e:	6f 01       	movw	r12, r30
   18970:	85 32       	cpi	r24, 0x25	; 37
   18972:	21 f4       	brne	.+8      	; 0x1897c <vfprintf+0x80>
   18974:	b7 01       	movw	r22, r14
   18976:	90 e0       	ldi	r25, 0x00	; 0
   18978:	d2 d1       	rcall	.+932    	; 0x18d1e <fputc>
   1897a:	e8 cf       	rjmp	.-48     	; 0x1894c <vfprintf+0x50>
   1897c:	51 2c       	mov	r5, r1
   1897e:	31 2c       	mov	r3, r1
   18980:	20 e0       	ldi	r18, 0x00	; 0
   18982:	20 32       	cpi	r18, 0x20	; 32
   18984:	a8 f4       	brcc	.+42     	; 0x189b0 <vfprintf+0xb4>
   18986:	8b 32       	cpi	r24, 0x2B	; 43
   18988:	61 f0       	breq	.+24     	; 0x189a2 <vfprintf+0xa6>
   1898a:	28 f4       	brcc	.+10     	; 0x18996 <vfprintf+0x9a>
   1898c:	80 32       	cpi	r24, 0x20	; 32
   1898e:	51 f0       	breq	.+20     	; 0x189a4 <vfprintf+0xa8>
   18990:	83 32       	cpi	r24, 0x23	; 35
   18992:	71 f4       	brne	.+28     	; 0x189b0 <vfprintf+0xb4>
   18994:	0b c0       	rjmp	.+22     	; 0x189ac <vfprintf+0xb0>
   18996:	8d 32       	cpi	r24, 0x2D	; 45
   18998:	39 f0       	breq	.+14     	; 0x189a8 <vfprintf+0xac>
   1899a:	80 33       	cpi	r24, 0x30	; 48
   1899c:	49 f4       	brne	.+18     	; 0x189b0 <vfprintf+0xb4>
   1899e:	21 60       	ori	r18, 0x01	; 1
   189a0:	28 c0       	rjmp	.+80     	; 0x189f2 <vfprintf+0xf6>
   189a2:	22 60       	ori	r18, 0x02	; 2
   189a4:	24 60       	ori	r18, 0x04	; 4
   189a6:	25 c0       	rjmp	.+74     	; 0x189f2 <vfprintf+0xf6>
   189a8:	28 60       	ori	r18, 0x08	; 8
   189aa:	23 c0       	rjmp	.+70     	; 0x189f2 <vfprintf+0xf6>
   189ac:	20 61       	ori	r18, 0x10	; 16
   189ae:	21 c0       	rjmp	.+66     	; 0x189f2 <vfprintf+0xf6>
   189b0:	27 fd       	sbrc	r18, 7
   189b2:	27 c0       	rjmp	.+78     	; 0x18a02 <vfprintf+0x106>
   189b4:	38 2f       	mov	r19, r24
   189b6:	30 53       	subi	r19, 0x30	; 48
   189b8:	3a 30       	cpi	r19, 0x0A	; 10
   189ba:	78 f4       	brcc	.+30     	; 0x189da <vfprintf+0xde>
   189bc:	26 ff       	sbrs	r18, 6
   189be:	06 c0       	rjmp	.+12     	; 0x189cc <vfprintf+0xd0>
   189c0:	fa e0       	ldi	r31, 0x0A	; 10
   189c2:	5f 9e       	mul	r5, r31
   189c4:	30 0d       	add	r19, r0
   189c6:	11 24       	eor	r1, r1
   189c8:	53 2e       	mov	r5, r19
   189ca:	13 c0       	rjmp	.+38     	; 0x189f2 <vfprintf+0xf6>
   189cc:	8a e0       	ldi	r24, 0x0A	; 10
   189ce:	38 9e       	mul	r3, r24
   189d0:	30 0d       	add	r19, r0
   189d2:	11 24       	eor	r1, r1
   189d4:	33 2e       	mov	r3, r19
   189d6:	20 62       	ori	r18, 0x20	; 32
   189d8:	0c c0       	rjmp	.+24     	; 0x189f2 <vfprintf+0xf6>
   189da:	8e 32       	cpi	r24, 0x2E	; 46
   189dc:	21 f4       	brne	.+8      	; 0x189e6 <vfprintf+0xea>
   189de:	26 fd       	sbrc	r18, 6
   189e0:	65 c1       	rjmp	.+714    	; 0x18cac <vfprintf+0x3b0>
   189e2:	20 64       	ori	r18, 0x40	; 64
   189e4:	06 c0       	rjmp	.+12     	; 0x189f2 <vfprintf+0xf6>
   189e6:	8c 36       	cpi	r24, 0x6C	; 108
   189e8:	11 f4       	brne	.+4      	; 0x189ee <vfprintf+0xf2>
   189ea:	20 68       	ori	r18, 0x80	; 128
   189ec:	02 c0       	rjmp	.+4      	; 0x189f2 <vfprintf+0xf6>
   189ee:	88 36       	cpi	r24, 0x68	; 104
   189f0:	41 f4       	brne	.+16     	; 0x18a02 <vfprintf+0x106>
   189f2:	f6 01       	movw	r30, r12
   189f4:	93 fd       	sbrc	r25, 3
   189f6:	85 91       	lpm	r24, Z+
   189f8:	93 ff       	sbrs	r25, 3
   189fa:	81 91       	ld	r24, Z+
   189fc:	6f 01       	movw	r12, r30
   189fe:	81 11       	cpse	r24, r1
   18a00:	c0 cf       	rjmp	.-128    	; 0x18982 <vfprintf+0x86>
   18a02:	98 2f       	mov	r25, r24
   18a04:	95 54       	subi	r25, 0x45	; 69
   18a06:	93 30       	cpi	r25, 0x03	; 3
   18a08:	18 f0       	brcs	.+6      	; 0x18a10 <vfprintf+0x114>
   18a0a:	90 52       	subi	r25, 0x20	; 32
   18a0c:	93 30       	cpi	r25, 0x03	; 3
   18a0e:	28 f4       	brcc	.+10     	; 0x18a1a <vfprintf+0x11e>
   18a10:	0c 5f       	subi	r16, 0xFC	; 252
   18a12:	1f 4f       	sbci	r17, 0xFF	; 255
   18a14:	ff e3       	ldi	r31, 0x3F	; 63
   18a16:	f9 83       	std	Y+1, r31	; 0x01
   18a18:	0d c0       	rjmp	.+26     	; 0x18a34 <vfprintf+0x138>
   18a1a:	83 36       	cpi	r24, 0x63	; 99
   18a1c:	31 f0       	breq	.+12     	; 0x18a2a <vfprintf+0x12e>
   18a1e:	83 37       	cpi	r24, 0x73	; 115
   18a20:	71 f0       	breq	.+28     	; 0x18a3e <vfprintf+0x142>
   18a22:	83 35       	cpi	r24, 0x53	; 83
   18a24:	09 f0       	breq	.+2      	; 0x18a28 <vfprintf+0x12c>
   18a26:	5a c0       	rjmp	.+180    	; 0x18adc <vfprintf+0x1e0>
   18a28:	22 c0       	rjmp	.+68     	; 0x18a6e <vfprintf+0x172>
   18a2a:	f8 01       	movw	r30, r16
   18a2c:	80 81       	ld	r24, Z
   18a2e:	89 83       	std	Y+1, r24	; 0x01
   18a30:	0e 5f       	subi	r16, 0xFE	; 254
   18a32:	1f 4f       	sbci	r17, 0xFF	; 255
   18a34:	44 24       	eor	r4, r4
   18a36:	43 94       	inc	r4
   18a38:	51 2c       	mov	r5, r1
   18a3a:	54 01       	movw	r10, r8
   18a3c:	14 c0       	rjmp	.+40     	; 0x18a66 <vfprintf+0x16a>
   18a3e:	38 01       	movw	r6, r16
   18a40:	f2 e0       	ldi	r31, 0x02	; 2
   18a42:	6f 0e       	add	r6, r31
   18a44:	71 1c       	adc	r7, r1
   18a46:	f8 01       	movw	r30, r16
   18a48:	a0 80       	ld	r10, Z
   18a4a:	b1 80       	ldd	r11, Z+1	; 0x01
   18a4c:	26 ff       	sbrs	r18, 6
   18a4e:	03 c0       	rjmp	.+6      	; 0x18a56 <vfprintf+0x15a>
   18a50:	65 2d       	mov	r22, r5
   18a52:	70 e0       	ldi	r23, 0x00	; 0
   18a54:	02 c0       	rjmp	.+4      	; 0x18a5a <vfprintf+0x15e>
   18a56:	6f ef       	ldi	r22, 0xFF	; 255
   18a58:	7f ef       	ldi	r23, 0xFF	; 255
   18a5a:	c5 01       	movw	r24, r10
   18a5c:	2c 87       	std	Y+12, r18	; 0x0c
   18a5e:	54 d1       	rcall	.+680    	; 0x18d08 <strnlen>
   18a60:	2c 01       	movw	r4, r24
   18a62:	83 01       	movw	r16, r6
   18a64:	2c 85       	ldd	r18, Y+12	; 0x0c
   18a66:	6f e7       	ldi	r22, 0x7F	; 127
   18a68:	26 2e       	mov	r2, r22
   18a6a:	22 22       	and	r2, r18
   18a6c:	17 c0       	rjmp	.+46     	; 0x18a9c <vfprintf+0x1a0>
   18a6e:	38 01       	movw	r6, r16
   18a70:	f2 e0       	ldi	r31, 0x02	; 2
   18a72:	6f 0e       	add	r6, r31
   18a74:	71 1c       	adc	r7, r1
   18a76:	f8 01       	movw	r30, r16
   18a78:	a0 80       	ld	r10, Z
   18a7a:	b1 80       	ldd	r11, Z+1	; 0x01
   18a7c:	26 ff       	sbrs	r18, 6
   18a7e:	03 c0       	rjmp	.+6      	; 0x18a86 <vfprintf+0x18a>
   18a80:	65 2d       	mov	r22, r5
   18a82:	70 e0       	ldi	r23, 0x00	; 0
   18a84:	02 c0       	rjmp	.+4      	; 0x18a8a <vfprintf+0x18e>
   18a86:	6f ef       	ldi	r22, 0xFF	; 255
   18a88:	7f ef       	ldi	r23, 0xFF	; 255
   18a8a:	c5 01       	movw	r24, r10
   18a8c:	2c 87       	std	Y+12, r18	; 0x0c
   18a8e:	31 d1       	rcall	.+610    	; 0x18cf2 <strnlen_P>
   18a90:	2c 01       	movw	r4, r24
   18a92:	2c 85       	ldd	r18, Y+12	; 0x0c
   18a94:	50 e8       	ldi	r21, 0x80	; 128
   18a96:	25 2e       	mov	r2, r21
   18a98:	22 2a       	or	r2, r18
   18a9a:	83 01       	movw	r16, r6
   18a9c:	23 fc       	sbrc	r2, 3
   18a9e:	1a c0       	rjmp	.+52     	; 0x18ad4 <vfprintf+0x1d8>
   18aa0:	05 c0       	rjmp	.+10     	; 0x18aac <vfprintf+0x1b0>
   18aa2:	b7 01       	movw	r22, r14
   18aa4:	80 e2       	ldi	r24, 0x20	; 32
   18aa6:	90 e0       	ldi	r25, 0x00	; 0
   18aa8:	3a d1       	rcall	.+628    	; 0x18d1e <fputc>
   18aaa:	3a 94       	dec	r3
   18aac:	83 2d       	mov	r24, r3
   18aae:	90 e0       	ldi	r25, 0x00	; 0
   18ab0:	48 16       	cp	r4, r24
   18ab2:	59 06       	cpc	r5, r25
   18ab4:	b0 f3       	brcs	.-20     	; 0x18aa2 <vfprintf+0x1a6>
   18ab6:	0e c0       	rjmp	.+28     	; 0x18ad4 <vfprintf+0x1d8>
   18ab8:	f5 01       	movw	r30, r10
   18aba:	27 fc       	sbrc	r2, 7
   18abc:	85 91       	lpm	r24, Z+
   18abe:	27 fe       	sbrs	r2, 7
   18ac0:	81 91       	ld	r24, Z+
   18ac2:	5f 01       	movw	r10, r30
   18ac4:	b7 01       	movw	r22, r14
   18ac6:	90 e0       	ldi	r25, 0x00	; 0
   18ac8:	2a d1       	rcall	.+596    	; 0x18d1e <fputc>
   18aca:	31 10       	cpse	r3, r1
   18acc:	3a 94       	dec	r3
   18ace:	f1 e0       	ldi	r31, 0x01	; 1
   18ad0:	4f 1a       	sub	r4, r31
   18ad2:	51 08       	sbc	r5, r1
   18ad4:	41 14       	cp	r4, r1
   18ad6:	51 04       	cpc	r5, r1
   18ad8:	79 f7       	brne	.-34     	; 0x18ab8 <vfprintf+0x1bc>
   18ada:	e5 c0       	rjmp	.+458    	; 0x18ca6 <vfprintf+0x3aa>
   18adc:	84 36       	cpi	r24, 0x64	; 100
   18ade:	11 f0       	breq	.+4      	; 0x18ae4 <vfprintf+0x1e8>
   18ae0:	89 36       	cpi	r24, 0x69	; 105
   18ae2:	39 f5       	brne	.+78     	; 0x18b32 <vfprintf+0x236>
   18ae4:	f8 01       	movw	r30, r16
   18ae6:	27 ff       	sbrs	r18, 7
   18ae8:	07 c0       	rjmp	.+14     	; 0x18af8 <vfprintf+0x1fc>
   18aea:	60 81       	ld	r22, Z
   18aec:	71 81       	ldd	r23, Z+1	; 0x01
   18aee:	82 81       	ldd	r24, Z+2	; 0x02
   18af0:	93 81       	ldd	r25, Z+3	; 0x03
   18af2:	0c 5f       	subi	r16, 0xFC	; 252
   18af4:	1f 4f       	sbci	r17, 0xFF	; 255
   18af6:	08 c0       	rjmp	.+16     	; 0x18b08 <vfprintf+0x20c>
   18af8:	60 81       	ld	r22, Z
   18afa:	71 81       	ldd	r23, Z+1	; 0x01
   18afc:	88 27       	eor	r24, r24
   18afe:	77 fd       	sbrc	r23, 7
   18b00:	80 95       	com	r24
   18b02:	98 2f       	mov	r25, r24
   18b04:	0e 5f       	subi	r16, 0xFE	; 254
   18b06:	1f 4f       	sbci	r17, 0xFF	; 255
   18b08:	4f e6       	ldi	r20, 0x6F	; 111
   18b0a:	b4 2e       	mov	r11, r20
   18b0c:	b2 22       	and	r11, r18
   18b0e:	97 ff       	sbrs	r25, 7
   18b10:	09 c0       	rjmp	.+18     	; 0x18b24 <vfprintf+0x228>
   18b12:	90 95       	com	r25
   18b14:	80 95       	com	r24
   18b16:	70 95       	com	r23
   18b18:	61 95       	neg	r22
   18b1a:	7f 4f       	sbci	r23, 0xFF	; 255
   18b1c:	8f 4f       	sbci	r24, 0xFF	; 255
   18b1e:	9f 4f       	sbci	r25, 0xFF	; 255
   18b20:	f0 e8       	ldi	r31, 0x80	; 128
   18b22:	bf 2a       	or	r11, r31
   18b24:	2a e0       	ldi	r18, 0x0A	; 10
   18b26:	30 e0       	ldi	r19, 0x00	; 0
   18b28:	a4 01       	movw	r20, r8
   18b2a:	25 d1       	rcall	.+586    	; 0x18d76 <__ultoa_invert>
   18b2c:	a8 2e       	mov	r10, r24
   18b2e:	a8 18       	sub	r10, r8
   18b30:	42 c0       	rjmp	.+132    	; 0x18bb6 <vfprintf+0x2ba>
   18b32:	85 37       	cpi	r24, 0x75	; 117
   18b34:	31 f4       	brne	.+12     	; 0x18b42 <vfprintf+0x246>
   18b36:	3f ee       	ldi	r19, 0xEF	; 239
   18b38:	b3 2e       	mov	r11, r19
   18b3a:	b2 22       	and	r11, r18
   18b3c:	2a e0       	ldi	r18, 0x0A	; 10
   18b3e:	30 e0       	ldi	r19, 0x00	; 0
   18b40:	24 c0       	rjmp	.+72     	; 0x18b8a <vfprintf+0x28e>
   18b42:	99 ef       	ldi	r25, 0xF9	; 249
   18b44:	b9 2e       	mov	r11, r25
   18b46:	b2 22       	and	r11, r18
   18b48:	8f 36       	cpi	r24, 0x6F	; 111
   18b4a:	b9 f0       	breq	.+46     	; 0x18b7a <vfprintf+0x27e>
   18b4c:	20 f4       	brcc	.+8      	; 0x18b56 <vfprintf+0x25a>
   18b4e:	88 35       	cpi	r24, 0x58	; 88
   18b50:	09 f0       	breq	.+2      	; 0x18b54 <vfprintf+0x258>
   18b52:	ac c0       	rjmp	.+344    	; 0x18cac <vfprintf+0x3b0>
   18b54:	0d c0       	rjmp	.+26     	; 0x18b70 <vfprintf+0x274>
   18b56:	80 37       	cpi	r24, 0x70	; 112
   18b58:	21 f0       	breq	.+8      	; 0x18b62 <vfprintf+0x266>
   18b5a:	88 37       	cpi	r24, 0x78	; 120
   18b5c:	09 f0       	breq	.+2      	; 0x18b60 <vfprintf+0x264>
   18b5e:	a6 c0       	rjmp	.+332    	; 0x18cac <vfprintf+0x3b0>
   18b60:	02 c0       	rjmp	.+4      	; 0x18b66 <vfprintf+0x26a>
   18b62:	20 e1       	ldi	r18, 0x10	; 16
   18b64:	b2 2a       	or	r11, r18
   18b66:	b4 fe       	sbrs	r11, 4
   18b68:	0b c0       	rjmp	.+22     	; 0x18b80 <vfprintf+0x284>
   18b6a:	84 e0       	ldi	r24, 0x04	; 4
   18b6c:	b8 2a       	or	r11, r24
   18b6e:	08 c0       	rjmp	.+16     	; 0x18b80 <vfprintf+0x284>
   18b70:	24 ff       	sbrs	r18, 4
   18b72:	09 c0       	rjmp	.+18     	; 0x18b86 <vfprintf+0x28a>
   18b74:	e6 e0       	ldi	r30, 0x06	; 6
   18b76:	be 2a       	or	r11, r30
   18b78:	06 c0       	rjmp	.+12     	; 0x18b86 <vfprintf+0x28a>
   18b7a:	28 e0       	ldi	r18, 0x08	; 8
   18b7c:	30 e0       	ldi	r19, 0x00	; 0
   18b7e:	05 c0       	rjmp	.+10     	; 0x18b8a <vfprintf+0x28e>
   18b80:	20 e1       	ldi	r18, 0x10	; 16
   18b82:	30 e0       	ldi	r19, 0x00	; 0
   18b84:	02 c0       	rjmp	.+4      	; 0x18b8a <vfprintf+0x28e>
   18b86:	20 e1       	ldi	r18, 0x10	; 16
   18b88:	32 e0       	ldi	r19, 0x02	; 2
   18b8a:	f8 01       	movw	r30, r16
   18b8c:	b7 fe       	sbrs	r11, 7
   18b8e:	07 c0       	rjmp	.+14     	; 0x18b9e <vfprintf+0x2a2>
   18b90:	60 81       	ld	r22, Z
   18b92:	71 81       	ldd	r23, Z+1	; 0x01
   18b94:	82 81       	ldd	r24, Z+2	; 0x02
   18b96:	93 81       	ldd	r25, Z+3	; 0x03
   18b98:	0c 5f       	subi	r16, 0xFC	; 252
   18b9a:	1f 4f       	sbci	r17, 0xFF	; 255
   18b9c:	06 c0       	rjmp	.+12     	; 0x18baa <vfprintf+0x2ae>
   18b9e:	60 81       	ld	r22, Z
   18ba0:	71 81       	ldd	r23, Z+1	; 0x01
   18ba2:	80 e0       	ldi	r24, 0x00	; 0
   18ba4:	90 e0       	ldi	r25, 0x00	; 0
   18ba6:	0e 5f       	subi	r16, 0xFE	; 254
   18ba8:	1f 4f       	sbci	r17, 0xFF	; 255
   18baa:	a4 01       	movw	r20, r8
   18bac:	e4 d0       	rcall	.+456    	; 0x18d76 <__ultoa_invert>
   18bae:	a8 2e       	mov	r10, r24
   18bb0:	a8 18       	sub	r10, r8
   18bb2:	ff e7       	ldi	r31, 0x7F	; 127
   18bb4:	bf 22       	and	r11, r31
   18bb6:	b6 fe       	sbrs	r11, 6
   18bb8:	0b c0       	rjmp	.+22     	; 0x18bd0 <vfprintf+0x2d4>
   18bba:	2b 2d       	mov	r18, r11
   18bbc:	2e 7f       	andi	r18, 0xFE	; 254
   18bbe:	a5 14       	cp	r10, r5
   18bc0:	50 f4       	brcc	.+20     	; 0x18bd6 <vfprintf+0x2da>
   18bc2:	b4 fe       	sbrs	r11, 4
   18bc4:	0a c0       	rjmp	.+20     	; 0x18bda <vfprintf+0x2de>
   18bc6:	b2 fc       	sbrc	r11, 2
   18bc8:	08 c0       	rjmp	.+16     	; 0x18bda <vfprintf+0x2de>
   18bca:	2b 2d       	mov	r18, r11
   18bcc:	2e 7e       	andi	r18, 0xEE	; 238
   18bce:	05 c0       	rjmp	.+10     	; 0x18bda <vfprintf+0x2de>
   18bd0:	7a 2c       	mov	r7, r10
   18bd2:	2b 2d       	mov	r18, r11
   18bd4:	03 c0       	rjmp	.+6      	; 0x18bdc <vfprintf+0x2e0>
   18bd6:	7a 2c       	mov	r7, r10
   18bd8:	01 c0       	rjmp	.+2      	; 0x18bdc <vfprintf+0x2e0>
   18bda:	75 2c       	mov	r7, r5
   18bdc:	24 ff       	sbrs	r18, 4
   18bde:	0d c0       	rjmp	.+26     	; 0x18bfa <vfprintf+0x2fe>
   18be0:	fe 01       	movw	r30, r28
   18be2:	ea 0d       	add	r30, r10
   18be4:	f1 1d       	adc	r31, r1
   18be6:	80 81       	ld	r24, Z
   18be8:	80 33       	cpi	r24, 0x30	; 48
   18bea:	11 f4       	brne	.+4      	; 0x18bf0 <vfprintf+0x2f4>
   18bec:	29 7e       	andi	r18, 0xE9	; 233
   18bee:	09 c0       	rjmp	.+18     	; 0x18c02 <vfprintf+0x306>
   18bf0:	22 ff       	sbrs	r18, 2
   18bf2:	06 c0       	rjmp	.+12     	; 0x18c00 <vfprintf+0x304>
   18bf4:	73 94       	inc	r7
   18bf6:	73 94       	inc	r7
   18bf8:	04 c0       	rjmp	.+8      	; 0x18c02 <vfprintf+0x306>
   18bfa:	82 2f       	mov	r24, r18
   18bfc:	86 78       	andi	r24, 0x86	; 134
   18bfe:	09 f0       	breq	.+2      	; 0x18c02 <vfprintf+0x306>
   18c00:	73 94       	inc	r7
   18c02:	23 fd       	sbrc	r18, 3
   18c04:	13 c0       	rjmp	.+38     	; 0x18c2c <vfprintf+0x330>
   18c06:	20 ff       	sbrs	r18, 0
   18c08:	0e c0       	rjmp	.+28     	; 0x18c26 <vfprintf+0x32a>
   18c0a:	5a 2c       	mov	r5, r10
   18c0c:	73 14       	cp	r7, r3
   18c0e:	58 f4       	brcc	.+22     	; 0x18c26 <vfprintf+0x32a>
   18c10:	53 0c       	add	r5, r3
   18c12:	57 18       	sub	r5, r7
   18c14:	73 2c       	mov	r7, r3
   18c16:	07 c0       	rjmp	.+14     	; 0x18c26 <vfprintf+0x32a>
   18c18:	b7 01       	movw	r22, r14
   18c1a:	80 e2       	ldi	r24, 0x20	; 32
   18c1c:	90 e0       	ldi	r25, 0x00	; 0
   18c1e:	2c 87       	std	Y+12, r18	; 0x0c
   18c20:	7e d0       	rcall	.+252    	; 0x18d1e <fputc>
   18c22:	73 94       	inc	r7
   18c24:	2c 85       	ldd	r18, Y+12	; 0x0c
   18c26:	73 14       	cp	r7, r3
   18c28:	b8 f3       	brcs	.-18     	; 0x18c18 <vfprintf+0x31c>
   18c2a:	04 c0       	rjmp	.+8      	; 0x18c34 <vfprintf+0x338>
   18c2c:	73 14       	cp	r7, r3
   18c2e:	10 f4       	brcc	.+4      	; 0x18c34 <vfprintf+0x338>
   18c30:	37 18       	sub	r3, r7
   18c32:	01 c0       	rjmp	.+2      	; 0x18c36 <vfprintf+0x33a>
   18c34:	31 2c       	mov	r3, r1
   18c36:	24 ff       	sbrs	r18, 4
   18c38:	11 c0       	rjmp	.+34     	; 0x18c5c <vfprintf+0x360>
   18c3a:	b7 01       	movw	r22, r14
   18c3c:	80 e3       	ldi	r24, 0x30	; 48
   18c3e:	90 e0       	ldi	r25, 0x00	; 0
   18c40:	2c 87       	std	Y+12, r18	; 0x0c
   18c42:	6d d0       	rcall	.+218    	; 0x18d1e <fputc>
   18c44:	2c 85       	ldd	r18, Y+12	; 0x0c
   18c46:	22 ff       	sbrs	r18, 2
   18c48:	1c c0       	rjmp	.+56     	; 0x18c82 <vfprintf+0x386>
   18c4a:	21 ff       	sbrs	r18, 1
   18c4c:	03 c0       	rjmp	.+6      	; 0x18c54 <vfprintf+0x358>
   18c4e:	88 e5       	ldi	r24, 0x58	; 88
   18c50:	90 e0       	ldi	r25, 0x00	; 0
   18c52:	02 c0       	rjmp	.+4      	; 0x18c58 <vfprintf+0x35c>
   18c54:	88 e7       	ldi	r24, 0x78	; 120
   18c56:	90 e0       	ldi	r25, 0x00	; 0
   18c58:	b7 01       	movw	r22, r14
   18c5a:	0c c0       	rjmp	.+24     	; 0x18c74 <vfprintf+0x378>
   18c5c:	82 2f       	mov	r24, r18
   18c5e:	86 78       	andi	r24, 0x86	; 134
   18c60:	81 f0       	breq	.+32     	; 0x18c82 <vfprintf+0x386>
   18c62:	21 fd       	sbrc	r18, 1
   18c64:	02 c0       	rjmp	.+4      	; 0x18c6a <vfprintf+0x36e>
   18c66:	80 e2       	ldi	r24, 0x20	; 32
   18c68:	01 c0       	rjmp	.+2      	; 0x18c6c <vfprintf+0x370>
   18c6a:	8b e2       	ldi	r24, 0x2B	; 43
   18c6c:	27 fd       	sbrc	r18, 7
   18c6e:	8d e2       	ldi	r24, 0x2D	; 45
   18c70:	b7 01       	movw	r22, r14
   18c72:	90 e0       	ldi	r25, 0x00	; 0
   18c74:	54 d0       	rcall	.+168    	; 0x18d1e <fputc>
   18c76:	05 c0       	rjmp	.+10     	; 0x18c82 <vfprintf+0x386>
   18c78:	b7 01       	movw	r22, r14
   18c7a:	80 e3       	ldi	r24, 0x30	; 48
   18c7c:	90 e0       	ldi	r25, 0x00	; 0
   18c7e:	4f d0       	rcall	.+158    	; 0x18d1e <fputc>
   18c80:	5a 94       	dec	r5
   18c82:	a5 14       	cp	r10, r5
   18c84:	c8 f3       	brcs	.-14     	; 0x18c78 <vfprintf+0x37c>
   18c86:	aa 94       	dec	r10
   18c88:	f4 01       	movw	r30, r8
   18c8a:	ea 0d       	add	r30, r10
   18c8c:	f1 1d       	adc	r31, r1
   18c8e:	b7 01       	movw	r22, r14
   18c90:	80 81       	ld	r24, Z
   18c92:	90 e0       	ldi	r25, 0x00	; 0
   18c94:	44 d0       	rcall	.+136    	; 0x18d1e <fputc>
   18c96:	a1 10       	cpse	r10, r1
   18c98:	f6 cf       	rjmp	.-20     	; 0x18c86 <vfprintf+0x38a>
   18c9a:	05 c0       	rjmp	.+10     	; 0x18ca6 <vfprintf+0x3aa>
   18c9c:	b7 01       	movw	r22, r14
   18c9e:	80 e2       	ldi	r24, 0x20	; 32
   18ca0:	90 e0       	ldi	r25, 0x00	; 0
   18ca2:	3d d0       	rcall	.+122    	; 0x18d1e <fputc>
   18ca4:	3a 94       	dec	r3
   18ca6:	31 10       	cpse	r3, r1
   18ca8:	f9 cf       	rjmp	.-14     	; 0x18c9c <vfprintf+0x3a0>
   18caa:	50 ce       	rjmp	.-864    	; 0x1894c <vfprintf+0x50>
   18cac:	f7 01       	movw	r30, r14
   18cae:	26 81       	ldd	r18, Z+6	; 0x06
   18cb0:	37 81       	ldd	r19, Z+7	; 0x07
   18cb2:	02 c0       	rjmp	.+4      	; 0x18cb8 <vfprintf+0x3bc>
   18cb4:	2f ef       	ldi	r18, 0xFF	; 255
   18cb6:	3f ef       	ldi	r19, 0xFF	; 255
   18cb8:	c9 01       	movw	r24, r18
   18cba:	2c 96       	adiw	r28, 0x0c	; 12
   18cbc:	0f b6       	in	r0, 0x3f	; 63
   18cbe:	f8 94       	cli
   18cc0:	de bf       	out	0x3e, r29	; 62
   18cc2:	0f be       	out	0x3f, r0	; 63
   18cc4:	cd bf       	out	0x3d, r28	; 61
   18cc6:	df 91       	pop	r29
   18cc8:	cf 91       	pop	r28
   18cca:	1f 91       	pop	r17
   18ccc:	0f 91       	pop	r16
   18cce:	ff 90       	pop	r15
   18cd0:	ef 90       	pop	r14
   18cd2:	df 90       	pop	r13
   18cd4:	cf 90       	pop	r12
   18cd6:	bf 90       	pop	r11
   18cd8:	af 90       	pop	r10
   18cda:	9f 90       	pop	r9
   18cdc:	8f 90       	pop	r8
   18cde:	7f 90       	pop	r7
   18ce0:	6f 90       	pop	r6
   18ce2:	5f 90       	pop	r5
   18ce4:	4f 90       	pop	r4
   18ce6:	3f 90       	pop	r3
   18ce8:	2f 90       	pop	r2
   18cea:	08 95       	ret

00018cec <__ctype_isfalse>:
   18cec:	99 27       	eor	r25, r25
   18cee:	88 27       	eor	r24, r24

00018cf0 <__ctype_istrue>:
   18cf0:	08 95       	ret

00018cf2 <strnlen_P>:
   18cf2:	fc 01       	movw	r30, r24
   18cf4:	05 90       	lpm	r0, Z+
   18cf6:	61 50       	subi	r22, 0x01	; 1
   18cf8:	70 40       	sbci	r23, 0x00	; 0
   18cfa:	01 10       	cpse	r0, r1
   18cfc:	d8 f7       	brcc	.-10     	; 0x18cf4 <strnlen_P+0x2>
   18cfe:	80 95       	com	r24
   18d00:	90 95       	com	r25
   18d02:	8e 0f       	add	r24, r30
   18d04:	9f 1f       	adc	r25, r31
   18d06:	08 95       	ret

00018d08 <strnlen>:
   18d08:	fc 01       	movw	r30, r24
   18d0a:	61 50       	subi	r22, 0x01	; 1
   18d0c:	70 40       	sbci	r23, 0x00	; 0
   18d0e:	01 90       	ld	r0, Z+
   18d10:	01 10       	cpse	r0, r1
   18d12:	d8 f7       	brcc	.-10     	; 0x18d0a <strnlen+0x2>
   18d14:	80 95       	com	r24
   18d16:	90 95       	com	r25
   18d18:	8e 0f       	add	r24, r30
   18d1a:	9f 1f       	adc	r25, r31
   18d1c:	08 95       	ret

00018d1e <fputc>:
   18d1e:	0f 93       	push	r16
   18d20:	1f 93       	push	r17
   18d22:	cf 93       	push	r28
   18d24:	df 93       	push	r29
   18d26:	8c 01       	movw	r16, r24
   18d28:	eb 01       	movw	r28, r22
   18d2a:	8b 81       	ldd	r24, Y+3	; 0x03
   18d2c:	81 fd       	sbrc	r24, 1
   18d2e:	03 c0       	rjmp	.+6      	; 0x18d36 <fputc+0x18>
   18d30:	0f ef       	ldi	r16, 0xFF	; 255
   18d32:	1f ef       	ldi	r17, 0xFF	; 255
   18d34:	1a c0       	rjmp	.+52     	; 0x18d6a <fputc+0x4c>
   18d36:	82 ff       	sbrs	r24, 2
   18d38:	0d c0       	rjmp	.+26     	; 0x18d54 <fputc+0x36>
   18d3a:	2e 81       	ldd	r18, Y+6	; 0x06
   18d3c:	3f 81       	ldd	r19, Y+7	; 0x07
   18d3e:	8c 81       	ldd	r24, Y+4	; 0x04
   18d40:	9d 81       	ldd	r25, Y+5	; 0x05
   18d42:	28 17       	cp	r18, r24
   18d44:	39 07       	cpc	r19, r25
   18d46:	64 f4       	brge	.+24     	; 0x18d60 <fputc+0x42>
   18d48:	e8 81       	ld	r30, Y
   18d4a:	f9 81       	ldd	r31, Y+1	; 0x01
   18d4c:	01 93       	st	Z+, r16
   18d4e:	f9 83       	std	Y+1, r31	; 0x01
   18d50:	e8 83       	st	Y, r30
   18d52:	06 c0       	rjmp	.+12     	; 0x18d60 <fputc+0x42>
   18d54:	e8 85       	ldd	r30, Y+8	; 0x08
   18d56:	f9 85       	ldd	r31, Y+9	; 0x09
   18d58:	80 2f       	mov	r24, r16
   18d5a:	19 95       	eicall
   18d5c:	89 2b       	or	r24, r25
   18d5e:	41 f7       	brne	.-48     	; 0x18d30 <fputc+0x12>
   18d60:	8e 81       	ldd	r24, Y+6	; 0x06
   18d62:	9f 81       	ldd	r25, Y+7	; 0x07
   18d64:	01 96       	adiw	r24, 0x01	; 1
   18d66:	9f 83       	std	Y+7, r25	; 0x07
   18d68:	8e 83       	std	Y+6, r24	; 0x06
   18d6a:	c8 01       	movw	r24, r16
   18d6c:	df 91       	pop	r29
   18d6e:	cf 91       	pop	r28
   18d70:	1f 91       	pop	r17
   18d72:	0f 91       	pop	r16
   18d74:	08 95       	ret

00018d76 <__ultoa_invert>:
   18d76:	fa 01       	movw	r30, r20
   18d78:	aa 27       	eor	r26, r26
   18d7a:	28 30       	cpi	r18, 0x08	; 8
   18d7c:	51 f1       	breq	.+84     	; 0x18dd2 <__ultoa_invert+0x5c>
   18d7e:	20 31       	cpi	r18, 0x10	; 16
   18d80:	81 f1       	breq	.+96     	; 0x18de2 <__ultoa_invert+0x6c>
   18d82:	e8 94       	clt
   18d84:	6f 93       	push	r22
   18d86:	6e 7f       	andi	r22, 0xFE	; 254
   18d88:	6e 5f       	subi	r22, 0xFE	; 254
   18d8a:	7f 4f       	sbci	r23, 0xFF	; 255
   18d8c:	8f 4f       	sbci	r24, 0xFF	; 255
   18d8e:	9f 4f       	sbci	r25, 0xFF	; 255
   18d90:	af 4f       	sbci	r26, 0xFF	; 255
   18d92:	b1 e0       	ldi	r27, 0x01	; 1
   18d94:	3e d0       	rcall	.+124    	; 0x18e12 <__ultoa_invert+0x9c>
   18d96:	b4 e0       	ldi	r27, 0x04	; 4
   18d98:	3c d0       	rcall	.+120    	; 0x18e12 <__ultoa_invert+0x9c>
   18d9a:	67 0f       	add	r22, r23
   18d9c:	78 1f       	adc	r23, r24
   18d9e:	89 1f       	adc	r24, r25
   18da0:	9a 1f       	adc	r25, r26
   18da2:	a1 1d       	adc	r26, r1
   18da4:	68 0f       	add	r22, r24
   18da6:	79 1f       	adc	r23, r25
   18da8:	8a 1f       	adc	r24, r26
   18daa:	91 1d       	adc	r25, r1
   18dac:	a1 1d       	adc	r26, r1
   18dae:	6a 0f       	add	r22, r26
   18db0:	71 1d       	adc	r23, r1
   18db2:	81 1d       	adc	r24, r1
   18db4:	91 1d       	adc	r25, r1
   18db6:	a1 1d       	adc	r26, r1
   18db8:	20 d0       	rcall	.+64     	; 0x18dfa <__ultoa_invert+0x84>
   18dba:	09 f4       	brne	.+2      	; 0x18dbe <__ultoa_invert+0x48>
   18dbc:	68 94       	set
   18dbe:	3f 91       	pop	r19
   18dc0:	2a e0       	ldi	r18, 0x0A	; 10
   18dc2:	26 9f       	mul	r18, r22
   18dc4:	11 24       	eor	r1, r1
   18dc6:	30 19       	sub	r19, r0
   18dc8:	30 5d       	subi	r19, 0xD0	; 208
   18dca:	31 93       	st	Z+, r19
   18dcc:	de f6       	brtc	.-74     	; 0x18d84 <__ultoa_invert+0xe>
   18dce:	cf 01       	movw	r24, r30
   18dd0:	08 95       	ret
   18dd2:	46 2f       	mov	r20, r22
   18dd4:	47 70       	andi	r20, 0x07	; 7
   18dd6:	40 5d       	subi	r20, 0xD0	; 208
   18dd8:	41 93       	st	Z+, r20
   18dda:	b3 e0       	ldi	r27, 0x03	; 3
   18ddc:	0f d0       	rcall	.+30     	; 0x18dfc <__ultoa_invert+0x86>
   18dde:	c9 f7       	brne	.-14     	; 0x18dd2 <__ultoa_invert+0x5c>
   18de0:	f6 cf       	rjmp	.-20     	; 0x18dce <__ultoa_invert+0x58>
   18de2:	46 2f       	mov	r20, r22
   18de4:	4f 70       	andi	r20, 0x0F	; 15
   18de6:	40 5d       	subi	r20, 0xD0	; 208
   18de8:	4a 33       	cpi	r20, 0x3A	; 58
   18dea:	18 f0       	brcs	.+6      	; 0x18df2 <__ultoa_invert+0x7c>
   18dec:	49 5d       	subi	r20, 0xD9	; 217
   18dee:	31 fd       	sbrc	r19, 1
   18df0:	40 52       	subi	r20, 0x20	; 32
   18df2:	41 93       	st	Z+, r20
   18df4:	02 d0       	rcall	.+4      	; 0x18dfa <__ultoa_invert+0x84>
   18df6:	a9 f7       	brne	.-22     	; 0x18de2 <__ultoa_invert+0x6c>
   18df8:	ea cf       	rjmp	.-44     	; 0x18dce <__ultoa_invert+0x58>
   18dfa:	b4 e0       	ldi	r27, 0x04	; 4
   18dfc:	a6 95       	lsr	r26
   18dfe:	97 95       	ror	r25
   18e00:	87 95       	ror	r24
   18e02:	77 95       	ror	r23
   18e04:	67 95       	ror	r22
   18e06:	ba 95       	dec	r27
   18e08:	c9 f7       	brne	.-14     	; 0x18dfc <__ultoa_invert+0x86>
   18e0a:	00 97       	sbiw	r24, 0x00	; 0
   18e0c:	61 05       	cpc	r22, r1
   18e0e:	71 05       	cpc	r23, r1
   18e10:	08 95       	ret
   18e12:	9b 01       	movw	r18, r22
   18e14:	ac 01       	movw	r20, r24
   18e16:	0a 2e       	mov	r0, r26
   18e18:	06 94       	lsr	r0
   18e1a:	57 95       	ror	r21
   18e1c:	47 95       	ror	r20
   18e1e:	37 95       	ror	r19
   18e20:	27 95       	ror	r18
   18e22:	ba 95       	dec	r27
   18e24:	c9 f7       	brne	.-14     	; 0x18e18 <__ultoa_invert+0xa2>
   18e26:	62 0f       	add	r22, r18
   18e28:	73 1f       	adc	r23, r19
   18e2a:	84 1f       	adc	r24, r20
   18e2c:	95 1f       	adc	r25, r21
   18e2e:	a0 1d       	adc	r26, r0
   18e30:	08 95       	ret

00018e32 <__do_global_dtors>:
   18e32:	17 e1       	ldi	r17, 0x17	; 23
   18e34:	c6 ef       	ldi	r28, 0xF6	; 246
   18e36:	d7 e1       	ldi	r29, 0x17	; 23
   18e38:	00 e0       	ldi	r16, 0x00	; 0
   18e3a:	05 c0       	rjmp	.+10     	; 0x18e46 <__do_global_dtors+0x14>
   18e3c:	22 97       	sbiw	r28, 0x02	; 2
   18e3e:	01 09       	sbc	r16, r1
   18e40:	fe 01       	movw	r30, r28
   18e42:	0b bf       	out	0x3b, r16	; 59
   18e44:	e5 d9       	rcall	.-3126   	; 0x18210 <__tablejump_elpm__>
   18e46:	c8 3f       	cpi	r28, 0xF8	; 248
   18e48:	d1 07       	cpc	r29, r17
   18e4a:	80 e0       	ldi	r24, 0x00	; 0
   18e4c:	08 07       	cpc	r16, r24
   18e4e:	b1 f7       	brne	.-20     	; 0x18e3c <__do_global_dtors+0xa>
   18e50:	f8 94       	cli

00018e52 <__stop_program>:
   18e52:	ff cf       	rjmp	.-2      	; 0x18e52 <__stop_program>
